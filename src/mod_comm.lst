
 Fujitsu Fortran Version 1.2.0  Mon Dec 21 16:50:02 2015

 Compilation information
   Current directory : /volume1/home/ra000007/a03106/nicam-dc-mini/src
   Source file       : share/mod_comm.f90

 Option information
   Command line options : -Kident_mpi -f2004 -Kfast,parallel,auto,ocl,preex,array_private,noalias=s,mfunc=2 -Kparallel_iteration=8,instance=8,dynamic_iteration -Qi -Qt -X03 -Ncompdisp -Koptmsg=1 -Cpp -Kprefetch_cache_level=all,prefetch_iteration_L2=50 -Ksimd -Ntl_notrt -U_FIPP_ -U_FAPP_ -I../src/include -o mod_comm.o -c -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -W0,-zmpa=Yignore-intent -I/opt/FJSVtclang/GM-1.2.0-19/lib64
   Cpp options          : -U_FIPP_ -U_FAPP_ -I../src/include -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -I/opt/FJSVtclang/GM-1.2.0-19/lib64 -D__FUJITSU -Dunix -Dsparc -D__sparc__ -D__unix -D__sparc -D__frt_version=700 -D__HPC_ACE__ -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -Dlinux -otmp -D__sparcv9 -D__sparc_v9__ -D__arch64__
   Effective options    : -fi -g0 -AE -Free -O3 -Qi,p,t -X03
                          -x0
                          -KFLTLD -Kadr44 -Knoalias=s -Kauto -Knoautoobjstack
                          -Knocalleralloc -Kdalign -Keval -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kilfunc
                          -Klargepage -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_if -Kloop_fusion
                          -Kloop_interchange -Kloop_nopart_parallel
                          -Kloop_nopart_simd -Kloop_noversioning -Kns
                          -Kmfunc=2 -Kocl -Komitfp -Koptmsg=1 -Kpreex
                          -Kprefetch_conditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_iteration_L2=50 -Kprefetch_nostrong
                          -Kprefetch_strong_L2 -Knoshortloop -Ksimd=1
                          -Knosimd_region_constant -Knostriping -Kswp
                          -Knotemparraystack -Kunroll -Knouxsimd -KNOXFILL
                          -Knoopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_noordered_reduction -Knothreadsafe
                          -Kparallel -Kparallel_nofp_precision
                          -Karray_private -Kdynamic_iteration -Kreduction
                          -Kregion_extension -Kinstance=8
                          -Kparallel_iteration=8
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Ncompdisp
                          -Nnocopyarg -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nline -Nlst -Nlst=i -Nlst=p -Nlst=t
                          -Nnomallocfree -Nnoobsfun -Nquickdbg=noargchk
                          -Nquickdbg=nosubchk -Nquickdbg=noundef -NRnotrap
                          -Nnorecursive -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 Module "mod_comm"
  (inc)(line-no.)(nest)(optimize)
               1                     !-------------------------------------------------------------------------------
               2                     !
               3                     !+  communication module
               4                     !
               5                     !-------------------------------------------------------------------------------
               6                     module mod_comm
               7                       !-----------------------------------------------------------------------------
               8                       !
               9                       !++ description:
              10                       !       this module is for the communication based on mpi library.
              11                       !
              12                       !++ Current Corresponding Author : K.Goto, H.Tomita
              13                       !
              14                       !++ History:
              15                       !      Version    Date      Comment
              16                       !      -----------------------------------------------------------------------
              17                       !      0.00       04-02-17  Imported from igdc-4.33
              18                       !                 06-09-??  K.Goto bug fix
              19                       !                 06-10-08  S.Iga  add namelist (&COMMPARAM  max_varmax)
              20                       !                 07-11-07  T.Mitsui add varmax check option(opt_check_varmax)
              21                       !                 09-03-10  H.Tomita : Transplanting COMM_data_transfer2 from
              22                       !                                      mod[mod_varcomm].
              23                       !                 09-03-10  H.Tomita : rename COMM_data_transfer2 to COMM_var.
              24                       !                 09-09-17  S.Iga : Add debug option and barrier option
              25                       !                 10-06-07  S.Iga: new grid is implemented
              26                       !                              (only the attribute of max_comm_xxx and
              27                       !                              max_comm is changed from parameter to variable)
              28                       !                 11-01-24  C.Kodama: Reduce memory usage in large rlevel.
              29                       !                              (provided by Terai-san @ RIKEN)
              30                       !                              Modified line: (20101207 teraim)
              31                       !                 11-04-26  C.Kodama: default value of opt_check_varmax is changed to .true.
              32                       !                                     and modify its behavior to abort when cmax exceeds max_maxvar*ADM_kall.
              33                       !                 11-05-06  Y.Yamada: Merge tuning code with original code
              34                       !                              (provided by Yamamoto-san @ NEC)
              35                       !                              Modified line: !=org=
              36                       !                 11-07-21  T.Ohno: A public variable 'comm_pl' is added.
              37                       !                           If 'comm_pl' is false, pole data is not used in
              38                       !                           COMM_data_transfer and COMM_var.
              39                       !                 11-11-30  S.Iga (commit) : Modification around comm_var,
              40                       !                              suggested and modified by T.Inoue on 11-10-24
              41                       !                 11-12-14  T.Seiki : allocatable variables are not permitted in type structure.
              42                       !                              allocatable => pointer  (only @ SR16000 and ES)
              43                       !                 12-03-26  T.Seiki : bug-fix if opt_comm_dbg=.true.
              44                       !                 12-06-27  T.Ohno : bug fix for simulations at which
              45                       !                           'comm_pl' is false
              46                       !      -----------------------------------------------------------------------
              47                       !
              48                       !-----------------------------------------------------------------------------
              49                       !
              50                       !++ used modules
              51                       !
              52                       use mpi
              53                       use mod_debug
              54                       use mod_adm, only: &
              55                          ADM_LOG_FID, &
              56                          ADM_vlink_nmax
              57                       !-----------------------------------------------------------------------------
              58                       implicit none
              59                       private
              60                       !-----------------------------------------------------------------------------
              61                       !
              62                       !++ public procedure
              63                       !
              64                       public :: COMM_setup
              65                       public :: COMM_data_transfer
              66                       public :: COMM_data_transfer_rgn2pl
              67                       public :: COMM_data_transfer_nopl ! T.Ohno 110721
              68                       public :: COMM_var
              69                       public :: COMM_Stat_sum
              70                       public :: COMM_Stat_sum_eachlayer
              71                       public :: COMM_Stat_avg
              72                       public :: COMM_Stat_max
              73                       public :: COMM_Stat_min
              74                       !
              75                       !-----------------------------------------------------------------------------
              76                     
              77                     
              78                       !
              79                       !++ private parameters & variables
              80                       !
              81                       integer,parameter,private::max_comm_r2r=9
              82                     !  integer,parameter,private::max_comm_r2p=ADM_vlink_nmax*2  !S.Iga100607 del
              83                     !  integer,parameter,private::max_comm_p2r=ADM_vlink_nmax*2  !S.Iga100607 del
              84                     !  integer,parameter,private::max_comm=max_comm_r2r+max_comm_r2p+max_comm_p2r !S.Iga100607 del
              85                       integer,private,save::max_comm_r2p!S.Iga100607
              86                       integer,private,save::max_comm_p2r!S.Iga100607
              87                       integer,private,save::max_comm!S.Iga100607
              88                     !  integer,parameter,private::max_varmax=32
              89                       integer,save,private::max_varmax=32 ! Iga(061008)
              90                       logical,save,private::opt_check_varmax = .true. ! T.Mitsui 07/11/07  ! [mod] C.Kodama .false. -> .true.
              91                       real(8),save,private::diag_varmax=0.d0           ! T.Mitsui 07/11/07
              92                       !
              93                       logical,save,private::opt_comm_dbg = .false.     ! S.Iga 09/09/XX
              94                       real(8),save,private::dbg_sendbuf_init           ! S.Iga 09/09/XX
              95                       real(8),save,private::dbg_recvbuf_init           ! S.Iga 09/09/XX
              96                       logical,save,private::opt_comm_barrier = .false. ! S.Iga 09/09/XX
              97                       integer,save,private,allocatable::dbg_areq_save(:,:) ! S.Iga 09/09/XX
              98                       integer,save,private::dbg_tcount = 1 ! count comm_data_transfer is called  S.Iga 09/09/XX
              99                       !
             100                       !
             101                       integer,parameter,private::ptr_prcid=1
             102                       integer,parameter,private::ptr_lrgnid=2
             103                       !
             104                       integer,parameter,private::elemsize_comm=3
             105                       integer,parameter,private::SIZE_COMM=1
             106                       integer,parameter,private::LRGNID_COMM=2
             107                       integer,parameter,private::BASE_COMM=3
             108                       !
             109                       integer,parameter,private::elemsize_copy=3
             110                       integer,parameter,private::SIZE_COPY=1
             111                       integer,parameter,private::LRGNID_COPY=2
             112                       integer,parameter,private::SRC_LRGNID_COPY=3
             113                       !
             114                       !--------------------------------------------------
             115                       integer,private,save::rank_me
             116                       integer,private,save::max_comm_prc
             117                     !  integer,private,save::maxdatasize
             118                       integer,private,save::maxdatasize_s
             119                       integer,private,save::maxdatasize_r
             120                       !
             121                       integer,private,save::maxn
             122                       integer,save,private::maxm
             123                       integer,save,private::maxl
             124                       !----
             125                       integer,private,save::maxn_pl
             126                       integer,save,private::maxm_pl
             127                       integer,save,private::maxl_pl
             128                       !----
             129                       integer,private,save::maxn_r2r
             130                       integer,save,private::maxm_r2r
             131                       integer,save,private::maxl_r2r
             132                       !----
             133                       integer,private,save::maxn_r2p
             134                       integer,save,private::maxm_r2p
             135                       integer,save,private::maxl_r2p
             136                       !----
             137                       integer,private,save::maxn_p2r
             138                       integer,save,private::maxm_p2r
             139                       integer,save,private::maxl_p2r
             140                       !----
             141                       integer,private,save::maxn_sgp
             142                       integer,save,private::maxm_sgp
             143                       integer,save,private::maxl_sgp
             144                       !
             145                       integer,allocatable,private,save::prc_tab_rev(:,:)
             146                       !
             147                       integer,allocatable,private,save::clist(:)
             148                       !
             149                       !--------------------------------------------------
             150                       !  for send
             151                       !--------------------------------------------------
             152                       integer,allocatable,private,save::nsmax(:,:)
             153                       integer,allocatable,public,save::sendinfo(:,:,:,:)
             154                       integer,allocatable,public,save::sendlist(:,:,:,:)
             155                       integer,allocatable,private,save::nsmax_pl(:,:)
             156                       integer,allocatable,private,save::sendinfo_pl(:,:,:,:)
             157                       integer,allocatable,private,save::sendlist_pl(:,:,:,:)
             158                       !
             159                       !--------------------------------------------------
             160                       !  for copy
             161                       !--------------------------------------------------
             162                       integer,allocatable,private,save::ncmax_r2r(:)
             163                       integer,allocatable,private,save::copyinfo_r2r(:,:,:)
             164                       integer,allocatable,private,save::recvlist_r2r(:,:,:)
             165                       integer,allocatable,private,save::sendlist_r2r(:,:,:)
             166                       !--------------------------------------------------
             167                       integer,allocatable,private,save::ncmax_r2p(:)
             168                       integer,allocatable,private,save::copyinfo_r2p(:,:,:)
             169                       integer,allocatable,private,save::recvlist_r2p(:,:,:)
             170                       integer,allocatable,private,save::sendlist_r2p(:,:,:)
             171                       !--------------------------------------------------
             172                       integer,allocatable,private,save::ncmax_p2r(:)
             173                       integer,allocatable,private,save::copyinfo_p2r(:,:,:)
             174                       integer,allocatable,private,save::recvlist_p2r(:,:,:)
             175                       integer,allocatable,private,save::sendlist_p2r(:,:,:)
             176                       !--------------------------------------------------
             177                       integer,allocatable,private,save::ncmax_sgp(:)
             178                       integer,allocatable,private,save::copyinfo_sgp(:,:,:)
             179                       integer,allocatable,private,save::recvlist_sgp(:,:,:)
             180                       integer,allocatable,private,save::sendlist_sgp(:,:,:)
             181                       !--------------------------------------------------
             182                       !
             183                       !--------------------------------------------------
             184                       !  for recv
             185                       !--------------------------------------------------
             186                       integer,allocatable,private,save::nrmax(:,:)
             187                       integer,allocatable,public,save::recvinfo(:,:,:,:)
             188                       integer,allocatable,public,save::recvlist(:,:,:,:)
             189                       integer,allocatable,private,save::lrmax_pl(:)
             190                       integer,allocatable,private,save::nrmax_pl(:,:)
             191                       integer,allocatable,private,save::recvinfo_pl(:,:,:,:)
             192                       integer,allocatable,private,save::recvlist_pl(:,:,:,:)
             193                       !--------------------------------------------------
             194                       !
             195                       integer,allocatable,private::temp_sendorder(:,:)
             196                       integer,allocatable,private::temp_recvorder(:,:)
             197                       integer,allocatable,private::temp_dest_rgn(:,:,:)
             198                       integer,allocatable,private::temp_src_rgn(:,:,:)
             199                       integer,allocatable,private::temp_dest_rgn_pl(:,:,:)
             200                       integer,allocatable,private::temp_src_rgn_pl(:,:,:)
             201                       !integer,allocatable,private::temp_sb(:,:,:) !(20101207)removed by teraim
             202                       integer,allocatable,private::tsb(:)
             203                       !
             204                       integer,allocatable,private,save::ssize(:,:)
             205                       integer,allocatable,private,save::sendtag(:,:)
             206                       integer,allocatable,private,save::somax(:)
             207                       integer,allocatable,private,save::destrank(:,:)
             208                       real(8),allocatable,public,save::sendbuf(:,:)
             209                       integer,allocatable,private,save::rsize(:,:)
             210                       integer,allocatable,private,save::recvtag(:,:)
             211                       integer,allocatable,private,save::romax(:)
             212                       integer,allocatable,private,save::sourcerank(:,:)
             213                       real(8),allocatable,public,save::recvbuf(:,:)
             214                       !
             215                       integer,allocatable,private,save::n_nspl(:,:)
             216                       !
             217                       integer,allocatable,private,save::n_hemisphere_copy(:,:,:)
             218                       integer,allocatable,private,save::s_hemisphere_copy(:,:,:)
             219                       !
             220                       !--------------------------------------------------
             221                       integer,allocatable,private,save::rsize_r2r(:,:,:)
             222                       integer,allocatable,private,save::ssize_r2r(:,:,:)
             223                       integer,allocatable,private,save::sourceid_r2r(:,:,:)
             224                       integer,allocatable,private,save::destid_r2r(:,:,:)
             225                       !integer,allocatable,private,save::mrecv_r2r(:,:,:) !(20101207)removed by teraim
             226                       integer,allocatable,private,save::msend_r2r(:,:,:)
             227                       integer,allocatable,private,save::maxcommrecv_r2r(:,:)
             228                       integer,allocatable,private,save::maxcommsend_r2r(:,:)
             229                       !integer,allocatable,private,save::recvtag_r2r(:,:,:) !(20101207)removed by teraim
             230                       !integer,allocatable,private,save::sendtag_r2r(:,:,:) !(20101207)removed by teraim
             231                       integer,allocatable,private,save::rlist_r2r(:,:,:,:)
             232                       integer,allocatable,private,save::qlist_r2r(:,:,:,:)
             233                       integer,allocatable,private,save::slist_r2r(:,:,:,:)
             234                       integer,private,save::max_datasize_r2r
             235                       real(8),allocatable,private::recvbuf_r2r(:,:,:)
             236                       real(8),allocatable,private::sendbuf_r2r(:,:,:)
             237                       !
             238                       integer,allocatable,private,save::rsize_r2p(:,:,:)
             239                       integer,allocatable,private,save::ssize_r2p(:,:,:)
             240                       integer,allocatable,private,save::source_prc_r2p(:,:,:)
             241                       integer,allocatable,private,save::source_rgn_r2p(:,:,:)
             242                       integer,allocatable,private,save::dest_prc_r2p(:,:,:)
             243                       integer,allocatable,private,save::maxcommrecv_r2p(:,:)
             244                       integer,allocatable,private,save::maxcommsend_r2p(:,:)
             245                       integer,allocatable,private,save::recvtag_r2p(:,:,:)
             246                       integer,allocatable,private,save::sendtag_r2p(:,:,:)
             247                       integer,allocatable,private,save::rlist_r2p(:,:,:,:)
             248                       integer,allocatable,private,save::qlist_r2p(:,:,:,:)
             249                       integer,allocatable,private,save::slist_r2p(:,:,:,:)
             250                       integer,save,private :: max_datasize_r2p
             251                       real(8),allocatable,private::recvbuf_r2p(:,:,:)
             252                       real(8),allocatable,private::sendbuf_r2p(:,:,:)
             253                       !
             254                       integer,allocatable,private,save::recvtag_p2r(:,:)
             255                       integer,allocatable,private,save::sendtag_p2r(:,:)
             256                       real(8),allocatable,private::sendbuf_p2r(:,:)
             257                       real(8),allocatable,private::recvbuf_p2r(:,:)
             258                       !----------------------------------------------
             259                       integer,allocatable,private,save::dest_rank_all(:,:,:)
             260                       integer,allocatable,private,save::src_rank_all(:,:,:)
             261                       !----------------------------------------------
             262                     
             263                     !!  real(8),allocatable,public::  comm_dbg_recvbuf(:,:,:) !iga
             264                     !!  real(8),allocatable,public::  comm_dbg_sendbuf(:,:,:)  !iga
             265                     
             266                     
             267                     
             268                       !
             269                       integer,allocatable,private,save::imin(:),imax(:) &
             270                            ,jmin(:),jmax(:) &
             271                            ,gmin(:),gmax(:) &
             272                            ,gall(:)
             273                       !
             274                       integer,allocatable,private,save::nmin_nspl(:),nmax_nspl(:) &
             275                            ,pmin_nspl(:),pmax_nspl(:) &
             276                            ,lmin_nspl(:),lmax_nspl(:) &
             277                            ,gmin_nspl(:),gmax_nspl(:) &
             278                            ,gall_nspl(:)
             279                       integer,allocatable,private,save::pl_index(:,:,:,:)
             280                       !
             281                       !----------------------------------------------------------------
             282                       !++ public variablesizc
             283                       !  integer,allocatable,public,save::izc(:,:,:)
             284                       !  integer,allocatable,public,save::itc(:,:,:,:)
             285                       !  integer,allocatable,public,save::itc2(:,:,:,:)
             286                       !  integer,allocatable,public,save::ntr(:,:,:,:,:)
             287                       !  integer,parameter,public::order=2
             288                       !  integer,parameter,public::noupfi=(order+1)*(order+2)/2
             289                       !----------------------------------------------------------------
             290                       !
             291                       integer,private,save::halomax
             292                       integer,private,save::kmax
             293                     
             294                       integer,private,save :: comm_call_count = 0
             295                       real(8),private,save::time_total= 0.D0
             296                       real(8),private,save::time_pre = 0.D0
             297                       real(8),private,save::time_bar1= 0.D0
             298                       real(8),private,save::time_bar2= 0.D0
             299                       real(8),private,save::time_sbuf= 0.D0
             300                       real(8),private,save::time_recv= 0.D0
             301                       real(8),private,save::time_send= 0.D0
             302                       real(8),private,save::time_copy= 0.D0
             303                       real(8),private,save::time_wait= 0.D0
             304                       real(8),private,save::time_rbuf= 0.D0
             305                       real(8),private,save::time_copy_sgp= 0.D0
             306                       real(8),private,save::size_total= 0.D0
             307                       real(8),private,save::comm_count= 0.D0
             308                       real(8),private::t(0:12)
             309                       !
             310                       !(20101207)added by teraim
             311                       type type_tempsb
             312                         integer::num
             313                         ! 2011/12/14 [Mod] T.Seiki
             314                     !!$ integer,allocatable::col(:)
             315                     !!$ integer,allocatable::val(:)
             316                         integer,pointer :: col(:)
             317                         integer,pointer :: val(:)
             318                       end type
             319                       type(type_tempsb),allocatable::tempsb(:)
             320                       integer,parameter::max_size=10 ! This is not optimal value.
             321                       !
             322                       logical, public, save :: comm_pl = .true. ! T.Ohno 110721
             323                       !-----------------------------------------------------------------------------
             324                     contains
             325                       !-----------------------------------------------------------------------------
             326                       !(20101207) added by teraim
             327                       subroutine init_tempsb
             328                         use mod_adm, only : ADM_rgn_nmax
             329                         implicit none
             330                         integer::i
             331                         !
             332                         allocate(tempsb(ADM_rgn_nmax+2))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2000
                                   <<< Loop-information  End >>>
             333        pp    s          tempsb(:)%num=0
             334                         !
             335     1                   do i=1, ADM_rgn_nmax+2
             336     1                     allocate(tempsb(i)%col(max_size))
             337     1                     allocate(tempsb(i)%val(max_size))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1778
                                   <<< Loop-information  End >>>
             338     1  pp    s            tempsb(i)%col(:)=-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1778
                                   <<< Loop-information  End >>>
             339     1  pp    s            tempsb(i)%val(:)=-1
             340     1                   enddo
             341                       end subroutine
             342                       !(20101207) added by teraim
             343                       subroutine finalize_tempsb
             344                         use mod_adm, only : ADM_rgn_nmax
             345                         implicit none
             346                         integer::i
             347                         !
             348     1                   do i=1, ADM_rgn_nmax+2
             349     1                     deallocate(tempsb(i)%col)
             350     1                     deallocate(tempsb(i)%val)
             351     1                   enddo
             352                         deallocate(tempsb)
             353                       end subroutine
             354                       !(20101207) added by teraim
             355                       subroutine add_tempsb(icol, irow, ival)
             356                         implicit none
             357                         integer,intent(in)::icol,irow,ival
             358                         !
             359     1                   if(ival > 0) then
             360     2                     if(tempsb(irow)%num < max_size) then
             361     2                       tempsb(irow)%num = tempsb(irow)%num + 1
             362     2                       tempsb(irow)%col(tempsb(irow)%num)=icol
             363     2                       tempsb(irow)%val(tempsb(irow)%num)=ival
             364     2                     else
             365     2                       write(*,*)"range of list is over."
             366     2                       stop
             367     2                     endif
             368     1                   endif
             369                       end subroutine
             370                       !(20101207) added by teraim
             371                       subroutine show_tempsb
             372                         use mod_adm, only : ADM_rgn_nmax
             373                         implicit none
             374                         integer::i,j
             375                         !
             376                         write(*,*)"show"
             377     1                   do i=1, ADM_rgn_nmax+2
             378     2   s    s            do j=1, max_size
             379     3   p    s              if(tempsb(i)%val(j) > 0) then
             380     3   m    s                write(*,*)"(i,j)=",i,j," : show_list=(",i,tempsb(i)%col(j),tempsb(i)%val(j),")"
             381     3   p    s              endif
             382     2   p    s            enddo
             383     1                   enddo
             384                       end subroutine
             385                       !(20101207) added by teraim
             386                       subroutine get_tempsb(icol, irow, ret)
             387                         implicit none
             388                         integer,intent(in)::icol,irow
             389                         integer,intent(out)::ret
             390                         integer::i
             391                         !
             392                         ret = 0
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    FULL UNROLLING
                                   <<< Loop-information  End >>>
             393     1       f           do i=1, max_size
             394     2       f             if(tempsb(irow)%col(i) == icol) then
             395     2       f               ret = tempsb(irow)%val(i)
             396     2       f               exit
             397     2       f             endif
             398     1       f           enddo
             399                       end subroutine
             400                       !-----------------------------------------------------------------------------
             401                       subroutine COMM_setup( &
             402                            max_hallo_num,    & !--- IN : number of hallo regions
             403                            debug             ) !--- IN : debug flag
             404                         use mod_adm, only :    &
             405                              !--- public parameters
             406                              ADM_w,          &
             407                              ADM_e,          &
             408                              ADM_n,          &
             409                              ADM_s,          &
             410                              ADM_sw,         &
             411                              ADM_nw,         &
             412                              ADM_ne,         &
             413                              ADM_se,         &
             414                              ADM_rid,        &
             415                              ADM_dir,        &
             416                              ADM_vlink_nmax, &
             417                              ADM_rgn_nmax_pl,&
             418                              ADM_npl,        &
             419                              ADM_spl,        &
             420                              ADM_gslf_pl,    &
             421                              ADM_prc_all,    &
             422                              ADM_prc_rnum,   &
             423                              ADM_prc_tab,    &
             424                              ADM_prc_me,     &
             425                              ADM_rgn_nmax,   &
             426                              ADM_rgn_etab,   &
             427                              ADM_rgn_vnum,   &
             428                              ADM_rgn_vtab,   &
             429                              ADM_rgn_vtab_pl,&
             430                              ADM_gmin,       &
             431                              ADM_gmax,       &
             432                              ADM_gall_1d,    &
             433                              ADM_lall,       &
             434                              ADM_kall,       &
             435                              ADM_prc_nspl,   &
             436                              ADM_comm_run_world,&
             437                              ADM_rgn2prc,& !(20101207)added by teraim
             438                              !--- For namelist.
             439                              ADM_CTL_FID,    &  !Iga(061008)
             440                              ADM_LOG_FID        !Iga(061008)
             441                         implicit none
             442                     
             443                         integer,intent(in),optional :: max_hallo_num
             444                         logical,intent(in),optional :: debug
             445                     
             446                         integer :: i,j,l,n,m,p,q
             447                         integer :: rgnid
             448                         integer :: ierr
             449                         !
             450                         !integer :: nn,t,n1,n2,n3,n4,n5,n6
             451                         !
             452                         integer::lr,mr
             453                         integer::ls,ms
             454                         integer::nr,nc,ns
             455                         integer::rs,cs,ss
             456                         integer::nd,ld,pl,halo
             457                         integer::in,jn
             458                         integer::srgnid,rrgnid
             459                         integer::ck
             460                         integer::srank,drank
             461                         integer::ro,so
             462                         !
             463                         integer::suf,g_1d
             464                         suf(i,j,g_1d)=(g_1d)*((j)-1)+(i)
             465                         !
             466                         integer::rgnid1,rgnid2,ret !(20101207) added by teraim
             467                         !
             468                         ! Iga(061008) ==>
             469                         namelist / COMMPARAM /   &
             470                              max_varmax,         & ! max number of communication variables
             471                              opt_check_varmax,   & ! check option of varmax [Add] T.Mitsui 07/11/07
             472                              opt_comm_dbg,       & ! debug option of comm_data_transfer [Add] S.Iga 0909XX
             473                              opt_comm_barrier      ! debug option of comm_data_transfer [Add] S.Iga 0909XX
             474                         !
             475                         max_comm_r2p=ADM_vlink_nmax*2!S.Iga100607
             476                         max_comm_p2r=ADM_vlink_nmax*2!S.Iga100607
             477                         max_comm=max_comm_r2r+max_comm_r2p+max_comm_p2r!S.Iga100607
             478                         !--- < reading parameters > ---
             479                         !
             480                         rewind(ADM_CTL_FID)
             481                         read(ADM_CTL_FID,nml=COMMPARAM,iostat=ierr)
             482     1                   if(ierr<0) then
             483     1                      write(ADM_LOG_FID,*) &
             484     1                           'Msg : Sub[COMM_setup]/Mod[comm]'
             485     1                      write(ADM_LOG_FID,*) &
             486     1                           ' *** No namelist in paramter file.'
             487     1                      write(ADM_LOG_FID,*) &
             488     1                           ' *** Use default values.'
             489     1                   else if(ierr>0) then
             490     1                      write(*,*) &
             491     1                           'Msg : Sub[COMM_setup]/Mod[comm]'
             492     1                      write(*,*) &
             493     1                           ' *** WARNING : Not appropriate names in namelist!! CHECK!!'
             494     1                   end if
             495                         write(ADM_LOG_FID,COMMPARAM)
             496                         ! <== Iga(061008)
             497                     
             498     1                   if (present(max_hallo_num)) then
             499     1                      halomax=max_hallo_num
             500     1                   else
             501     1                      halomax=1
             502     1                   endif
             503                         !    if (present(max_k_num)) then
             504                         !      kmax=max_k_num
             505                         !    else
             506                         !      kmax=ADM_kall
             507                         !    endif
             508                         kmax=ADM_kall
             509                         !
             510                         allocate(prc_tab_rev(ptr_prcid:ptr_lrgnid,ADM_rgn_nmax))
             511                         !
             512     1                   do p=1,ADM_prc_all
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             513     2   s   8s             do n=1,ADM_prc_rnum(p)
             514     2   m   8s                prc_tab_rev(ptr_prcid,ADM_prc_tab(n,p))=p
             515     2   s   8s                prc_tab_rev(ptr_lrgnid,ADM_prc_tab(n,p))=n
             516     2   p   8s             end do
             517     1                   end do
             518                     
             519                     !    if (ADM_prc_me.eq.1)   write(*,*) 'ADM_prc_tab',ADM_prc_tab
             520                     !    if (ADM_prc_me.eq.1)   write(*,*) 'prc_tab_rev', prc_tab_rev
             521                     
             522                         if(ADM_prc_nspl(ADM_npl) < 0 .and. ADM_prc_nspl(ADM_spl) <0 ) comm_pl = .false. ! T.Ohno 110721
             523                     
             524                         !
             525                         allocate(imin(halomax))
             526                         allocate(imax(halomax))
             527                         allocate(jmin(halomax))
             528                         allocate(jmax(halomax))
             529                         allocate(gmin(halomax))
             530                         allocate(gmax(halomax))
             531                         allocate(gall(halomax))
             532                         !
             533                         !(20101207) changed by teraim
             534                         allocate(rsize_r2r(max_comm_r2r,halomax,ADM_rgn_nmax))
             535                         allocate(ssize_r2r(max_comm_r2r,halomax,ADM_rgn_nmax))
             536                         allocate(sourceid_r2r(max_comm_r2r,halomax,ADM_rgn_nmax))
             537                         allocate(destid_r2r(max_comm_r2r,halomax,ADM_rgn_nmax))
             538                         !allocate(mrecv_r2r(ADM_rgn_nmax,halomax,ADM_rgn_nmax))
             539                         !allocate(msend_r2r(ADM_rgn_nmax,halomax,ADM_rgn_nmax))
             540                         rgnid1=ADM_prc_tab(1,ADM_prc_me)
             541                         rgnid2=ADM_prc_tab(ADM_prc_rnum(ADM_prc_me),ADM_prc_me)
             542                         allocate(msend_r2r(ADM_rgn_nmax,halomax,rgnid1:rgnid2))
             543                         allocate(maxcommrecv_r2r(halomax,ADM_rgn_nmax))
             544                         allocate(maxcommsend_r2r(halomax,ADM_rgn_nmax))
             545                         !allocate(recvtag_r2r(ADM_rgn_nmax,halomax,ADM_rgn_nmax))
             546                         !allocate(sendtag_r2r(ADM_rgn_nmax,halomax,ADM_rgn_nmax))
             547                         !
             548                         imin(halomax)=(ADM_gmin-1)+halomax
             549                         imax(halomax)=(ADM_gmax-1)+halomax
             550                         jmin(halomax)=(ADM_gmin-1)+halomax
             551                         jmax(halomax)=(ADM_gmax-1)+halomax
             552                         gmin(halomax)=(ADM_gmin-1)+halomax
             553                         gmax(halomax)=(ADM_gmax-1)+halomax
             554                         gall(halomax)=(ADM_gall_1d-2)+2*halomax
             555                         !
             556                         max_datasize_r2r=(gmax(halomax)-gmin(halomax)+1)*halomax
             557                         allocate(rlist_r2r(max_datasize_r2r,max_comm_r2r,halomax,ADM_rgn_nmax))
             558                         allocate(qlist_r2r(max_datasize_r2r,max_comm_r2r,halomax,ADM_rgn_nmax))
             559                         allocate(slist_r2r(max_datasize_r2r,max_comm_r2r,halomax,ADM_rgn_nmax))
             560                         !
             561                         allocate(recvbuf_r2r(max_datasize_r2r*kmax*max_varmax  &
             562                              ,ADM_prc_rnum(ADM_prc_me),max_comm_r2r))
             563                         allocate(sendbuf_r2r(max_datasize_r2r*kmax*max_varmax  &
             564                              ,ADM_prc_rnum(ADM_prc_me),max_comm_r2r))
             565                         !
             566                         allocate(n_hemisphere_copy(ADM_w:ADM_s,halomax,ADM_rgn_nmax))
             567                         allocate(s_hemisphere_copy(ADM_w:ADM_s,halomax,ADM_rgn_nmax))
             568                         !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             569        pp    s          rsize_r2r(:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             570        pp    s          ssize_r2r(:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             571        pp    s          sourceid_r2r(:,:,:)=-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             572        pp    s          destid_r2r(:,:,:)=-1
             573                         !mrecv_r2r(:,:,:)=-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             574        pp    s          msend_r2r(:,:,:)=-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<< Loop-information  End >>>
             575        pp    s          maxcommrecv_r2r(:,:)=max_comm_r2r
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<< Loop-information  End >>>
             576        pp    s          maxcommsend_r2r(:,:)=max_comm_r2r
             577                         !(20101207) removed by teraim
             578                         !recvtag_r2r(:,:,:)=-1
             579                         !sendtag_r2r(:,:,:)=-1
             580                         !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             581        pp    s          rlist_r2r(:,:,:,:)=-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             582        pp    s          qlist_r2r(:,:,:,:)=-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             583        pp    s          slist_r2r(:,:,:,:)=-1
             584                         !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             585        pp    s          n_hemisphere_copy(:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             586        pp    s          s_hemisphere_copy(:,:,:)=0
             587                         !
             588                         allocate(rsize_r2p(max_comm_r2p,ADM_npl:ADM_spl,halomax))
             589                         allocate(ssize_r2p(max_comm_r2p,ADM_npl:ADM_spl,halomax))
             590                         allocate(source_prc_r2p(max_comm_r2p,ADM_npl:ADM_spl,halomax))
             591                         allocate(source_rgn_r2p(max_comm_r2p,ADM_npl:ADM_spl,halomax))
             592                         allocate(dest_prc_r2p(max_comm_r2p,ADM_npl:ADM_spl,halomax))
             593                         allocate(maxcommrecv_r2p(ADM_npl:ADM_spl,halomax))
             594                         allocate(maxcommsend_r2p(ADM_npl:ADM_spl,halomax))
             595                         allocate(recvtag_r2p(max_comm_r2p,ADM_npl:ADM_spl,halomax))
             596                         allocate(sendtag_r2p(max_comm_r2p,ADM_npl:ADM_spl,halomax))
             597                         !
             598                         max_datasize_r2p=halomax*(halomax+1)/2
             599                         !
             600                         allocate(rlist_r2p(max_datasize_r2p,max_comm_r2p,ADM_npl:ADM_spl,halomax))
             601                         allocate(qlist_r2p(max_datasize_r2p,max_comm_r2p,ADM_npl:ADM_spl,halomax))
             602                         allocate(slist_r2p(max_datasize_r2p,max_comm_r2p,ADM_npl:ADM_spl,halomax))
             603                         !
             604                         allocate(recvbuf_r2p(max_datasize_r2p*kmax*max_varmax &
             605                              ,max_comm_r2p,ADM_npl:ADM_spl))
             606                         allocate(sendbuf_r2p(max_datasize_r2p*kmax*max_varmax &
             607                              ,max_comm_r2p,ADM_npl:ADM_spl))
             608                         !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             609        pp    s          rsize_r2p(:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             610        pp    s          ssize_r2p(:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             611        pp    s          source_prc_r2p(:,:,:)=-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             612        pp    s          source_rgn_r2p(:,:,:)=-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             613        pp    s          dest_prc_r2p(:,:,:)=-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<< Loop-information  End >>>
             614        pp    s          maxcommrecv_r2p(:,:)=max_comm_r2p
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<< Loop-information  End >>>
             615        pp    s          maxcommsend_r2p(:,:)=max_comm_r2p
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             616        pp    s          recvtag_r2p(:,:,:)=-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             617        pp    s          sendtag_r2p(:,:,:)=-1
             618                         !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             619        pp    s          rlist_r2p(:,:,:,:)=-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             620        pp    s          qlist_r2p(:,:,:,:)=-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             621        pp    s          slist_r2p(:,:,:,:)=-1
             622                         !
             623                     !!!!!!!!!!!!!!!
             624                         allocate(nmin_nspl(1:halomax))
             625                         allocate(nmax_nspl(1:halomax))
             626                         allocate(pmin_nspl(1:halomax))
             627                         allocate(pmax_nspl(1:halomax))
             628                         allocate(lmin_nspl(1:halomax))
             629                         allocate(lmax_nspl(1:halomax))
             630                         allocate(gmin_nspl(1:halomax))
             631                         allocate(gmax_nspl(1:halomax))
             632                         allocate(gall_nspl(1:halomax))
             633                         nmin_nspl(halomax)=1
             634                         nmax_nspl(halomax)=halomax+1
             635                         pmin_nspl(halomax)=1
             636                         pmax_nspl(halomax)=ADM_vlink_nmax
             637                         lmin_nspl(halomax)=1
             638                         lmax_nspl(halomax)=halomax
             639                         gmin_nspl(halomax)=2
             640                         gmax_nspl(halomax)=1+5*halomax*(halomax+1)/2
             641                         gall_nspl(halomax)=1+5*halomax*(halomax+1)/2
             642                         allocate(pl_index(nmin_nspl(halomax):nmax_nspl(halomax) &
             643                              ,pmin_nspl(halomax):pmax_nspl(halomax) &
             644                              ,lmin_nspl(halomax):lmax_nspl(halomax),halomax))
             645                         !
             646     1                   do halo=1,halomax
             647     1                      !
             648     1                      imin(halo)=(ADM_gmin-1)+halo
             649     1                      imax(halo)=(ADM_gmax-1)+halo
             650     1                      jmin(halo)=(ADM_gmin-1)+halo
             651     1                      jmax(halo)=(ADM_gmax-1)+halo
             652     1                      gmin(halo)=(ADM_gmin-1)+halo
             653     1                      gmax(halo)=(ADM_gmax-1)+halo
             654     1                      gall(halo)=(ADM_gall_1d-2)+2*halo
             655     1                      !
             656     1                      nmin_nspl(halo)=1
             657     1                      nmax_nspl(halo)=halo+1
             658     1                      pmin_nspl(halo)=1
             659     1                      pmax_nspl(halo)=ADM_vlink_nmax
             660     1                      lmin_nspl(halo)=1
             661     1                      lmax_nspl(halo)=halo
             662     1                      gmin_nspl(halo)=2
             663     1                      gmax_nspl(halo)=1+5*halo*(halo+1)/2
             664     1                      gall_nspl(halo)=1+5*halo*(halo+1)/2
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             665     1  pp    s             pl_index(:,:,:,halo)=-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             666     2  pp                  do l=lmin_nspl(halo),lmax_nspl(halo)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             667     3  pp                     do p=pmin_nspl(halo),pmax_nspl(halo)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 236
                                   <<< Loop-information  End >>>
             668     4  pp   8s                   do n=nmin_nspl(halo),l+1
             669     4   p   8s                      pl_index(n,p,l,halo)=n+(p-1)*l+(1+5*(l-1)*l/2)
             670     4   p   8s                   enddo
             671     3   p                     enddo
             672     2   p                     pl_index(l+1,pmax_nspl(halo),l,halo)=nmin_nspl(halo) &
             673     2                              +(pmin_nspl(halo)-1)*l &
             674     2                              +(1+5*(l-1)*l/2)
             675     2   p                  enddo
             676     1                      !
             677     1                      ! --- r2p ----
             678     2                      if(comm_pl)then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 445
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             679     3  pp   6s              do p=pmin_nspl(halo),pmax_nspl(halo)
             680     3   p   6s                 rsize_r2p(p,ADM_npl,halo)=halo*(halo+1)/2
             681     3   p   6s                 source_prc_r2p(p,ADM_npl,halo)=prc_tab_rev(ptr_prcid &
             682     3                               ,ADM_rgn_vtab_pl(ADM_rid,ADM_npl,p))
             683     3   p   6s                 source_rgn_r2p(p,ADM_npl,halo)=prc_tab_rev(ptr_lrgnid &
             684     3                               ,ADM_rgn_vtab_pl(ADM_rid,ADM_npl,p))
             685     3   p   6s              enddo
             686     3                       do p=pmin_nspl(halo),pmax_nspl(halo)
             687     3                          q=0
             688     4                          do ld=lmin_nspl(halo),lmax_nspl(halo)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 800
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             689     5  pp   8s                    do nd=nmin_nspl(halo),ld
             690     5   p   8s                       q=q+1
             691     5   p   8s                       in=-nd+ld+nmin_nspl(halo)-lmin_nspl(halo)+imin(halo)
             692     5   p   8s                       jn=-nd+nmin_nspl(halo)+(jmax(halo)-jmin(halo))+jmin(halo)
             693     5   p   8s                       rlist_r2p(q,mod(p,ADM_vlink_nmax)+1,ADM_npl,halo) &
             694     5                                     =pl_index(nd+1,p,ld,halo)
             695     5   p   8s                       qlist_r2p(q,mod(p,ADM_vlink_nmax)+1,ADM_npl,halo)=suf(in,jn,gall(halo))
             696     5   p   8s                    enddo
             697     4                          enddo
             698     3                       enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 445
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             699     3  pp   6s              do p=pmin_nspl(halo),pmax_nspl(halo)
             700     3   p   6s                 rsize_r2p(p,ADM_spl,halo)=halo*(halo+1)/2
             701     3   p   6s                 source_prc_r2p(p,ADM_spl,halo)=prc_tab_rev(ptr_prcid &
             702     3                               ,ADM_rgn_vtab_pl(ADM_rid,ADM_spl,p))
             703     3   p   6s                 source_rgn_r2p(p,ADM_spl,halo)=prc_tab_rev(ptr_lrgnid &
             704     3                               ,ADM_rgn_vtab_pl(ADM_rid,ADM_spl,p))
             705     3   p   6s              enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             706     3  pp                   do p=pmin_nspl(halo),pmax_nspl(halo)
             707     3   p                      q=0
             708     4   p                      do ld=lmin_nspl(halo),lmax_nspl(halo)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             709     5   p   8s                    do nd=nmin_nspl(halo),ld
             710     5   p   8s                       q=q+1
             711     5   p   8s                       in=nd-ld-nmin_nspl(halo) &
             712     5                                     +lmin_nspl(halo)+(imax(halo)-imin(halo))+imin(halo)
             713     5   p   8s                       jn=nd-nmin_nspl(halo)+jmin(halo)
             714     5   p   8s                       rlist_r2p(q,p,ADM_spl,halo)=pl_index(nd,p,ld,halo)
             715     5   p   8s                       qlist_r2p(q,p,ADM_spl,halo)=suf(in,jn,gall(halo))
             716     5   p   8s                    enddo
             717     4   p                      enddo
             718     3   p                   enddo
             719     2                       maxcommrecv_r2p(ADM_npl,halo)=(pmax_nspl(halo)-pmin_nspl(halo)+1)
             720     2                       maxcommrecv_r2p(ADM_spl,halo)=(pmax_nspl(halo)-pmin_nspl(halo)+1)
             721     2                       !
             722     3   s                   do pl=ADM_npl,ADM_spl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 6
                                   <<<      dest_prc_r2p: 2, rsize_r2p: 2
                                   <<<      ssize_r2p: 2
                                   <<< Loop-information  End >>>
             723     4  pp                      do p=1,maxcommrecv_r2p(pl,halo)
             724     5   p                         if (ADM_prc_me==source_prc_r2p(p,pl,halo)) then
             725     5   p                            dest_prc_r2p(p,pl,halo)=ADM_prc_nspl(pl)
             726     5   p                            ssize_r2p(p,pl,halo)=rsize_r2p(p,pl,halo)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             727     6   p   8s                       do q=1,ssize_r2p(p,pl,halo)
             728     6   p   8s                          slist_r2p(q,p,pl,halo)=qlist_r2p(q,p,pl,halo)
             729     6   p   8s                       enddo
             730     5   p                         endif
             731     4   p                         sendtag_r2p(p,pl,halo)=pl+(ADM_spl-ADM_npl+1)*(p-1) &
             732     4                                  +ADM_rgn_nmax**2+ADM_vlink_nmax*2
             733     4   p                         recvtag_r2p(p,pl,halo)=sendtag_r2p(p,pl,halo)
             734     4               
             735     4               !              write(*,*) 'sendtag_r2p',ADM_prc_me,p,pl,halo,sendtag_r2p(p,pl,halo)
             736     4   p                      enddo
             737     3   p                      maxcommsend_r2p(pl,halo)=(pmax_nspl(halo)-pmin_nspl(halo)+1)
             738     3   p                   enddo
             739     2                      endif
             740     1                      !
             741     1                      ! --- r2r ----
             742     2                      do l=1,ADM_prc_rnum(ADM_prc_me)
             743     2                         rgnid=ADM_prc_tab(l,ADM_prc_me)
             744     2                         m=0
             745     3                         if (ADM_rgn_etab(ADM_dir,ADM_sw,rgnid)==ADM_ne) then
             746     4                            if (halo>=1) then
             747     4                               m=m+1
             748     4                               rsize_r2r(m,halo,rgnid)=(gmax(halo)-gmin(halo)+1)*halo
             749     4                               sourceid_r2r(m,halo,rgnid)=ADM_rgn_etab(ADM_rid,ADM_sw,rgnid)
             750     4                               ! mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
             751     4                               n=0
             752     5                               do j=jmin(halo)-halo,jmin(halo)-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1067
                                   <<< Loop-information  End >>>
             753     6  pp   8s                         do i=imin(halo),imax(halo)
             754     6   p   8s                            n=n+1
             755     6   p   8s                            in=i
             756     6   p   8s                            jn=j+jmax(halo)+1-jmin(halo)
             757     6   p   8s                            rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
             758     6   p   8s                            qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
             759     6   p   8s                         enddo
             760     5                               enddo
             761     4                            endif
             762     3                         endif
             763     3                         if ((ADM_rgn_vnum(ADM_w,rgnid)==3)) then
             764     4                            if (ADM_rgn_etab(ADM_dir,ADM_sw,rgnid)==ADM_se) then
             765     5                               if (halo>=1) then
             766     5                                  m=m+1
             767     5                                  rsize_r2r(m,halo,rgnid)=(gmax(halo)-gmin(halo)+1)*halo
             768     5                                  sourceid_r2r(m,halo,rgnid)=ADM_rgn_etab(ADM_rid,ADM_sw,rgnid)
             769     5                                  !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207)removed by teraim
             770     5                                  n=0
             771     6                                  do j=jmin(halo)-halo,jmin(halo)-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<< Loop-information  End >>>
             772     7  pp   8s                            do i=imin(halo)+1,imax(halo)+(j-(jmin(halo)-1))
             773     7   p   8s                               n=n+1
             774     7   p   8s                               in=j+jmax(halo)-2*jmin(halo)+imin(halo)+1
             775     7   p   8s                               jn=-i+j+imin(halo)+jmax(halo)-jmin(halo)+1
             776     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
             777     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
             778     7   p   8s                            enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<< Loop-information  End >>>
             779     7  pp   8s                            do i=imin(halo)-halo,imin(halo)-1+(j-(jmin(halo)-1))
             780     7   p   8s                               n=n+1
             781     7   p   8s                               in=i+imax(halo)+1-imin(halo)
             782     7   p   8s                               jn=j+jmax(halo)+1-jmin(halo)
             783     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
             784     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
             785     7   p   8s                            enddo
             786     6                                  enddo
             787     5                               endif
             788     4                            endif
             789     3                         endif
             790     2                         !
             791     3                         if (ADM_rgn_etab(ADM_dir,ADM_nw,rgnid)==ADM_ne) then
             792     4                            if (halo>=1) then
             793     4                               m=m+1
             794     4                               rsize_r2r(m,halo,rgnid)=(gmax(halo)-gmin(halo)+1)*halo
             795     4                               sourceid_r2r(m,halo,rgnid)=ADM_rgn_etab(ADM_rid,ADM_nw,rgnid)
             796     4                               !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
             797     4                               n=0
             798     5                               do i=imin(halo)-halo,imin(halo)-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<< Loop-information  End >>>
             799     6  pp   8s                         do j=jmin(halo)+(i-(imin(halo)-1)),jmax(halo)+(i-(imin(halo)-1))
             800     6   p   8s                            n=n+1
             801     6   p   8s                            in=i-j+imax(halo)-imin(halo)+jmin(halo)+1
             802     6   p   8s                            jn=i+imax(halo)-2*imin(halo)+jmin(halo)+1
             803     6   p   8s                            rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
             804     6   p   8s                            qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
             805     6   p   8s                         enddo
             806     5                               enddo
             807     4                            endif
             808     3                         elseif (ADM_rgn_etab(ADM_dir,ADM_nw,rgnid)==ADM_se) then
             809     4                            if (halo>=1) then
             810     4                               m=m+1
             811     4                               rsize_r2r(m,halo,rgnid)=(gmax(halo)-gmin(halo)+1)*halo
             812     4                               sourceid_r2r(m,halo,rgnid)=ADM_rgn_etab(ADM_rid,ADM_nw,rgnid)
             813     4                               !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
             814     4                               n=0
             815     5                               do j=jmin(halo),jmax(halo)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<< Loop-information  End >>>
             816     6  pp   8s                         do i=imin(halo)-halo,imin(halo)-1
             817     6   p   8s                            n=n+1
             818     6   p   8s                            in=i+imax(halo)-imin(halo)+1
             819     6   p   8s                            jn=j
             820     6   p   8s                            rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
             821     6   p   8s                            qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
             822     6   p   8s                         enddo
             823     5                               enddo
             824     4                            endif
             825     3                         endif
             826     2                         !
             827     2               !!!!!
             828     3                         if ((ADM_rgn_vnum(ADM_n,rgnid)==5)) then
             829     3                            !
             830     4                            if (ADM_rgn_vtab(ADM_dir,ADM_n,rgnid,2)==ADM_n) then
             831     5                               if (halo>=2) then
             832     5                                  m=m+1
             833     5                                  rsize_r2r(m,halo,rgnid)=halo*(halo+1)/2-1
             834     5                                  sourceid_r2r(m,halo,rgnid)=ADM_rgn_vtab(ADM_rid,ADM_n,rgnid,2)
             835     5                                  !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
             836     5                                  n=0
             837     6                                  do i=imin(halo)-halo,imin(halo)-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 942
                                   <<< Loop-information  End >>>
             838     7  pp   8s                            do j=jmax(halo)+1+(i-(imin(halo)-1)) &
             839     7                                          ,min(jmax(halo)+1,jmax(halo)+(halo-1)+(i-(imin(halo)-1)))
             840     7   p   8s                               n=n+1
             841     7   p   8s                               in=-j+jmax(halo)+imin(halo)+1
             842     7   p   8s                               jn=i-j+imax(halo)-2*imin(halo)+jmax(halo)+jmin(halo)+2
             843     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
             844     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
             845     7   p   8s                            enddo
             846     6                                  enddo
             847     5                               endif
             848     4                            endif
             849     4                            if (ADM_rgn_vtab(ADM_dir,ADM_n,rgnid,3)==ADM_n) then
             850     5                               if (halo>=2) then
             851     5                                  m=m+1
             852     5                                  rsize_r2r(m,halo,rgnid)=(halo-1)*halo/2
             853     5                                  sourceid_r2r(m,halo,rgnid)=ADM_rgn_vtab(ADM_rid,ADM_n,rgnid,3)
             854     5                                  !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
             855     5                                  n=0
             856     6                                  do j=jmax(halo)+2,jmax(halo)+halo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 942
                                   <<< Loop-information  End >>>
             857     7  pp   8s                            do i=imin(halo)+1,imin(halo)+1+(j-(jmax(halo)+2))
             858     7   p   8s                               n=n+1
             859     7   p   8s                               in=-i+j-2*jmax(halo)+jmin(halo)+imax(halo)+imin(halo)-1
             860     7   p   8s                               jn=-i+imax(halo)+jmin(halo)+1
             861     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
             862     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
             863     7   p   8s                            enddo
             864     6                                  enddo
             865     5                               endif
             866     4                            endif
             867     3                            !
             868     3                         endif
             869     2               !!!!!
             870     2                         !
             871     3                         if (ADM_rgn_etab(ADM_dir,ADM_ne,rgnid)==ADM_nw) then
             872     4                            if (halo>=1) then
             873     4                               m=m+1
             874     4                               rsize_r2r(m,halo,rgnid)=(gmax(halo)-gmin(halo)+1)*halo
             875     4                               sourceid_r2r(m,halo,rgnid)=ADM_rgn_etab(ADM_rid,ADM_ne,rgnid)
             876     4                               !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
             877     4                               n=0
             878     5                               do j=jmax(halo)+1,jmax(halo)+halo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<< Loop-information  End >>>
             879     6  pp   8s                         do i=imin(halo)+1+(j-(jmax(halo)+1)),imax(halo)+1+(j-(jmax(halo)+1))
             880     6   p   8s                            n=n+1
             881     6   p   8s                            in=j-jmax(halo)+imin(halo)-1
             882     6   p   8s                            jn=-i+j+imax(halo)-jmax(halo)+jmin(halo)
             883     6   p   8s                            rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
             884     6   p   8s                            qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
             885     6   p   8s                         enddo
             886     5                               enddo
             887     4                            endif
             888     3                         elseif (ADM_rgn_etab(ADM_dir,ADM_ne,rgnid)==ADM_sw) then
             889     4                            if (halo>=1) then
             890     4                               m=m+1
             891     4                               rsize_r2r(m,halo,rgnid)=(gmax(halo)-gmin(halo)+1)*halo
             892     4                               sourceid_r2r(m,halo,rgnid)=ADM_rgn_etab(ADM_rid,ADM_ne,rgnid)
             893     4                               !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207)removed by teraim
             894     4                               n=0
             895     5                               do j=jmax(halo)+1,jmax(halo)+halo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1067
                                   <<< Loop-information  End >>>
             896     6  pp   8s                         do i=imin(halo),jmax(halo)
             897     6   p   8s                            n=n+1
             898     6   p   8s                            in=i
             899     6   p   8s                            jn=j-jmax(halo)-1+jmin(halo)
             900     6   p   8s                            rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
             901     6   p   8s                            qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
             902     6   p   8s                         enddo
             903     5                               enddo
             904     4                            endif
             905     3                         endif
             906     2                         !
             907     3                         if (ADM_rgn_etab(ADM_dir,ADM_se,rgnid)==ADM_nw) then
             908     4                            if (halo>=1) then
             909     4                               m=m+1
             910     4                               rsize_r2r(m,halo,rgnid)=(gmax(halo)-gmin(halo)+1)*halo
             911     4                               sourceid_r2r(m,halo,rgnid)=ADM_rgn_etab(ADM_rid,ADM_se,rgnid)
             912     4                               !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207)removed by teraim
             913     4                               n=0
             914     5                               do j=jmin(halo),jmax(halo)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<< Loop-information  End >>>
             915     6  pp   8s                         do i=imax(halo)+1,imax(halo)+halo
             916     6   p   8s                            n=n+1
             917     6   p   8s                            in=i-imax(halo)+imin(halo)-1
             918     6   p   8s                            jn=j
             919     6   p   8s                            rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
             920     6   p   8s                            qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
             921     6   p   8s                         enddo
             922     5                               enddo
             923     4                            endif
             924     3                         endif
             925     3                         if ((ADM_rgn_vnum(ADM_e,rgnid)==3)) then
             926     4                            if (ADM_rgn_etab(ADM_dir,ADM_se,rgnid)==ADM_sw) then
             927     5                               if (halo>=1) then
             928     5                                  m=m+1
             929     5                                  rsize_r2r(m,halo,rgnid)=(gmax(halo)-gmin(halo)+1)*halo
             930     5                                  sourceid_r2r(m,halo,rgnid)=ADM_rgn_etab(ADM_rid,ADM_se,rgnid)
             931     5                                  !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
             932     5                                  n=0
             933     6                                  do i=imax(halo)+1,imax(halo)+halo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<< Loop-information  End >>>
             934     7  pp   8s                            do j=jmin(halo)+1+(i-(imax(halo)+1)),jmax(halo)
             935     7   p   8s                               n=n+1
             936     7   p   8s                               in=i-j-imax(halo)+jmax(halo)+imin(halo)
             937     7   p   8s                               jn=i-imax(halo)-1+jmin(halo)
             938     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
             939     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
             940     7   p   8s                            enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<< Loop-information  End >>>
             941     7  pp   8s                            do j=jmax(halo)+1+(i-(imax(halo)+1)),jmax(halo)+halo
             942     7   p   8s                               n=n+1
             943     7   p   8s                               in=i-imax(halo)-1+imin(halo)
             944     7   p   8s                               jn=j-jmax(halo)-1+jmin(halo)
             945     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
             946     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
             947     7   p   8s                            enddo
             948     6                                  enddo
             949     5                               endif
             950     4                            endif
             951     3                         endif
             952     2                         !
             953     2               !!!!!
             954     3                         if ((ADM_rgn_vnum(ADM_s,rgnid)==5)) then
             955     3                            !
             956     4                            if (ADM_rgn_vtab(ADM_dir,ADM_s,rgnid,2)==ADM_s) then
             957     5                               if (halo>=2) then
             958     5                                  m=m+1
             959     5                                  rsize_r2r(m,halo,rgnid)=(halo-1)*halo/2
             960     5                                  sourceid_r2r(m,halo,rgnid)=ADM_rgn_vtab(ADM_rid,ADM_s,rgnid,2)
             961     5                                  !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
             962     5                                  n=0
             963     6                                  do i=imax(halo)+2,imax(halo)+halo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 942
                                   <<< Loop-information  End >>>
             964     7  pp   8s                            do j=jmin(halo)+1,jmin(halo)+1+(i-(imax(halo)+2))
             965     7   p   8s                               n=n+1
             966     7   p   8s                               in=-j+jmax(halo)+imin(halo)+1
             967     7   p   8s                               jn=i-j-2*imax(halo)+imin(halo)+jmax(halo)+jmin(halo)-1
             968     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
             969     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
             970     7   p   8s                            enddo
             971     6                                  enddo
             972     5                               endif
             973     4                            endif
             974     3                            !
             975     3                            !
             976     4                            if (ADM_rgn_vtab(ADM_dir,ADM_s,rgnid,3)==ADM_s) then
             977     5                               if (halo>=2) then
             978     5                                  m=m+1
             979     5                                  rsize_r2r(m,halo,rgnid)=halo*(halo+1)/2-1
             980     5                                  sourceid_r2r(m,halo,rgnid)=ADM_rgn_vtab(ADM_rid,ADM_s,rgnid,3)
             981     5                                  !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
             982     5                                  n=0
             983     6                                  do j=jmin(halo)-halo,jmin(halo)-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 942
                                   <<< Loop-information  End >>>
             984     7  pp   8s                            do i=imax(halo)+1+(j-(jmin(halo)-1)) &
             985     7                                          ,min(imax(halo)+1,imax(halo)+(halo-1)+(j-(jmin(halo)-1)))
             986     7   p   8s                               n=n+1
             987     7   p   8s                               in=-i+j+imax(halo)+jmax(halo)+imin(halo)-2*jmin(halo)+2
             988     7   p   8s                               jn=-i+imax(halo)+jmin(halo)+1
             989     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
             990     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
             991     7   p   8s                            enddo
             992     6                                  enddo
             993     5                               endif
             994     4                            endif
             995     3                            !
             996     3                         endif
             997     2                         !!
             998     2                         !
             999     2                         !!
            1000     3                         if ((ADM_rgn_vnum(ADM_w,rgnid)==4)) then
            1001     3                            !
            1002     4                            if (ADM_rgn_vtab(ADM_dir,ADM_w,rgnid,2)==ADM_n) then
            1003     5                               if (halo>=1) then
            1004     5                                  m=m+1
            1005     5                                  rsize_r2r(m,halo,rgnid)=halo*(halo+1)/2
            1006     5                                  sourceid_r2r(m,halo,rgnid)=ADM_rgn_vtab(ADM_rid,ADM_w,rgnid,2)
            1007     5                                  !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
            1008     5                                  n=0
            1009     6                                  do j=jmin(halo)-halo,jmin(halo)-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 942
                                   <<< Loop-information  End >>>
            1010     7  pp   8s                            do i=imin(halo)-1+(j-(jmin(halo)-1)),imin(halo)-1
            1011     7   p   8s                               n=n+1
            1012     7   p   8s                               in=i-j+imax(halo)-imin(halo)-jmax(halo)+2*jmin(halo)
            1013     7   p   8s                               jn=i+imax(halo)-2*imin(halo)+jmin(halo)+1
            1014     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
            1015     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
            1016     7   p   8s                            enddo
            1017     6                                  enddo
            1018     5                               endif
            1019     4                            elseif (ADM_rgn_vtab(ADM_dir,ADM_w,rgnid,2)==ADM_e) then
            1020     5                               if (halo>=1) then
            1021     5                                  m=m+1
            1022     5                                  rsize_r2r(m,halo,rgnid)=halo*halo
            1023     5                                  sourceid_r2r(m,halo,rgnid)=ADM_rgn_vtab(ADM_rid,ADM_w,rgnid,2)
            1024     5                                  !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
            1025     5                                  n=0
            1026     6                                  do j=jmin(halo)-halo,jmin(halo)-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<< Loop-information  End >>>
            1027     7  pp   8s                            do i=imin(halo)-halo,imin(halo)-1
            1028     7   p   8s                               n=n+1
            1029     7   p   8s                               in=i+imax(halo)-imin(halo)+1
            1030     7   p   8s                               jn=j+jmax(halo)-jmin(halo)+1
            1031     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
            1032     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
            1033     7   p   8s                            enddo
            1034     6                                  enddo
            1035     5                               endif
            1036     4                            elseif (ADM_rgn_vtab(ADM_dir,ADM_w,rgnid,2)==ADM_s) then
            1037     5                               if (halo>=1) then
            1038     5                                  m=m+1
            1039     5                                  rsize_r2r(m,halo,rgnid)=halo*(halo+1)/2
            1040     5                                  sourceid_r2r(m,halo,rgnid)=ADM_rgn_vtab(ADM_rid,ADM_w,rgnid,2)
            1041     5                                  !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
            1042     5                                  n=0
            1043     6                                  do j=jmin(halo)-halo,jmin(halo)-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<< Loop-information  End >>>
            1044     7  pp   8s                            do i=imin(halo)-halo,imin(halo)-halo+(j-(jmin(halo)-halo))
            1045     7                                        !do i=imin(halo)-halo,imin(halo)-1
            1046     7                                        !  do j=i+jmin(halo)-imin(halo),jmin(halo)-1
            1047     7   p   8s                               n=n+1
            1048     7   p   8s                               in=j+jmax(halo)+1-2*jmin(halo)+imin(halo)
            1049     7   p   8s                               jn=-i+j-imax(halo)+2*imin(halo)+jmax(halo)-jmin(halo)
            1050     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
            1051     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
            1052     7   p   8s                            enddo
            1053     6                                  enddo
            1054     5                               endif
            1055     4                            endif
            1056     4                            if (ADM_rgn_etab(ADM_dir,ADM_sw,rgnid)==ADM_se) then
            1057     5                               if (halo>=1) then
            1058     5                                  m=m+1
            1059     5                                  rsize_r2r(m,halo,rgnid)=(gmax(halo)-gmin(halo)+1)*halo
            1060     5                                  sourceid_r2r(m,halo,rgnid)=ADM_rgn_etab(ADM_rid,ADM_sw,rgnid)
            1061     5                                  !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
            1062     5                                  n=0
            1063     6                                  do j=jmin(halo)-halo,jmin(halo)-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<< Loop-information  End >>>
            1064     7  pp   8s                            do i=imin(halo)+(j-(jmin(halo)-1)),imax(halo)+(j-(jmin(halo)-1))
            1065     7   p   8s                               n=n+1
            1066     7   p   8s                               in=j+jmax(halo)-2*jmin(halo)+imin(halo)+1
            1067     7   p   8s                               jn=-i+j+imin(halo)+jmax(halo)-jmin(halo)+1
            1068     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
            1069     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
            1070     7   p   8s                            enddo
            1071     6                                  enddo
            1072     5                               endif
            1073     4                            endif
            1074     3                            !
            1075     3                         endif
            1076     2                         !!
            1077     2                         !
            1078     2                         !!
            1079     3                         if ((ADM_rgn_vnum(ADM_n,rgnid)==4)) then
            1080     3                            !
            1081     4                            if (ADM_rgn_vtab(ADM_dir,ADM_n,rgnid,2)==ADM_e) then
            1082     5                               if (halo>=2) then
            1083     5                                  m=m+1
            1084     5                                  rsize_r2r(m,halo,rgnid)=halo*(halo-1)
            1085     5                                  sourceid_r2r(m,halo,rgnid)=ADM_rgn_vtab(ADM_rid,ADM_n,rgnid,2)
            1086     5                                  !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
            1087     5                                  n=0
            1088     6                                  do i=imin(halo)-halo,imin(halo)-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<< Loop-information  End >>>
            1089     7  pp   8s                            do j=jmax(halo)+1+(i-(imin(halo)-1)) &
            1090     7                                          ,jmax(halo)+(halo-1)+(i-(imin(halo)-1))
            1091     7   p   8s                               n=n+1
            1092     7   p   8s                               in=i-j+imax(halo)-imin(halo)+jmax(halo)+2
            1093     7   p   8s                               jn=i+imax(halo)-2*imin(halo)+jmin(halo)+1
            1094     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
            1095     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
            1096     7   p   8s                            enddo
            1097     6                                  enddo
            1098     5                               endif
            1099     4                            elseif (ADM_rgn_vtab(ADM_dir,ADM_n,rgnid,2)==ADM_s) then
            1100     5                               if (halo>=2) then
            1101     5                                  m=m+1
            1102     5                                  rsize_r2r(m,halo,rgnid)=(halo-1)*halo/2
            1103     5                                  sourceid_r2r(m,halo,rgnid)=ADM_rgn_vtab(ADM_rid,ADM_n,rgnid,2)
            1104     5                                  !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
            1105     5                                  n=0
            1106     6                                  do i=imin(halo)-(halo-1),imin(halo)-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<< Loop-information  End >>>
            1107     7  pp   8s                            do j=jmax(halo)+1,jmax(halo)+1+(i-(imin(halo)-(halo-1)))
            1108     7   p   8s                               n=n+1
            1109     7   p   8s                               in=i+imax(halo)-imin(halo)+1
            1110     7   p   8s                               jn=j-jmax(halo)+jmin(halo)-1
            1111     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
            1112     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
            1113     7   p   8s                            enddo
            1114     6                                  enddo
            1115     5                               endif
            1116     4                            elseif (ADM_rgn_vtab(ADM_dir,ADM_n,rgnid,2)==ADM_w) then
            1117     5                               if (halo>=1) then
            1118     5                                  m=m+1
            1119     5                                  rsize_r2r(m,halo,rgnid)=halo*halo
            1120     5                                  sourceid_r2r(m,halo,rgnid)=ADM_rgn_vtab(ADM_rid,ADM_n,rgnid,2)
            1121     5                                  !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
            1122     5                                  n=0
            1123     6                                  do j=jmax(halo)+1,jmax(halo)+halo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<< Loop-information  End >>>
            1124     7  pp   8s                            do i=imin(halo)-(halo-1)+(j-(jmax(halo)+1)) &
            1125     7                                          ,imin(halo)+(j-(jmax(halo)+1))
            1126     7   p   8s                               n=n+1
            1127     7   p   8s                               in=j-jmax(halo)+imin(halo)-1
            1128     7   p   8s                               jn=-i+j+imin(halo)-jmax(halo)+jmin(halo)-1
            1129     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
            1130     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
            1131     7   p   8s                            enddo
            1132     6                                  enddo
            1133     5                               endif
            1134     4                            endif
            1135     3                            !
            1136     3                         endif
            1137     2                         !!
            1138     2                         !
            1139     2                         !!
            1140     3                         if ((ADM_rgn_vnum(ADM_e,rgnid)==4)) then
            1141     3                            !
            1142     4                            if (ADM_rgn_vtab(ADM_dir,ADM_e,rgnid,2)==ADM_n) then
            1143     5                               if (halo>=2) then
            1144     5                                  m=m+1
            1145     5                                  rsize_r2r(m,halo,rgnid)=(halo-1)*halo/2
            1146     5                                  sourceid_r2r(m,halo,rgnid)=ADM_rgn_vtab(ADM_rid,ADM_e,rgnid,2)
            1147     5                                  !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
            1148     5                                  n=0
            1149     6                                  do i=imax(halo)+2,imax(halo)+halo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 942
                                   <<< Loop-information  End >>>
            1150     7  pp   8s                            do j=jmax(halo)+1,jmax(halo)+1+(i-(imax(halo)+2))
            1151     7   p   8s                               n=n+1
            1152     7   p   8s                               in=j-jmax(halo)-1+imin(halo)
            1153     7   p   8s                               jn=-i+j+2*imax(halo)-imin(halo)-jmax(halo)+jmin(halo)+1
            1154     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
            1155     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
            1156     7   p   8s                            enddo
            1157     6                                  enddo
            1158     5                               endif
            1159     4                            elseif (ADM_rgn_vtab(ADM_dir,ADM_e,rgnid,2)==ADM_w) then
            1160     5                               if (halo>=1) then
            1161     5                                  m=m+1
            1162     5                                  rsize_r2r(m,halo,rgnid)=halo*halo
            1163     5                                  sourceid_r2r(m,halo,rgnid)=ADM_rgn_vtab(ADM_rid,ADM_e,rgnid,2)
            1164     5                                  !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
            1165     5                                  n=0
            1166     6                                  do j=jmax(halo)+1,jmax(halo)+halo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<< Loop-information  End >>>
            1167     7  pp   8s                            do i=imax(halo)+1,imax(halo)+halo
            1168     7   p   8s                               n=n+1
            1169     7   p   8s                               in=i-imax(halo)+imin(halo)-1
            1170     7   p   8s                               jn=j-jmax(halo)+jmin(halo)-1
            1171     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
            1172     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
            1173     7   p   8s                            enddo
            1174     6                                  enddo
            1175     5                               endif
            1176     4                            elseif (ADM_rgn_vtab(ADM_dir,ADM_e,rgnid,2)==ADM_s) then
            1177     5                               if (halo>=2) then
            1178     5                                  m=m+1
            1179     5                                  rsize_r2r(m,halo,rgnid)=(halo-1)*halo/2
            1180     5                                  sourceid_r2r(m,halo,rgnid)=ADM_rgn_vtab(ADM_rid,ADM_e,rgnid,2)
            1181     5                                  !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
            1182     5                                  n=0
            1183     6                                  do j=jmax(halo)+2,jmax(halo)+halo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 942
                                   <<< Loop-information  End >>>
            1184     7  pp   8s                            do i=imax(halo)+1,imax(halo)+1+(j-(jmax(halo)+2))
            1185     7   p   8s                               n=n+1
            1186     7   p   8s                               in=i-j-imax(halo)+2*jmax(halo)+imin(halo)-jmin(halo)+1
            1187     7   p   8s                               jn=i-imax(halo)+jmin(halo)-1
            1188     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
            1189     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
            1190     7   p   8s                            enddo
            1191     6                                  enddo
            1192     5                               endif
            1193     4                            endif
            1194     4                            if (ADM_rgn_etab(ADM_dir,ADM_se,rgnid)==ADM_sw) then
            1195     5                               if (halo>=1) then
            1196     5                                  m=m+1
            1197     5                                  rsize_r2r(m,halo,rgnid)=(gmax(halo)-gmin(halo)+1)*halo
            1198     5                                  sourceid_r2r(m,halo,rgnid)=ADM_rgn_etab(ADM_rid,ADM_se,rgnid)
            1199     5                                  !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
            1200     5                                  n=0
            1201     6                                  do i=imax(halo)+1,imax(halo)+halo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<< Loop-information  End >>>
            1202     7  pp   8s                            do j=jmin(halo)+1+(i-(imax(halo)+1)),jmax(halo)+1+(i-(imax(halo)+1))
            1203     7   p   8s                               n=n+1
            1204     7   p   8s                               in=i-j-imax(halo)+jmax(halo)+imin(halo)
            1205     7   p   8s                               jn=i-imax(halo)+jmin(halo)-1
            1206     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
            1207     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
            1208     7   p   8s                            enddo
            1209     6                                  enddo
            1210     5                               endif
            1211     4                               !
            1212     4                            endif
            1213     3                         endif
            1214     2                         !!
            1215     2                         !
            1216     2                         !!
            1217     3                         if (ADM_rgn_vnum(ADM_s,rgnid)==4) then
            1218     3                            !
            1219     4                            if (ADM_rgn_vtab(ADM_dir,ADM_s,rgnid,2)==ADM_n) then
            1220     5                               if (halo>=2) then
            1221     5                                  m=m+1
            1222     5                                  rsize_r2r(m,halo,rgnid)=(halo-1)*halo/2
            1223     5                                  sourceid_r2r(m,halo,rgnid)=ADM_rgn_vtab(ADM_rid,ADM_s,rgnid,2)
            1224     5                                  !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
            1225     5                                  n=0
            1226     6                                  do i=imax(halo)+1,imax(halo)+(halo-1)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<< Loop-information  End >>>
            1227     7  pp   8s                            do j=jmin(halo)-(halo-1)+(i-(imax(halo)+1)),jmin(halo)-1
            1228     7   p   8s                               n=n+1
            1229     7   p   8s                               in=i-imax(halo)-1+imin(halo)
            1230     7   p   8s                               jn=j+jmax(halo)+1-jmin(halo)
            1231     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
            1232     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
            1233     7   p   8s                            enddo
            1234     6                                  enddo
            1235     5                               endif
            1236     4                            elseif (ADM_rgn_vtab(ADM_dir,ADM_s,rgnid,2)==ADM_e) then
            1237     5                               if (halo>=2) then
            1238     5                                  m=m+1
            1239     5                                  rsize_r2r(m,halo,rgnid)=halo*(halo-1)
            1240     5                                  sourceid_r2r(m,halo,rgnid)=ADM_rgn_vtab(ADM_rid,ADM_s,rgnid,2)
            1241     5                                  !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207) removed by teraim
            1242     5                                  n=0
            1243     6                                  do j=jmin(halo)-halo,jmin(halo)-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<< Loop-information  End >>>
            1244     7  pp   8s                            do i=imax(halo)+1+(j-(jmin(halo)-1)) &
            1245     7                                          ,imax(halo)+(halo-1)+(j-(jmin(halo)-1))
            1246     7   p   8s                               n=n+1
            1247     7   p   8s                               in=j+jmax(halo)-2*jmin(halo)+imin(halo)+1
            1248     7   p   8s                               jn=-i+j+imax(halo)+jmax(halo)-jmin(halo)+2
            1249     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
            1250     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
            1251     7   p   8s                            enddo
            1252     6                                  enddo
            1253     5                               endif
            1254     4                            elseif (ADM_rgn_vtab(ADM_dir,ADM_s,rgnid,2)==ADM_w) then
            1255     5                               if (halo>=1) then
            1256     5                                  m=m+1
            1257     5                                  rsize_r2r(m,halo,rgnid)=halo*halo
            1258     5                                  sourceid_r2r(m,halo,rgnid)=ADM_rgn_vtab(ADM_rid,ADM_s,rgnid,2)
            1259     5                                  !mrecv_r2r(sourceid_r2r(m,halo,rgnid),halo,rgnid)=m !(20101207)removed by teraim
            1260     5                                  n=0
            1261     6                                  do i=imax(halo)+1,imax(halo)+halo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<< Loop-information  End >>>
            1262     7  pp   8s                            do j=jmin(halo)-(halo-1)+(i-(imax(halo)+1)) &
            1263     7                                          ,jmin(halo)+(i-(imax(halo)+1))
            1264     7   p   8s                               n=n+1
            1265     7   p   8s                               in=i-j-imax(halo)+jmin(halo)+imin(halo)-1
            1266     7   p   8s                               jn=i-imax(halo)+jmin(halo)-1
            1267     7   p   8s                               rlist_r2r(n,m,halo,rgnid)=suf(i,j,gall(halo))
            1268     7   p   8s                               qlist_r2r(n,m,halo,rgnid)=suf(in,jn,gall(halo))
            1269     7   p   8s                            enddo
            1270     6                                  enddo
            1271     5                               endif
            1272     4                            endif
            1273     3                            !
            1274     3                         endif
            1275     2                         !
            1276     2                         maxcommrecv_r2r(halo,rgnid)=m
            1277     2                         !
            1278     3                         if ((ADM_rgn_vnum(ADM_w,rgnid)==3)) then
            1279     4                            if ((ADM_rgn_etab(ADM_dir,ADM_nw,rgnid)==ADM_ne)) then
            1280     4                               n_hemisphere_copy(ADM_w,halo,rgnid)=1
            1281     4                            elseif ((ADM_rgn_etab(ADM_dir,ADM_nw,rgnid)==ADM_se)) then
            1282     4                               s_hemisphere_copy(ADM_w,halo,rgnid)=1
            1283     4                            endif
            1284     3                         endif
            1285     3                         if ((ADM_rgn_vnum(ADM_n,rgnid)==5)) then
            1286     3                            n_hemisphere_copy(ADM_n,halo,rgnid)=1
            1287     3                         endif
            1288     3                         if ((ADM_rgn_vnum(ADM_s,rgnid)==3)) then
            1289     3                            n_hemisphere_copy(ADM_s,halo,rgnid)=1
            1290     3                         endif
            1291     3                         if ((ADM_rgn_vnum(ADM_e,rgnid)==3)) then
            1292     4                            if ((ADM_rgn_etab(ADM_dir,ADM_ne,rgnid)==ADM_nw)) then
            1293     4                               n_hemisphere_copy(ADM_e,halo,rgnid)=1
            1294     4                            elseif ((ADM_rgn_etab(ADM_dir,ADM_ne,rgnid)==ADM_sw)) then
            1295     4                               s_hemisphere_copy(ADM_e,halo,rgnid)=1
            1296     4                            endif
            1297     3                         endif
            1298     3                         if ((ADM_rgn_vnum(ADM_s,rgnid)==5)) then
            1299     3                            s_hemisphere_copy(ADM_s,halo,rgnid)=1
            1300     3                         endif
            1301     3                         if ((ADM_rgn_vnum(ADM_n,rgnid)==3)) then
            1302     3                            s_hemisphere_copy(ADM_n,halo,rgnid)=1
            1303     3                         endif
            1304     2                         !
            1305     2                      enddo !loop l
            1306     1                      !
            1307     1                      !(20101207) removed by teraim
            1308     1                      !do rrgnid=1,ADM_rgn_nmax
            1309     1                      !   do srgnid=1,ADM_rgn_nmax
            1310     1                      !      sendtag_r2r(rrgnid,halo,srgnid)=rrgnid+ADM_rgn_nmax*(srgnid-1)
            1311     1                      !      recvtag_r2r(srgnid,halo,rrgnid)=sendtag_r2r(rrgnid,halo,srgnid)
            1312     1               !      !       write(*,*) 'sendtag_r2r',ADM_prc_me,rrgnid,srgnid,sendtag_r2r(rrgnid,halo,srgnid)
            1313     1                      !   enddo
            1314     1                      !enddo
            1315     1                      !
            1316     1                   enddo !loop halo
            1317                         !
            1318     1       4           do l=1,ADM_rgn_nmax
            1319     1       4              call mpi_bcast(                  &
            1320     1                           rsize_r2r(1,1,l),            &
            1321     1                           max_comm_r2r*halomax,  &
            1322     1                           mpi_integer,                &
            1323     1                           prc_tab_rev(ptr_prcid,l)-1, &
            1324     1                           ADM_comm_run_world,             &
            1325     1                           ierr)
            1326     1       4           end do
            1327     1       4           do l=1,ADM_rgn_nmax
            1328     1       4              call mpi_bcast(                  &
            1329     1                           sourceid_r2r(1,1,l),            &
            1330     1                           max_comm_r2r*halomax,  &
            1331     1                           mpi_integer,                &
            1332     1                           prc_tab_rev(ptr_prcid,l)-1, &
            1333     1                           ADM_comm_run_world,             &
            1334     1                           ierr)
            1335     1       4           end do
            1336                         !(20101207)removed by teraim
            1337                         !do l=1,ADM_rgn_nmax
            1338                         !   call mpi_bcast(                  &
            1339                         !        mrecv_r2r(1,1,l),            &
            1340                         !        ADM_rgn_nmax*halomax,  &
            1341                         !        mpi_integer,                &
            1342                         !        prc_tab_rev(ptr_prcid,l)-1, &
            1343                         !        ADM_comm_run_world,             &
            1344                         !        ierr)
            1345                         !end do
            1346     1       4           do l=1,ADM_rgn_nmax
            1347     1       4              call mpi_bcast(                  &
            1348     1                           maxcommrecv_r2r(1,l),            &
            1349     1                           1*halomax,  &
            1350     1                           mpi_integer,                &
            1351     1                           prc_tab_rev(ptr_prcid,l)-1, &
            1352     1                           ADM_comm_run_world,             &
            1353     1                           ierr)
            1354     1       4           end do
            1355     1       4           do l=1,ADM_rgn_nmax
            1356     1       4              call mpi_bcast(                  &
            1357     1                           rlist_r2r(1,1,1,l),            &
            1358     1                           max_comm_r2r*max_datasize_r2r*halomax,  &
            1359     1                           mpi_integer,                &
            1360     1                           prc_tab_rev(ptr_prcid,l)-1, &
            1361     1                           ADM_comm_run_world,             &
            1362     1                           ierr)
            1363     1       4           end do
            1364     1       4           do l=1,ADM_rgn_nmax
            1365     1       4              call mpi_bcast(                  &
            1366     1                           qlist_r2r(1,1,1,l),            &
            1367     1                           max_comm_r2r*max_datasize_r2r*halomax,  &
            1368     1                           mpi_integer,                &
            1369     1                           prc_tab_rev(ptr_prcid,l)-1, &
            1370     1                           ADM_comm_run_world,             &
            1371     1                           ierr)
            1372     1       4           end do
            1373     1       4           do l=1,ADM_rgn_nmax
            1374     1       4              call mpi_bcast(                  &
            1375     1                           n_hemisphere_copy(1,1,l),            &
            1376     1                           (ADM_s-ADM_w+1)*halomax,  &
            1377     1                           mpi_integer,                &
            1378     1                           prc_tab_rev(ptr_prcid,l)-1, &
            1379     1                           ADM_comm_run_world,             &
            1380     1                           ierr)
            1381     1       4           end do
            1382     1       4           do l=1,ADM_rgn_nmax
            1383     1       4              call mpi_bcast(                  &
            1384     1                           s_hemisphere_copy(1,1,l),            &
            1385     1                           (ADM_s-ADM_w+1)*halomax,  &
            1386     1                           mpi_integer,                &
            1387     1                           prc_tab_rev(ptr_prcid,l)-1, &
            1388     1                           ADM_comm_run_world,             &
            1389     1                           ierr)
            1390     1       4           end do
            1391                         call mpi_barrier(ADM_comm_run_world,ierr)
            1392                         !
            1393     1                   do halo=1,halomax
            1394     2                      do ls=1,ADM_prc_rnum(ADM_prc_me)
            1395     2                         srgnid=ADM_prc_tab(ls,ADM_prc_me)
            1396     2                         ms=0
            1397     3                         do lr=1,ADM_rgn_nmax
            1398     3                            rrgnid=lr
            1399     4                            do mr=1,maxcommrecv_r2r(halo,rrgnid)
            1400     5                               if (srgnid==sourceid_r2r(mr,halo,rrgnid)) then
            1401     5                                  ms=ms+1
            1402     5                                  !
            1403     5                                  !(20101207)added by teraim
            1404     6                                  if(ADM_rgn2prc(srgnid)==ADM_prc_me) then
            1405     6                                    msend_r2r(rrgnid,halo,srgnid)=ms
            1406     6                                  else
            1407     6                                    write(*,*)"This process is abort because irregular access in msend_r2r."
            1408     6                                    exit
            1409     6                                  endif
            1410     5                                  !
            1411     5                                  destid_r2r(ms,halo,srgnid)=rrgnid
            1412     5                                  ssize_r2r(ms,halo,srgnid)=rsize_r2r(mr,halo,rrgnid)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1413     6  pp   8s                         do n=1,rsize_r2r(mr,halo,rrgnid)
            1414     6   p   8s                            slist_r2r(n,ms,halo,srgnid)=qlist_r2r(n,mr,halo,rrgnid)
            1415     6   p   8s                         enddo
            1416     5                               endif
            1417     4                            enddo
            1418     3                         enddo
            1419     2                         maxcommsend_r2r(halo,srgnid)=ms
            1420     2                      enddo
            1421     1                   enddo !loop halo
            1422                         !
            1423                         call mpi_barrier(ADM_comm_run_world,ierr)
            1424     1       4           do l=1,ADM_rgn_nmax
            1425     1       4              call mpi_bcast(                  &
            1426     1                           destid_r2r(1,1,l),            &
            1427     1                           max_comm_r2r*halomax,  &
            1428     1                           mpi_integer,                &
            1429     1                           prc_tab_rev(ptr_prcid,l)-1, &
            1430     1                           ADM_comm_run_world,             &
            1431     1                           ierr)
            1432     1       4           end do
            1433     1       4           do l=1,ADM_rgn_nmax
            1434     1       4              call mpi_bcast(                  &
            1435     1                           ssize_r2r(1,1,l),            &
            1436     1                           max_comm_r2r*halomax,  &
            1437     1                           mpi_integer,                &
            1438     1                           prc_tab_rev(ptr_prcid,l)-1, &
            1439     1                           ADM_comm_run_world,             &
            1440     1                           ierr)
            1441     1       4           end do
            1442                         !(20101207)removed by teraim
            1443                         !do l=1,ADM_rgn_nmax
            1444                         !   call mpi_bcast(                  &
            1445                         !        msend_r2r(1,1,l),            &
            1446                         !        ADM_rgn_nmax*halomax,  &
            1447                         !        mpi_integer,                &
            1448                         !        prc_tab_rev(ptr_prcid,l)-1, &
            1449                         !        ADM_comm_run_world,             &
            1450                         !        ierr)
            1451                         !end do
            1452     1       4           do l=1,ADM_rgn_nmax
            1453     1       4              call mpi_bcast(                  &
            1454     1                           slist_r2r(1,1,1,l),            &
            1455     1                           max_comm_r2r*max_datasize_r2r*halomax,  &
            1456     1                           mpi_integer,                &
            1457     1                           prc_tab_rev(ptr_prcid,l)-1, &
            1458     1                           ADM_comm_run_world,             &
            1459     1                           ierr)
            1460     1       4           end do
            1461     1       4           do l=1,ADM_rgn_nmax
            1462     1       4              call mpi_bcast(                  &
            1463     1                           maxcommsend_r2r(1,l),            &
            1464     1                           1*halomax,  &
            1465     1                           mpi_integer,                &
            1466     1                           prc_tab_rev(ptr_prcid,l)-1, &
            1467     1                           ADM_comm_run_world,             &
            1468     1                           ierr)
            1469     1       4           end do
            1470                         !
            1471                         allocate(sendbuf_p2r(kmax*max_varmax*2, &
            1472                              ADM_rgn_nmax_pl))
            1473                         allocate(recvbuf_p2r(kmax*max_varmax*2, &
            1474                              ADM_rgn_nmax_pl))
            1475                         allocate(recvtag_p2r(max_comm_p2r,ADM_npl:ADM_spl))
            1476                         allocate(sendtag_p2r(max_comm_p2r,ADM_npl:ADM_spl))
            1477     1                   do pl=ADM_npl,ADM_spl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1231
                                   <<< Loop-information  End >>>
            1478     2  pp   8s             do p=1,ADM_vlink_nmax
            1479     2   p   8s                recvtag_p2r(p,pl)=ADM_rgn_nmax*ADM_rgn_nmax+p+ADM_vlink_nmax*(pl-1)
            1480     2   p   8s                sendtag_p2r(p,pl)=ADM_rgn_nmax*ADM_rgn_nmax+p+ADM_vlink_nmax*(pl-1)
            1481     2               
            1482     2               !          write(*,*) 'sendtag_p2r',ADM_prc_me,p,pl,halo,sendtag_p2r(p,pl)
            1483     2               
            1484     2   p   8s             enddo
            1485     1                   enddo
            1486                         !
            1487                         allocate(clist(max_varmax))
            1488                         !
            1489                         call mpi_barrier(ADM_comm_run_world,ierr)
            1490                         !
            1491                     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            1492                     !!!!!!  re-setup comm_table !!!!!!
            1493                     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            1494                         rank_me=ADM_prc_me-1
            1495                         max_comm_prc=min(ADM_prc_all,max_comm_r2r*ADM_lall+2*max_comm_r2p)
            1496                         !
            1497                         allocate(n_nspl(ADM_npl:ADM_spl,halomax))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 364
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1498     1  pp   6s          do halo=1,halomax
            1499     1   p   6s             n_nspl(ADM_npl,halo)=suf(imin(halo)+0,jmax(halo)+1,gall(halo))
            1500     1   p   6s             n_nspl(ADM_spl,halo)=suf(imax(halo)+1,jmin(halo)+0,gall(halo))
            1501     1   p   6s          enddo
            1502                         !
            1503                         allocate(temp_sendorder(0:ADM_prc_all-1,halomax))
            1504                         allocate(temp_recvorder(0:ADM_prc_all-1,halomax))
            1505                         !
            1506                         !--------------------------------------------------
            1507                         allocate(romax(halomax))
            1508                         allocate(somax(halomax))
            1509                         allocate(sourcerank(max_comm_prc,halomax))
            1510                         allocate(destrank(max_comm_prc,halomax))
            1511                         allocate(rsize(max_comm_prc,halomax))
            1512                         allocate(ssize(max_comm_prc,halomax))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2000
                                   <<< Loop-information  End >>>
            1513        pp    s          romax(:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2000
                                   <<< Loop-information  End >>>
            1514        pp    s          somax(:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<< Loop-information  End >>>
            1515        pp    s          sourcerank(:,:)=-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<< Loop-information  End >>>
            1516        pp    s          destrank(:,:)=-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<< Loop-information  End >>>
            1517        pp    s          rsize(:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<< Loop-information  End >>>
            1518        pp    s          ssize(:,:)=0
            1519                         !--------------------------------------------------
            1520                         !
            1521                         maxn=((gmax(halomax)-gmin(halomax)+1)+2)*halomax
            1522                         maxm=max_comm_r2r+1
            1523                         maxl=ADM_lall+2
            1524                         !----
            1525                         maxn_pl=halomax*(halomax+1)/2
            1526                         maxm_pl=ADM_vlink_nmax
            1527                         maxl_pl=(ADM_spl-ADM_npl+1)
            1528                         !----
            1529                         maxn_r2r=(gmax(halomax)-gmin(halomax)+1)*halomax
            1530                         maxm_r2r=max_comm_r2r
            1531                         maxl_r2r=ADM_lall
            1532                         !----
            1533                         maxn_r2p=halomax*(halomax+1)/2
            1534                         maxm_r2p=ADM_vlink_nmax
            1535                         maxl_r2p=(ADM_spl-ADM_npl+1)
            1536                         !----
            1537                         maxn_p2r=1
            1538                         maxm_p2r=ADM_vlink_nmax
            1539                         maxl_p2r=(ADM_spl-ADM_npl+1)
            1540                         !----
            1541                         maxn_sgp=halomax
            1542                         maxm_sgp=4
            1543                         maxl_sgp=12
            1544                         !
            1545                         !--------------------------------------------------
            1546                         !  for send
            1547                         !--------------------------------------------------
            1548                         allocate(nsmax(max_comm_prc,halomax))
            1549                         allocate(sendinfo(elemsize_comm,maxm*maxl,max_comm_prc,halomax))
            1550                         allocate(sendlist(maxn,maxm*maxl,max_comm_prc,halomax))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<< Loop-information  End >>>
            1551        pp    s          nsmax(:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1552        pp    s          sendinfo(:,:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1553        pp    s          sendlist(:,:,:,:)=0
            1554                         allocate(nsmax_pl(max_comm_prc,halomax))
            1555                         allocate(sendinfo_pl(elemsize_comm,maxm_pl*maxl_pl,max_comm_prc,halomax))
            1556                         allocate(sendlist_pl(maxn_pl,maxm_pl*maxl_pl,max_comm_prc,halomax))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<< Loop-information  End >>>
            1557        pp    s          nsmax_pl(:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1558        pp    s          sendinfo_pl(:,:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1559        pp    s          sendlist_pl(:,:,:,:)=0
            1560                         !--------------------------------------------------
            1561                         !
            1562                         !--------------------------------------------------
            1563                         !  for copy
            1564                         !--------------------------------------------------
            1565                         allocate(ncmax_r2r(halomax))
            1566                         allocate(copyinfo_r2r(elemsize_copy,maxm_r2r*maxl_r2r,halomax))
            1567                         allocate(recvlist_r2r(maxn_r2r,maxm_r2r*maxl_r2r,halomax))
            1568                         allocate(sendlist_r2r(maxn_r2r,maxm_r2r*maxl_r2r,halomax))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2000
                                   <<< Loop-information  End >>>
            1569        pp    s          ncmax_r2r(:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1570        pp    s          copyinfo_r2r(:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1571        pp    s          recvlist_r2r(:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1572        pp    s          sendlist_r2r(:,:,:)=0
            1573                         !--------------------------------------------------
            1574                         allocate(ncmax_r2p(halomax))
            1575                         allocate(copyinfo_r2p(elemsize_copy,maxm_r2p*maxl_r2p,halomax))
            1576                         allocate(recvlist_r2p(maxn_r2p,maxm_r2p*maxl_r2p,halomax))
            1577                         allocate(sendlist_r2p(maxn_r2p,maxm_r2p*maxl_r2p,halomax))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2000
                                   <<< Loop-information  End >>>
            1578        pp    s          ncmax_r2p(:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1579        pp    s          copyinfo_r2p(:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1580        pp    s          recvlist_r2p(:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1581        pp    s          sendlist_r2p(:,:,:)=0
            1582                         !--------------------------------------------------
            1583                         allocate(ncmax_p2r(halomax))
            1584                         allocate(copyinfo_p2r(elemsize_copy,maxm_p2r*maxl_p2r,halomax))
            1585                         allocate(recvlist_p2r(maxn_p2r,maxm_p2r*maxl_p2r,halomax))
            1586                         allocate(sendlist_p2r(maxn_p2r,maxm_p2r*maxl_p2r,halomax))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2000
                                   <<< Loop-information  End >>>
            1587        pp    s          ncmax_p2r(:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1588        pp    s          copyinfo_p2r(:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1589        pp    s          recvlist_p2r(:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1590        pp    s          sendlist_p2r(:,:,:)=0
            1591                         !--------------------------------------------------
            1592                         !
            1593                         !--------------------------------------------------
            1594                         !  for recv
            1595                         !--------------------------------------------------
            1596                         allocate(nrmax(max_comm_prc,halomax))
            1597                         allocate(recvinfo(elemsize_comm,maxm*maxl,max_comm_prc,halomax))
            1598                         allocate(recvlist(maxn,maxm*maxl,max_comm_prc,halomax))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<< Loop-information  End >>>
            1599        pp    s          nrmax(:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1600        pp    s          recvinfo(:,:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1601        pp    s          recvlist(:,:,:,:)=0
            1602                         allocate(nrmax_pl(max_comm_prc,halomax))
            1603                         allocate(recvinfo_pl(elemsize_comm,maxm_pl*maxl_pl,max_comm_prc,halomax))
            1604                         allocate(recvlist_pl(maxn_pl,maxm_pl*maxl_pl,max_comm_prc,halomax))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<< Loop-information  End >>>
            1605        pp    s          nrmax_pl(:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1606        pp    s          recvinfo_pl(:,:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1607        pp    s          recvlist_pl(:,:,:,:)=0
            1608                         !--------------------------------------------------
            1609                         allocate(temp_dest_rgn(maxm*maxl,max_comm_prc,halomax))
            1610                         allocate(temp_src_rgn(maxm*maxl,max_comm_prc,halomax))
            1611                         allocate(temp_dest_rgn_pl(maxm_pl*maxl_pl,max_comm_prc,halomax))
            1612                         allocate(temp_src_rgn_pl(maxm_pl*maxl_pl,max_comm_prc,halomax))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1613        pp    s          temp_dest_rgn(:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1614        pp    s          temp_dest_rgn_pl(:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1615        pp    s          temp_src_rgn(:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1616        pp    s          temp_src_rgn_pl(:,:,:)=0
            1617                         !--------------------------------------------------
            1618                         !
            1619     1                   do halo=1,halomax
            1620     2                      do l=1,ADM_lall
            1621     2                         rgnid=ADM_prc_tab(l,ADM_prc_me)
            1622     3                         do m=1,maxcommrecv_r2r(halo,rgnid)
            1623     3                            srank=prc_tab_rev(ptr_prcid,sourceid_r2r(m,halo,rgnid))-1
            1624     4                            if (srank/=rank_me) then
            1625     4                               ck=0
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 14
                                   <<<      sourcerank: 14
                                   <<< Loop-information  End >>>
            1626     5       8                       loop_ro1:do ro=1,romax(halo)
            1627     5       8                          if (srank==sourcerank(ro,halo)) exit loop_ro1
            1628     5       8                          ck=ck+1
            1629     5       8                       enddo loop_ro1
            1630     5                               if (ck==romax(halo)) then
            1631     5                                  romax(halo)=romax(halo)+1
            1632     5                                  ro=romax(halo)
            1633     5                                  sourcerank(ro,halo)=srank
            1634     5                                  temp_recvorder(srank,halo)=ro
            1635     5                               endif
            1636     4                               ro=temp_recvorder(srank,halo)
            1637     4                               nrmax(ro,halo)=nrmax(ro,halo)+1
            1638     4                               nr=nrmax(ro,halo)
            1639     4                               recvinfo(SIZE_COMM,nr,ro,halo)=rsize_r2r(m,halo,rgnid)
            1640     4                               recvinfo(LRGNID_COMM,nr,ro,halo)=l
            1641     4                               temp_src_rgn(nr,ro,halo)=sourceid_r2r(m,halo,rgnid)
            1642     4                               rs=recvinfo(SIZE_COMM,nr,ro,halo)
            1643     4                               rsize(ro,halo)=rsize(ro,halo)+rs
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1644     5  pp   8s                      do n=1,rs
            1645     5   p   8s                         recvlist(n,nr,ro,halo)=rlist_r2r(n,m,halo,rgnid)
            1646     5   p   8s                      enddo
            1647     4                            else
            1648     4                               ncmax_r2r(halo)=ncmax_r2r(halo)+1
            1649     4                               nc=ncmax_r2r(halo)
            1650     4                               copyinfo_r2r(SIZE_COPY,nc,halo)=rsize_r2r(m,halo,rgnid)
            1651     4                               copyinfo_r2r(LRGNID_COPY,nc,halo)=l
            1652     4                               copyinfo_r2r(SRC_LRGNID_COPY,nc,halo) &
            1653     4                                    =prc_tab_rev(ptr_lrgnid,sourceid_r2r(m,halo,rgnid))
            1654     4                               cs=copyinfo_r2r(SIZE_COPY,nc,halo)
            1655     4                               srgnid=sourceid_r2r(m,halo,rgnid)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 44
                                   <<<      slist_r2r: 12, sendlist_r2r: 12
                                   <<<      rlist_r2r: 10, recvlist_r2r: 10
                                   <<< Loop-information  End >>>
            1656     5       6                       do n=1,cs
            1657     5       6                          recvlist_r2r(n,nc,halo)=rlist_r2r(n,m,halo,rgnid)
            1658     5                                  !
            1659     5                                  !(20101207)added by teraim
            1660     6       6                          if(ADM_rgn2prc(srgnid)==ADM_prc_me) then
            1661     6       6                            sendlist_r2r(n,nc,halo)=slist_r2r(n,msend_r2r(rgnid,halo,srgnid),halo,srgnid)
            1662     6       6                          else
            1663     6       6                            write(*,*)"This process is abort because irregular access is msend_r2r."
            1664     6       6                            exit
            1665     6       6                          endif
            1666     5                                  !
            1667     5       6                       enddo
            1668     4                            endif
            1669     3                         enddo !loop m
            1670     2                         !enddo !loop l
            1671     2                         !!
            1672     2                         !do l=1,ADM_lall
            1673     2                         !  rgnid=ADM_prc_tab(l,ADM_prc_me)
            1674     3                         do m=1,maxcommsend_r2r(halo,rgnid)
            1675     3                            drank=prc_tab_rev(ptr_prcid,destid_r2r(m,halo,rgnid))-1
            1676     4                            if (drank/=rank_me) then
            1677     4                               ck=0
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 14
                                   <<<      destrank: 14
                                   <<< Loop-information  End >>>
            1678     5       8                       loop_so1:do so=1,somax(halo)
            1679     5       8                          if (drank==destrank(so,halo)) exit loop_so1
            1680     5       8                          ck=ck+1
            1681     5       8                       enddo loop_so1
            1682     5                               if (ck==somax(halo)) then
            1683     5                                  somax(halo)=somax(halo)+1
            1684     5                                  so=somax(halo)
            1685     5                                  destrank(so,halo)=drank
            1686     5                                  temp_sendorder(drank,halo)=so
            1687     5                               endif
            1688     4                               so=temp_sendorder(drank,halo)
            1689     4                               nsmax(so,halo)=nsmax(so,halo)+1
            1690     4                               ns=nsmax(so,halo)
            1691     4                               sendinfo(SIZE_COMM,ns,so,halo)=ssize_r2r(m,halo,rgnid)
            1692     4                               sendinfo(LRGNID_COMM,ns,so,halo)=l
            1693     4                               temp_dest_rgn(ns,so,halo)=destid_r2r(m,halo,rgnid)
            1694     4                               ss=sendinfo(SIZE_COMM,ns,so,halo)
            1695     4                               ssize(so,halo)=ssize(so,halo)+ss
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1696     5  pp   8s                      do n=1,ss
            1697     5   p   8s                         sendlist(n,ns,so,halo)=slist_r2r(n,m,halo,rgnid)
            1698     5   p   8s                      enddo
            1699     4                            endif
            1700     3                         enddo !loop m
            1701     2                      enddo !loop l
            1702     1                      !enddo !loop halo
            1703     1                      !do halo=1,halomax
            1704     1                      if(comm_pl) call re_setup_pl_comm_info ! T.Ohno 110721
            1705     1                   enddo !loop halo
            1706                         deallocate(temp_sendorder)
            1707                         deallocate(temp_recvorder)
            1708                         !
            1709                         !allocate(temp_sb(ADM_rgn_nmax+2,halomax,ADM_rgn_nmax+2)) !(20101207) removed by teraim
            1710                         allocate(tsb(somax(halomax)))
            1711                         !temp_sb(:,:,:)=0 !(20101207) removed by teraim
            1712                     
            1713                         call init_tempsb !(20101207) added by teraim
            1714                     
            1715     1                   do halo=1,halomax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2000
                                   <<< Loop-information  End >>>
            1716     1  pp    s             tsb(:)=0
            1717     2                      do so=1,somax(halo)
            1718     3       2                 do ns=1,nsmax(so,halo)
            1719     3       2                    ss=sendinfo(SIZE_COMM,ns,so,halo)
            1720     3       2                    srgnid=ADM_prc_tab(sendinfo(LRGNID_COMM,ns,so,halo),ADM_prc_me)
            1721     3       2                    rrgnid=temp_dest_rgn(ns,so,halo)
            1722     3       2                    sendinfo(BASE_COMM,ns,so,halo)=tsb(so)
            1723     3                            !temp_sb(rrgnid,halo,srgnid)=tsb(so) !(20101207)removed by teraim
            1724     3       2                    call add_tempsb(rrgnid, srgnid, tsb(so)) !(20101207)added by teraim
            1725     3       2                    tsb(so)=tsb(so)+ss
            1726     3       2                 enddo
            1727     3       2                 do ns=1,nsmax_pl(so,halo)
            1728     3       2                    ss=sendinfo_pl(SIZE_COMM,ns,so,halo)
            1729     3       2                    pl=sendinfo_pl(LRGNID_COMM,ns,so,halo)
            1730     3       2                    srgnid=ADM_rgn_nmax+pl
            1731     3       2                    rrgnid=temp_dest_rgn_pl(ns,so,halo)
            1732     3       2                    sendinfo_pl(BASE_COMM,ns,so,halo)=tsb(so)
            1733     3                            !temp_sb(rrgnid,halo,srgnid)=tsb(so) !(20101207)removed by teraim
            1734     3       2                    call add_tempsb(rrgnid, srgnid, tsb(so)) !(20101207)added by teraim
            1735     3       2                    tsb(so)=tsb(so)+ss
            1736     3       2                 enddo
            1737     2                      enddo
            1738     1                   enddo
            1739                         deallocate(tsb)
            1740                         !
            1741                         !(20101207)removed by teraim
            1742                         !call mpi_barrier(ADM_comm_run_world,ierr)
            1743                         !do l=1,ADM_rgn_nmax
            1744                         !   call mpi_bcast(                  &
            1745                         !        temp_sb(1,1,l),        &
            1746                         !        (ADM_rgn_nmax+2)*halomax,      &
            1747                         !        mpi_integer,                &
            1748                         !        prc_tab_rev(ptr_prcid,l)-1, &
            1749                         !        ADM_comm_run_world,             &
            1750                         !        ierr)
            1751                         !enddo
            1752                         !do pl=ADM_npl,ADM_spl
            1753                         !   call mpi_bcast(                  &
            1754                         !        temp_sb(1,1,ADM_rgn_nmax+pl),       &
            1755                         !        (ADM_rgn_nmax+2)*halomax,      &
            1756                         !        mpi_integer,                &
            1757                         !        ADM_prc_nspl(pl)-1,         &
            1758                         !        ADM_comm_run_world,             &
            1759                         !        ierr)
            1760                         !enddo
            1761                         !call mpi_barrier(ADM_comm_run_world,ierr)
            1762                         !
            1763                         !(20101207)added by teraim
            1764                         call mpi_barrier(ADM_comm_run_world,ierr)
            1765     1       2           do l=1,ADM_rgn_nmax
            1766     1       2              call mpi_bcast(                  &
            1767     1                           tempsb(l)%col,              &
            1768     1                           max_size,                   &
            1769     1                           mpi_integer,                &
            1770     1                           prc_tab_rev(ptr_prcid,l)-1, &
            1771     1                           ADM_comm_run_world,         &
            1772     1                           ierr)
            1773     1       2              call mpi_bcast(                  &
            1774     1                           tempsb(l)%val,              &
            1775     1                           max_size,                   &
            1776     1                           mpi_integer,                &
            1777     1                           prc_tab_rev(ptr_prcid,l)-1, &
            1778     1                           ADM_comm_run_world,         &
            1779     1                           ierr)
            1780     1       2           enddo
            1781     1                   if(comm_pl) then ! T.Ohno 110721
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    FULL UNROLLING
                                   <<< Loop-information  End >>>
            1782     2       f             do pl=ADM_npl,ADM_spl
            1783     2       f                call mpi_bcast(                    &
            1784     2                             tempsb(ADM_rgn_nmax+pl)%col,  &
            1785     2                             max_size,                     &
            1786     2                             mpi_integer,                  &
            1787     2                             ADM_prc_nspl(pl)-1,           &
            1788     2                             ADM_comm_run_world,           &
            1789     2                             ierr)
            1790     2       f                call mpi_bcast(                    &
            1791     2                             tempsb(ADM_rgn_nmax+pl)%val,  &
            1792     2                             max_size,                     &
            1793     2                             mpi_integer,                  &
            1794     2                             ADM_prc_nspl(pl)-1,           &
            1795     2                             ADM_comm_run_world,           &
            1796     2                             ierr)
            1797     2       f             enddo
            1798     1                   endif ! T.Ohno 110721
            1799                         call mpi_barrier(ADM_comm_run_world,ierr)
            1800                         !
            1801                         !call show_tempsb !(20101209) added by teraim
            1802                         !
            1803     1                   do halo=1,halomax
            1804     2                      do ro=1,romax(halo)
            1805     3       2                 do nr=1,nrmax(ro,halo)
            1806     3       2                    rrgnid=ADM_prc_tab(recvinfo(LRGNID_COMM,nr,ro,halo),ADM_prc_me)
            1807     3       2                    srgnid=temp_src_rgn(nr,ro,halo)
            1808     3                            !recvinfo(BASE_COMM,nr,ro,halo)=temp_sb(rrgnid,halo,srgnid) !(20101207)removed by teraim
            1809     3                            !(20101207) added by teraim
            1810     3       2                    call get_tempsb(rrgnid,srgnid,ret)
            1811     3       2                    recvinfo(BASE_COMM,nr,ro,halo)=ret
            1812     3       2                 enddo
            1813     3       2                 do nr=1,nrmax_pl(ro,halo)
            1814     3       2                    pl=recvinfo_pl(LRGNID_COMM,nr,ro,halo)
            1815     3       2                    rrgnid=pl+ADM_rgn_nmax
            1816     3       2                    srgnid=temp_src_rgn_pl(nr,ro,halo)
            1817     3                            !recvinfo_pl(BASE_COMM,nr,ro,halo)=temp_sb(rrgnid,halo,srgnid) !(20101207)removed by teraim
            1818     3                            !(20101207) added by teraim
            1819     3       2                    call get_tempsb(rrgnid,srgnid,ret)
            1820     3       2                    recvinfo_pl(BASE_COMM,nr,ro,halo)=ret
            1821     3       2                 enddo
            1822     2                      enddo !loop ro
            1823     1                   enddo !loop halo
            1824                         deallocate(temp_dest_rgn)
            1825                         deallocate(temp_dest_rgn_pl)
            1826                         deallocate(temp_src_rgn)
            1827                         deallocate(temp_src_rgn_pl)
            1828                         !deallocate(temp_sb) !(20101207)removed by teraim
            1829                         call finalize_tempsb !(20101207)added by teraim
            1830                         !
            1831                         allocate(recvtag(romax(halomax),halomax))
            1832                         allocate(sendtag(somax(halomax),halomax))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<< Loop-information  End >>>
            1833        pp    s          recvtag(:,:)=-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<< Loop-information  End >>>
            1834        pp    s          sendtag(:,:)=-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1835     1  pp               do halo=1,halomax
            1836     2   p    s             do ro=1,romax(halo)
            1837     2   p    s                recvtag(ro,halo)=rank_me
            1838     2   p    s             enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 942
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1839     2  pp   8s             do so=1,somax(halo)
            1840     2   p   8s                sendtag(so,halo)=destrank(so,halo)
            1841     2   p   8s             enddo
            1842     1   p               enddo
            1843                     !    maxdatasize=(max_comm_r2r*(gmax(halomax)-gmin(halomax)+1)+2*max_comm_r2p*(halomax+1)/2)*halomax*kmax*max_varmax
            1844                     !    maxdatasize=(maxn_r2r*maxm_r2r*maxl_r2r+maxn_r2p*maxm_r2p*maxl_r2p+maxn_p2r*maxm_p2r*maxl_p2r)*kmax*max_varmax
            1845                         maxdatasize_s=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1600
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1846     1  pp  10s          do so=1,somax(halomax)
            1847     1   p  10s            maxdatasize_s=maxdatasize_s+ssize(so,halomax)*kmax*max_varmax
            1848     1   p  10s          enddo
            1849                         maxdatasize_r=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1600
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1850     1  pp  10s          do ro=1,romax(halomax)
            1851     1   p  10s            maxdatasize_r=maxdatasize_r+rsize(ro,halomax)*kmax*max_varmax
            1852     1   p  10s          enddo
            1853                         allocate(recvbuf(maxdatasize_r,romax(halomax)))
            1854                         allocate(sendbuf(maxdatasize_s,somax(halomax)))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1855        pp    v          recvbuf(:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1856        pp    v          sendbuf(:,:)=0
            1857                     
            1858                     !!    allocate(comm_dbg_recvbuf(maxdatasize_r,romax(halomax),2)) !iga
            1859                     !!    allocate(comm_dbg_sendbuf(maxdatasize_s,somax(halomax),2)) !iga
            1860                     !!    comm_dbg_recvbuf=CNST_UNDEF !iga
            1861                     !!    comm_dbg_sendbuf=CNST_UNDEF !iga
            1862                     
            1863                         !
            1864                         allocate(ncmax_sgp(halomax))
            1865                         allocate(copyinfo_sgp(elemsize_copy,maxm_sgp*maxl_sgp,halomax))
            1866                         allocate(recvlist_sgp(maxn_sgp,maxm_sgp*maxl_sgp,halomax))
            1867                         allocate(sendlist_sgp(maxn_sgp,maxm_sgp*maxl_sgp,halomax))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2000
                                   <<< Loop-information  End >>>
            1868        pp    s          ncmax_sgp(:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1869        pp    s          copyinfo_sgp(:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1870        pp    s          recvlist_sgp(:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1871        pp    s          sendlist_sgp(:,:,:)=0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1872     1  pp               do halo=1,halomax
            1873     1   p                  ncmax_sgp(halo)=0
            1874     2   p                  do l=1,ADM_lall
            1875     2   p                     rgnid=ADM_prc_tab(l,ADM_prc_me)
            1876     3   p                     if (n_hemisphere_copy(ADM_w,halo,rgnid)==1) then
            1877     3   p                        ncmax_sgp(halo)=ncmax_sgp(halo)+1
            1878     3   p                        nc=ncmax_sgp(halo)
            1879     3   p                        copyinfo_sgp(SIZE_COPY,nc,halo)=halo
            1880     3   p                        copyinfo_sgp(LRGNID_COPY,nc,halo)=l
            1881     3   p                        copyinfo_sgp(SRC_LRGNID_COPY,nc,halo)=l
            1882     3   p                        cs=copyinfo_sgp(SIZE_COPY,nc,halo)
            1883     4   p   8s                   do n=1,cs
            1884     4   p   8s                      recvlist_sgp(n,nc,halo)=suf(gmin(halo)-n,gmin(halo)-n,gall(halo))
            1885     4   p   8s                      sendlist_sgp(n,nc,halo)=suf(gmin(halo),gmin(halo)-n,gall(halo))
            1886     4   p   8s                   enddo
            1887     3   p                     endif
            1888     3   p                     if ((n_hemisphere_copy(ADM_n,halo,rgnid)==1)) then
            1889     3   p                        ncmax_sgp(halo)=ncmax_sgp(halo)+1
            1890     3   p                        nc=ncmax_sgp(halo)
            1891     3   p                        copyinfo_sgp(SIZE_COPY,nc,halo)=halo-1
            1892     3   p                        copyinfo_sgp(LRGNID_COPY,nc,halo)=l
            1893     3   p                        copyinfo_sgp(SRC_LRGNID_COPY,nc,halo)=l
            1894     3   p                        cs=copyinfo_sgp(SIZE_COPY,nc,halo)
            1895     4   p   8s                   do n=1,cs
            1896     4   p   8s                      recvlist_sgp(n,nc,halo)=suf(gmin(halo),gmax(halo)+n+1,gall(halo))
            1897     4   p   8s                      sendlist_sgp(n,nc,halo)=suf(gmin(halo)-n,gmax(halo)+1,gall(halo))
            1898     4   p   8s                   enddo
            1899     3   p                     endif
            1900     3   p                     if ((n_hemisphere_copy(ADM_e,halo,rgnid)==1)) then
            1901     3   p                        ncmax_sgp(halo)=ncmax_sgp(halo)+1
            1902     3   p                        nc=ncmax_sgp(halo)
            1903     3   p                        copyinfo_sgp(SIZE_COPY,nc,halo)=halo-1
            1904     3   p                        copyinfo_sgp(LRGNID_COPY,nc,halo)=l
            1905     3   p                        copyinfo_sgp(SRC_LRGNID_COPY,nc,halo)=l
            1906     3   p                        cs=copyinfo_sgp(SIZE_COPY,nc,halo)
            1907     4   p   8s                   do n=1,cs
            1908     4   p   8s                      recvlist_sgp(n,nc,halo)=suf(gmax(halo)+n+1,gmax(halo)+1,gall(halo))
            1909     4   p   8s                      sendlist_sgp(n,nc,halo)=suf(gmax(halo)+n+1,gmax(halo)+n+1,gall(halo))
            1910     4   p   8s                   enddo
            1911     3   p                     endif
            1912     3   p                     if ((n_hemisphere_copy(ADM_s,halo,rgnid)==1)) then
            1913     3   p                        ncmax_sgp(halo)=ncmax_sgp(halo)+1
            1914     3   p                        nc=ncmax_sgp(halo)
            1915     3   p                        copyinfo_sgp(SIZE_COPY,nc,halo)=halo-1
            1916     3   p                        copyinfo_sgp(LRGNID_COPY,nc,halo)=l
            1917     3   p                        copyinfo_sgp(SRC_LRGNID_COPY,nc,halo)=l
            1918     3   p                        cs=copyinfo_sgp(SIZE_COPY,nc,halo)
            1919     4   p   8s                   do n=1,cs
            1920     4   p   8s                      recvlist_sgp(n,nc,halo)=suf(gmax(halo)+1,gmin(halo)-n,gall(halo))
            1921     4   p   8s                      sendlist_sgp(n,nc,halo)=suf(gmax(halo)+n+1,gmin(halo),gall(halo))
            1922     4   p   8s                   enddo
            1923     3   p                     endif
            1924     3   p                     if (s_hemisphere_copy(ADM_w,halo,rgnid)==1) then
            1925     3   p                        ncmax_sgp(halo)=ncmax_sgp(halo)+1
            1926     3   p                        nc=ncmax_sgp(halo)
            1927     3   p                        copyinfo_sgp(SIZE_COPY,nc,halo)=halo
            1928     3   p                        copyinfo_sgp(LRGNID_COPY,nc,halo)=l
            1929     3   p                        copyinfo_sgp(SRC_LRGNID_COPY,nc,halo)=l
            1930     3   p                        cs=copyinfo_sgp(SIZE_COPY,nc,halo)
            1931     4   p   8s                   do n=1,cs
            1932     4   p   8s                      recvlist_sgp(n,nc,halo)=suf(gmin(halo),gmin(halo)-n,gall(halo))
            1933     4   p   8s                      sendlist_sgp(n,nc,halo)=suf(gmin(halo)-n,gmin(halo)-n,gall(halo))
            1934     4   p   8s                   enddo
            1935     3   p                     endif
            1936     3   p                     if ((s_hemisphere_copy(ADM_n,halo,rgnid)==1)) then
            1937     3   p                        ncmax_sgp(halo)=ncmax_sgp(halo)+1
            1938     3   p                        nc=ncmax_sgp(halo)
            1939     3   p                        copyinfo_sgp(SIZE_COPY,nc,halo)=halo-1
            1940     3   p                        copyinfo_sgp(LRGNID_COPY,nc,halo)=l
            1941     3   p                        copyinfo_sgp(SRC_LRGNID_COPY,nc,halo)=l
            1942     3   p                        cs=copyinfo_sgp(SIZE_COPY,nc,halo)
            1943     4   p   8s                   do n=1,cs
            1944     4   p   8s                      recvlist_sgp(n,nc,halo)=suf(gmin(halo)-n,gmax(halo)+1,gall(halo))
            1945     4   p   8s                      sendlist_sgp(n,nc,halo)=suf(gmin(halo),gmax(halo)+n+1,gall(halo))
            1946     4   p   8s                   enddo
            1947     3   p                     endif
            1948     3   p                     if ((s_hemisphere_copy(ADM_e,halo,rgnid)==1)) then
            1949     3   p                        ncmax_sgp(halo)=ncmax_sgp(halo)+1
            1950     3   p                        nc=ncmax_sgp(halo)
            1951     3   p                        copyinfo_sgp(SIZE_COPY,nc,halo)=halo-1
            1952     3   p                        copyinfo_sgp(LRGNID_COPY,nc,halo)=l
            1953     3   p                        copyinfo_sgp(SRC_LRGNID_COPY,nc,halo)=l
            1954     3   p                        cs=copyinfo_sgp(SIZE_COPY,nc,halo)
            1955     4   p   8s                   do n=1,cs
            1956     4   p   8s                      recvlist_sgp(n,nc,halo)=suf(gmax(halo)+n+1,gmax(halo)+1,gall(halo))
            1957     4   p   8s                      sendlist_sgp(n,nc,halo)=suf(gmax(halo)+n+1,gmax(halo)+n+1,gall(halo))
            1958     4   p   8s                   enddo
            1959     3   p                     endif
            1960     3   p                     if ((s_hemisphere_copy(ADM_s,halo,rgnid)==1)) then
            1961     3   p                        ncmax_sgp(halo)=ncmax_sgp(halo)+1
            1962     3   p                        nc=ncmax_sgp(halo)
            1963     3   p                        copyinfo_sgp(SIZE_COPY,nc,halo)=halo-1
            1964     3   p                        copyinfo_sgp(LRGNID_COPY,nc,halo)=l
            1965     3   p                        copyinfo_sgp(SRC_LRGNID_COPY,nc,halo)=l
            1966     3   p                        cs=copyinfo_sgp(SIZE_COPY,nc,halo)
            1967     4   p   8s                   do n=1,cs
            1968     4   p   8s                      recvlist_sgp(n,nc,halo)=suf(gmax(halo)+n+1,gmin(halo),gall(halo))
            1969     4   p   8s                      sendlist_sgp(n,nc,halo)=suf(gmax(halo)+1,gmin(halo)-n,gall(halo))
            1970     4   p   8s                   enddo
            1971     3   p                     endif
            1972     2   p                  enddo !loop l
            1973     1   p               enddo !loop halo
            1974                         !
            1975                         !-- for output_info  ---
            1976                         allocate( src_rank_all(max_comm_prc,halomax,ADM_prc_all))
            1977                         allocate(dest_rank_all(max_comm_prc,halomax,ADM_prc_all))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1978        pp    s          src_rank_all(:,:,:)=-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1979        pp    s          dest_rank_all(:,:,:)=-1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1980        pp   8s          src_rank_all(:,:,ADM_prc_me)=sourcerank(:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1981        pp   8s          dest_rank_all(:,:,ADM_prc_me)=destrank(:,:)
            1982                         call mpi_barrier(ADM_comm_run_world,ierr)
            1983     1       4           do l=1,ADM_prc_all
            1984     1       4              call mpi_bcast(                  &
            1985     1                           src_rank_all(1,1,l),        &
            1986     1                           max_comm_prc*halomax,       &
            1987     1                           mpi_integer,                &
            1988     1                           l-1,                        &
            1989     1                           ADM_comm_run_world,             &
            1990     1                           ierr)
            1991     1       4              call mpi_bcast(                  &
            1992     1                           dest_rank_all(1,1,l),       &
            1993     1                           max_comm_prc*halomax,       &
            1994     1                           mpi_integer,                &
            1995     1                           l-1,                        &
            1996     1                           ADM_comm_run_world,             &
            1997     1                           ierr)
            1998     1       4           enddo
            1999                         !
            2000                         call MPI_Barrier(ADM_COMM_RUN_WORLD,ierr)
            2001                         !
            2002                         !--- output for debug
            2003     1                   if(present(debug)) then
            2004     1                      if(debug) call output_info
            2005     1                   end if
            2006                         !
            2007                         ! <== iga for dbg 090917
            2008     1                   if (opt_comm_dbg) then
            2009     1               !       dbg_sendbuf_init = -1d66  * (ADM_prc_me+1000)
            2010     1                      dbg_sendbuf_init = -888d66
            2011     1                      dbg_recvbuf_init = -777d66
            2012     1                      allocate(dbg_areq_save(2*(ADM_lall*max_comm_r2r+ADM_vlink_nmax*4),4))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1778
                                   <<< Loop-information  End >>>
            2013     1  pp    s             dbg_areq_save(:,:) = -999 ! [Add] 12/03/26 T.Seiki
            2014     1                   endif
            2015                         ! iga for dbg 090916 ==>
            2016                         contains
            2017                         !
            2018                         subroutine re_setup_pl_comm_info
            2019     1                      do pl=ADM_npl,ADM_spl
            2020     2                         if (ADM_prc_me==ADM_prc_nspl(pl)) then
            2021     3                            do p=1,maxcommrecv_r2p(pl,halo)
            2022     3                               srank=source_prc_r2p(p,pl,halo)-1
            2023     4                               if (srank/=rank_me) then
            2024     4                                  ck=0
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 14
                                   <<<      sourcerank: 14
                                   <<< Loop-information  End >>>
            2025     5       8                          loop_ro2:do ro=1,romax(halo)
            2026     5       8                             if (srank==sourcerank(ro,halo)) exit loop_ro2
            2027     5       8                             ck=ck+1
            2028     5       8                          enddo loop_ro2
            2029     5                                  if (ck==romax(halo)) then
            2030     5                                     romax(halo)=romax(halo)+1
            2031     5                                     ro=romax(halo)
            2032     5                                     sourcerank(ro,halo)=srank
            2033     5                                     temp_recvorder(srank,halo)=ro
            2034     5                                  endif
            2035     4                                  ro=temp_recvorder(srank,halo)
            2036     4                                  nrmax_pl(ro,halo)=nrmax_pl(ro,halo)+1
            2037     4                                  nr=nrmax_pl(ro,halo)
            2038     4                                  recvinfo_pl(SIZE_COMM,nr,ro,halo)=rsize_r2p(p,pl,halo)
            2039     4                                  recvinfo_pl(LRGNID_COMM,nr,ro,halo)=pl
            2040     4                                  temp_src_rgn_pl(nr,ro,halo)=ADM_prc_tab(source_rgn_r2p(p,pl,halo),srank+1)
            2041     4                                  rs=recvinfo_pl(SIZE_COMM,nr,ro,halo)
            2042     4                                  rsize(ro,halo)=rsize(ro,halo)+rs
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2043     5  pp   8s                         do n=1,rs
            2044     5   p   8s                            recvlist_pl(n,nr,ro,halo)=rlist_r2p(n,p,pl,halo)
            2045     5   p   8s                         enddo
            2046     4                               else
            2047     4                                  ncmax_r2p(halo)=ncmax_r2p(halo)+1
            2048     4                                  nc=ncmax_r2p(halo)
            2049     4                                  copyinfo_r2p(SIZE_COPY,nc,halo)=rsize_r2p(p,pl,halo)
            2050     4                                  copyinfo_r2p(LRGNID_COPY,nc,halo)=pl
            2051     4                                  copyinfo_r2p(SRC_LRGNID_COPY,nc,halo)=source_rgn_r2p(p,pl,halo)
            2052     4                                  cs=copyinfo_r2p(SIZE_COPY,nc,halo)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 800
                                   <<< Loop-information  End >>>
            2053     5  pp   8s                         do n=1,cs
            2054     5   p   8s                            recvlist_r2p(n,nc,halo)=rlist_r2p(n,p,pl,halo)
            2055     5   p   8s                            sendlist_r2p(n,nc,halo)=slist_r2p(n,p,pl,halo)
            2056     5   p   8s                         enddo
            2057     4                               endif
            2058     3                            enddo !loop p
            2059     2                            !
            2060     3                            do p=1,ADM_vlink_nmax
            2061     3                               rgnid=ADM_rgn_vtab_pl(ADM_rid,pl,p)
            2062     3                               drank=prc_tab_rev(ptr_prcid,rgnid)-1
            2063     4                               if (drank/=rank_me) then
            2064     4                                  ck=0
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 14
                                   <<<      destrank: 14
                                   <<< Loop-information  End >>>
            2065     5       8                          loop_so2:do so=1,somax(halo)
            2066     5       8                             if (drank==destrank(so,halo)) exit loop_so2
            2067     5       8                             ck=ck+1
            2068     5       8                          enddo loop_so2
            2069     5                                  if (ck==somax(halo)) then
            2070     5                                     somax(halo)=somax(halo)+1
            2071     5                                     so=somax(halo)
            2072     5                                     destrank(so,halo)=drank
            2073     5                                     temp_sendorder(drank,halo)=so
            2074     5                                  endif
            2075     4                                  so=temp_sendorder(drank,halo)
            2076     4                                  nsmax_pl(so,halo)=nsmax_pl(so,halo)+1
            2077     4                                  ns=nsmax_pl(so,halo)
            2078     4                                  sendinfo_pl(SIZE_COMM,ns,so,halo)=1
            2079     4                                  sendinfo_pl(LRGNID_COMM,ns,so,halo)=pl
            2080     4                                  temp_dest_rgn_pl(ns,so,halo)=rgnid
            2081     4                                  ss=sendinfo_pl(SIZE_COMM,ns,so,halo)
            2082     4                                  ssize(so,halo)=ssize(so,halo)+ss
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2000
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2083     5  pp   8s                         do n=1,ss
            2084     5   p   8s                            sendlist_pl(n,ns,so,halo)=ADM_gslf_pl
            2085     5   p   8s                         enddo
            2086     4                               endif
            2087     3                            enddo !loop p
            2088     2                         endif
            2089     1                         !
            2090     2                         do p=1,ADM_vlink_nmax
            2091     2                            rgnid=ADM_rgn_vtab_pl(ADM_rid,pl,p)
            2092     2                            drank=prc_tab_rev(ptr_prcid,rgnid)-1
            2093     3                            if (rank_me==drank) then
            2094     3                               srank=ADM_prc_nspl(pl)-1
            2095     4                               if (srank/=rank_me) then
            2096     4                                  ck=0
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 14
                                   <<<      sourcerank: 14
                                   <<< Loop-information  End >>>
            2097     5       8                          loop_ro3:do ro=1,romax(halo)
            2098     5       8                             if (srank==sourcerank(ro,halo)) exit loop_ro3
            2099     5       8                             ck=ck+1
            2100     5       8                          enddo loop_ro3
            2101     5                                  if (ck==romax(halo)) then
            2102     5                                     romax(halo)=romax(halo)+1
            2103     5                                     ro=romax(halo)
            2104     5                                     sourcerank(ro,halo)=srank
            2105     5                                     temp_recvorder(srank,halo)=ro
            2106     5                                  endif
            2107     4                                  ro=temp_recvorder(srank,halo)
            2108     4                                  nrmax(ro,halo)=nrmax(ro,halo)+1
            2109     4                                  nr=nrmax(ro,halo)
            2110     4                                  recvinfo(SIZE_COMM,nr,ro,halo)=1
            2111     4                                  recvinfo(LRGNID_COMM,nr,ro,halo)=prc_tab_rev(ptr_lrgnid,rgnid)
            2112     4                                  temp_src_rgn(nr,ro,halo)=ADM_rgn_nmax+pl
            2113     4                                  rs=recvinfo(SIZE_COMM,nr,ro,halo)
            2114     4                                  rsize(ro,halo)=rsize(ro,halo)+rs
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2000
                                   <<< Loop-information  End >>>
            2115     5  pp   8s                         do n=1,rs
            2116     5   p   8s                            recvlist(n,nr,ro,halo)=n_nspl(pl,halo)
            2117     5   p   8s                         enddo
            2118     4                               else
            2119     4                                  ncmax_p2r(halo)=ncmax_p2r(halo)+1
            2120     4                                  nc=ncmax_p2r(halo)
            2121     4                                  copyinfo_p2r(SIZE_COPY,nc,halo)=1
            2122     4                                  copyinfo_p2r(LRGNID_COPY,nc,halo)=prc_tab_rev(ptr_lrgnid,rgnid)
            2123     4                                  copyinfo_p2r(SRC_LRGNID_COPY,nc,halo)=pl
            2124     4                                  cs=copyinfo_p2r(SIZE_COPY,nc,halo)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2125     5  pp   8s                         do n=1,cs
            2126     5   p   8s                            recvlist_p2r(n,nc,halo)=n_nspl(pl,halo)
            2127     5   p   8s                            sendlist_p2r(n,nc,halo)=ADM_gslf_pl
            2128     5   p   8s                         enddo
            2129     4                               endif
            2130     3                            endif
            2131     2                         enddo !loop p
            2132     1                         !
            2133     2                         do p=1,maxcommsend_r2p(pl,halo)
            2134     2                            srank=source_prc_r2p(p,pl,halo)-1
            2135     3                            if (rank_me==srank) then
            2136     3                               rgnid=ADM_rgn_vtab_pl(ADM_rid,pl,p)
            2137     3                               drank=ADM_prc_nspl(pl)-1
            2138     4                               if (drank/=rank_me) then
            2139     4                                  ck=0
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 14
                                   <<<      destrank: 14
                                   <<< Loop-information  End >>>
            2140     5       8                          loop_so3:do so=1,somax(halo)
            2141     5       8                             if (drank==destrank(so,halo)) exit loop_so3
            2142     5       8                             ck=ck+1
            2143     5       8                          enddo loop_so3
            2144     5                                  if (ck==somax(halo)) then
            2145     5                                     somax(halo)=somax(halo)+1
            2146     5                                     so=somax(halo)
            2147     5                                     destrank(so,halo)=drank
            2148     5                                     temp_sendorder(drank,halo)=so
            2149     5                                  endif
            2150     4                                  so=temp_sendorder(drank,halo)
            2151     4                                  nsmax(so,halo)=nsmax(so,halo)+1
            2152     4                                  ns=nsmax(so,halo)
            2153     4                                  sendinfo(SIZE_COMM,ns,so,halo)=ssize_r2p(p,pl,halo)
            2154     4                                  sendinfo(LRGNID_COMM,ns,so,halo)=prc_tab_rev(ptr_lrgnid,rgnid)
            2155     4                                  temp_dest_rgn(ns,so,halo)=ADM_rgn_nmax+pl
            2156     4                                  ss=sendinfo(SIZE_COMM,ns,so,halo)
            2157     4                                  ssize(so,halo)=ssize(so,halo)+ss
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2158     5  pp   8s                         do n=1,ss
            2159     5   p   8s                            sendlist(n,ns,so,halo)=slist_r2p(n,p,pl,halo)
            2160     5   p   8s                         enddo
            2161     4                               endif
            2162     3                            endif
            2163     2                         enddo !loop p
            2164     1                      enddo !loop pl
            2165                         end subroutine re_setup_pl_comm_info
            2166                     
            2167                       end subroutine COMM_setup
            2168                       !-----------------------------------------------------------------------------
            2169                       subroutine output_info
            2170                         use mod_adm, only :    &
            2171                              !--- public parameters
            2172                              ADM_log_fid,    &
            2173                              !--- public variables
            2174                              ADM_prc_all
            2175                         !
            2176                         implicit none
            2177                         !
            2178                         integer::halo
            2179                         !
            2180                         integer :: varmax
            2181                         integer :: cmax
            2182                         !
            2183                         !integer :: srgnid,rrgnid
            2184                         !
            2185                         integer :: ns,nr
            2186                         integer :: so,sl,sb,ss
            2187                         integer :: ro,rl,rb,rs
            2188                         integer :: l,n
            2189                         !
            2190                         write(ADM_log_fid,*)
            2191                         write(ADM_log_fid,*) &
            2192                              'msg : sub[output_info]/mod[comm]'
            2193                         write(ADM_log_fid,*) &
            2194                              'version : comm.f90.test5.2.1_wtime'
            2195                         write(ADM_log_fid,*) &
            2196                              '---------------------------------------&
            2197                              &       commnication table  start       &
            2198                              &---------------------------------------'
            2199                         !
            2200                         varmax=1
            2201                         cmax=kmax*varmax
            2202     1                   do halo=1,halomax
            2203     1                      write(ADM_log_fid,*) &
            2204     1                           '---------------------------------------&
            2205     1                           &       halo region =',halo,'           &
            2206     1                           &---------------------------------------'
            2207     1                      write(ADM_log_fid,*) &
            2208     1                           '---------------------------------------&
            2209     1                           &                count                  &
            2210     1                           &---------------------------------------'
            2211     1                      write(ADM_log_fid,*) &
            2212     1                           'romax =',romax(halo) &
            2213     1                           ,'somax =',somax(halo)
            2214     1                      write(ADM_log_fid,*) &
            2215     1                           '---------------------------------------&
            2216     1                           &                send                   &
            2217     1                           &---------------------------------------'
            2218     2   s    s             do so=1,somax(halo)
            2219     2   m    s                write(ADM_log_fid,*) &
            2220     2                              'so =',so   &
            2221     2                              ,'mrank =',rank_me   &
            2222     2                              ,'drank =',destrank(so,halo)
            2223     2   p    s             enddo
            2224     1                      write(ADM_log_fid,*) &
            2225     1                           '---------------------------------------&
            2226     1                           &                recv                   &
            2227     1                           &---------------------------------------'
            2228     2   s    s             do ro=1,romax(halo)
            2229     2   m    s                write(ADM_log_fid,*) &
            2230     2                              'ro =',ro   &
            2231     2                              ,'mrank =',rank_me   &
            2232     2                              ,'srank =',sourcerank(ro,halo)
            2233     2   p    s             enddo
            2234     1                      write(ADM_log_fid,*) &
            2235     1                           '---------------------------------------&
            2236     1                           &                table                   &
            2237     1                           &---------------------------------------'
            2238     2                      do l=1,ADM_prc_all
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 2
                                   <<<      src_rank_all: 2
                                   <<< Loop-information  End >>>
            2239     3   s    s                do n=1,max_comm_prc
            2240     3   p    s                   if (dest_rank_all(n,halo,l)==-1) cycle
            2241     3   m    s                   write(ADM_log_fid,*) &
            2242     3                                 'n =',n   &
            2243     3                                 ,'rank =',l-1   &
            2244     3                                 ,'dest_rank =',dest_rank_all(n,halo,l) &
            2245     3                                 ,' src_rank =', src_rank_all(n,halo,l)
            2246     3   p    s                enddo
            2247     2                      enddo
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 4
                                   <<<      destrank: 4
                                   <<< Loop-information  End >>>
            2248     2                      do so=1,somax(halo)
            2249     3   s    s                do ns=1,nsmax(so,halo)
            2250     3   p    s                   ss=sendinfo(SIZE_COMM,ns,so,halo)
            2251     3   p    s                   sl=sendinfo(LRGNID_COMM,ns,so,halo)
            2252     3   p    s                   sb=sendinfo(BASE_COMM,ns,so,halo)*cmax
            2253     3   m    s                   write(ADM_log_fid,*) &
            2254     3                                 'so =',so   &
            2255     3                                 ,'rank =',rank_me   &
            2256     3                                 ,' dest_rank =', destrank(so,halo) &
            2257     3                                 ,' ss =', ss &
            2258     3                                 ,' sl =', sl &
            2259     3                                 ,' sb =', sb
            2260     3   p    s                enddo
            2261     3   s    s                do ns=1,nsmax_pl(so,halo)
            2262     3   p    s                   ss=sendinfo_pl(SIZE_COMM,ns,so,halo)
            2263     3   p    s                   sl=sendinfo_pl(LRGNID_COMM,ns,so,halo)
            2264     3   p    s                   sb=sendinfo_pl(BASE_COMM,ns,so,halo)*cmax
            2265     3   m    s                   write(ADM_log_fid,*) &
            2266     3                                 'so =',so   &
            2267     3                                 ,'rank =',rank_me   &
            2268     3                                 ,' dest_rank =', destrank(so,halo) &
            2269     3                                 ,' ss =', ss &
            2270     3                                 ,' sl =', sl &
            2271     3                                 ,' sb =', sb
            2272     3   p    s                enddo
            2273     2                      enddo !loop so
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 4
                                   <<<      sourcerank: 4
                                   <<< Loop-information  End >>>
            2274     2                      do ro=1,romax(halo)
            2275     3   s    s                do nr=1,nrmax(ro,halo)
            2276     3   p    s                   rs=recvinfo(SIZE_COMM,nr,ro,halo)
            2277     3   p    s                   rl=recvinfo(LRGNID_COMM,nr,ro,halo)
            2278     3   p    s                   rb=recvinfo(BASE_COMM,nr,ro,halo)*cmax
            2279     3   m    s                   write(ADM_log_fid,*) &
            2280     3                                 'ro =',ro   &
            2281     3                                 ,'rank =',rank_me   &
            2282     3                                 ,' src_rank =', sourcerank(ro,halo) &
            2283     3                                 ,' rs =', rs &
            2284     3                                 ,' rl =', rl &
            2285     3                                 ,' rb =', rb
            2286     3   p    s                enddo
            2287     3   s    s                do nr=1,nrmax_pl(ro,halo)
            2288     3   p    s                   rs=recvinfo_pl(SIZE_COMM,nr,ro,halo)
            2289     3   p    s                   rl=recvinfo_pl(LRGNID_COMM,nr,ro,halo)
            2290     3   p    s                   rb=recvinfo_pl(BASE_COMM,nr,ro,halo)*cmax
            2291     3   m    s                   write(ADM_log_fid,*) &
            2292     3                                 'ro =',ro   &
            2293     3                                 ,'rank =',rank_me   &
            2294     3                                 ,' src_rank =', sourcerank(ro,halo) &
            2295     3                                 ,' rs =', rs &
            2296     3                                 ,' rl =', rl &
            2297     3                                 ,' rb =', rb
            2298     3   p    s                enddo
            2299     2                      enddo !loop ro
            2300     1                   enddo !loop halo
            2301                         !
            2302                         write(ADM_log_fid,*) &
            2303                              '---------------------------------------&
            2304                              &       commnication table  end         &
            2305                              &---------------------------------------'
            2306                         !
            2307                         !call ADM_proc_stop
            2308                         return
            2309                         !
            2310                       end subroutine output_info
            2311                       !-----------------------------------------------------------------------------
            2312                       subroutine output_time
            2313                         use mod_adm, only :    &
            2314                              !--- public parameters
            2315                              ADM_log_fid,    &
            2316                              !--- public variables
            2317                              ADM_prc_all,    &
            2318                              ADM_comm_run_world
            2319                         !
            2320                         implicit none
            2321                         !
            2322                         real(8)::           &
            2323                              ave_time_total,   &
            2324                              ave_time_pre ,    &
            2325                              ave_time_bar1,    &
            2326                              ave_time_bar2,    &
            2327                              ave_time_sbuf,    &
            2328                              ave_time_recv,    &
            2329                              ave_time_send,    &
            2330                              ave_time_copy,    &
            2331                              ave_time_wait,    &
            2332                              ave_time_rbuf,    &
            2333                              ave_time_copy_sgp
            2334                         real(8)::           &
            2335                              min_time_total,   &
            2336                              min_time_pre ,    &
            2337                              min_time_bar1,    &
            2338                              min_time_bar2,    &
            2339                              min_time_sbuf,    &
            2340                              min_time_recv,    &
            2341                              min_time_send,    &
            2342                              min_time_copy,    &
            2343                              min_time_wait,    &
            2344                              min_time_rbuf,    &
            2345                              min_time_copy_sgp
            2346                         real(8)::           &
            2347                              max_time_total,   &
            2348                              max_time_pre ,    &
            2349                              max_time_bar1,    &
            2350                              max_time_bar2,    &
            2351                              max_time_sbuf,    &
            2352                              max_time_recv,    &
            2353                              max_time_send,    &
            2354                              max_time_copy,    &
            2355                              max_time_wait,    &
            2356                              max_time_rbuf,    &
            2357                              max_time_copy_sgp
            2358                         real(8)::           &
            2359                              ave_size_total,   &
            2360                              min_size_total,   &
            2361                              max_size_total
            2362                         real(8)::           &
            2363                              ave_comm_count,   &
            2364                              min_comm_count,   &
            2365                              max_comm_count
            2366                         integer::ierr
            2367                         !
            2368                         write(ADM_log_fid,*)
            2369                         write(ADM_log_fid,*) &
            2370                              'msg : sub[output_time]/mod[comm]'
            2371                         write(ADM_log_fid,*) &
            2372                              'version : comm.f90.test5.2.1_wtime'
            2373                         write(ADM_log_fid,*) &
            2374                              '---------------------------------------&
            2375                              &       commnication time               &
            2376                              &---------------------------------------'
            2377                         !
            2378                         call mpi_reduce(time_total,ave_time_total,1,mpi_double_precision,mpi_sum,0,ADM_comm_run_world,ierr)
            2379                         call mpi_reduce(time_pre ,ave_time_pre ,1,mpi_double_precision,mpi_sum,0,ADM_comm_run_world,ierr)
            2380                         call mpi_reduce(time_bar1,ave_time_bar1,1,mpi_double_precision,mpi_sum,0,ADM_comm_run_world,ierr)
            2381                         call mpi_reduce(time_bar2,ave_time_bar2,1,mpi_double_precision,mpi_sum,0,ADM_comm_run_world,ierr)
            2382                         call mpi_reduce(time_sbuf,ave_time_sbuf,1,mpi_double_precision,mpi_sum,0,ADM_comm_run_world,ierr)
            2383                         call mpi_reduce(time_recv ,ave_time_recv ,1,mpi_double_precision,mpi_sum,0,ADM_comm_run_world,ierr)
            2384                         call mpi_reduce(time_send ,ave_time_send ,1,mpi_double_precision,mpi_sum,0,ADM_comm_run_world,ierr)
            2385                         call mpi_reduce(time_copy,ave_time_copy,1,mpi_double_precision,mpi_sum,0,ADM_comm_run_world,ierr)
            2386                         call mpi_reduce(time_wait,ave_time_wait,1,mpi_double_precision,mpi_sum,0,ADM_comm_run_world,ierr)
            2387                         call mpi_reduce(time_rbuf,ave_time_rbuf,1,mpi_double_precision,mpi_sum,0,ADM_comm_run_world,ierr)
            2388                         call mpi_reduce(time_copy_sgp,ave_time_copy_sgp,1,mpi_double_precision,mpi_sum,0,ADM_comm_run_world,ierr)
            2389                         call mpi_reduce(time_total ,min_time_total ,1,mpi_double_precision,mpi_min,0,ADM_comm_run_world,ierr)
            2390                         call mpi_reduce(time_pre ,min_time_pre ,1,mpi_double_precision,mpi_min,0,ADM_comm_run_world,ierr)
            2391                         call mpi_reduce(time_bar1,min_time_bar1,1,mpi_double_precision,mpi_min,0,ADM_comm_run_world,ierr)
            2392                         call mpi_reduce(time_bar2,min_time_bar2,1,mpi_double_precision,mpi_min,0,ADM_comm_run_world,ierr)
            2393                         call mpi_reduce(time_sbuf,min_time_sbuf,1,mpi_double_precision,mpi_min,0,ADM_comm_run_world,ierr)
            2394                         call mpi_reduce(time_recv,min_time_recv ,1,mpi_double_precision,mpi_min,0,ADM_comm_run_world,ierr)
            2395                         call mpi_reduce(time_send,min_time_send ,1,mpi_double_precision,mpi_min,0,ADM_comm_run_world,ierr)
            2396                         call mpi_reduce(time_copy,min_time_copy,1,mpi_double_precision,mpi_min,0,ADM_comm_run_world,ierr)
            2397                         call mpi_reduce(time_wait,min_time_wait,1,mpi_double_precision,mpi_min,0,ADM_comm_run_world,ierr)
            2398                         call mpi_reduce(time_rbuf,min_time_rbuf,1,mpi_double_precision,mpi_min,0,ADM_comm_run_world,ierr)
            2399                         call mpi_reduce(time_copy_sgp,min_time_copy_sgp,1,mpi_double_precision,mpi_min,0,ADM_comm_run_world,ierr)
            2400                         call mpi_reduce(time_total ,max_time_total ,1,mpi_double_precision,mpi_max,0,ADM_comm_run_world,ierr)
            2401                         call mpi_reduce(time_pre ,max_time_pre ,1,mpi_double_precision,mpi_max,0,ADM_comm_run_world,ierr)
            2402                         call mpi_reduce(time_bar1,max_time_bar1,1,mpi_double_precision,mpi_max,0,ADM_comm_run_world,ierr)
            2403                         call mpi_reduce(time_bar2,max_time_bar2,1,mpi_double_precision,mpi_max,0,ADM_comm_run_world,ierr)
            2404                         call mpi_reduce(time_sbuf,max_time_sbuf,1,mpi_double_precision,mpi_max,0,ADM_comm_run_world,ierr)
            2405                         call mpi_reduce(time_recv,max_time_recv ,1,mpi_double_precision,mpi_max,0,ADM_comm_run_world,ierr)
            2406                         call mpi_reduce(time_send,max_time_send ,1,mpi_double_precision,mpi_max,0,ADM_comm_run_world,ierr)
            2407                         call mpi_reduce(time_copy,max_time_copy,1,mpi_double_precision,mpi_max,0,ADM_comm_run_world,ierr)
            2408                         call mpi_reduce(time_wait,max_time_wait,1,mpi_double_precision,mpi_max,0,ADM_comm_run_world,ierr)
            2409                         call mpi_reduce(time_rbuf,max_time_rbuf,1,mpi_double_precision,mpi_max,0,ADM_comm_run_world,ierr)
            2410                         call mpi_reduce(time_copy_sgp,max_time_copy_sgp,1,mpi_double_precision,mpi_max,0,ADM_comm_run_world,ierr)
            2411                         !-----
            2412                         call mpi_reduce(size_total,ave_size_total,1,mpi_double_precision,mpi_sum,0,ADM_comm_run_world,ierr)
            2413                         call mpi_reduce(size_total,min_size_total,1,mpi_double_precision,mpi_min,0,ADM_comm_run_world,ierr)
            2414                         call mpi_reduce(size_total,max_size_total,1,mpi_double_precision,mpi_max,0,ADM_comm_run_world,ierr)
            2415                         call mpi_reduce(comm_count,ave_comm_count,1,mpi_double_precision,mpi_sum,0,ADM_comm_run_world,ierr)
            2416                         call mpi_reduce(comm_count,min_comm_count,1,mpi_double_precision,mpi_min,0,ADM_comm_run_world,ierr)
            2417                         call mpi_reduce(comm_count,max_comm_count,1,mpi_double_precision,mpi_max,0,ADM_comm_run_world,ierr)
            2418                         write(ADM_log_fid,*) "------- Using unit in the following tables is msec & KB -------"
            2419                         !-----
            2420                         write(ADM_log_fid,*) "---------  average by comm_call_count[",comm_call_count,"] --------"
            2421                         write(ADM_log_fid,'(a,1e11.4)') "time_pre      =",1000*time_pre /comm_call_count
            2422                         write(ADM_log_fid,'(a,1e11.4)') "time_bar1     =",1000*time_bar1/comm_call_count
            2423                         write(ADM_log_fid,'(a,1e11.4)') "time_recv     =",1000*time_recv/comm_call_count
            2424                         write(ADM_log_fid,'(a,1e11.4)') "time_sbuf     =",1000*time_sbuf/comm_call_count
            2425                         write(ADM_log_fid,'(a,1e11.4)') "time_send     =",1000*time_send/comm_call_count
            2426                         write(ADM_log_fid,'(a,1e11.4)') "time_copy     =",1000*time_copy/comm_call_count
            2427                         write(ADM_log_fid,'(a,1e11.4)') "time_wait     =",1000*time_wait/comm_call_count
            2428                         write(ADM_log_fid,'(a,1e11.4)') "time_rbuf     =",1000*time_rbuf/comm_call_count
            2429                         write(ADM_log_fid,'(a,1e11.4)') "time_copy_sgp =",1000*time_copy_sgp/comm_call_count
            2430                         write(ADM_log_fid,'(a,1e11.4)') "time_bar2     =",1000*time_bar2/comm_call_count
            2431                         write(ADM_log_fid,'(a,1e11.4)') "time_total    =",1000*time_total/comm_call_count
            2432                         write(ADM_log_fid,'(a,1f11.4)') "size_total    =",size_total*8/1024/comm_call_count
            2433                         write(ADM_log_fid,'(a,1f11.4)') "comm_count    =",comm_count/comm_call_count
            2434                         !-----
            2435     1                   if (rank_me==0) then
            2436     1                      write(ADM_log_fid,*) "---------  average  by ADM_prc_all & comm_call_count --------"
            2437     1                      write(ADM_log_fid,'(a,1e11.4)') "ave_time_pre      =",1000*ave_time_pre /ADM_prc_all/comm_call_count
            2438     1                      write(ADM_log_fid,'(a,1e11.4)') "ave_time_bar1     =",1000*ave_time_bar1/ADM_prc_all/comm_call_count
            2439     1                      write(ADM_log_fid,'(a,1e11.4)') "ave_time_recv     =",1000*ave_time_recv/ADM_prc_all/comm_call_count
            2440     1                      write(ADM_log_fid,'(a,1e11.4)') "ave_time_sbuf     =",1000*ave_time_sbuf/ADM_prc_all/comm_call_count
            2441     1                      write(ADM_log_fid,'(a,1e11.4)') "ave_time_send     =",1000*ave_time_send/ADM_prc_all/comm_call_count
            2442     1                      write(ADM_log_fid,'(a,1e11.4)') "ave_time_copy     =",1000*ave_time_copy/ADM_prc_all/comm_call_count
            2443     1                      write(ADM_log_fid,'(a,1e11.4)') "ave_time_wait     =",1000*ave_time_wait/ADM_prc_all/comm_call_count
            2444     1                      write(ADM_log_fid,'(a,1e11.4)') "ave_time_rbuf     =",1000*ave_time_rbuf/ADM_prc_all/comm_call_count
            2445     1                      write(ADM_log_fid,'(a,1e11.4)') "ave_time_copy_sgp =",1000*ave_time_copy_sgp/ADM_prc_all/comm_call_count
            2446     1                      write(ADM_log_fid,'(a,1e11.4)') "ave_time_bar2     =",1000*ave_time_bar2/ADM_prc_all/comm_call_count
            2447     1                      write(ADM_log_fid,'(a,1e11.4)') "ave_time_total    =",1000*ave_time_total/ADM_prc_all/comm_call_count
            2448     1                      write(ADM_log_fid,'(a,1f11.4)') "ave_size_total    =",ave_size_total*8/1024/ADM_prc_all/comm_call_count
            2449     1                      write(ADM_log_fid,'(a,1f11.4)') "ave_comm_count    =",ave_comm_count/ADM_prc_all/comm_call_count
            2450     1                      write(ADM_log_fid,*) "---------  minimum  --------"
            2451     1                      write(ADM_log_fid,'(a,1e11.4)') "min_time_pre      =",1000*min_time_pre/comm_call_count
            2452     1                      write(ADM_log_fid,'(a,1e11.4)') "min_time_bar1     =",1000*min_time_bar1/comm_call_count
            2453     1                      write(ADM_log_fid,'(a,1e11.4)') "min_time_recv     =",1000*min_time_recv/comm_call_count
            2454     1                      write(ADM_log_fid,'(a,1e11.4)') "min_time_sbuf     =",1000*min_time_sbuf/comm_call_count
            2455     1                      write(ADM_log_fid,'(a,1e11.4)') "min_time_send     =",1000*min_time_send/comm_call_count
            2456     1                      write(ADM_log_fid,'(a,1e11.4)') "min_time_copy     =",1000*min_time_copy/comm_call_count
            2457     1                      write(ADM_log_fid,'(a,1e11.4)') "min_time_wait     =",1000*min_time_wait/comm_call_count
            2458     1                      write(ADM_log_fid,'(a,1e11.4)') "min_time_rbuf     =",1000*min_time_rbuf/comm_call_count
            2459     1                      write(ADM_log_fid,'(a,1e11.4)') "min_time_copy_sgp =",1000*min_time_copy_sgp/comm_call_count
            2460     1                      write(ADM_log_fid,'(a,1e11.4)') "min_time_bar2     =",1000*min_time_bar2/comm_call_count
            2461     1                      write(ADM_log_fid,'(a,1e11.4)') "min_time_total    =",1000*min_time_total/comm_call_count
            2462     1                      write(ADM_log_fid,'(a,1f11.4)') "min_size_total    =",min_size_total*8/1024/comm_call_count
            2463     1                      write(ADM_log_fid,'(a,1f11.4)') "min_comm_count    =",min_comm_count/comm_call_count
            2464     1                      write(ADM_log_fid,*) "---------  maximum  --------"
            2465     1                      write(ADM_log_fid,'(a,1e11.4)') "max_time_pre      =",1000*max_time_pre/comm_call_count
            2466     1                      write(ADM_log_fid,'(a,1e11.4)') "max_time_bar1     =",1000*max_time_bar1/comm_call_count
            2467     1                      write(ADM_log_fid,'(a,1e11.4)') "max_time_recv     =",1000*max_time_recv/comm_call_count
            2468     1                      write(ADM_log_fid,'(a,1e11.4)') "max_time_sbuf     =",1000*max_time_sbuf/comm_call_count
            2469     1                      write(ADM_log_fid,'(a,1e11.4)') "max_time_send     =",1000*max_time_send/comm_call_count
            2470     1                      write(ADM_log_fid,'(a,1e11.4)') "max_time_copy     =",1000*max_time_copy/comm_call_count
            2471     1                      write(ADM_log_fid,'(a,1e11.4)') "max_time_wait     =",1000*max_time_wait/comm_call_count
            2472     1                      write(ADM_log_fid,'(a,1e11.4)') "max_time_rbuf     =",1000*max_time_rbuf/comm_call_count
            2473     1                      write(ADM_log_fid,'(a,1e11.4)') "max_time_copy_sgp =",1000*max_time_copy_sgp/comm_call_count
            2474     1                      write(ADM_log_fid,'(a,1e11.4)') "max_time_bar2     =",1000*max_time_bar2/comm_call_count
            2475     1                      write(ADM_log_fid,'(a,1e11.4)') "max_time_total    =",1000*max_time_total/comm_call_count
            2476     1                      write(ADM_log_fid,'(a,1f11.4)') "max_size_total    =",max_size_total*8/1024/comm_call_count
            2477     1                      write(ADM_log_fid,'(a,1f11.4)') "max_comm_count    =",max_comm_count/comm_call_count
            2478     1                      write(ADM_log_fid,*) "----------------------------"
            2479     1                   endif
            2480                         !
            2481                         !call ADM_proc_stop
            2482                         return
            2483                         !
            2484                       end subroutine output_time
            2485                       !-----------------------------------------------------------------------------
            2486                       subroutine COMM_data_transfer(&
            2487                            var,var_pl,              & !--- INOUT : variables comminicated.
            2488                            trn,                     & !--- IN : commnucation flag for each variable
            2489                            hallo_num)                 !--- IN : number of hallo
            2490                         use mod_adm, only :      &
            2491                              ADM_proc_stop,      & ! [add] C.Kodama 2011.04.26
            2492                              ADM_vlink_nmax,     &
            2493                              ADM_lall,           &
            2494                              ADM_comm_run_world, &
            2495                              ADM_LOG_FID,        &
            2496                              ADM_kall
            2497                         use mod_cnst, only: &
            2498                            CNST_undef
            2499                         implicit none
            2500                     
            2501                         real(8),intent(inout)::var(:,:,:,:)
            2502                         real(8),intent(inout)::var_pl(:,:,:,:)
            2503                         !
            2504                         logical,intent(in),optional::trn(:)
            2505                         !
            2506                         integer,intent(in),optional::hallo_num
            2507                         !
            2508                         integer :: shp(4)
            2509                         integer :: varmax
            2510                         integer :: cmax
            2511                         integer :: halo
            2512                     
            2513                         integer :: acount
            2514                         integer :: areq(2*(ADM_lall*max_comm_r2r+ADM_vlink_nmax*4))
            2515                         integer :: stat(mpi_status_size,2*(ADM_lall*max_comm_r2r+ADM_vlink_nmax*4))
            2516                         integer :: ierr
            2517                         !
            2518                         integer :: k,m,n
            2519                         integer :: nr,nc,ns
            2520                         integer :: sl,so,sb,ss
            2521                         integer :: rl,ro,rb,rs
            2522                         integer :: cl,scl,cs
            2523                     !    integer :: i_dbg !iga
            2524                         logical :: dbg_ierr !iga
            2525                       !=============================================================================
            2526                     
            2527     1                   if ( opt_comm_barrier ) then
            2528     1                      call DEBUG_rapstart('Node imbalance adjustment')
            2529     1                      call MPI_BARRIER( ADM_comm_run_world, ierr )
            2530     1                      call DEBUG_rapend  ('Node imbalance adjustment')
            2531     1                   endif
            2532                     
            2533                         call DEBUG_rapstart('COMM data_transfer')
            2534                     
            2535                         !
            2536                         ! --- pre-process
            2537                         !
            2538                         comm_call_count=comm_call_count+1
            2539                         !
            2540                         t(0)=mpi_wtime()
            2541                         !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    FULL UNROLLING
                                   <<< Loop-information  End >>>
            2542             f           shp=shape(var)
            2543                         kmax = shp(2)
            2544                         !
            2545     1                   if (present(trn)) then
            2546     1                      varmax=0
            2547     1               !cdir novector
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 16
                                   <<<      clist: 16
                                   <<< Loop-information  End >>>
            2548     2       8s             do n=1,shp(4)
            2549     3       8s                if(trn(n)) then
            2550     3       8s                   varmax=varmax+1
            2551     3       8s                   clist(varmax)=n
            2552     3       8s                endif
            2553     2       8s             enddo
            2554     1                   else
            2555     1                      varmax=shp(4)
            2556     1               !cdir novector
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1600
                                   <<< Loop-information  End >>>
            2557     2  pp   8s             do n=1,varmax
            2558     2   p   8s                clist(n)=n
            2559     2   p   8s             enddo
            2560     1                   endif
            2561                         !
            2562     1                   if (present(hallo_num)) then
            2563     1                      halo=hallo_num
            2564     1                   else
            2565     1                      halo=1
            2566     1                   endif
            2567                     
            2568     1                   if (halo.ne.1) then
            2569     1                      write(ADM_log_fid,*) 'halo=',halo
            2570     1                   endif
            2571                     
            2572                         !
            2573                         cmax=varmax*kmax
            2574                         ! [Add] 07/11/07 T.Mitsui for check of varmax
            2575     1                   if( opt_check_varmax ) then
            2576     1                      ! <- [rep] C.Kodama 2011.04.26
            2577     2                      if ( cmax > max_varmax * ADM_kall ) then
            2578     2                         write(ADM_LOG_FID,*)  'error: cmax >  max_varmax * ADM_kall, stop!'
            2579     2                         write(ADM_LOG_FID,*)  'cmax=', cmax, 'max_varmax*ADM_kall=', max_varmax*ADM_kall
            2580     2                         call ADM_proc_stop
            2581     2                      end if
            2582     1               !       equiv_varmax = real( varmax*kmax )/real( ADM_kall ) ! assuming variables are all 3-Dimension
            2583     1               !       diag_varmax  = max( equiv_varmax, diag_varmax )     ! diagnose max value
            2584     1               !       write(ADM_LOG_FID,'(a)'  )   ' *** max_varmax, varmax, kmax, equivalent varmax, diagnosed max_varmax '
            2585     1               !       write(ADM_LOG_FID,'(5x, 3i8, 2f18.1)') max_varmax, varmax, kmax, equiv_varmax, diag_varmax
            2586     1                      ! ->
            2587     1                   end if
            2588                         !
            2589                         t(1)=mpi_wtime()
            2590                         time_pre=time_pre+(t(1)-t(0))
            2591                         !call mpi_barrier(ADM_comm_run_world,ierr)
            2592                         t(2)=mpi_wtime()
            2593                         time_bar1=time_bar1+(t(2)-t(1))
            2594                         !-----------------------------------------
            2595                         ! call mpi_isend
            2596                         !-----------------------------------------
            2597                     
            2598                     !!    comm_dbg_recvbuf(:,:,:)=CNST_UNDEF
            2599                     !!    comm_dbg_sendbuf(:,:,:)=CNST_UNDEF
            2600                     !!    comm_dbg_recvbuf(:,:,1)=recvbuf(:,:)
            2601                     !!    comm_dbg_sendbuf(:,:,1)=sendbuf(:,:)
            2602                     
            2603     1                   if (opt_comm_dbg) then !iga
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2604     1  pp    v             sendbuf(:,:)= dbg_sendbuf_init
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2605     1  pp    v             recvbuf(:,:)= dbg_recvbuf_init
            2606     2                      if (somax(halo)>(ADM_lall*max_comm_r2r+ADM_vlink_nmax*4)) then
            2607     2                         write(ADM_log_fid,*) 'somax inconsistency'
            2608     2                         write(ADM_log_fid,*) somax(halo),(ADM_lall*max_comm_r2r+ADM_vlink_nmax*4)
            2609     2                      endif
            2610     1                   endif
            2611                     
            2612                     
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 4
                                   <<<      areq: 4
                                   <<< Loop-information  End >>>
            2613     1                   do ro=1,romax(halo)
            2614     1                      !
            2615     2                      if (opt_comm_dbg) then
            2616     3                         if (rsize(ro,halo)*cmax > size(recvbuf(:,ro)) ) then
            2617     3                            write(ADM_log_fid,*) 'ro',ro,'buf-dim=',shape(recvbuf),'rsize=',rsize(ro,halo),'cmax=',cmax
            2618     3                         endif
            2619     2                      endif
            2620     1                      !
            2621     1                      call mpi_irecv(recvbuf(1,ro)              &
            2622     1                           ,rsize(ro,halo)*cmax        &
            2623     1                           ,mpi_double_precision       &
            2624     1                           ,sourcerank(ro,halo)        &
            2625     1                           ,recvtag(ro,halo)           &
            2626     1                           ,ADM_comm_run_world         &
            2627     1                           ,areq(ro)                   &
            2628     1                           ,ierr)
            2629     1                      !
            2630     2                      if (opt_comm_dbg) then
            2631     3                         if (ierr.ne.0) then
            2632     3                            write(ADM_log_fid,*) 'mpi_irecv info start=='
            2633     3                            write(ADM_log_fid,*) 'ierr=',ierr
            2634     3                            write(ADM_log_fid,*) 'ro=',ro
            2635     3                            write(ADM_log_fid,*) 'rsize=',rsize(ro,halo)
            2636     3                            write(ADM_log_fid,*) 'cmax=',cmax
            2637     3                            write(ADM_log_fid,*) 'areq=',areq(ro)
            2638     3                            write(ADM_log_fid,*) 'mpi_irecv info end=='
            2639     3                         endif
            2640     2                         ! [fix] 12/03/26 T.Seiki
            2641     2               !!$       dbg_areq_save(:,1)=areq(:)
            2642     2                         dbg_areq_save(ro,1)=areq(ro)
            2643     2                      endif
            2644     1                   enddo
            2645                     
            2646                         t(3)=mpi_wtime()
            2647                         time_recv=time_recv+(t(3)-t(2))
            2648                         !-----------------------------------------
            2649                         !  var -> sendbuf
            2650                         !-----------------------------------------
            2651     1                   do so=1,somax(halo)
            2652     1               
            2653     1               
            2654     1               
            2655     1                      t(4)=mpi_wtime()
            2656     2                      do ns=1,nsmax(so,halo)
            2657     2                         ss=sendinfo(SIZE_COMM,ns,so,halo)
            2658     2                         sl=sendinfo(LRGNID_COMM,ns,so,halo)
            2659     2                         sb=sendinfo(BASE_COMM,ns,so,halo)*cmax
            2660     2               !=org=!cdir novector
            2661     2               !=org=          do n=1,ss
            2662     2               !=org=!cdir unroll=3
            2663     2               !=org=             do m=1,varmax
            2664     2               !=org=!!cdir shortloop
            2665     2               !=org=                do k=1,kmax
            2666     2               !=org=                   sendbuf(k+(m-1)*kmax+(n-1)*cmax+sb,so) &
            2667     2               !=org=                        =var(sendlist(n,ns,so,halo),k,sl,clist(m))
            2668     2               !=org=                enddo
            2669     2               !=org=             enddo
            2670     2               !=org=!             if (ADM_prc_me==1) write(ADM_log_fid,*) 'n',n,sendlist(n,ns,so,halo)
            2671     2               !=org=          enddo
            2672     2               
            2673     3                         do m=1,varmax
            2674     3               !cdir outerunroll=8
            2675     4                            do k=1,kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 696
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2676     5  pp   4v                      do n=1,ss
            2677     5   p   4v                         sendbuf(n+(k-1)*ss+(m-1)*ss*kmax+sb,so) &
            2678     5                                       =var(sendlist(n,ns,so,halo),k,sl,clist(m))
            2679     5   p   4v                      enddo
            2680     4                            enddo
            2681     3                         enddo
            2682     2               
            2683     2               
            2684     2                      enddo
            2685     1                      !-----------------------------------------
            2686     1                      !
            2687     1                      !-----------------------------------------
            2688     1                      !  var_pl -> sendbuf
            2689     1                      !-----------------------------------------
            2690     2                      do ns=1,nsmax_pl(so,halo)
            2691     2                         ss=sendinfo_pl(SIZE_COMM,ns,so,halo)
            2692     2                         sl=sendinfo_pl(LRGNID_COMM,ns,so,halo)
            2693     2                         sb=sendinfo_pl(BASE_COMM,ns,so,halo)*cmax
            2694     2               !=org=!cdir novector
            2695     2               !=org=          do n=1,ss
            2696     2               !=org=!cdir unroll=3
            2697     2               !=org=             do m=1,varmax
            2698     2               !=org=!!cdir shortloop
            2699     2               !=org=                do k=1,kmax
            2700     2               !=org=                   sendbuf(k+(m-1)*kmax+(n-1)*cmax+sb,so) &
            2701     2               !=org=                        =var_pl(sendlist_pl(n,ns,so,halo),k,sl,clist(m))
            2702     2               !=org=                enddo
            2703     2               !=org=             enddo
            2704     2               !=org=          enddo
            2705     3                         do m=1,varmax
            2706     3               !cdir outerunroll=8
            2707     4                            do k=1,kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 696
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2708     5  pp   4v                      do n=1,ss
            2709     5   p   4v                         sendbuf(n+(k-1)*ss+(m-1)*ss*kmax+sb,so) &
            2710     5                                       =var_pl(sendlist_pl(n,ns,so,halo),k,sl,clist(m))
            2711     5   p   4v                      enddo
            2712     4                            enddo
            2713     3                         enddo
            2714     2               
            2715     2                      enddo
            2716     1                      t(5)=mpi_wtime()
            2717     1                      time_sbuf=time_sbuf+(t(5)-t(4))
            2718     1               
            2719     1               
            2720     1               !       write(ADM_log_fid,*) 'send count=',i_dbg,'prc=',adm_prc_me
            2721     1                      !-----------------------------------------
            2722     1                      !
            2723     1                      !-----------------------------------------
            2724     1                      ! call mpi_isend
            2725     1                      !-----------------------------------------
            2726     1               
            2727     2                      if (opt_comm_dbg) then
            2728     3                         if (ssize(so,halo)*cmax>size(sendbuf(:,so))) then
            2729     3                            write(ADM_log_fid,*) 'so',so,'buf-dim=',shape(sendbuf),'rsize=',ssize(so,halo),'cmax=',cmax
            2730     3                         endif
            2731     2                      endif
            2732     1               
            2733     1               !       write(*,*) 'me=',ADM_prc_me,'sendtag',sendtag(:,:)
            2734     1               !       write(*,*) 'sendbuf',sendbuf(:,:)
            2735     1               !       write(*,*) 'me=',ADM_prc_me,'destrank',destrank(:,:)
            2736     1               
            2737     1               
            2738     1                      call mpi_isend(sendbuf(1,so)              &
            2739     1                           ,ssize(so,halo)*cmax        &
            2740     1                           ,mpi_double_precision       &
            2741     1                           ,destrank(so,halo)          &
            2742     1                           ,sendtag(so,halo)           &
            2743     1                           ,ADM_comm_run_world             &
            2744     1                           ,areq(so+romax(halo))       &
            2745     1                           ,ierr)
            2746     2                      if (opt_comm_dbg) then
            2747     3                         if (ierr.ne.0) then
            2748     3                            write(ADM_log_fid,*) 'mpi_isend info start=='
            2749     3                            write(ADM_log_fid,*) 'ierr=',ierr
            2750     3                            write(ADM_log_fid,*) 'so=',so
            2751     3                            write(ADM_log_fid,*) 'ssize=',ssize(so,halo)
            2752     3                            write(ADM_log_fid,*) 'cmax=',cmax
            2753     3                            write(ADM_log_fid,*) 'areq=',areq(so+romax(halo))
            2754     3                            write(ADM_log_fid,*) 'mpi_isend info end=='
            2755     3                         endif
            2756     2                         ! [fix] 12/03/26 T.Seiki
            2757     2               !!$       dbg_areq_save(:,2)=areq(:)
            2758     2                         dbg_areq_save(so+romax(halo),2)=areq(so+romax(halo))
            2759     2                      endif
            2760     1               
            2761     1               
            2762     1                      t(6)=mpi_wtime()
            2763     1                      time_send=time_send+(t(6)-t(5))
            2764     1                      size_total=size_total+ssize(so,halo)*cmax
            2765     1                      comm_count=comm_count+1
            2766     1                   enddo !loop so
            2767                         !-----------------------------------------
            2768                         !
            2769                         t(7)=mpi_wtime()
            2770                         !---------------------------------------------------
            2771                         !  var -> var (region to region copy in same rank)
            2772                         !---------------------------------------------------
            2773     1                   do nc=1,ncmax_r2r(halo)
            2774     1                      cs=copyinfo_r2r(SIZE_COPY,nc,halo)
            2775     1                      cl=copyinfo_r2r(LRGNID_COPY,nc,halo)
            2776     1                      scl=copyinfo_r2r(SRC_LRGNID_COPY,nc,halo)
            2777     1               !=org=!cdir novector
            2778     1               !=org=       do n=1,cs
            2779     1               !=org=!cdir unroll=3
            2780     1               !=org=          do m=1,varmax
            2781     1               !=org=!!cdir shortloop
            2782     1               !=org=             do k=1,kmax
            2783     1               !=org=                var(recvlist_r2r(n,nc,halo),k,cl ,clist(m)) &
            2784     1               !=org=                     =var(sendlist_r2r(n,nc,halo),k,scl,clist(m))
            2785     1               !=org=             enddo
            2786     1               !=org=          enddo
            2787     1               !=org=       enddo
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 3)
                                   <<<    PREFETCH       : 2
                                   <<<      clist: 2
                                   <<< Loop-information  End >>>
            2788     2   p                  do m=1,varmax
            2789     2               !cdir outerunroll=8
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 2)
                                   <<< Loop-information  End >>>
            2790     3  pp                     do k=1,kmax
            2791     4   p   8s                   do n=1,cs
            2792     4   p   8m                      var(recvlist_r2r(n,nc,halo),k,cl ,clist(m)) &
            2793     4                                    =var(sendlist_r2r(n,nc,halo),k,scl,clist(m))
            2794     4   p   8v                   enddo
            2795     3   p                     enddo
            2796     2   p                  enddo
            2797     1               
            2798     1                   enddo
            2799                         !------------------------------------------
            2800                         !
            2801                         !------------------------------------------
            2802                         !  var -> var_pl ( data copy in same rank)
            2803                         !------------------------------------------
            2804     1                   do nc=1,ncmax_r2p(halo)
            2805     1                      cs=copyinfo_r2p(SIZE_COPY,nc,halo)
            2806     1                      cl=copyinfo_r2p(LRGNID_COPY,nc,halo)
            2807     1                      scl=copyinfo_r2p(SRC_LRGNID_COPY,nc,halo)
            2808     1               !=org=!cdir novector
            2809     1               !=org=       do n=1,cs
            2810     1               !=org=!cdir unroll=3
            2811     1               !=org=          do m=1,varmax
            2812     1               !=org=!!cdir shortloop
            2813     1               !=org=             do k=1,kmax
            2814     1               !=org=                var_pl(recvlist_r2p(n,nc,halo),k,cl,clist(m)) &
            2815     1               !=org=                     =var(sendlist_r2p(n,nc,halo),k,scl,clist(m))
            2816     1               !=org=             enddo
            2817     1               !=org=          enddo
            2818     1               !=org=       enddo
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 3)
                                   <<<    PREFETCH       : 2
                                   <<<      clist: 2
                                   <<< Loop-information  End >>>
            2819     2   p                  do m=1,varmax
            2820     2               !cdir outerunroll=8
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 2)
                                   <<< Loop-information  End >>>
            2821     3  pp                     do k=1,kmax
            2822     4   p   4s                   do n=1,cs
            2823     4   p   4s                      var_pl(recvlist_r2p(n,nc,halo),k,cl,clist(m)) &
            2824     4                                    =var(sendlist_r2p(n,nc,halo),k,scl,clist(m))
            2825     4   p   4s                   enddo
            2826     3   p                     enddo
            2827     2   p                  enddo
            2828     1               
            2829     1                   enddo
            2830                         !-----------------------------------------
            2831                         !
            2832                         !-----------------------------------------
            2833                         !  var_pl -> var (data copy in same rank)
            2834                         !-----------------------------------------
            2835     1                   do nc=1,ncmax_p2r(halo)
            2836     1                      cs=copyinfo_p2r(SIZE_COPY,nc,halo)
            2837     1                      cl=copyinfo_p2r(LRGNID_COPY,nc,halo)
            2838     1                      scl=copyinfo_p2r(SRC_LRGNID_COPY,nc,halo)
            2839     1               !=org=!cdir novector
            2840     1               !=org=       do n=1,cs
            2841     1               !=org=!cdir unroll=3
            2842     1               !=org=          do m=1,varmax
            2843     1               !=org=!!cdir shortloop
            2844     1               !=org=             do k=1,kmax
            2845     1               !=org=                var(recvlist_p2r(n,nc,halo),k,cl,clist(m)) &
            2846     1               !=org=                     =var_pl(sendlist_p2r(n,nc,halo),k,scl,clist(m))
            2847     1               !=org=             enddo
            2848     1               !=org=          enddo
            2849     1               !=org=       enddo
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 3)
                                   <<<    PREFETCH       : 2
                                   <<<      clist: 2
                                   <<< Loop-information  End >>>
            2850     2   p                  do m=1,varmax
            2851     2               !cdir outerunroll=8
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 2)
                                   <<< Loop-information  End >>>
            2852     3  pp                     do k=1,kmax
            2853     4   p   4s                   do n=1,cs
            2854     4   p   4s                      var(recvlist_p2r(n,nc,halo),k,cl,clist(m)) &
            2855     4                                    =var_pl(sendlist_p2r(n,nc,halo),k,scl,clist(m))
            2856     4   p   4s                   enddo
            2857     3   p                     enddo
            2858     2   p                  enddo
            2859     1               
            2860     1                   enddo
            2861                         !-----------------------------------------
            2862                         !
            2863                         !-----------------------------------------
            2864                         t(8)=mpi_wtime()
            2865                         time_copy=time_copy+(t(8)-t(7))
            2866                         acount=romax(halo)+somax(halo)
            2867                         call mpi_waitall(acount,areq,stat,ierr)
            2868                     
            2869                         t(9)=mpi_wtime()
            2870                         time_wait=time_wait+(t(9)-t(8))
            2871                     
            2872     1                   if (opt_comm_dbg) then  !================== dbg start
            2873     2                      if (ierr.ne.0) then
            2874     2                         write(ADM_log_fid,*) 'mpi_wait info start=='
            2875     2                         write(ADM_log_fid,*) 'ierr=',ierr
            2876     2                         write(ADM_log_fid,*) 'acount=',acount
            2877     2                         write(ADM_log_fid,*) 'stat=',stat(:,1:acount)
            2878     2                         write(ADM_log_fid,*) 'areq=',areq(1:acount)
            2879     2                         write(ADM_log_fid,*) 'mpi_wait info end=='
            2880     2                      endif
            2881     2                      if (acount > size(areq)) then
            2882     2                         write(ADM_log_fid,*) 'acount, size(areq)',acount,size(areq)
            2883     2                      endif
            2884     1                      ! [fix] 12/03/26 T.Seiki
            2885     1               !!$    dbg_areq_save(:,3)=areq(:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2886     1  pp   8s             dbg_areq_save(1:acount,3)=areq(1:acount)
            2887     1                   endif  !=================================== dbg end
            2888                     
            2889     1                   if (opt_comm_dbg) then  !================== dbg start
            2890     1                      dbg_ierr=.false.
            2891     2                      do ro=1,romax(halo)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 728
                                   <<< Loop-information  End >>>
            2892     3  pp   8s                do n=1,rsize(ro,halo)*cmax
            2893     4   p   8m                   if (recvbuf(n,ro) == dbg_recvbuf_init) then
            2894     4   p   8s                      dbg_ierr=.true.
            2895     4   p   8m                   endif
            2896     4   p   8m                   if (recvbuf(n,ro) == dbg_sendbuf_init) then
            2897     4   p   8s                      dbg_ierr=.true.
            2898     4   p   8m                   endif
            2899     3   p   8v                enddo
            2900     2                      enddo
            2901     2                      if (dbg_ierr) then
            2902     2                         write(ADM_log_fid,*) 'communication is not completed!'
            2903     2                         write(ADM_log_fid,*) 'dbg_tcount=',dbg_tcount
            2904     2                         write(ADM_log_fid,*) 'romax=',romax,'rsize=',rsize(ro,halo),'cmax=',cmax
            2905     3                         do ro=1,romax(halo)
            2906     4   s    s                   do n=1,rsize(ro,halo)*cmax
            2907     5   p    s                      if (recvbuf(n,ro) == dbg_recvbuf_init) then
            2908     5   m    s                         write(ADM_log_fid,*) 'n=',n,'ro=',ro,'recvbuf=',recvbuf(n,ro)
            2909     5   p    s                      endif
            2910     4   p    s                   enddo
            2911     3                         enddo
            2912     2                         write(ADM_log_fid,*) 'areq after irecv:',dbg_areq_save(1:acount,1)
            2913     2                         write(ADM_log_fid,*) 'areq after isend',dbg_areq_save(1:acount,2)
            2914     2                         write(ADM_log_fid,*) 'areq after waitall',dbg_areq_save(1:acount,3)
            2915     2               !          write(ADM_log_fid,*) 'areq after barrier',dbg_areq_save(1:acount,4)
            2916     2               
            2917     2                         write(ADM_log_fid,*) 'ierr of mpi_waitall=',ierr
            2918     2                         write(ADM_log_fid,*) 'acount of mpi_waitall=',acount
            2919     2                         write(ADM_log_fid,*) 'stat of mpi_waitall=',stat(:,1:acount)
            2920     2               
            2921     2                      endif
            2922     1                      dbg_tcount=dbg_tcount+1
            2923     1                   endif  !=================================== dbg end
            2924                     
            2925                     
            2926     1                   if  (opt_comm_barrier) then
            2927     1                      call mpi_barrier(ADM_comm_run_world,ierr)
            2928     2                      if (ierr.ne.0) then
            2929     2                         write(ADM_log_fid,*) 'mpi_barriert info start=='
            2930     2                         write(ADM_log_fid,*) 'ierr=',ierr
            2931     2                         write(ADM_log_fid,*) 'mpi_barrier info end=='
            2932     2                      endif
            2933     1               !       if (opt_comm_dbg) then
            2934     1               !          dbg_areq_save(:,4)=areq(:)
            2935     1               !       endif
            2936     1                   endif
            2937                     
            2938                     
            2939                         !-----------------------------------------
            2940                         !
            2941                     !    i_dbg=0 !iga
            2942     1                   do ro=1,romax(halo)
            2943     1                      !-----------------------------------------
            2944     1                      !  recvbuf -> var ( recieve in region )
            2945     1                      !-----------------------------------------
            2946     2                      do nr=1,nrmax(ro,halo)
            2947     2                         rs=recvinfo(SIZE_COMM,nr,ro,halo)
            2948     2                         rl=recvinfo(LRGNID_COMM,nr,ro,halo)
            2949     2                         rb=recvinfo(BASE_COMM,nr,ro,halo)*cmax
            2950     2               !=org=!cdir novector
            2951     2               !=org=          do n=1,rs
            2952     2               !=org=!cdir unroll=3
            2953     2               !=org=             do m=1,varmax
            2954     2               !=org=!!cdir shortloop
            2955     2               !=org=                do k=1,kmax
            2956     2               !=org=                   var(recvlist(n,nr,ro,halo),k,rl,clist(m)) &
            2957     2               !=org=                        =recvbuf(k+(m-1)*kmax+(n-1)*cmax+rb,ro)
            2958     2               !=org=                enddo
            2959     2               !=org=             enddo
            2960     2               !=org=!             if (ADM_prc_me==2) write(ADM_log_fid,*) 'ro,n,nr,',ro,n,nr,recvlist(n,nr,ro,halo)
            2961     2               !=org=          enddo
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 4)
                                   <<<    PREFETCH       : 2
                                   <<<      clist: 2
                                   <<< Loop-information  End >>>
            2962     3   p                     do m=1,varmax
            2963     3               !cdir outerunroll=8
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 3)
                                   <<< Loop-information  End >>>
            2964     4  pp                        do k=1,kmax
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2965     5   p   4v                      do n=1,rs
            2966     5   p   4v                         var(recvlist(n,nr,ro,halo),k,rl,clist(m)) &
            2967     5                                       =recvbuf(n+(k-1)*rs+(m-1)*rs*kmax+rb,ro)
            2968     5   p   4v                      enddo
            2969     4   p                        enddo
            2970     3               !             if (ADM_prc_me==2) write(ADM_log_fid,*) 'ro,n,nr,',ro,n,nr,recvlist(n,nr,ro,halo)
            2971     3   p                     enddo
            2972     2               !          i_dbg=i_dbg+max(rs,0)
            2973     2                      enddo
            2974     1               
            2975     1                      !-----------------------------------------
            2976     1                      !
            2977     1                      !-----------------------------------------
            2978     1                      !  recvbuf -> var_pl ( recieve in pole )
            2979     1                      !-----------------------------------------
            2980     2                      do nr=1,nrmax_pl(ro,halo)
            2981     2                         rs=recvinfo_pl(SIZE_COMM,nr,ro,halo)
            2982     2                         rl=recvinfo_pl(LRGNID_COMM,nr,ro,halo)
            2983     2                         rb=recvinfo_pl(BASE_COMM,nr,ro,halo)*cmax
            2984     2               !=org=!cdir novector
            2985     2               !=org=          do n=1,rs
            2986     2               !=org=!cdir unroll=3
            2987     2               !=org=             do m=1,varmax
            2988     2               !=org=!!cdir shortloop
            2989     2               !=org=                do k=1,kmax
            2990     2               !=org=                   var_pl(recvlist_pl(n,nr,ro,halo),k,rl,clist(m)) &
            2991     2               !=org=                        =recvbuf(k+(m-1)*kmax+(n-1)*cmax+rb,ro)
            2992     2               !=org=                enddo
            2993     2               !=org=             enddo
            2994     2               !=org=          enddo
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 4)
                                   <<<    PREFETCH       : 2
                                   <<<      clist: 2
                                   <<< Loop-information  End >>>
            2995     3   p                     do m=1,varmax
            2996     3               !cdir outerunroll=8
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 3)
                                   <<< Loop-information  End >>>
            2997     4  pp                        do k=1,kmax
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2998     5   p   4v                      do n=1,rs
            2999     5   p   4v                         var_pl(recvlist_pl(n,nr,ro,halo),k,rl,clist(m)) &
            3000     5                                       =recvbuf(n+(k-1)*rs+(m-1)*rs*kmax+rb,ro)
            3001     5   p   4v                      enddo
            3002     4   p                        enddo
            3003     3   p                     enddo
            3004     2               
            3005     2                      enddo
            3006     1                   enddo !loop ro
            3007                         t(10)=mpi_wtime()
            3008                         time_rbuf=time_rbuf+(t(10)-t(9))
            3009                     
            3010                     !    write(ADM_log_fid,*) 'recv count=',i_dbg,'prc=',adm_prc_me
            3011                     
            3012                         !-----------------------------------------
            3013                         !
            3014                         !-----------------------------------------
            3015                         !  copy data around singular point
            3016                         !-----------------------------------------
            3017     1                   do nc=1,ncmax_sgp(halo)
            3018     1                      cs=copyinfo_sgp(SIZE_COPY,nc,halo)
            3019     1                      cl=copyinfo_sgp(LRGNID_COPY,nc,halo)
            3020     1                      scl=copyinfo_sgp(SRC_LRGNID_COPY,nc,halo)
            3021     1               !=org=!cdir novector
            3022     1               !=org=       do n=1,cs
            3023     1               !=org=!cdir unroll=3
            3024     1               !=org=          do m=1,varmax
            3025     1               !=org=!!cdir shortloop
            3026     1               !=org=             do k=1,kmax
            3027     1               !=org=                var(recvlist_sgp(n,nc,halo),k,cl ,clist(m)) &
            3028     1               !=org=                     =var(sendlist_sgp(n,nc,halo),k,scl,clist(m))
            3029     1               !=org=             enddo
            3030     1               !=org=          enddo
            3031     1               !=org=       enddo
            3032     1               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 3)
                                   <<<    PREFETCH       : 2
                                   <<<      clist: 2
                                   <<< Loop-information  End >>>
            3033     2   p                  do m=1,varmax
            3034     2               !cdir outerunroll=8
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 2)
                                   <<< Loop-information  End >>>
            3035     3  pp                     do k=1,kmax
            3036     4   p   8s                   do n=1,cs
            3037     4   p   8m                      var(recvlist_sgp(n,nc,halo),k,cl ,clist(m)) &
            3038     4                                    =var(sendlist_sgp(n,nc,halo),k,scl,clist(m))
            3039     4   p   8v                   enddo
            3040     3   p                     enddo
            3041     2   p                  enddo
            3042     1               
            3043     1                   enddo
            3044                         t(11)=mpi_wtime()
            3045                         time_copy_sgp=time_copy_sgp+(t(11)-t(10))
            3046                         !!
            3047                         !call mpi_barrier(ADM_comm_run_world,ierr)
            3048                         t(12)=mpi_wtime()
            3049                         time_bar2=time_bar2+(t(12)-t(11))
            3050                         time_total=time_total+(t(12)-t(0))
            3051                     
            3052                         call DEBUG_rapend('COMM data_transfer')
            3053                     
            3054                       end subroutine COMM_data_transfer
            3055                     
            3056                       !-----------------------------------------------------------------------------
            3057                       subroutine COMM_data_transfer_rgn2pl( &
            3058                            var,    &
            3059                            var_pl, &
            3060                            knum,   &
            3061                            nnum    )
            3062                         use mod_adm, only: &
            3063                            ADM_COMM_RUN_WORLD, &
            3064                            ADM_prc_tab,        &
            3065                            ADM_rgn2prc,        &
            3066                            ADM_prc_me,         &
            3067                            ADM_NPL,            &
            3068                            ADM_SPL,            &
            3069                            ADM_prc_npl,        &
            3070                            ADM_prc_spl,        &
            3071                            ADM_rgnid_npl_mng,  &
            3072                            ADM_rgnid_spl_mng,  &
            3073                            ADM_gall,           &
            3074                            ADM_gall_pl,        &
            3075                            ADM_lall,           &
            3076                            ADM_lall_pl,        &
            3077                            ADM_gall_1d,        &
            3078                            ADM_gmin,           &
            3079                            ADM_gmax,           &
            3080                            ADM_GSLF_PL
            3081                         implicit none
            3082                     
            3083                         integer, intent(in)    :: knum
            3084                         integer, intent(in)    :: nnum
            3085                         real(8), intent(inout) :: var   (ADM_gall,   knum,ADM_lall,   nnum)
            3086                         real(8), intent(inout) :: var_pl(ADM_gall_pl,knum,ADM_lall_pl,nnum)
            3087                     
            3088                         real(8) :: v_npl_send(knum,nnum)
            3089                         real(8) :: v_spl_send(knum,nnum)
            3090                         real(8) :: v_npl_recv(knum,nnum)
            3091                         real(8) :: v_spl_recv(knum,nnum)
            3092                     
            3093                         integer :: ireq(4)
            3094                         integer :: istat(MPI_STATUS_SIZE)
            3095                     
            3096                         integer :: ierr
            3097                         integer :: k, l, n, rgnid
            3098                     
            3099                         integer :: i,j,suf
            3100                         suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
            3101                         !---------------------------------------------------------------------------
            3102                     
            3103     1                   if( comm_pl ) then ! T.Ohno 110721
            3104     1               
            3105     1                      !--- recv pole value
            3106     1                      !--- north pole
            3107     2                      if ( ADM_prc_me == ADM_prc_npl ) then
            3108     2                         call MPI_IRECV( v_npl_recv,                       &
            3109     2                                         knum * nnum,                      &
            3110     2                                         MPI_DOUBLE_PRECISION,             &
            3111     2                                         ADM_rgn2prc(ADM_rgnid_npl_mng)-1, &
            3112     2                                         ADM_NPL,                          &
            3113     2                                         ADM_COMM_RUN_WORLD,               &
            3114     2                                         ireq(3),                          &
            3115     2                                         ierr                              )
            3116     2                      endif
            3117     1               
            3118     1                      !--- south pole
            3119     2                      if ( ADM_prc_me == ADM_prc_spl ) then
            3120     2                         call MPI_IRECV( v_spl_recv,                       &
            3121     2                                         knum * nnum,                      &
            3122     2                                         MPI_DOUBLE_PRECISION,             &
            3123     2                                         ADM_rgn2prc(ADM_rgnid_spl_mng)-1, &
            3124     2                                         ADM_SPL,                          &
            3125     2                                         ADM_COMM_RUN_WORLD,               &
            3126     2                                         ireq(4),                          &
            3127     2                                         ierr                              )
            3128     2                      endif
            3129     1               
            3130     1                      !--- send pole value
            3131     2                      do l = 1, ADM_lall
            3132     2                         rgnid = ADM_prc_tab(l,ADM_prc_me)
            3133     2               
            3134     2                         !--- north pole
            3135     3                         if ( rgnid == ADM_rgnid_npl_mng ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 3
                                   <<< Loop-information  End >>>
            3136     4  pp                        do n = 1, nnum
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 411
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            3137     5  pp   8v                   do k = 1, knum
            3138     5   p   8v                      v_npl_send(k,n) = var(suf(ADM_gmin,ADM_gmax+1),k,l,n)
            3139     5   p   8v                   enddo
            3140     4   p                        enddo
            3141     3               
            3142     3                            call MPI_ISEND( v_npl_send,           &
            3143     3                                            knum * nnum,          &
            3144     3                                            MPI_DOUBLE_PRECISION, &
            3145     3                                            ADM_prc_npl-1,        &
            3146     3                                            ADM_NPL,              &
            3147     3                                            ADM_COMM_RUN_WORLD,   &
            3148     3                                            ireq(1),              &
            3149     3                                            ierr                  )
            3150     3                         endif
            3151     2               
            3152     2                         !--- south pole
            3153     3                         if ( rgnid == ADM_rgnid_spl_mng ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            3154     4  pp                        do n = 1, nnum
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 391
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            3155     5  pp   8v                   do k = 1, knum
            3156     5   p   8v                      v_spl_send(k,n) = var(suf(ADM_gmax+1,ADM_gmin),k,l,n)
            3157     5   p   8v                   enddo
            3158     4   p                        enddo
            3159     3               
            3160     3                            call MPI_ISEND( v_spl_send,           &
            3161     3                                            knum * nnum,          &
            3162     3                                            MPI_DOUBLE_PRECISION, &
            3163     3                                            ADM_prc_spl-1,        &
            3164     3                                            ADM_SPL,              &
            3165     3                                            ADM_COMM_RUN_WORLD,   &
            3166     3                                            ireq(2),              &
            3167     3                                            ierr                  )
            3168     3                         endif
            3169     2               
            3170     2                      enddo
            3171     1               
            3172     2       4              do l = 1, ADM_lall
            3173     2       4                 rgnid = ADM_prc_tab(l,ADM_prc_me)
            3174     2               
            3175     2                         !--- north pole
            3176     2       4                 if( rgnid == ADM_rgnid_npl_mng ) call MPI_WAIT(ireq(1),istat,ierr)
            3177     2               
            3178     2                         !--- south pole
            3179     2       4                 if( rgnid == ADM_rgnid_spl_mng ) call MPI_WAIT(ireq(2),istat,ierr)
            3180     2       4              enddo
            3181     1               
            3182     2                      if ( ADM_prc_me == ADM_prc_npl ) then
            3183     2                         call MPI_WAIT(ireq(3),istat,ierr)
            3184     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<< Loop-information  End >>>
            3185     3  pp                     do n = 1, nnum
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 640
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            3186     4  pp   8v                do k = 1, knum
            3187     4   p   8v                   var_pl(ADM_GSLF_PL,k,ADM_NPL,n) = v_npl_recv(k,n)
            3188     4   p   8v                enddo
            3189     3   p                     enddo
            3190     2                      endif
            3191     1               
            3192     2                      if ( ADM_prc_me == ADM_prc_spl ) then
            3193     2                         call MPI_WAIT(ireq(4),istat,ierr)
            3194     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<< Loop-information  End >>>
            3195     3  pp                     do n = 1, nnum
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 616
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            3196     4  pp   8v                do k = 1, knum
            3197     4   p   8v                   var_pl(ADM_GSLF_PL,k,ADM_SPL,n) = v_spl_recv(k,n)
            3198     4   p   8v                enddo
            3199     3   p                     enddo
            3200     2                      endif
            3201     1               
            3202     1                   endif
            3203                     
            3204                         return
            3205                       end subroutine COMM_data_transfer_rgn2pl
            3206                     
            3207                       !-----------------------------------------------------------------------------
            3208                       !> comm_type : 1 ( region -> pole )
            3209                       !>           : 2 ( region -> pole -> regular communication )
            3210                       !>           : 3 ( regular communication only )
            3211                       subroutine COMM_var( &
            3212                            var,       &
            3213                            var_pl,    &
            3214                            KNUM,      &
            3215                            NNUM,      &
            3216                            comm_type, &
            3217                            NSval_fix  )
            3218                         use mod_adm, only: &
            3219                            ADM_COMM_RUN_WORLD,&
            3220                            ADM_prc_tab,       &
            3221                            ADM_rgn2prc,       &
            3222                            ADM_prc_me,        &
            3223                            ADM_prc_npl,       &
            3224                            ADM_prc_spl,       &
            3225                            ADM_rgnid_npl_mng, &
            3226                            ADM_rgnid_spl_mng, &
            3227                            ADM_gall,          &
            3228                            ADM_gall_pl,       &
            3229                            ADM_lall,          &
            3230                            ADM_lall_pl,       &
            3231                            ADM_KNONE,         &
            3232                            ADM_gall_1d,       &
            3233                            ADM_gmin,          &
            3234                            ADM_gmax,          &
            3235                            ADM_GSLF_PL,       &
            3236                            ADM_NPL,           &
            3237                            ADM_SPL
            3238                         implicit none
            3239                     
            3240                         integer, intent(in)    :: KNUM      ! number of layers
            3241                         integer, intent(in)    :: NNUM      ! number of variables
            3242                         real(8), intent(inout) :: var   (ADM_gall,   KNUM,ADM_lall,   NNUM) ! variables
            3243                         real(8), intent(inout) :: var_pl(ADM_gall_pl,KNUM,ADM_lall_pl,NNUM) ! variables at poles
            3244                         integer, intent(in)    :: comm_type ! communication type
            3245                         logical, intent(in)    :: NSval_fix ! North & South value is fixed or not.
            3246                     
            3247                         integer :: ireq(4), istat(MPI_STATUS_SIZE), ierr
            3248                         !
            3249                         real(8) :: v_npl_send(KNUM,NNUM)
            3250                         real(8) :: v_spl_send(KNUM,NNUM)
            3251                         real(8) :: v_npl_recv(KNUM,NNUM)
            3252                         real(8) :: v_spl_recv(KNUM,NNUM)
            3253                     
            3254                         integer :: rgnid
            3255                         integer :: l
            3256                     
            3257                         integer :: i,j,suf
            3258                         suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
            3259                         !---------------------------------------------------------------------------
            3260                     
            3261     1                   if ( opt_comm_barrier ) then
            3262     1                      call DEBUG_rapstart('Node imbalance adjustment')
            3263     1                      call MPI_BARRIER( ADM_comm_run_world, ierr )
            3264     1                      call DEBUG_rapend  ('Node imbalance adjustment')
            3265     1                   endif
            3266                     
            3267                         call DEBUG_rapstart('COMM var')
            3268                     
            3269     1                   if( comm_pl .and. ((comm_type==1).or.(comm_type==2)) ) then ! T.Ohno 110721
            3270     1               
            3271     2                      if ( ADM_prc_me == ADM_prc_npl ) then !--- recv north pole value
            3272     2                         call MPI_IRECV( v_npl_recv(1,1),                  & !--- starting address
            3273     2                                         KNUM * NNUM,                      & !--- number of array
            3274     2                                         MPI_DOUBLE_PRECISION,             & !--- type
            3275     2                                         ADM_rgn2prc(ADM_rgnid_npl_mng)-1, & !--- source rank
            3276     2                                         ADM_NPL,                          & !--- tag
            3277     2                                         ADM_COMM_RUN_WORLD,               & !--- world
            3278     2                                         ireq(3),                          & !--- request id
            3279     2                                         ierr                              ) !--- error id
            3280     2                      endif
            3281     1               
            3282     2                      do l = 1, ADM_lall
            3283     2                         rgnid = ADM_prc_tab(l,ADM_prc_me)
            3284     2               
            3285     3                         if ( rgnid == ADM_rgnid_npl_mng ) then !--- send north pole value
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 6
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            3286     3  pp   8v                   v_npl_send(:,:) = var(suf(ADM_gmin,ADM_gmax+1),:,l,:)
            3287     3               
            3288     3                            call MPI_ISEND( v_npl_send(1,1),      & !--- starting address
            3289     3                                            KNUM * NNUM,          & !--- number of array
            3290     3                                            MPI_DOUBLE_PRECISION, & !--- type
            3291     3                                            ADM_prc_npl-1,        & !--- dest rank
            3292     3                                            ADM_NPL,              & !--- tag
            3293     3                                            ADM_COMM_RUN_WORLD,   & !--- world
            3294     3                                            ireq(1),              & !--- request id
            3295     3                                            ierr                  ) !--- error id
            3296     3               
            3297     3                            call MPI_WAIT(ireq(1),istat,ierr)
            3298     3                         endif
            3299     2                      enddo
            3300     1               
            3301     2                      if ( ADM_prc_me == ADM_prc_npl ) then
            3302     2                         call MPI_WAIT(ireq(3),istat,ierr)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 6
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            3303     2  pp   8v                var_pl(ADM_GSLF_PL,:,ADM_NPL,:) = v_npl_recv(:,:)
            3304     2                      endif
            3305     1               
            3306     2                      if ( ADM_prc_me == ADM_prc_spl ) then !--- recv south pole value
            3307     2                         call MPI_IRECV( v_spl_recv(1,1),                  & !--- starting address
            3308     2                                         KNUM * NNUM,                      & !--- number of array
            3309     2                                         MPI_DOUBLE_PRECISION,             & !--- type
            3310     2                                         ADM_rgn2prc(ADM_rgnid_spl_mng)-1, & !--- srouce rank
            3311     2                                         ADM_SPL,                          & !--- tag
            3312     2                                         ADM_COMM_RUN_WORLD,               & !--- world
            3313     2                                         ireq(4),                          & !--- request id
            3314     2                                         ierr                              ) !--- error id
            3315     2                      endif
            3316     1               
            3317     2                      do l = 1, ADM_lall
            3318     2                         rgnid = ADM_prc_tab(l,ADM_prc_me)
            3319     3                         if ( rgnid == ADM_rgnid_spl_mng ) then !--- send south pole value
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 6
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            3320     3  pp   8v                   v_spl_send(:,:) = var(suf(ADM_gmax+1,ADM_gmin),:,l,:)
            3321     3               
            3322     3                            call MPI_ISEND( v_spl_send(1,1),      & !--- starting address
            3323     3                                            KNUM * NNUM,          & !--- number of array
            3324     3                                            MPI_DOUBLE_PRECISION, & !--- type
            3325     3                                            ADM_prc_spl-1,        & !--- dest rank
            3326     3                                            ADM_SPL,              & !--- tag
            3327     3                                            ADM_COMM_RUN_WORLD,   & !--- world
            3328     3                                            ireq(2),              & !--- request id
            3329     3                                            ierr                  ) !--- error id
            3330     3               
            3331     3                            call MPI_WAIT(ireq(2),istat,ierr)
            3332     3                         endif
            3333     2                      enddo
            3334     1               
            3335     2                      if ( ADM_prc_me == ADM_prc_spl ) then
            3336     2                         call MPI_WAIT(ireq(4),istat,ierr)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 6
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            3337     2  pp   8v                var_pl(ADM_GSLF_PL,:,ADM_SPL,:) = v_spl_recv(:,:)
            3338     2                      endif
            3339     1               
            3340     1                   endif
            3341                     
            3342                         !write(ADM_LOG_FID,*) 'COMM_var npl', v_npl_send(2,1), v_npl_recv(2,1), var_pl(ADM_GSLF_PL,2,ADM_NPL,1)
            3343                         !write(ADM_LOG_FID,*) 'COMM_var spl', v_spl_send(2,1), v_spl_recv(2,1), var_pl(ADM_GSLF_PL,2,ADM_SPL,1)
            3344                     
            3345                         !--- to complete communication
            3346     1                   if (      comm_type == 2 &
            3347     1                        .OR. comm_type == 3 ) then
            3348     1                      call COMM_data_transfer( var, var_pl )
            3349     1                   endif
            3350                     
            3351     1                   if (NSval_fix) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            3352     1  pp   6s             var(suf(ADM_gall_1d,1),:,:,:) = var(suf(ADM_gmax+1,ADM_gmin),:,:,:)
            3353     1   p   6s             var(suf(1,ADM_gall_1d),:,:,:) = var(suf(ADM_gmin,ADM_gmax+1),:,:,:)
            3354     1                   endif
            3355                     
            3356                         call DEBUG_rapend('COMM var')
            3357                     
            3358                         return
            3359                       end subroutine COMM_var
            3360                     
            3361                       !-----------------------------------------------------------------------------
            3362                       ! [add] T.Ohno 110721
            3363                       subroutine COMM_data_transfer_nopl(&
            3364                            var,                     & !--- INOUT : variables comminicated.
            3365                            trn,                     & !--- IN : commnucation flag for each variable
            3366                            hallo_num)                 !--- IN : number of hallo
            3367                         use mod_adm, only: &
            3368                            ADM_proc_stop,      & ! [add] C.Kodama 2011.04.26
            3369                            ADM_vlink_nmax,     &
            3370                            ADM_lall,           &
            3371                            ADM_comm_run_world, &
            3372                            ADM_kall
            3373                         use mod_cnst, only : &
            3374                            CNST_undef
            3375                         implicit none
            3376                         !
            3377                         real(8),intent(inout)::var(:,:,:,:)
            3378                         !
            3379                         logical,intent(in),optional::trn(:)
            3380                         !
            3381                         integer,intent(in),optional::hallo_num
            3382                         !
            3383                         integer :: shp(4)
            3384                         integer :: varmax
            3385                         integer :: cmax
            3386                         integer :: halo
            3387                     
            3388                         integer :: acount
            3389                         integer :: areq(2*(ADM_lall*max_comm_r2r+ADM_vlink_nmax*4))
            3390                         integer :: stat(mpi_status_size,2*(ADM_lall*max_comm_r2r+ADM_vlink_nmax*4))
            3391                         integer :: ierr
            3392                         !
            3393                         integer :: k,m,n
            3394                         integer :: nr,nc,ns
            3395                         integer :: sl,so,sb,ss
            3396                         integer :: rl,ro,rb,rs
            3397                         integer :: cl,scl,cs
            3398                     !    integer :: i_dbg !iga
            3399                         logical :: dbg_ierr !iga
            3400                       !=============================================================================
            3401                         !
            3402                         ! --- pre-process
            3403                         !
            3404                         comm_call_count=comm_call_count+1
            3405                         !
            3406                         t(0)=mpi_wtime()
            3407                         !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    FULL UNROLLING
                                   <<< Loop-information  End >>>
            3408             f           shp=shape(var)
            3409                         kmax = shp(2)
            3410                         !
            3411     1                   if (present(trn)) then
            3412     1                      varmax=0
            3413     1               !cdir novector
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 16
                                   <<<      clist: 16
                                   <<< Loop-information  End >>>
            3414     2       8s             do n=1,shp(4)
            3415     3       8s                if(trn(n)) then
            3416     3       8s                   varmax=varmax+1
            3417     3       8s                   clist(varmax)=n
            3418     3       8s                endif
            3419     2       8s             enddo
            3420     1                   else
            3421     1                      varmax=shp(4)
            3422     1               !cdir novector
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1600
                                   <<< Loop-information  End >>>
            3423     2  pp   8s             do n=1,varmax
            3424     2   p   8s                clist(n)=n
            3425     2   p   8s             enddo
            3426     1                   endif
            3427                         !
            3428     1                   if (present(hallo_num)) then
            3429     1                      halo=hallo_num
            3430     1                   else
            3431     1                      halo=1
            3432     1                   endif
            3433                     
            3434     1                   if (halo.ne.1) then
            3435     1                      write(ADM_log_fid,*) 'halo=',halo
            3436     1                   endif
            3437                     
            3438                         !
            3439                         cmax=varmax*kmax
            3440                         ! [Add] 07/11/07 T.Mitsui for check of varmax
            3441     1                   if( opt_check_varmax ) then
            3442     1                      ! <- [rep] C.Kodama 2011.04.26
            3443     2                      if ( cmax > max_varmax * ADM_kall ) then
            3444     2                         write(ADM_LOG_FID,*)  'error: cmax >  max_varmax * ADM_kall, stop!'
            3445     2                         write(ADM_LOG_FID,*)  'cmax=', cmax, 'max_varmax*ADM_kall=', max_varmax*ADM_kall
            3446     2                         call ADM_proc_stop
            3447     2                      end if
            3448     1                      ! ->
            3449     1                   end if
            3450                         !
            3451                         t(1)=mpi_wtime()
            3452                         time_pre=time_pre+(t(1)-t(0))
            3453                         t(2)=mpi_wtime()
            3454                         time_bar1=time_bar1+(t(2)-t(1))
            3455                         !-----------------------------------------
            3456                         ! call mpi_isend
            3457                         !-----------------------------------------
            3458     1                   if (opt_comm_dbg) then !iga
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            3459     1  pp    v             sendbuf(:,:)= dbg_sendbuf_init
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            3460     1  pp    v             recvbuf(:,:)= dbg_recvbuf_init
            3461     2                      if (somax(halo)>(ADM_lall*max_comm_r2r+ADM_vlink_nmax*4)) then
            3462     2                         write(ADM_log_fid,*) 'somax inconsistency'
            3463     2                         write(ADM_log_fid,*) somax(halo),(ADM_lall*max_comm_r2r+ADM_vlink_nmax*4)
            3464     2                      endif
            3465     1                   endif
            3466                     
            3467                     
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 4
                                   <<<      areq: 4
                                   <<< Loop-information  End >>>
            3468     1                   do ro=1,romax(halo)
            3469     1                      !
            3470     2                      if (opt_comm_dbg) then
            3471     3                         if (rsize(ro,halo)*cmax > size(recvbuf(:,ro)) ) then
            3472     3                            write(ADM_log_fid,*) 'ro',ro,'buf-dim=',shape(recvbuf),'rsize=',rsize(ro,halo),'cmax=',cmax
            3473     3                         endif
            3474     2                      endif
            3475     1                      !
            3476     1                      call mpi_irecv(recvbuf(1,ro)              &
            3477     1                           ,rsize(ro,halo)*cmax        &
            3478     1                           ,mpi_double_precision       &
            3479     1                           ,sourcerank(ro,halo)        &
            3480     1                           ,recvtag(ro,halo)           &
            3481     1                           ,ADM_comm_run_world         &
            3482     1                           ,areq(ro)                   &
            3483     1                           ,ierr)
            3484     1                      !
            3485     2                      if (opt_comm_dbg) then
            3486     3                         if (ierr.ne.0) then
            3487     3                            write(ADM_log_fid,*) 'mpi_irecv info start=='
            3488     3                            write(ADM_log_fid,*) 'ierr=',ierr
            3489     3                            write(ADM_log_fid,*) 'ro=',ro
            3490     3                            write(ADM_log_fid,*) 'rsize=',rsize(ro,halo)
            3491     3                            write(ADM_log_fid,*) 'cmax=',cmax
            3492     3                            write(ADM_log_fid,*) 'areq=',areq(ro)
            3493     3                            write(ADM_log_fid,*) 'mpi_irecv info end=='
            3494     3                         endif
            3495     2                         ! [fix] 12/03/26 T.Seiki
            3496     2               !!$       dbg_areq_save(:,1)=areq(:)
            3497     2                         dbg_areq_save(ro,1)=areq(ro)
            3498     2                      endif
            3499     1                   enddo
            3500                     
            3501                         t(3)=mpi_wtime()
            3502                         time_recv=time_recv+(t(3)-t(2))
            3503                         !-----------------------------------------
            3504                         !  var -> sendbuf
            3505                         !-----------------------------------------
            3506     1                   do so=1,somax(halo)
            3507     1               
            3508     1               
            3509     1               
            3510     1                      t(4)=mpi_wtime()
            3511     2                      do ns=1,nsmax(so,halo)
            3512     2                         ss=sendinfo(SIZE_COMM,ns,so,halo)
            3513     2                         sl=sendinfo(LRGNID_COMM,ns,so,halo)
            3514     2                         sb=sendinfo(BASE_COMM,ns,so,halo)*cmax
            3515     3                         do m=1,varmax
            3516     3               !cdir outerunroll=8
            3517     4                            do k=1,kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 696
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            3518     5  pp   4v                      do n=1,ss
            3519     5   p   4v                         sendbuf(n+(k-1)*ss+(m-1)*ss*kmax+sb,so) &
            3520     5                                       =var(sendlist(n,ns,so,halo),k,sl,clist(m))
            3521     5   p   4v                      enddo
            3522     4                            enddo
            3523     3                         enddo
            3524     2               
            3525     2               
            3526     2                      enddo
            3527     1                      !-----------------------------------------
            3528     1                      t(5)=mpi_wtime()
            3529     1                      time_sbuf=time_sbuf+(t(5)-t(4))
            3530     1               
            3531     1               
            3532     1                      !-----------------------------------------
            3533     1                      !
            3534     1                      !-----------------------------------------
            3535     1                      ! call mpi_isend
            3536     1                      !-----------------------------------------
            3537     1               
            3538     2                      if (opt_comm_dbg) then
            3539     3                         if (ssize(so,halo)*cmax>size(sendbuf(:,so))) then
            3540     3                            write(ADM_log_fid,*) 'so',so,'buf-dim=',shape(sendbuf),'rsize=',ssize(so,halo),'cmax=',cmax
            3541     3                         endif
            3542     2                      endif
            3543     1               
            3544     1                      call mpi_isend(sendbuf(1,so)              &
            3545     1                           ,ssize(so,halo)*cmax        &
            3546     1                           ,mpi_double_precision       &
            3547     1                           ,destrank(so,halo)          &
            3548     1                           ,sendtag(so,halo)           &
            3549     1                           ,ADM_comm_run_world             &
            3550     1                           ,areq(so+romax(halo))       &
            3551     1                           ,ierr)
            3552     2                      if (opt_comm_dbg) then
            3553     3                         if (ierr.ne.0) then
            3554     3                            write(ADM_log_fid,*) 'mpi_isend info start=='
            3555     3                            write(ADM_log_fid,*) 'ierr=',ierr
            3556     3                            write(ADM_log_fid,*) 'so=',so
            3557     3                            write(ADM_log_fid,*) 'ssize=',ssize(so,halo)
            3558     3                            write(ADM_log_fid,*) 'cmax=',cmax
            3559     3                            write(ADM_log_fid,*) 'areq=',areq(so+romax(halo))
            3560     3                            write(ADM_log_fid,*) 'mpi_isend info end=='
            3561     3                         endif
            3562     2                         ! [fix] 12/03/26 T.Seiki
            3563     2               !!$       dbg_areq_save(:,2)=areq(:)
            3564     2                         dbg_areq_save(so+romax(halo),2)=areq(so+romax(halo))
            3565     2                      endif
            3566     1               
            3567     1               
            3568     1                      t(6)=mpi_wtime()
            3569     1                      time_send=time_send+(t(6)-t(5))
            3570     1                      size_total=size_total+ssize(so,halo)*cmax
            3571     1                      comm_count=comm_count+1
            3572     1                   enddo !loop so
            3573                         !-----------------------------------------
            3574                         !
            3575                         t(7)=mpi_wtime()
            3576                         !---------------------------------------------------
            3577                         !  var -> var (region to region copy in same rank)
            3578                         !---------------------------------------------------
            3579     1                   do nc=1,ncmax_r2r(halo)
            3580     1                      cs=copyinfo_r2r(SIZE_COPY,nc,halo)
            3581     1                      cl=copyinfo_r2r(LRGNID_COPY,nc,halo)
            3582     1                      scl=copyinfo_r2r(SRC_LRGNID_COPY,nc,halo)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 3)
                                   <<<    PREFETCH       : 2
                                   <<<      clist: 2
                                   <<< Loop-information  End >>>
            3583     2   p                  do m=1,varmax
            3584     2               !cdir outerunroll=8
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 2)
                                   <<< Loop-information  End >>>
            3585     3  pp                     do k=1,kmax
            3586     4   p   8s                   do n=1,cs
            3587     4   p   8m                      var(recvlist_r2r(n,nc,halo),k,cl ,clist(m)) &
            3588     4                                    =var(sendlist_r2r(n,nc,halo),k,scl,clist(m))
            3589     4   p   8v                   enddo
            3590     3   p                     enddo
            3591     2   p                  enddo
            3592     1               
            3593     1                   enddo
            3594                         !-----------------------------------------
            3595                         !
            3596                         !-----------------------------------------
            3597                         t(8)=mpi_wtime()
            3598                         time_copy=time_copy+(t(8)-t(7))
            3599                         acount=romax(halo)+somax(halo)
            3600                         call mpi_waitall(acount,areq,stat,ierr)
            3601                     
            3602                         t(9)=mpi_wtime()
            3603                         time_wait=time_wait+(t(9)-t(8))
            3604                     
            3605     1                   if (opt_comm_dbg) then  !================== dbg start
            3606     2                      if (ierr.ne.0) then
            3607     2                         write(ADM_log_fid,*) 'mpi_wait info start=='
            3608     2                         write(ADM_log_fid,*) 'ierr=',ierr
            3609     2                         write(ADM_log_fid,*) 'acount=',acount
            3610     2                         write(ADM_log_fid,*) 'stat=',stat(:,1:acount)
            3611     2                         write(ADM_log_fid,*) 'areq=',areq(1:acount)
            3612     2                         write(ADM_log_fid,*) 'mpi_wait info end=='
            3613     2                      endif
            3614     2                      if (acount > size(areq)) then
            3615     2                         write(ADM_log_fid,*) 'acount, size(areq)',acount,size(areq)
            3616     2                      endif
            3617     1                      ! [fix] 12/03/26 T.Seiki
            3618     1               !!$    dbg_areq_save(:,3)=areq(:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            3619     1  pp   8s             dbg_areq_save(1:acount,3)=areq(1:acount)
            3620     1                   endif  !=================================== dbg end
            3621                     
            3622     1                   if (opt_comm_dbg) then  !================== dbg start
            3623     1                      dbg_ierr=.false.
            3624     2                      do ro=1,romax(halo)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 728
                                   <<< Loop-information  End >>>
            3625     3  pp   8s                do n=1,rsize(ro,halo)*cmax
            3626     4   p   8m                   if (recvbuf(n,ro) == dbg_recvbuf_init) then
            3627     4   p   8s                      dbg_ierr=.true.
            3628     4   p   8m                   endif
            3629     4   p   8m                   if (recvbuf(n,ro) == dbg_sendbuf_init) then
            3630     4   p   8s                      dbg_ierr=.true.
            3631     4   p   8m                   endif
            3632     3   p   8v                enddo
            3633     2                      enddo
            3634     2                      if (dbg_ierr) then
            3635     2                         write(ADM_log_fid,*) 'communication is not completed!'
            3636     2                         write(ADM_log_fid,*) 'dbg_tcount=',dbg_tcount
            3637     2                         write(ADM_log_fid,*) 'romax=',romax,'rsize=',rsize(ro,halo),'cmax=',cmax
            3638     3                         do ro=1,romax(halo)
            3639     4   s    s                   do n=1,rsize(ro,halo)*cmax
            3640     5   p    s                      if (recvbuf(n,ro) == dbg_recvbuf_init) then
            3641     5   m    s                         write(ADM_log_fid,*) 'n=',n,'ro=',ro,'recvbuf=',recvbuf(n,ro)
            3642     5   p    s                      endif
            3643     4   p    s                   enddo
            3644     3                         enddo
            3645     2                         write(ADM_log_fid,*) 'areq after irecv:',dbg_areq_save(1:acount,1)
            3646     2                         write(ADM_log_fid,*) 'areq after isend',dbg_areq_save(1:acount,2)
            3647     2                         write(ADM_log_fid,*) 'areq after waitall',dbg_areq_save(1:acount,3)
            3648     2               
            3649     2                         write(ADM_log_fid,*) 'ierr of mpi_waitall=',ierr
            3650     2                         write(ADM_log_fid,*) 'acount of mpi_waitall=',acount
            3651     2                         write(ADM_log_fid,*) 'stat of mpi_waitall=',stat(:,1:acount)
            3652     2               
            3653     2                      endif
            3654     1                      dbg_tcount=dbg_tcount+1
            3655     1                   endif  !=================================== dbg end
            3656                     
            3657                     
            3658     1                   if  (opt_comm_barrier) then
            3659     1                      call mpi_barrier(ADM_comm_run_world,ierr)
            3660     2                      if (ierr.ne.0) then
            3661     2                         write(ADM_log_fid,*) 'mpi_barriert info start=='
            3662     2                         write(ADM_log_fid,*) 'ierr=',ierr
            3663     2                         write(ADM_log_fid,*) 'mpi_barrier info end=='
            3664     2                      endif
            3665     1                   endif
            3666                     
            3667                     
            3668                         !-----------------------------------------
            3669                         !
            3670     1                   do ro=1,romax(halo)
            3671     1                      !-----------------------------------------
            3672     1                      !  recvbuf -> var ( recieve in region )
            3673     1                      !-----------------------------------------
            3674     2                      do nr=1,nrmax(ro,halo)
            3675     2                         rs=recvinfo(SIZE_COMM,nr,ro,halo)
            3676     2                         rl=recvinfo(LRGNID_COMM,nr,ro,halo)
            3677     2                         rb=recvinfo(BASE_COMM,nr,ro,halo)*cmax
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 4)
                                   <<<    PREFETCH       : 2
                                   <<<      clist: 2
                                   <<< Loop-information  End >>>
            3678     3   p                     do m=1,varmax
            3679     3               !cdir outerunroll=8
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 3)
                                   <<< Loop-information  End >>>
            3680     4  pp                        do k=1,kmax
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            3681     5   p   4v                      do n=1,rs
            3682     5   p   4v                         var(recvlist(n,nr,ro,halo),k,rl,clist(m)) &
            3683     5                                       =recvbuf(n+(k-1)*rs+(m-1)*rs*kmax+rb,ro)
            3684     5   p   4v                      enddo
            3685     4   p                        enddo
            3686     3   p                     enddo
            3687     2                      enddo
            3688     1                   enddo !loop ro
            3689                         t(10)=mpi_wtime()
            3690                         time_rbuf=time_rbuf+(t(10)-t(9))
            3691                     
            3692                         !-----------------------------------------
            3693                         !
            3694                         !-----------------------------------------
            3695                         !  copy data around singular point
            3696                         !-----------------------------------------
            3697     1                   do nc=1,ncmax_sgp(halo)
            3698     1                      cs=copyinfo_sgp(SIZE_COPY,nc,halo)
            3699     1                      cl=copyinfo_sgp(LRGNID_COPY,nc,halo)
            3700     1                      scl=copyinfo_sgp(SRC_LRGNID_COPY,nc,halo)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 3)
                                   <<<    PREFETCH       : 2
                                   <<<      clist: 2
                                   <<< Loop-information  End >>>
            3701     2   p                  do m=1,varmax
            3702     2               !cdir outerunroll=8
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 2)
                                   <<< Loop-information  End >>>
            3703     3  pp                     do k=1,kmax
            3704     4   p   8s                   do n=1,cs
            3705     4   p   8m                      var(recvlist_sgp(n,nc,halo),k,cl ,clist(m)) &
            3706     4                                    =var(sendlist_sgp(n,nc,halo),k,scl,clist(m))
            3707     4   p   8v                   enddo
            3708     3   p                     enddo
            3709     2   p                  enddo
            3710     1               
            3711     1                   enddo
            3712                         t(11)=mpi_wtime()
            3713                         time_copy_sgp=time_copy_sgp+(t(11)-t(10))
            3714                         !!
            3715                         !call mpi_barrier(ADM_comm_run_world,ierr)
            3716                         t(12)=mpi_wtime()
            3717                         time_bar2=time_bar2+(t(12)-t(11))
            3718                         time_total=time_total+(t(12)-t(0))
            3719                         !
            3720                       end subroutine COMM_data_transfer_nopl
            3721                     
            3722                     
            3723                       !-----------------------------------------------------------------------------
            3724                       subroutine COMM_Stat_sum( localsum, globalsum )
            3725                         use mod_adm, only: &
            3726                            ADM_COMM_RUN_WORLD, &
            3727                            ADM_prc_all,        &
            3728                            ADM_prc_me
            3729                         implicit none
            3730                     
            3731                         real(8), intent(in)  :: localsum
            3732                         real(8), intent(out) :: globalsum
            3733                     
            3734                         real(8) :: sendbuf(1)
            3735                         real(8) :: recvbuf(ADM_prc_all)
            3736                     
            3737                         integer :: ierr
            3738                         !---------------------------------------------------------------------------
            3739                     
            3740                     
            3741     1                   if ( COMM_pl ) then
            3742     1                      sendbuf(1) = localsum
            3743     1               
            3744     1                      call MPI_Allgather( sendbuf,              &
            3745     1                                          1,                    &
            3746     1                                          MPI_DOUBLE_PRECISION, &
            3747     1                                          recvbuf,              &
            3748     1                                          1,                    &
            3749     1                                          MPI_DOUBLE_PRECISION, &
            3750     1                                          ADM_COMM_RUN_WORLD,   &
            3751     1                                          ierr                  )
            3752     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1778
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            3753     1  pp   8v             globalsum = sum( recvbuf(:) )
            3754     1                   else
            3755     1                      globalsum = localsum
            3756     1                   endif
            3757                     
            3758                         return
            3759                       end subroutine COMM_Stat_sum
            3760                     
            3761                       !-----------------------------------------------------------------------------
            3762                       subroutine COMM_Stat_sum_eachlayer( kall, localsum, globalsum )
            3763                         use mod_adm, only: &
            3764                            ADM_COMM_RUN_WORLD, &
            3765                            ADM_prc_all,        &
            3766                            ADM_prc_me
            3767                         implicit none
            3768                     
            3769                         integer, intent(in)  :: kall
            3770                         real(8), intent(in)  :: localsum (kall)
            3771                         real(8), intent(out) :: globalsum(kall)
            3772                     
            3773                         real(8) :: gathersum(ADM_prc_all,kall)
            3774                     
            3775                         integer :: displs (ADM_prc_all)
            3776                         integer :: rcounts(ADM_prc_all)
            3777                     
            3778                         integer :: ierr
            3779                         integer :: k, p
            3780                         !---------------------------------------------------------------------------
            3781                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1143
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            3782     1  pp   8v          do k = 1, kall
            3783     1   p   8v             gathersum(ADM_prc_me,k) = localsum(k)
            3784     1   p   8v          enddo
            3785                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1067
                                   <<< Loop-information  End >>>
            3786     1  pp   8s          do p = 1, ADM_prc_all
            3787     1   p   8s             displs (p) = (p-1) * ADM_prc_all + 1
            3788     1   p   8s             rcounts(p) = 1
            3789     1   p   8s          enddo
            3790                     
            3791     1                   if ( COMM_pl ) then
            3792     1                      call MPI_Allgatherv( MPI_IN_PLACE,         &
            3793     1                                           1,                    &
            3794     1                                           MPI_DOUBLE_PRECISION, &
            3795     1                                           gathersum(1,1),       &
            3796     1                                           rcounts,              &
            3797     1                                           displs,               &
            3798     1                                           MPI_DOUBLE_PRECISION, &
            3799     1                                           ADM_COMM_RUN_WORLD,   &
            3800     1                                           ierr                  )
            3801     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 9
                                   <<< Loop-information  End >>>
            3802     2  pp                  do k = 1, kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            3803     2   p   8v                globalsum(k) = sum( gathersum(:,k) )
            3804     2   p                  enddo
            3805     1                   else
            3806     2   s                  do k = 1, kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2000
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            3807     2  pp    v                globalsum = gathersum(ADM_prc_me,k)
            3808     2   p                  enddo
            3809     1                   endif
            3810                     
            3811                       end subroutine COMM_Stat_sum_eachlayer
            3812                     
            3813                       !-----------------------------------------------------------------------------
            3814                       subroutine COMM_Stat_avg( localavg, globalavg )
            3815                         use mod_adm, only: &
            3816                            ADM_COMM_RUN_WORLD, &
            3817                            ADM_prc_all,        &
            3818                            ADM_prc_me
            3819                         implicit none
            3820                     
            3821                         real(8), intent(in)  :: localavg
            3822                         real(8), intent(out) :: globalavg
            3823                     
            3824                         real(8) :: sendbuf(1)
            3825                         real(8) :: recvbuf(ADM_prc_all)
            3826                     
            3827                         integer :: ierr
            3828                         !---------------------------------------------------------------------------
            3829                     
            3830     1                   if ( COMM_pl ) then
            3831     1                      sendbuf(1) = localavg
            3832     1               
            3833     1                      call MPI_Allgather( sendbuf,              &
            3834     1                                          1,                    &
            3835     1                                          MPI_DOUBLE_PRECISION, &
            3836     1                                          recvbuf,              &
            3837     1                                          1,                    &
            3838     1                                          MPI_DOUBLE_PRECISION, &
            3839     1                                          ADM_COMM_RUN_WORLD,   &
            3840     1                                          ierr                  )
            3841     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1778
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            3842     1  pp   8v             globalavg = sum( recvbuf(:) ) / real(ADM_prc_all,kind=8)
            3843     1                   else
            3844     1                      globalavg = localavg
            3845     1                   endif
            3846                     
            3847                         !write(ADM_LOG_FID,*) 'COMM_Stat_avg', sendbuf(1), recvbuf(:)
            3848                     
            3849                         return
            3850                       end subroutine COMM_Stat_avg
            3851                     
            3852                       !-----------------------------------------------------------------------------
            3853                       subroutine COMM_Stat_max( localmax, globalmax )
            3854                         use mod_adm, only: &
            3855                            ADM_COMM_RUN_WORLD, &
            3856                            ADM_prc_all,        &
            3857                            ADM_prc_me
            3858                         implicit none
            3859                     
            3860                         real(8), intent(in)  :: localmax
            3861                         real(8), intent(out) :: globalmax
            3862                     
            3863                         real(8) :: sendbuf(1)
            3864                         real(8) :: recvbuf(ADM_prc_all)
            3865                     
            3866                         integer :: ierr
            3867                         !---------------------------------------------------------------------------
            3868                     
            3869                         sendbuf(1) = localmax
            3870                     
            3871                         call MPI_Allgather( sendbuf,              &
            3872                                             1,                    &
            3873                                             MPI_DOUBLE_PRECISION, &
            3874                                             recvbuf,              &
            3875                                             1,                    &
            3876                                             MPI_DOUBLE_PRECISION, &
            3877                                             ADM_COMM_RUN_WORLD,   &
            3878                                             ierr                  )
            3879                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1231
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            3880        pp   8v          globalmax = maxval( recvbuf(:) )
            3881                     
            3882                         !write(ADM_LOG_FID,*) 'COMM_Stat_max', sendbuf(1), recvbuf(:)
            3883                     
            3884                         return
            3885                       end subroutine COMM_Stat_max
            3886                     
            3887                       !-----------------------------------------------------------------------------
            3888                       subroutine COMM_Stat_min( localmin, globalmin )
            3889                         use mod_adm, only: &
            3890                            ADM_COMM_RUN_WORLD, &
            3891                            ADM_prc_all,        &
            3892                            ADM_prc_me
            3893                         implicit none
            3894                     
            3895                         real(8), intent(in)  :: localmin
            3896                         real(8), intent(out) :: globalmin
            3897                     
            3898                         real(8) :: sendbuf(1)
            3899                         real(8) :: recvbuf(ADM_prc_all)
            3900                     
            3901                         integer :: ierr
            3902                         !---------------------------------------------------------------------------
            3903                     
            3904                         sendbuf(1) = localmin
            3905                     
            3906                         call MPI_Allgather( sendbuf,              &
            3907                                             1,                    &
            3908                                             MPI_DOUBLE_PRECISION, &
            3909                                             recvbuf,              &
            3910                                             1,                    &
            3911                                             MPI_DOUBLE_PRECISION, &
            3912                                             ADM_COMM_RUN_WORLD,   &
            3913                                             ierr                  )
            3914                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1231
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            3915        pp   8v          globalmin = minval( recvbuf(:) )
            3916                     
            3917                         !write(ADM_LOG_FID,*) 'COMM_Stat_min', sendbuf(1), recvbuf(:)
            3918                     
            3919                         return
            3920                       end subroutine COMM_Stat_min
            3921                     
            3922                     end module mod_comm
            3923                     !-------------------------------------------------------------------------------

 Diagnostic messages: program name(mod_comm)
   jwd8220o-i  "share/mod_comm.f90", line 6: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
  Module subprogram name(show_tempsb)
   jwd8201o-i  "share/mod_comm.f90", line 380: Invariant expression within loop is moved outside loop.
  Module subprogram name(COMM_setup)
   jwd8201o-i  "share/mod_comm.f90", line 667: Invariant expression within loop is moved outside loop.
   jwd8201o-i  "share/mod_comm.f90", line 708: Invariant expression within loop is moved outside loop.
   jwd8201o-i  "share/mod_comm.f90", line 709: Invariant expression within loop is moved outside loop.
   jwd8201o-i  "share/mod_comm.f90", line 725: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "share/mod_comm.f90", line 756: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 774: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 782: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 801: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 859: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 943: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 1030: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 1048: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 1066: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 1092: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 1109: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 1186: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 1229: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 1247: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "share/mod_comm.f90", line 1661: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "share/mod_comm.f90", line 1847: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 1851: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "share/mod_comm.f90", line 1883: Invariant expression within loop is moved outside loop.
   jwd8201o-i  "share/mod_comm.f90", line 1895: Invariant expression within loop is moved outside loop.
   jwd8201o-i  "share/mod_comm.f90", line 1907: Invariant expression within loop is moved outside loop.
   jwd8201o-i  "share/mod_comm.f90", line 1919: Invariant expression within loop is moved outside loop.
   jwd8201o-i  "share/mod_comm.f90", line 1931: Invariant expression within loop is moved outside loop.
   jwd8201o-i  "share/mod_comm.f90", line 1943: Invariant expression within loop is moved outside loop.
   jwd8201o-i  "share/mod_comm.f90", line 1955: Invariant expression within loop is moved outside loop.
   jwd8201o-i  "share/mod_comm.f90", line 1967: Invariant expression within loop is moved outside loop.
  Module subprogram name(output_time)
   jwd8209o-i  "share/mod_comm.f90", line 2432: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 2437: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 2438: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 2439: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 2440: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 2441: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 2442: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 2443: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 2444: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 2445: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 2446: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 2447: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 2448: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 2449: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 2462: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 2476: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(COMM_data_transfer)
   jwd8209o-i  "share/mod_comm.f90", line 2792: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 3037: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(COMM_data_transfer_rgn2pl)
   jwd8209o-i  "share/mod_comm.f90", line 3138: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 3156: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 3187: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 3197: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(COMM_data_transfer_nopl)
   jwd8209o-i  "share/mod_comm.f90", line 3587: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_comm.f90", line 3705: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(COMM_Stat_sum)
   jwd8208o-i  "share/mod_comm.f90", line 3753: Method of calculating sum or product is changed.
  Module subprogram name(COMM_Stat_sum_eachlayer)
   jwd8208o-i  "share/mod_comm.f90", line 3803: Method of calculating sum or product is changed.
  Module subprogram name(COMM_Stat_avg)
   jwd8208o-i  "share/mod_comm.f90", line 3842: Method of calculating sum or product is changed.

 Procedure information
   Lines      : 3923
   Statements : 2487
   Stack(byte): 93120
   Prefetch num: 202

 Total information
   Procedures       : 1
   Total lines      : 3923
   Total statements : 2487
   Total stack(byte): 93120
   Total prefetch num: 202


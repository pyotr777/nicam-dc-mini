
 Fujitsu Fortran Version 1.2.0  Mon Dec 21 17:14:21 2015

 Compilation information
   Current directory : /volume1/home/ra000007/a03106/nicam-dc-mini/src
   Source file       : nhm/share/mod_prgvar.f90

 Option information
   Command line options : -Kident_mpi -f2004 -Kfast,parallel,auto,ocl,preex,array_private,noalias=s,mfunc=2 -Kparallel_iteration=8,instance=8,dynamic_iteration -Qi -Qt -X03 -Ncompdisp -Koptmsg=1 -Cpp -Kprefetch_cache_level=all,prefetch_iteration_L2=50 -Ksimd -Ntl_notrt -U_FIPP_ -U_FAPP_ -I../src/include -o mod_prgvar.o -c -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -W0,-zmpa=Yignore-intent -I/opt/FJSVtclang/GM-1.2.0-19/lib64
   Cpp options          : -U_FIPP_ -U_FAPP_ -I../src/include -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -I/opt/FJSVtclang/GM-1.2.0-19/lib64 -D__FUJITSU -Dunix -Dsparc -D__sparc__ -D__unix -D__sparc -D__frt_version=700 -D__HPC_ACE__ -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -Dlinux -otmp -D__sparcv9 -D__sparc_v9__ -D__arch64__
   Effective options    : -fi -g0 -AE -Free -O3 -Qi,p,t -X03
                          -x0
                          -KFLTLD -Kadr44 -Knoalias=s -Kauto -Knoautoobjstack
                          -Knocalleralloc -Kdalign -Keval -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kilfunc
                          -Klargepage -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_if -Kloop_fusion
                          -Kloop_interchange -Kloop_nopart_parallel
                          -Kloop_nopart_simd -Kloop_noversioning -Kns
                          -Kmfunc=2 -Kocl -Komitfp -Koptmsg=1 -Kpreex
                          -Kprefetch_conditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_iteration_L2=50 -Kprefetch_nostrong
                          -Kprefetch_strong_L2 -Knoshortloop -Ksimd=1
                          -Knosimd_region_constant -Knostriping -Kswp
                          -Knotemparraystack -Kunroll -Knouxsimd -KNOXFILL
                          -Knoopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_noordered_reduction -Knothreadsafe
                          -Kparallel -Kparallel_nofp_precision
                          -Karray_private -Kdynamic_iteration -Kreduction
                          -Kregion_extension -Kinstance=8
                          -Kparallel_iteration=8
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Ncompdisp
                          -Nnocopyarg -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nline -Nlst -Nlst=i -Nlst=p -Nlst=t
                          -Nnomallocfree -Nnoobsfun -Nquickdbg=noargchk
                          -Nquickdbg=nosubchk -Nquickdbg=noundef -NRnotrap
                          -Nnorecursive -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 Module "mod_prgvar"
  (inc)(line-no.)(nest)(optimize)
               1                     !-------------------------------------------------------------------------------
               2                     !>
               3                     !! Prognostic variable module
               4                     !!
               5                     !! @par Description
               6                     !!         This module contains the prognostic variables
               7                     !!
               8                     !! @author H.Tomita
               9                     !!
              10                     !! @par History
              11                     !! @li      2004-02-17 (H.Tomita)   Imported from igdc-4.34
              12                     !! @li      2006-05-17 (H.Tomita)   Add optiion 'no_input'.
              13                     !! @li      2006-06-02 (H.Tomita)   Avoid the blocking of communication in prgvar_set_in.
              14                     !! @li      2007-02-09 (M.Satoh)    Change default: input_direct_access, output_direct_access
              15                     !! @li      2007-06-05 (M.Satoh)    add option: TRC_VMAX_INPUT
              16                     !! @li      2008-04-12 (T.Mitsui)   add prgvar_get_noq
              17                     !! @li      2008-04-12 (T.Mitsui)   add Nc,Nr,Ni,Ns,Ng restart and diagnosis option
              18                     !! @li      2008-05-24 (T.Mitsui)   trivial fix (only for log file)
              19                     !! @li      2009-04-14 (T.Mitsui)   add option diag_qi (Re-analysis data implicitly contains ice)
              20                     !! @li      2009-08-18 (T.Mitusi)   add option opt_qcqi_to_qv (qc and qi derived from Re-analysis may not be reliable)
              21                     !! @li      2011-07-22 (T.Ohno)     add subroutines for plane hgrid systems
              22                     !! @li      2011-09-03 (H.Yashiro)  New I/O
              23                     !! @li      2011-11-30 (S.Iga)      Avoid irregal isend/irecv buffer array (thanks to T.Inoue)
              24                     !! @li      2012-07-23 (H.Yashiro)  [add] Water Isotope by K.Yoshimura
              25                     !!
              26                     !<
              27                     module mod_prgvar
              28                       !-----------------------------------------------------------------------------
              29                       !
              30                       !++ Used modules
              31                       !
              32                       use mod_adm, only: &
              33                          ADM_LOG_FID,  &
              34                          ADM_MAXFNAME, &
              35                          ADM_NSYS
              36                       !-----------------------------------------------------------------------------
              37                       implicit none
              38                       private
              39                       !-----------------------------------------------------------------------------
              40                       !
              41                       !++ Public procedure
              42                       !
              43                       public :: prgvar_setup
              44                       public :: prgvar_get
              45                       public :: prgvar_get_noq
              46                       public :: prgvar_get_withdiag
              47                       public :: prgvar_set
              48                       public :: prgvar_get_in
              49                       public :: prgvar_get_in_withdiag
              50                       public :: prgvar_set_in
              51                     
              52                       public :: prgvar_get_plane_nopl     ! [add] T.Ohno 110722
              53                       public :: prgvar_get_noq_plane_nopl ! [add] T.Ohno 110722
              54                       public :: prgvar_set_plane_nopl     ! [add] T.Ohno 110722
              55                     
              56                       public :: restart_input
              57                       public :: restart_output
              58                     
              59                       !-----------------------------------------------------------------------------
              60                       !
              61                       !++ Public parameters & variables
              62                       !
              63                       character(len=ADM_MAXFNAME), public, save :: restart_input_basename  = ''
              64                       character(len=ADM_MAXFNAME), public, save :: restart_output_basename = ''
              65                     
              66                       !-----------------------------------------------------------------------------
              67                       !
              68                       !++ Private procedures
              69                       !
              70                       private :: cnvvar_prg2diag
              71                       private :: cnvvar_diag2prg
              72                     
              73                       !-----------------------------------------------------------------------------
              74                       !
              75                       !++ Private parameters & variables
              76                       !
              77                       integer, private, parameter :: PRG_vmax0 = 6
              78                     
              79                       integer, private, parameter :: I_RHOG     =  1 ! Density x G^{1/2}
              80                       integer, private, parameter :: I_RHOGVX   =  2 ! Density x G^{1/2} x Horizontal velocity (X-direction)
              81                       integer, private, parameter :: I_RHOGVY   =  3 ! Density x G^{1/2} x Horizontal velocity (Y-direction)
              82                       integer, private, parameter :: I_RHOGVZ   =  4 ! Density x G^{1/2} x Horizontal velocity (Z-direction)
              83                       integer, private, parameter :: I_RHOGW    =  5 ! Density x G^{1/2} x Vertical   velocity
              84                       integer, private, parameter :: I_RHOGE    =  6 ! Density x G^{1/2} x Energy
              85                     
              86                       integer, private, save      :: I_RHOGQstr =  7 ! tracers
              87                       integer, private, save      :: I_RHOGQend = -1 !
              88                     
              89                       character(len=16), private, save :: PRG_name(PRG_vmax0)
              90                       data PRG_name / 'rhog', 'rhogvx', 'rhogvy', 'rhogvz', 'rhogw', 'rhoge' /
              91                     
              92                       integer, private, parameter :: DIAG_vmax0 = 6
              93                     
              94                       integer, private, parameter :: I_pre  =  1 ! Pressure
              95                       integer, private, parameter :: I_tem  =  2 ! Temperature
              96                       integer, private, parameter :: I_vx   =  3 ! Horizontal velocity (X-direction)
              97                       integer, private, parameter :: I_vy   =  4 ! Horizontal velocity (Y-direction)
              98                       integer, private, parameter :: I_vz   =  5 ! Horizontal velocity (Z-direction)
              99                       integer, private, parameter :: I_w    =  6 ! Vertical   velocity
             100                     
             101                       integer, private, save      :: I_qstr =  7 ! tracers
             102                       integer, private, save      :: I_qend = -1 !
             103                     
             104                       character(len=16), private, save :: DIAG_name(DIAG_vmax0)
             105                       data DIAG_name / 'pre', 'tem', 'vx', 'vy', 'vz', 'w' /
             106                     
             107                       integer, private,              save :: PRG_vmax  ! total number of prognostic variables
             108                       integer, private,              save :: DIAG_vmax
             109                     
             110                       real(8), private, allocatable, save :: PRG_var   (:,:,:,:) ! container
             111                       real(8), private, allocatable, save :: PRG_var_pl(:,:,:,:)
             112                     
             113                       real(8), private, allocatable, save :: PRG_var1   (:,:,:,:) ! container
             114                       real(8), private, allocatable, save :: PRG_var1_pl(:,:,:,:)
             115                     
             116                       real(8), private, allocatable, save :: DIAG_var   (:,:,:,:) ! container
             117                       real(8), private, allocatable, save :: DIAG_var_pl(:,:,:,:)
             118                     
             119                       integer, private, save :: TRC_vmax_input ! number of input tracer variables
             120                     
             121                       character(len=ADM_MAXFNAME), private, save :: layername            = ''       ! [add] H.Yashiro 20110826
             122                       character(len=ADM_MAXFNAME), private, save :: input_io_mode        = 'LEGACY' ! [add] H.Yashiro 20110819
             123                       character(len=ADM_MAXFNAME), private, save :: output_io_mode       = 'LEGACY' ! [add] H.Yashiro 20110819
             124                       logical,                     private, save :: input_direct_access  = .true.
             125                       logical,                     private, save :: output_direct_access = .true.
             126                       logical,                     private, save :: allow_missingq       = .false.  ! [add] H.Yashiro 20110906
             127                       logical,                     private, save :: opt_diag_qi          = .false.
             128                       logical,                     private, save :: opt_qcqi_to_qv       = .false.  ! [Add] 09/08/18 T.Mitsui
             129                     
             130                       !-----------------------------------------------------------------------------
             131                     contains
             132                     
             133                       !-----------------------------------------------------------------------------
             134                       !>
             135                       !> Description of the subroutine prgvar_setup
             136                       !>
             137                       subroutine prgvar_setup
             138                         use mod_adm, only: &
             139                            ADM_CTL_FID,   &
             140                            ADM_proc_stop, &
             141                            ADM_gall,      &
             142                            ADM_gall_pl,   &
             143                            ADM_kall,      &
             144                            ADM_lall,      &
             145                            ADM_lall_pl
             146                         use mod_runconf, only: &
             147                            TRC_vmax,             &
             148                            TRC_name,             &
             149                            opt_2moment_water,    &
             150                            flag_diagnose_number, &
             151                            RAIN_TYPE,            &
             152                            I_QC,                 &
             153                            I_QR,                 &
             154                            I_QI,                 &
             155                            I_QS,                 &
             156                            I_QG,                 &
             157                            I_NC,                 &
             158                            I_NR,                 &
             159                            I_NI,                 &
             160                            I_NS,                 &
             161                            I_NG
             162                         implicit none
             163                     
             164                         character(len=ADM_MAXFNAME) :: input_basename    = ''
             165                         character(len=ADM_MAXFNAME) :: output_basename   = 'restart'
             166                         character(len=ADM_MAXFNAME) :: restart_layername = ''
             167                     
             168                         namelist / RESTARTPARAM /  &
             169                              TRC_vmax_input,       &
             170                              input_basename,       &
             171                              output_basename,      &
             172                              restart_layername,    & !--- [add] H.Yashiro 20110826
             173                              input_io_mode,        & !--- [add] H.Yashiro 20110819
             174                              output_io_mode,       & !--- [add] H.Yashiro 20110819
             175                              input_direct_access,  &
             176                              output_direct_access, &
             177                              allow_missingq,       & !--- [add] H.Yashiro 20110906
             178                              opt_diag_qi,          & !--- option to diagnose qi by temperature, 09/04/14 T.Mitsui
             179                              opt_qcqi_to_qv          !--- option to convert qc and qi into qv,  09/08/18 T.Mitsui
             180                     
             181                         logical, allocatable :: flag_exist(:) ! [Add] 08/04/12 T.Mitsui
             182                     
             183                         integer :: ierr
             184                         integer :: nq
             185                         !---------------------------------------------------------------------------
             186                     
             187                         TRC_vmax_input = TRC_vmax
             188                     
             189                         !--- read parameters
             190                         write(ADM_LOG_FID,*)
             191                         write(ADM_LOG_FID,*) '+++ Module[prgvar]/Category[nhm share]'
             192                         rewind(ADM_CTL_FID)
             193                         read(ADM_CTL_FID,nml=RESTARTPARAM,iostat=ierr)
             194     1                   if ( ierr < 0 ) then
             195     1                      write(ADM_LOG_FID,*) '*** RESTARTPARAM is not specified. use default.'
             196     1                   elseif( ierr > 0 ) then
             197     1                      write(*,          *) 'xxx Not appropriate names in namelist RESTARTPARAM. STOP.'
             198     1                      write(ADM_LOG_FID,*) 'xxx Not appropriate names in namelist RESTARTPARAM. STOP.'
             199     1                      call ADM_proc_stop
             200     1                   endif
             201                         write(ADM_LOG_FID,RESTARTPARAM)
             202                     
             203                         restart_input_basename  = input_basename
             204                         restart_output_basename = output_basename
             205                         layername               = restart_layername
             206                     
             207                         PRG_vmax   = PRG_vmax0  + TRC_vmax
             208                         I_RHOGQend = PRG_vmax
             209                     
             210                         DIAG_vmax  = DIAG_vmax0 + TRC_vmax
             211                         I_qend     = DIAG_vmax
             212                     
             213                         allocate( flag_exist(TRC_vmax) )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2000
                                   <<< Loop-information  End >>>
             214        pp    s          flag_exist(:) = .true.
             215                     
             216     1                   if ( TRC_vmax_input < TRC_vmax ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1778
                                   <<< Loop-information  End >>>
             217     1  pp    s             flag_exist(TRC_vmax_input+1:TRC_vmax) = .false. ! 08/04/12 T.Mitsui
             218     1               
             219     1                      ! 08/04/12 T.Mitsui, mp_xxxx should set
             220     1                      ! default value of Nx corresponding to qx
             221     2                      if ( opt_2moment_water ) then
             222     3                         if    ( trim(RAIN_TYPE) == "CLOUD_PARAM" ) then
             223     3               
             224     3                            ! in CLOUD-PARAM framework, we use QC instead of QI
             225     3                            if( flag_exist(I_QC) .AND. (.NOT. flag_exist(I_NC)) ) flag_diagnose_number(I_NC) = .true.
             226     3                            if( flag_exist(I_QC) .AND. (.NOT. flag_exist(I_NI)) ) flag_diagnose_number(I_NI) = .true.
             227     3               
             228     3                         elseif( trim(RAIN_TYPE) == "WARM" ) then
             229     3               
             230     3                            ! in warm rain framework, we use QC instead of QI
             231     3                            if( flag_exist(I_QC) .AND. (.NOT. flag_exist(I_NC)) ) flag_diagnose_number(I_NC) = .true.
             232     3                            if( flag_exist(I_QR) .AND. (.NOT. flag_exist(I_NR)) ) flag_diagnose_number(I_NR) = .true.
             233     3                            if( flag_exist(I_QC) .AND. (.NOT. flag_exist(I_NI)) ) flag_diagnose_number(I_NI) = .true.
             234     3               
             235     3                         elseif( trim(RAIN_TYPE) == "COLD" ) then
             236     3               
             237     3                            if( flag_exist(I_QC) .AND. (.NOT. flag_exist(I_NC)) ) flag_diagnose_number(I_NC) = .true.
             238     3                            if( flag_exist(I_QR) .AND. (.NOT. flag_exist(I_NR)) ) flag_diagnose_number(I_NR) = .true.
             239     3                            if( flag_exist(I_QI) .AND. (.NOT. flag_exist(I_NI)) ) flag_diagnose_number(I_NI) = .true.
             240     3                            if( flag_exist(I_QS) .AND. (.NOT. flag_exist(I_NS)) ) flag_diagnose_number(I_NS) = .true.
             241     3                            if( flag_exist(I_QG) .AND. (.NOT. flag_exist(I_NG)) ) flag_diagnose_number(I_NG) = .true.
             242     3               
             243     3                         endif
             244     2                      endif
             245     1                   endif
             246                     
             247                         write(ADM_LOG_FID,*)
             248                         write(ADM_LOG_FID,*) '--- Restart treatment for tracers'
             249     1                   if ( allow_missingq ) then
             250     1                      write(ADM_LOG_FID,*) '*** Allow missing tracer in restart file.'
             251     1                      write(ADM_LOG_FID,*) '*** Value will set to zero for missing tracer.'
             252     1                   endif
             253                         write(ADM_LOG_FID,*) '|========================================'
             254                         write(ADM_LOG_FID,*) '    varname         :read?     :diagnose?'
             255     1   s    s          do nq = 1, TRC_vmax
             256     1   m    s             write(ADM_LOG_FID,'(1x,A,A16,A,L1,A,L1)') '--- ', TRC_name(nq), ':',&
             257     1                                         flag_exist(nq),          '        :', &
             258     1                                         flag_diagnose_number(nq)
             259     1   p    s          enddo
             260                     
             261                         ! -> [add] H.Yashiro 20110819
             262                         write(ADM_LOG_FID,*) '*** io_mode for restart, input : ', trim(input_io_mode)
             263     1                   if    ( input_io_mode == 'ADVANCED' ) then
             264     1                   elseif( input_io_mode == 'LEGACY'   ) then
             265     1                   elseif( input_io_mode == 'IDEAL'    ) then
             266     1                   else
             267     1                      write(ADM_LOG_FID,*) 'xxx Invalid input_io_mode. STOP.'
             268     1                      call ADM_proc_stop
             269     1                   endif
             270                     
             271                         write(ADM_LOG_FID,*) '*** io_mode for restart, output: ', trim(output_io_mode)
             272     1                   if    ( output_io_mode == 'ADVANCED' ) then
             273     1                   elseif( output_io_mode == 'LEGACY'   ) then
             274     1                   else
             275     1                      write(ADM_LOG_FID,*) 'xxx Invalid output_io_mode. STOP'
             276     1                      call ADM_proc_stop
             277     1                   endif
             278                         ! <- [add] H.Yashiro 20110819
             279                     
             280                         allocate( PRG_var    (ADM_gall,   ADM_kall,ADM_lall,   PRG_vmax) )
             281                         allocate( PRG_var_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl,PRG_vmax) )
             282                     
             283                         allocate( PRG_var1   (ADM_gall,   ADM_kall,ADM_lall,   PRG_vmax) )
             284                         allocate( PRG_var1_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl,PRG_vmax) )
             285                     
             286                         allocate( DIAG_var   (ADM_gall,   ADM_kall,ADM_lall,   DIAG_vmax) )
             287                         allocate( DIAG_var_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl,DIAG_vmax) )
             288                     
             289                         return
             290                       end subroutine prgvar_setup
             291                     
             292                       !-----------------------------------------------------------------------------
             293                       !>
             294                       !> get prognostic variables from prg[num].
             295                       !>
             296                       subroutine prgvar_get( &
             297                            rhog,   rhog_pl,   &
             298                            rhogvx, rhogvx_pl, &
             299                            rhogvy, rhogvy_pl, &
             300                            rhogvz, rhogvz_pl, &
             301                            rhogw,  rhogw_pl,  &
             302                            rhoge,  rhoge_pl,  &
             303                            rhogq,  rhogq_pl,  &
             304                            num                )
             305                         use mod_adm, only: &
             306                            ADM_prc_me,  &
             307                            ADM_prc_pl,  &
             308                            ADM_gall,    &
             309                            ADM_gall_pl, &
             310                            ADM_kall,    &
             311                            ADM_lall,    &
             312                            ADM_lall_pl
             313                         use mod_runconf, only: &
             314                            TRC_vmax
             315                         implicit none
             316                     
             317                         real(8), intent(out) :: rhog     (ADM_gall,   ADM_kall,ADM_lall   )
             318                         real(8), intent(out) :: rhog_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             319                         real(8), intent(out) :: rhogvx   (ADM_gall,   ADM_kall,ADM_lall   )
             320                         real(8), intent(out) :: rhogvx_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             321                         real(8), intent(out) :: rhogvy   (ADM_gall,   ADM_kall,ADM_lall   )
             322                         real(8), intent(out) :: rhogvy_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             323                         real(8), intent(out) :: rhogvz   (ADM_gall,   ADM_kall,ADM_lall   )
             324                         real(8), intent(out) :: rhogvz_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             325                         real(8), intent(out) :: rhogw    (ADM_gall,   ADM_kall,ADM_lall   )
             326                         real(8), intent(out) :: rhogw_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             327                         real(8), intent(out) :: rhoge    (ADM_gall,   ADM_kall,ADM_lall   )
             328                         real(8), intent(out) :: rhoge_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             329                         real(8), intent(out) :: rhogq    (ADM_gall,   ADM_kall,ADM_lall   ,TRC_vmax)
             330                         real(8), intent(out) :: rhogq_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl,TRC_vmax)
             331                         integer, intent(in)  :: num
             332                     
             333                         integer :: n, k, l, nq
             334                         !---------------------------------------------------------------------------
             335                     
             336     1                   if ( num == 0 ) then
             337     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             338     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             339     3  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 131
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             340     4  pp   4v             do n = 1, ADM_gall
             341     4   p   4v                rhog  (n,k,l) = PRG_var(n,k,l,I_RHOG  )
             342     4   p   4v                rhogvx(n,k,l) = PRG_var(n,k,l,I_RHOGVX)
             343     4   p   4v                rhogvy(n,k,l) = PRG_var(n,k,l,I_RHOGVY)
             344     4   p   4v                rhogvz(n,k,l) = PRG_var(n,k,l,I_RHOGVZ)
             345     4   p   4v                rhogw (n,k,l) = PRG_var(n,k,l,I_RHOGW )
             346     4   p   4v                rhoge (n,k,l) = PRG_var(n,k,l,I_RHOGE )
             347     4   p   4v             enddo
             348     3   p                  enddo
             349     2   p                  enddo
             350     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             351     2  pp                  do nq = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             352     3  pp                  do l  = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             353     4  pp                  do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             354     5   p   8v             do n  = 1, ADM_gall
             355     5   p   8v                rhogq(n,k,l,nq) = PRG_var(n,k,l,PRG_vmax0+nq)
             356     5   p   8v             enddo
             357     4   p                  enddo
             358     3   p                  enddo
             359     2   p                  enddo
             360     1               
             361     2                      if ( ADM_prc_me == ADM_prc_pl ) then
             362     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             363     3  pp                     do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             364     4  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 131
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             365     5  pp   4v                do n = 1, ADM_gall_pl
             366     5   p   4v                   rhog_pl  (n,k,l) = PRG_var_pl(n,k,l,I_RHOG  )
             367     5   p   4v                   rhogvx_pl(n,k,l) = PRG_var_pl(n,k,l,I_RHOGVX)
             368     5   p   4v                   rhogvy_pl(n,k,l) = PRG_var_pl(n,k,l,I_RHOGVY)
             369     5   p   4v                   rhogvz_pl(n,k,l) = PRG_var_pl(n,k,l,I_RHOGVZ)
             370     5   p   4v                   rhogw_pl (n,k,l) = PRG_var_pl(n,k,l,I_RHOGW )
             371     5   p   4v                   rhoge_pl (n,k,l) = PRG_var_pl(n,k,l,I_RHOGE )
             372     5   p   4v                enddo
             373     4   p                     enddo
             374     3   p                     enddo
             375     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             376     3  pp                     do nq = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             377     4  pp                     do l  = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             378     5  pp                     do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             379     6   p   8v                do n  = 1, ADM_gall_pl
             380     6   p   8v                   rhogq_pl(n,k,l,nq) = PRG_var_pl(n,k,l,PRG_vmax0+nq)
             381     6   p   8v                enddo
             382     5   p                     enddo
             383     4   p                     enddo
             384     3   p                     enddo
             385     2               
             386     2                      endif
             387     1               
             388     1                   elseif( num == 1 ) then
             389     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             390     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             391     3  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 131
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             392     4  pp   4v             do n = 1, ADM_gall
             393     4   p   4v                rhog  (n,k,l) = PRG_var1(n,k,l,I_RHOG  )
             394     4   p   4v                rhogvx(n,k,l) = PRG_var1(n,k,l,I_RHOGVX)
             395     4   p   4v                rhogvy(n,k,l) = PRG_var1(n,k,l,I_RHOGVY)
             396     4   p   4v                rhogvz(n,k,l) = PRG_var1(n,k,l,I_RHOGVZ)
             397     4   p   4v                rhogw (n,k,l) = PRG_var1(n,k,l,I_RHOGW )
             398     4   p   4v                rhoge (n,k,l) = PRG_var1(n,k,l,I_RHOGE )
             399     4   p   4v             enddo
             400     3   p                  enddo
             401     2   p                  enddo
             402     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             403     2  pp                  do nq = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             404     3  pp                  do l  = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             405     4  pp                  do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             406     5   p   8v             do n  = 1, ADM_gall
             407     5   p   8v                rhogq(n,k,l,nq) = PRG_var1(n,k,l,PRG_vmax0+nq)
             408     5   p   8v             enddo
             409     4   p                  enddo
             410     3   p                  enddo
             411     2   p                  enddo
             412     1               
             413     2                      if ( ADM_prc_me == ADM_prc_pl ) then
             414     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             415     3  pp                     do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             416     4  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 131
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             417     5  pp   4v                do n = 1, ADM_gall_pl
             418     5   p   4v                   rhog_pl  (n,k,l) = PRG_var1_pl(n,k,l,I_RHOG  )
             419     5   p   4v                   rhogvx_pl(n,k,l) = PRG_var1_pl(n,k,l,I_RHOGVX)
             420     5   p   4v                   rhogvy_pl(n,k,l) = PRG_var1_pl(n,k,l,I_RHOGVY)
             421     5   p   4v                   rhogvz_pl(n,k,l) = PRG_var1_pl(n,k,l,I_RHOGVZ)
             422     5   p   4v                   rhogw_pl (n,k,l) = PRG_var1_pl(n,k,l,I_RHOGW )
             423     5   p   4v                   rhoge_pl (n,k,l) = PRG_var1_pl(n,k,l,I_RHOGE )
             424     5   p   4v                enddo
             425     4   p                     enddo
             426     3   p                     enddo
             427     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             428     3  pp                     do nq = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             429     4  pp                     do l  = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             430     5  pp                     do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             431     6   p   8v                do n  = 1, ADM_gall_pl
             432     6   p   8v                   rhogq_pl(n,k,l,nq) = PRG_var1_pl(n,k,l,PRG_vmax0+nq)
             433     6   p   8v                enddo
             434     5   p                     enddo
             435     4   p                     enddo
             436     3   p                     enddo
             437     2               
             438     2                      endif
             439     1               
             440     1                   endif
             441                     
             442                         return
             443                       end subroutine prgvar_get
             444                     
             445                       !----------------------------------------------------------------------------
             446                       !>
             447                       !> 08/04/12 [Add] T.Mitsui, only tracer Q is not used here
             448                       !>
             449                       subroutine prgvar_get_noq( &
             450                            rhog,   rhog_pl,   &
             451                            rhogvx, rhogvx_pl, &
             452                            rhogvy, rhogvy_pl, &
             453                            rhogvz, rhogvz_pl, &
             454                            rhogw,  rhogw_pl,  &
             455                            rhoge,  rhoge_pl   )
             456                         use mod_adm, only: &
             457                            ADM_prc_me,  &
             458                            ADM_prc_pl,  &
             459                            ADM_gall,    &
             460                            ADM_gall_pl, &
             461                            ADM_kall,    &
             462                            ADM_lall,    &
             463                            ADM_lall_pl
             464                         implicit none
             465                     
             466                         real(8), intent(out) :: rhog     (ADM_gall,   ADM_kall,ADM_lall   )
             467                         real(8), intent(out) :: rhog_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             468                         real(8), intent(out) :: rhogvx   (ADM_gall,   ADM_kall,ADM_lall   )
             469                         real(8), intent(out) :: rhogvx_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             470                         real(8), intent(out) :: rhogvy   (ADM_gall,   ADM_kall,ADM_lall   )
             471                         real(8), intent(out) :: rhogvy_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             472                         real(8), intent(out) :: rhogvz   (ADM_gall,   ADM_kall,ADM_lall   )
             473                         real(8), intent(out) :: rhogvz_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             474                         real(8), intent(out) :: rhogw    (ADM_gall,   ADM_kall,ADM_lall   )
             475                         real(8), intent(out) :: rhogw_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             476                         real(8), intent(out) :: rhoge    (ADM_gall,   ADM_kall,ADM_lall   )
             477                         real(8), intent(out) :: rhoge_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             478                     
             479                         integer :: n, k, l
             480                         !---------------------------------------------------------------------------
             481                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             482     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             483     2  pp               do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 131
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             484     3  pp   4v          do n = 1, ADM_gall
             485     3   p   4v             rhog  (n,k,l) = PRG_var(n,k,l,I_RHOG  )
             486     3   p   4v             rhogvx(n,k,l) = PRG_var(n,k,l,I_RHOGVX)
             487     3   p   4v             rhogvy(n,k,l) = PRG_var(n,k,l,I_RHOGVY)
             488     3   p   4v             rhogvz(n,k,l) = PRG_var(n,k,l,I_RHOGVZ)
             489     3   p   4v             rhogw (n,k,l) = PRG_var(n,k,l,I_RHOGW )
             490     3   p   4v             rhoge (n,k,l) = PRG_var(n,k,l,I_RHOGE )
             491     3   p   4v          enddo
             492     2   p               enddo
             493     1   p               enddo
             494                     
             495     1                   if ( ADM_prc_me == ADM_prc_pl ) then
             496     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             497     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             498     3  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 131
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             499     4  pp   4v             do n = 1, ADM_gall_pl
             500     4   p   4v                rhog_pl  (n,k,l) = PRG_var_pl(n,k,l,I_RHOG  )
             501     4   p   4v                rhogvx_pl(n,k,l) = PRG_var_pl(n,k,l,I_RHOGVX)
             502     4   p   4v                rhogvy_pl(n,k,l) = PRG_var_pl(n,k,l,I_RHOGVY)
             503     4   p   4v                rhogvz_pl(n,k,l) = PRG_var_pl(n,k,l,I_RHOGVZ)
             504     4   p   4v                rhogw_pl (n,k,l) = PRG_var_pl(n,k,l,I_RHOGW )
             505     4   p   4v                rhoge_pl (n,k,l) = PRG_var_pl(n,k,l,I_RHOGE )
             506     4   p   4v             enddo
             507     3   p                  enddo
             508     2   p                  enddo
             509     1               
             510     1                   endif
             511                     
             512                         return
             513                       end subroutine prgvar_get_noq
             514                     
             515                       !-----------------------------------------------------------------------------
             516                       !>
             517                       !> get prognostic variables from prg[num].
             518                       !>
             519                       subroutine prgvar_get_withdiag( &
             520                            rhog,   rhog_pl,   &
             521                            rhogvx, rhogvx_pl, &
             522                            rhogvy, rhogvy_pl, &
             523                            rhogvz, rhogvz_pl, &
             524                            rhogw,  rhogw_pl,  &
             525                            rhoge,  rhoge_pl,  &
             526                            rhogq,  rhogq_pl,  &
             527                            rho,    rho_pl,    &
             528                            pre,    pre_pl,    &
             529                            tem,    tem_pl,    &
             530                            vx,     vx_pl,     &
             531                            vy,     vy_pl,     &
             532                            vz,     vz_pl,     &
             533                            w,      w_pl,      &
             534                            q,      q_pl       )
             535                         use mod_adm, only: &
             536                            ADM_prc_me,  &
             537                            ADM_prc_pl,  &
             538                            ADM_gall,    &
             539                            ADM_gall_pl, &
             540                            ADM_kall,    &
             541                            ADM_lall,    &
             542                            ADM_lall_pl
             543                         use mod_vmtr, only: &
             544                            VMTR_GSGAM2,    &
             545                            VMTR_GSGAM2_pl
             546                         use mod_runconf, only: &
             547                            TRC_vmax
             548                         implicit none
             549                     
             550                         real(8), intent(out) :: rhog     (ADM_gall,   ADM_kall,ADM_lall   )
             551                         real(8), intent(out) :: rhog_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             552                         real(8), intent(out) :: rhogvx   (ADM_gall,   ADM_kall,ADM_lall   )
             553                         real(8), intent(out) :: rhogvx_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             554                         real(8), intent(out) :: rhogvy   (ADM_gall,   ADM_kall,ADM_lall   )
             555                         real(8), intent(out) :: rhogvy_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             556                         real(8), intent(out) :: rhogvz   (ADM_gall,   ADM_kall,ADM_lall   )
             557                         real(8), intent(out) :: rhogvz_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             558                         real(8), intent(out) :: rhogw    (ADM_gall,   ADM_kall,ADM_lall   )
             559                         real(8), intent(out) :: rhogw_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             560                         real(8), intent(out) :: rhoge    (ADM_gall,   ADM_kall,ADM_lall   )
             561                         real(8), intent(out) :: rhoge_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             562                         real(8), intent(out) :: rhogq    (ADM_gall,   ADM_kall,ADM_lall   ,TRC_vmax)
             563                         real(8), intent(out) :: rhogq_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl,TRC_vmax)
             564                         real(8), intent(out) :: rho      (ADM_gall,   ADM_kall,ADM_lall   )
             565                         real(8), intent(out) :: rho_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             566                         real(8), intent(out) :: pre      (ADM_gall,   ADM_kall,ADM_lall   )
             567                         real(8), intent(out) :: pre_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             568                         real(8), intent(out) :: tem      (ADM_gall,   ADM_kall,ADM_lall   )
             569                         real(8), intent(out) :: tem_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             570                         real(8), intent(out) :: vx       (ADM_gall,   ADM_kall,ADM_lall   )
             571                         real(8), intent(out) :: vx_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             572                         real(8), intent(out) :: vy       (ADM_gall,   ADM_kall,ADM_lall   )
             573                         real(8), intent(out) :: vy_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             574                         real(8), intent(out) :: vz       (ADM_gall,   ADM_kall,ADM_lall   )
             575                         real(8), intent(out) :: vz_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             576                         real(8), intent(out) :: w        (ADM_gall,   ADM_kall,ADM_lall   )
             577                         real(8), intent(out) :: w_pl     (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             578                         real(8), intent(out) :: q        (ADM_gall,   ADM_kall,ADM_lall,   TRC_vmax)
             579                         real(8), intent(out) :: q_pl     (ADM_gall_pl,ADM_kall,ADM_lall_pl,TRC_vmax)
             580                     
             581                         integer :: n, k, l, nq
             582                         !---------------------------------------------------------------------------
             583                     
             584                         call cnvvar_prg2diag( PRG_var (:,:,:,:), PRG_var_pl (:,:,:,:), & !--- [IN]
             585                                               DIAG_var(:,:,:,:), DIAG_var_pl(:,:,:,:)  ) !--- [OUT]
             586                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             587     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 180
                                   <<<      VMTR_GSGAM2: 18, PRG_var: 72, rhogvz: 18
                                   <<<      rhogvy: 18, rhogvx: 18, rho: 18
                                   <<<      rhog: 18
                                   <<< Loop-information  End >>>
             588     2  pp               do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 59
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 60
                                   <<<      PRG_var: 24, rhogvz: 6, rhogvy: 6
                                   <<<      rhogvx: 6, rho: 6, VMTR_GSGAM2: 6
                                   <<<      rhog: 6
                                   <<< Loop-information  End >>>
             589     3  pp   2v          do n = 1, ADM_gall
             590     3   p   2v             rhog  (n,k,l) = PRG_var(n,k,l,I_RHOG  )
             591     3   p   2v             rhogvx(n,k,l) = PRG_var(n,k,l,I_RHOGVX)
             592     3   p   2v             rhogvy(n,k,l) = PRG_var(n,k,l,I_RHOGVY)
             593     3   p   2v             rhogvz(n,k,l) = PRG_var(n,k,l,I_RHOGVZ)
             594     3   p   2v             rhogw (n,k,l) = PRG_var(n,k,l,I_RHOGW )
             595     3   p   2v             rhoge (n,k,l) = PRG_var(n,k,l,I_RHOGE )
             596     3               
             597     3   p   2v             rho   (n,k,l) = PRG_var(n,k,l,I_RHOG) / VMTR_GSGAM2(n,k,l)
             598     3               
             599     3   p   2v             pre   (n,k,l) = DIAG_var(n,k,l,I_pre)
             600     3   p   2v             tem   (n,k,l) = DIAG_var(n,k,l,I_tem)
             601     3   p   2v             vx    (n,k,l) = DIAG_var(n,k,l,I_vx )
             602     3   p   2v             vy    (n,k,l) = DIAG_var(n,k,l,I_vy )
             603     3   p   2v             vz    (n,k,l) = DIAG_var(n,k,l,I_vz )
             604     3   p   2v             w     (n,k,l) = DIAG_var(n,k,l,I_w  )
             605     3   p   2v          enddo
             606     2   p               enddo
             607     1   p               enddo
             608                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             609     1  pp               do nq = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             610     2  pp               do l  = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             611     3  pp               do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             612     4   p   8v          do n  = 1, ADM_gall
             613     4   p   8v             rhogq(n,k,l,nq) = PRG_var(n,k,l,PRG_vmax0+nq)
             614     4               
             615     4   p   8v             q    (n,k,l,nq) = DIAG_var(n,k,l,DIAG_vmax0+nq)
             616     4   p   8v          enddo
             617     3   p               enddo
             618     2   p               enddo
             619     1   p               enddo
             620                     
             621     1                   if ( ADM_prc_me == ADM_prc_pl ) then
             622     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             623     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 180
                                   <<<      VMTR_GSGAM2_pl: 18, PRG_var_pl: 72
                                   <<<      rhogvz_pl: 18, rhogvy_pl: 18
                                   <<<      rhogvx_pl: 18, rho_pl: 18, rhog_pl: 18
                                   <<< Loop-information  End >>>
             624     3  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 59
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 60
                                   <<<      PRG_var_pl: 24, rhogvz_pl: 6
                                   <<<      rhogvy_pl: 6, rhogvx_pl: 6, rho_pl: 6
                                   <<<      VMTR_GSGAM2_pl: 6, rhog_pl: 6
                                   <<< Loop-information  End >>>
             625     4  pp   2v             do n = 1, ADM_gall_pl
             626     4   p   2v                rhog_pl  (n,k,l) = PRG_var_pl(n,k,l,I_RHOG  )
             627     4   p   2v                rhogvx_pl(n,k,l) = PRG_var_pl(n,k,l,I_RHOGVX)
             628     4   p   2v                rhogvy_pl(n,k,l) = PRG_var_pl(n,k,l,I_RHOGVY)
             629     4   p   2v                rhogvz_pl(n,k,l) = PRG_var_pl(n,k,l,I_RHOGVZ)
             630     4   p   2v                rhogw_pl (n,k,l) = PRG_var_pl(n,k,l,I_RHOGW )
             631     4   p   2v                rhoge_pl (n,k,l) = PRG_var_pl(n,k,l,I_RHOGE )
             632     4               
             633     4   p   2v                rho_pl   (n,k,l) = PRG_var_pl(n,k,l,I_RHOG) / VMTR_GSGAM2_pl(n,k,l)
             634     4               
             635     4   p   2v                pre_pl   (n,k,l) = DIAG_var_pl(n,k,l,I_pre)
             636     4   p   2v                tem_pl   (n,k,l) = DIAG_var_pl(n,k,l,I_tem)
             637     4   p   2v                vx_pl    (n,k,l) = DIAG_var_pl(n,k,l,I_vx )
             638     4   p   2v                vy_pl    (n,k,l) = DIAG_var_pl(n,k,l,I_vy )
             639     4   p   2v                vz_pl    (n,k,l) = DIAG_var_pl(n,k,l,I_vz )
             640     4   p   2v                w_pl     (n,k,l) = DIAG_var_pl(n,k,l,I_w  )
             641     4   p   2v             enddo
             642     3   p                  enddo
             643     2   p                  enddo
             644     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             645     2  pp                  do nq = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             646     3  pp                  do l  = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             647     4  pp                  do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             648     5   p   8v             do n  = 1, ADM_gall_pl
             649     5   p   8v                rhogq_pl(n,k,l,nq) = PRG_var_pl(n,k,l,PRG_vmax0+nq)
             650     5               
             651     5   p   8v                q_pl    (n,k,l,nq) = DIAG_var_pl(n,k,l,DIAG_vmax0+nq)
             652     5   p   8v             enddo
             653     4   p                  enddo
             654     3   p                  enddo
             655     2   p                  enddo
             656     1               
             657     1                   endif
             658                     
             659                         return
             660                       end subroutine prgvar_get_withdiag
             661                     
             662                       !-----------------------------------------------------------------------------
             663                       !>
             664                       !> set prognostic variables to prg[num]- and COMMUNICATION.
             665                       !>
             666                       subroutine prgvar_set( &
             667                            rhog,   rhog_pl,   &
             668                            rhogvx, rhogvx_pl, &
             669                            rhogvy, rhogvy_pl, &
             670                            rhogvz, rhogvz_pl, &
             671                            rhogw,  rhogw_pl,  &
             672                            rhoge,  rhoge_pl,  &
             673                            rhogq,  rhogq_pl,  &
             674                            num                )
             675                         use mod_adm, only: &
             676                            ADM_prc_me,  &
             677                            ADM_prc_pl,  &
             678                            ADM_gall,    &
             679                            ADM_gall_pl, &
             680                            ADM_kall,    &
             681                            ADM_lall,    &
             682                            ADM_lall_pl, &
             683                            ADM_gall_1d, &
             684                            ADM_gmin,    &
             685                            ADM_gmax
             686                         use mod_comm, only: &
             687                            COMM_data_transfer
             688                         use mod_runconf, only: &
             689                            TRC_vmax
             690                         implicit none
             691                     
             692                         real(8), intent(in)  :: rhog     (ADM_gall,   ADM_kall,ADM_lall   )
             693                         real(8), intent(in)  :: rhog_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             694                         real(8), intent(in)  :: rhogvx   (ADM_gall,   ADM_kall,ADM_lall   )
             695                         real(8), intent(in)  :: rhogvx_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             696                         real(8), intent(in)  :: rhogvy   (ADM_gall,   ADM_kall,ADM_lall   )
             697                         real(8), intent(in)  :: rhogvy_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             698                         real(8), intent(in)  :: rhogvz   (ADM_gall,   ADM_kall,ADM_lall   )
             699                         real(8), intent(in)  :: rhogvz_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             700                         real(8), intent(in)  :: rhogw    (ADM_gall,   ADM_kall,ADM_lall   )
             701                         real(8), intent(in)  :: rhogw_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             702                         real(8), intent(in)  :: rhoge    (ADM_gall,   ADM_kall,ADM_lall   )
             703                         real(8), intent(in)  :: rhoge_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             704                         real(8), intent(in)  :: rhogq    (ADM_gall,   ADM_kall,ADM_lall   ,TRC_vmax)
             705                         real(8), intent(in)  :: rhogq_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl,TRC_vmax)
             706                         integer, intent(in)  :: num
             707                     
             708                         integer :: i, j, suf
             709                         suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
             710                     
             711                         integer :: n, k, l, nq
             712                         !---------------------------------------------------------------------------
             713                     
             714     1                   if ( num == 0 ) then
             715     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             716     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             717     3  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 136
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             718     4  pp   4v             do n = 1, ADM_gall
             719     4   p   4v                PRG_var(n,k,l,I_RHOG  ) = rhog  (n,k,l)
             720     4   p   4v                PRG_var(n,k,l,I_RHOGVX) = rhogvx(n,k,l)
             721     4   p   4v                PRG_var(n,k,l,I_RHOGVY) = rhogvy(n,k,l)
             722     4   p   4v                PRG_var(n,k,l,I_RHOGVZ) = rhogvz(n,k,l)
             723     4   p   4v                PRG_var(n,k,l,I_RHOGW ) = rhogw (n,k,l)
             724     4   p   4v                PRG_var(n,k,l,I_RHOGE ) = rhoge (n,k,l)
             725     4   p   4v             enddo
             726     3   p                  enddo
             727     2   p                  enddo
             728     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             729     2  pp                  do nq = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             730     3  pp                  do l  = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             731     4  pp                  do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             732     5   p   8v             do n  = 1, ADM_gall
             733     5   p   8v                PRG_var(n,k,l,PRG_vmax0+nq) = rhogq(n,k,l,nq)
             734     5   p   8v             enddo
             735     4   p                  enddo
             736     3   p                  enddo
             737     2   p                  enddo
             738     1               
             739     2                      if ( ADM_prc_me == ADM_prc_pl ) then
             740     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             741     3  pp                     do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             742     4  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 136
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             743     5  pp   4v                do n = 1, ADM_gall_pl
             744     5   p   4v                   PRG_var_pl(n,k,l,I_RHOG  ) = rhog_pl  (n,k,l)
             745     5   p   4v                   PRG_var_pl(n,k,l,I_RHOGVX) = rhogvx_pl(n,k,l)
             746     5   p   4v                   PRG_var_pl(n,k,l,I_RHOGVY) = rhogvy_pl(n,k,l)
             747     5   p   4v                   PRG_var_pl(n,k,l,I_RHOGVZ) = rhogvz_pl(n,k,l)
             748     5   p   4v                   PRG_var_pl(n,k,l,I_RHOGW ) = rhogw_pl (n,k,l)
             749     5   p   4v                   PRG_var_pl(n,k,l,I_RHOGE ) = rhoge_pl (n,k,l)
             750     5   p   4v                enddo
             751     4   p                     enddo
             752     3   p                     enddo
             753     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             754     3  pp                     do nq = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             755     4  pp                     do l  = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             756     5  pp                     do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             757     6   p   8v                do n  = 1, ADM_gall_pl
             758     6   p   8v                   PRG_var_pl(n,k,l,PRG_vmax0+nq) = rhogq_pl(n,k,l,nq)
             759     6   p   8v                enddo
             760     5   p                     enddo
             761     4   p                     enddo
             762     3   p                     enddo
             763     2               
             764     2                      endif
             765     1               
             766     1                      ! communication
             767     1                      call COMM_data_transfer( PRG_var, PRG_var_pl )
             768     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             769     1  pp   6s             PRG_var(suf(ADM_gall_1d,1),:,:,:) = PRG_var(suf(ADM_gmax+1,ADM_gmin),:,:,:)
             770     1   p   6s             PRG_var(suf(1,ADM_gall_1d),:,:,:) = PRG_var(suf(ADM_gmin,ADM_gmax+1),:,:,:)
             771     1               
             772     1                   elseif( num == 1 ) then
             773     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             774     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             775     3  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 136
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             776     4  pp   4v             do n = 1, ADM_gall
             777     4   p   4v                PRG_var1(n,k,l,I_RHOG  ) = rhog  (n,k,l)
             778     4   p   4v                PRG_var1(n,k,l,I_RHOGVX) = rhogvx(n,k,l)
             779     4   p   4v                PRG_var1(n,k,l,I_RHOGVY) = rhogvy(n,k,l)
             780     4   p   4v                PRG_var1(n,k,l,I_RHOGVZ) = rhogvz(n,k,l)
             781     4   p   4v                PRG_var1(n,k,l,I_RHOGW ) = rhogw (n,k,l)
             782     4   p   4v                PRG_var1(n,k,l,I_RHOGE ) = rhoge (n,k,l)
             783     4   p   4v             enddo
             784     3   p                  enddo
             785     2   p                  enddo
             786     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             787     2  pp                  do nq = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             788     3  pp                  do l  = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             789     4  pp                  do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             790     5   p   8v             do n  = 1, ADM_gall
             791     5   p   8v                PRG_var1(n,k,l,PRG_vmax0+nq) = rhogq(n,k,l,nq)
             792     5   p   8v             enddo
             793     4   p                  enddo
             794     3   p                  enddo
             795     2   p                  enddo
             796     1               
             797     2                      if ( ADM_prc_me == ADM_prc_pl ) then
             798     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             799     3  pp                     do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             800     4  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 136
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             801     5  pp   4v                do n = 1, ADM_gall_pl
             802     5   p   4v                   PRG_var1_pl(n,k,l,I_RHOG  ) = rhog_pl  (n,k,l)
             803     5   p   4v                   PRG_var1_pl(n,k,l,I_RHOGVX) = rhogvx_pl(n,k,l)
             804     5   p   4v                   PRG_var1_pl(n,k,l,I_RHOGVY) = rhogvy_pl(n,k,l)
             805     5   p   4v                   PRG_var1_pl(n,k,l,I_RHOGVZ) = rhogvz_pl(n,k,l)
             806     5   p   4v                   PRG_var1_pl(n,k,l,I_RHOGW ) = rhogw_pl (n,k,l)
             807     5   p   4v                   PRG_var1_pl(n,k,l,I_RHOGE ) = rhoge_pl (n,k,l)
             808     5   p   4v                enddo
             809     4   p                     enddo
             810     3   p                     enddo
             811     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             812     3  pp                     do nq = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             813     4  pp                     do l  = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             814     5  pp                     do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             815     6   p   8v                do n  = 1, ADM_gall_pl
             816     6   p   8v                   PRG_var1_pl(n,k,l,PRG_vmax0+nq) = rhogq_pl(n,k,l,nq)
             817     6   p   8v                enddo
             818     5   p                     enddo
             819     4   p                     enddo
             820     3   p                     enddo
             821     2               
             822     2                      endif
             823     1               
             824     1                      ! communication
             825     1                      call COMM_data_transfer( PRG_var1, PRG_var1_pl )
             826     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             827     1  pp   6s             PRG_var1(suf(ADM_gall_1d,1),:,:,:) = PRG_var1(suf(ADM_gmax+1,ADM_gmin),:,:,:)
             828     1   p   6s             PRG_var1(suf(1,ADM_gall_1d),:,:,:) = PRG_var1(suf(ADM_gmin,ADM_gmax+1),:,:,:)
             829     1               
             830     1                   endif
             831                     
             832                         return
             833                       end subroutine prgvar_set
             834                     
             835                       !-----------------------------------------------------------------------------
             836                       !>
             837                       !> Description of the subroutine prgvar_get_in
             838                       !>
             839                       subroutine prgvar_get_in( &
             840                            rhog,   &
             841                            rhogvx, &
             842                            rhogvy, &
             843                            rhogvz, &
             844                            rhogw,  &
             845                            rhoge,  &
             846                            rhogq   )
             847                         use mod_adm, only: &
             848                            ADM_gall,        &
             849                            ADM_kall,        &
             850                            ADM_lall,        &
             851                            ADM_IopJop_nmax, &
             852                            ADM_IopJop,      &
             853                            ADM_GIoJo
             854                         use mod_runconf, only: &
             855                            TRC_vmax
             856                         implicit none
             857                     
             858                         real(8), intent(out) :: rhog  (ADM_IopJop_nmax,ADM_kall,ADM_lall)
             859                         real(8), intent(out) :: rhogvx(ADM_IopJop_nmax,ADM_kall,ADM_lall)
             860                         real(8), intent(out) :: rhogvy(ADM_IopJop_nmax,ADM_kall,ADM_lall)
             861                         real(8), intent(out) :: rhogvz(ADM_IopJop_nmax,ADM_kall,ADM_lall)
             862                         real(8), intent(out) :: rhogw (ADM_IopJop_nmax,ADM_kall,ADM_lall)
             863                         real(8), intent(out) :: rhoge (ADM_IopJop_nmax,ADM_kall,ADM_lall)
             864                         real(8), intent(out) :: rhogq (ADM_IopJop_nmax,ADM_kall,ADM_lall,TRC_vmax)
             865                     
             866                         integer :: n, k, l, nq, ij
             867                         !---------------------------------------------------------------------------
             868                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             869     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             870     2  pp               do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 110
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             871     3  pp   2v          do n = 1, ADM_IopJop_nmax
             872     3   p   2v             ij = ADM_IopJop(n,ADM_GIoJo)
             873     3               
             874     3   p   2v             rhog  (n,k,l) = PRG_var(ij,k,l,I_RHOG  )
             875     3   p   2v             rhogvx(n,k,l) = PRG_var(ij,k,l,I_RHOGVX)
             876     3   p   2v             rhogvy(n,k,l) = PRG_var(ij,k,l,I_RHOGVY)
             877     3   p   2v             rhogvz(n,k,l) = PRG_var(ij,k,l,I_RHOGVZ)
             878     3   p   2v             rhogw (n,k,l) = PRG_var(ij,k,l,I_RHOGW )
             879     3   p   2v             rhoge (n,k,l) = PRG_var(ij,k,l,I_RHOGE )
             880     3   p   2v          enddo
             881     2   p               enddo
             882     1   p               enddo
             883                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             884     1  pp               do nq = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             885     2  pp               do l  = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             886     3  pp               do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             887     4   p   4v          do n  = 1, ADM_IopJop_nmax
             888     4   p   4v             ij = ADM_IopJop(n,ADM_GIoJo)
             889     4               
             890     4   p   4v             rhogq(n,k,l,nq) = PRG_var(ij,k,l,PRG_vmax0+nq)
             891     4   p   4v          enddo
             892     3   p               enddo
             893     2   p               enddo
             894     1   p               enddo
             895                     
             896                         return
             897                       end subroutine prgvar_get_in
             898                     
             899                       !-----------------------------------------------------------------------------
             900                       !>
             901                       !> Description of the subroutine prgvar_get_in
             902                       !>
             903                       subroutine prgvar_get_in_withdiag( &
             904                            rhog,   &
             905                            rhogvx, &
             906                            rhogvy, &
             907                            rhogvz, &
             908                            rhogw,  &
             909                            rhoge,  &
             910                            rhogq,  &
             911                            rho,    &
             912                            pre,    &
             913                            tem,    &
             914                            vx,     &
             915                            vy,     &
             916                            vz,     &
             917                            w,      &
             918                            q       )
             919                         use mod_adm, only: &
             920                            ADM_gall,        &
             921                            ADM_kall,        &
             922                            ADM_lall,        &
             923                            ADM_IopJop_nmax, &
             924                            ADM_IopJop,      &
             925                            ADM_GIoJo
             926                         use mod_vmtr, only: &
             927                            VMTR_GSGAM2
             928                         use mod_runconf, only: &
             929                            TRC_vmax
             930                         implicit none
             931                     
             932                         real(8), intent(out) :: rhog  (ADM_IopJop_nmax,ADM_kall,ADM_lall)
             933                         real(8), intent(out) :: rhogvx(ADM_IopJop_nmax,ADM_kall,ADM_lall)
             934                         real(8), intent(out) :: rhogvy(ADM_IopJop_nmax,ADM_kall,ADM_lall)
             935                         real(8), intent(out) :: rhogvz(ADM_IopJop_nmax,ADM_kall,ADM_lall)
             936                         real(8), intent(out) :: rhogw (ADM_IopJop_nmax,ADM_kall,ADM_lall)
             937                         real(8), intent(out) :: rhoge (ADM_IopJop_nmax,ADM_kall,ADM_lall)
             938                         real(8), intent(out) :: rhogq (ADM_IopJop_nmax,ADM_kall,ADM_lall,TRC_vmax)
             939                         real(8), intent(out) :: rho   (ADM_IopJop_nmax,ADM_kall,ADM_lall)
             940                         real(8), intent(out) :: pre   (ADM_IopJop_nmax,ADM_kall,ADM_lall)
             941                         real(8), intent(out) :: tem   (ADM_IopJop_nmax,ADM_kall,ADM_lall)
             942                         real(8), intent(out) :: vx    (ADM_IopJop_nmax,ADM_kall,ADM_lall)
             943                         real(8), intent(out) :: vy    (ADM_IopJop_nmax,ADM_kall,ADM_lall)
             944                         real(8), intent(out) :: vz    (ADM_IopJop_nmax,ADM_kall,ADM_lall)
             945                         real(8), intent(out) :: w     (ADM_IopJop_nmax,ADM_kall,ADM_lall)
             946                         real(8), intent(out) :: q     (ADM_IopJop_nmax,ADM_kall,ADM_lall,TRC_vmax)
             947                     
             948                         integer :: n, k, l, nq, ij
             949                         !---------------------------------------------------------------------------
             950                     
             951                         call cnvvar_prg2diag( PRG_var (:,:,:,:), PRG_var_pl (:,:,:,:), & !--- [IN]
             952                                               DIAG_var(:,:,:,:), DIAG_var_pl(:,:,:,:)  ) !--- [OUT]
             953                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             954     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             955     2  pp               do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 54
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             956     3  pp    v          do n = 1, ADM_IopJop_nmax
             957     3   p    v             ij = ADM_IopJop(n,ADM_GIoJo)
             958     3               
             959     3   p    v             rhog  (n,k,l) = PRG_var(ij,k,l,I_RHOG  )
             960     3   p    v             rhogvx(n,k,l) = PRG_var(ij,k,l,I_RHOGVX)
             961     3   p    v             rhogvy(n,k,l) = PRG_var(ij,k,l,I_RHOGVY)
             962     3   p    v             rhogvz(n,k,l) = PRG_var(ij,k,l,I_RHOGVZ)
             963     3   p    v             rhogw (n,k,l) = PRG_var(ij,k,l,I_RHOGW )
             964     3   p    v             rhoge (n,k,l) = PRG_var(ij,k,l,I_RHOGE )
             965     3               
             966     3   p    v             rho   (n,k,l) = PRG_var(ij,k,l,I_RHOG) / VMTR_GSGAM2(ij,k,l)
             967     3               
             968     3   p    v             pre   (n,k,l) = DIAG_var(ij,k,l,I_pre)
             969     3   p    v             tem   (n,k,l) = DIAG_var(ij,k,l,I_tem)
             970     3   p    v             vx    (n,k,l) = DIAG_var(ij,k,l,I_vx )
             971     3   p    v             vy    (n,k,l) = DIAG_var(ij,k,l,I_vy )
             972     3   p    v             vz    (n,k,l) = DIAG_var(ij,k,l,I_vz )
             973     3   p    v             w     (n,k,l) = DIAG_var(ij,k,l,I_w  )
             974     3   p    v          enddo
             975     2   p               enddo
             976     1   p               enddo
             977                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             978     1  pp               do nq = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             979     2  pp               do l  = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             980     3  pp               do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             981     4   p   4v          do n  = 1, ADM_IopJop_nmax
             982     4   p   4v             ij = ADM_IopJop(n,ADM_GIoJo)
             983     4               
             984     4   p   4v             rhogq(n,k,l,nq) = PRG_var(ij,k,l,PRG_vmax0+nq)
             985     4               
             986     4   p   4v             q    (n,k,l,nq) = DIAG_var(ij,k,l,DIAG_vmax0+nq)
             987     4   p   4v          enddo
             988     3   p               enddo
             989     2   p               enddo
             990     1   p               enddo
             991                     
             992                         return
             993                       end subroutine prgvar_get_in_withdiag
             994                     
             995                       !-----------------------------------------------------------------------------
             996                       !>
             997                       !> set prognostic variables to prg[num] and COMMUNICATION.
             998                       !>
             999                       subroutine prgvar_set_in( &
            1000                            rhog,   &
            1001                            rhogvx, &
            1002                            rhogvy, &
            1003                            rhogvz, &
            1004                            rhogw,  &
            1005                            rhoge,  &
            1006                            rhogq   )
            1007                         use mod_adm, only : &
            1008                            ADM_gall,        &
            1009                            ADM_kall,        &
            1010                            ADM_lall,        &
            1011                            ADM_IopJop_nmax, &
            1012                            ADM_IopJop,      &
            1013                            ADM_GIoJo,       &
            1014                            ADM_gall_1d,     &
            1015                            ADM_gmax,        &
            1016                            ADM_gmin
            1017                         use mod_comm, only: &
            1018                            COMM_data_transfer,       &
            1019                            COMM_data_transfer_rgn2pl
            1020                         use mod_runconf, only: &
            1021                            TRC_vmax
            1022                         implicit none
            1023                     
            1024                         real(8), intent(in) :: rhog  (ADM_IopJop_nmax,ADM_kall,ADM_lall)
            1025                         real(8), intent(in) :: rhogvx(ADM_IopJop_nmax,ADM_kall,ADM_lall)
            1026                         real(8), intent(in) :: rhogvy(ADM_IopJop_nmax,ADM_kall,ADM_lall)
            1027                         real(8), intent(in) :: rhogvz(ADM_IopJop_nmax,ADM_kall,ADM_lall)
            1028                         real(8), intent(in) :: rhogw (ADM_IopJop_nmax,ADM_kall,ADM_lall)
            1029                         real(8), intent(in) :: rhoge (ADM_IopJop_nmax,ADM_kall,ADM_lall)
            1030                         real(8), intent(in) :: rhogq (ADM_IopJop_nmax,ADM_kall,ADM_lall,TRC_vmax)
            1031                     
            1032                     
            1033                         integer :: n, k, l, nq, ij
            1034                     
            1035                         integer :: i,j,suf
            1036                         suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
            1037                         !---------------------------------------------------------------------------
            1038                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1039     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1040     2  pp               do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1041     3   p   2v          do n = 1, ADM_IopJop_nmax
            1042     3   p   2v             ij = ADM_IopJop(n,ADM_GIoJo)
            1043     3               
            1044     3   p   2v             PRG_var(ij,k,l,I_RHOG  ) = rhog  (n,k,l)
            1045     3   p   2v             PRG_var(ij,k,l,I_RHOGVX) = rhogvx(n,k,l)
            1046     3   p   2v             PRG_var(ij,k,l,I_RHOGVY) = rhogvy(n,k,l)
            1047     3   p   2v             PRG_var(ij,k,l,I_RHOGVZ) = rhogvz(n,k,l)
            1048     3   p   2v             PRG_var(ij,k,l,I_RHOGW ) = rhogw (n,k,l)
            1049     3   p   2v             PRG_var(ij,k,l,I_RHOGE ) = rhoge (n,k,l)
            1050     3   p   2v          enddo
            1051     2   p               enddo
            1052     1   p               enddo
            1053                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1054     1  pp               do nq = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1055     2  pp               do l  = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1056     3  pp               do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1057     4   p   4v          do n = 1, ADM_IopJop_nmax
            1058     4   p   4v             ij = ADM_IopJop(n,ADM_GIoJo)
            1059     4               
            1060     4   p   4v             PRG_var(ij,k,l,PRG_vmax0+nq) = rhogq(n,k,l,nq)
            1061     4   p   4v          enddo
            1062     3   p               enddo
            1063     2   p               enddo
            1064     1   p               enddo
            1065                     
            1066                         ! communication
            1067                         call COMM_data_transfer_rgn2pl( PRG_var, PRG_var_pl, ADM_kall, PRG_vmax )
            1068                     
            1069                         call COMM_data_transfer( PRG_var, PRG_var_pl )
            1070                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1071        pp   6s          PRG_var(suf(ADM_gall_1d,1),:,:,:) = PRG_var(suf(ADM_gmax+1,ADM_gmin),:,:,:)
            1072         p   6s          PRG_var(suf(1,ADM_gall_1d),:,:,:) = PRG_var(suf(ADM_gmin,ADM_gmax+1),:,:,:)
            1073                     
            1074                         return
            1075                       end subroutine prgvar_set_in
            1076                     
            1077                       !-----------------------------------------------------------------------------
            1078                       !>
            1079                       !> get prognostic variables from prg[num].
            1080                       !>
            1081                       subroutine prgvar_get_plane_nopl( &
            1082                            rhog,   &
            1083                            rhogvx, &
            1084                            rhogvy, &
            1085                            rhogw,  &
            1086                            rhoge,  &
            1087                            rhogq,  &
            1088                            num     )
            1089                         use mod_adm, only: &
            1090                            ADM_gall, &
            1091                            ADM_kall, &
            1092                            ADM_lall
            1093                         use mod_runconf, only: &
            1094                            TRC_vmax
            1095                         implicit none
            1096                     
            1097                         real(8), intent(out) :: rhog  (ADM_gall,ADM_kall,ADM_lall)
            1098                         real(8), intent(out) :: rhogvx(ADM_gall,ADM_kall,ADM_lall)
            1099                         real(8), intent(out) :: rhogvy(ADM_gall,ADM_kall,ADM_lall)
            1100                         real(8), intent(out) :: rhogw (ADM_gall,ADM_kall,ADM_lall)
            1101                         real(8), intent(out) :: rhoge (ADM_gall,ADM_kall,ADM_lall)
            1102                         real(8), intent(out) :: rhogq (ADM_gall,ADM_kall,ADM_lall,TRC_vmax)
            1103                         integer, intent(in)  :: num
            1104                     
            1105                         integer :: n, k, l, nq
            1106                         !---------------------------------------------------------------------------
            1107                     
            1108     1                   if ( num == 0 ) then
            1109     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1110     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1111     3  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 145
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1112     4  pp   6v             do n = 1, ADM_gall
            1113     4   p   6v                rhog  (n,k,l) = PRG_var(n,k,l,I_RHOG  )
            1114     4   p   6v                rhogvx(n,k,l) = PRG_var(n,k,l,I_RHOGVX)
            1115     4   p   6v                rhogvy(n,k,l) = PRG_var(n,k,l,I_RHOGVY)
            1116     4   p   6v                rhogw (n,k,l) = PRG_var(n,k,l,I_RHOGW )
            1117     4   p   6v                rhoge (n,k,l) = PRG_var(n,k,l,I_RHOGE )
            1118     4   p   6v             enddo
            1119     3   p                  enddo
            1120     2   p                  enddo
            1121     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1122     2  pp                  do nq = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1123     3  pp                  do l  = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1124     4  pp                  do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1125     5   p   8v             do n  = 1, ADM_gall
            1126     5   p   8v                rhogq(n,k,l,nq) = PRG_var(n,k,l,PRG_vmax0+nq)
            1127     5   p   8v             enddo
            1128     4   p                  enddo
            1129     3   p                  enddo
            1130     2   p                  enddo
            1131     1               
            1132     1                   elseif( num == 1 ) then
            1133     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1134     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1135     3  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 145
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1136     4  pp   6v             do n = 1, ADM_gall
            1137     4   p   6v                rhog  (n,k,l) = PRG_var1(n,k,l,I_RHOG  )
            1138     4   p   6v                rhogvx(n,k,l) = PRG_var1(n,k,l,I_RHOGVX)
            1139     4   p   6v                rhogvy(n,k,l) = PRG_var1(n,k,l,I_RHOGVY)
            1140     4   p   6v                rhogw (n,k,l) = PRG_var1(n,k,l,I_RHOGW )
            1141     4   p   6v                rhoge (n,k,l) = PRG_var1(n,k,l,I_RHOGE )
            1142     4   p   6v             enddo
            1143     3   p                  enddo
            1144     2   p                  enddo
            1145     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1146     2  pp                  do nq = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1147     3  pp                  do l  = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1148     4  pp                  do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1149     5   p   8v             do n  = 1, ADM_gall
            1150     5   p   8v                rhogq(n,k,l,nq) = PRG_var1(n,k,l,PRG_vmax0+nq)
            1151     5   p   8v             enddo
            1152     4   p                  enddo
            1153     3   p                  enddo
            1154     2   p                  enddo
            1155     1               
            1156     1                   endif
            1157                     
            1158                         return
            1159                       end subroutine prgvar_get_plane_nopl
            1160                     
            1161                       !-----------------------------------------------------------------------------
            1162                       !>
            1163                       !> get prognostic variables from prg[num].
            1164                       !>
            1165                       subroutine prgvar_get_noq_plane_nopl( &
            1166                            rhog,   &
            1167                            rhogvx, &
            1168                            rhogvy, &
            1169                            rhogw,  &
            1170                            rhoge   )
            1171                         use mod_adm, only: &
            1172                            ADM_gall, &
            1173                            ADM_kall, &
            1174                            ADM_lall
            1175                         implicit none
            1176                     
            1177                         real(8), intent(out) :: rhog  (ADM_gall,ADM_kall,ADM_lall)
            1178                         real(8), intent(out) :: rhogvx(ADM_gall,ADM_kall,ADM_lall)
            1179                         real(8), intent(out) :: rhogvy(ADM_gall,ADM_kall,ADM_lall)
            1180                         real(8), intent(out) :: rhogw (ADM_gall,ADM_kall,ADM_lall)
            1181                         real(8), intent(out) :: rhoge (ADM_gall,ADM_kall,ADM_lall)
            1182                     
            1183                         integer :: n, k, l
            1184                         !---------------------------------------------------------------------------
            1185                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1186     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1187     2  pp               do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 145
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1188     3  pp   6v          do n = 1, ADM_gall
            1189     3   p   6v             rhog  (n,k,l) = PRG_var(n,k,l,I_RHOG  )
            1190     3   p   6v             rhogvx(n,k,l) = PRG_var(n,k,l,I_RHOGVX)
            1191     3   p   6v             rhogvy(n,k,l) = PRG_var(n,k,l,I_RHOGVY)
            1192     3   p   6v             rhogw (n,k,l) = PRG_var(n,k,l,I_RHOGW )
            1193     3   p   6v             rhoge (n,k,l) = PRG_var(n,k,l,I_RHOGE )
            1194     3   p   6v          enddo
            1195     2   p               enddo
            1196     1   p               enddo
            1197                     
            1198                         return
            1199                       end subroutine prgvar_get_noq_plane_nopl
            1200                     
            1201                       !-----------------------------------------------------------------------------
            1202                       !>
            1203                       !> Description of the subroutine prgvar_set_plane_nopl
            1204                       !>
            1205                       subroutine prgvar_set_plane_nopl( &
            1206                            rhog,   &
            1207                            rhogvx, &
            1208                            rhogvy, &
            1209                            rhogw,  &
            1210                            rhoge,  &
            1211                            rhogq,  &
            1212                            num     )
            1213                         use mod_adm, only: &
            1214                            ADM_gall,    &
            1215                            ADM_lall,    &
            1216                            ADM_kall,    &
            1217                            ADM_gall_1d, &
            1218                            ADM_gmin,    &
            1219                            ADM_gmax
            1220                         use mod_comm, only: &
            1221                            COMM_data_transfer
            1222                         use mod_runconf, only: &
            1223                            TRC_vmax
            1224                         implicit none
            1225                     
            1226                         real(8), intent(in) :: rhog  (ADM_gall,ADM_kall,ADM_lall)
            1227                         real(8), intent(in) :: rhogvx(ADM_gall,ADM_kall,ADM_lall)
            1228                         real(8), intent(in) :: rhogvy(ADM_gall,ADM_kall,ADM_lall)
            1229                         real(8), intent(in) :: rhogw (ADM_gall,ADM_kall,ADM_lall)
            1230                         real(8), intent(in) :: rhoge (ADM_gall,ADM_kall,ADM_lall)
            1231                         real(8), intent(in) :: rhogq (ADM_gall,ADM_kall,ADM_lall,TRC_vmax)
            1232                         integer, intent(in) :: num
            1233                     
            1234                         integer :: n, k, l, nq
            1235                     
            1236                         integer :: i,j,suf
            1237                         suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
            1238                         !---------------------------------------------------------------------------
            1239                     
            1240     1                   if ( num == 0 ) then
            1241     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1242     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1243     3  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 150
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1244     4  pp   6v             do n = 1, ADM_gall
            1245     4   p   6v                PRG_var(n,k,l,I_RHOG  ) = rhog  (n,k,l)
            1246     4   p   6v                PRG_var(n,k,l,I_RHOGVX) = rhogvx(n,k,l)
            1247     4   p   6v                PRG_var(n,k,l,I_RHOGVY) = rhogvy(n,k,l)
            1248     4   p   6v                PRG_var(n,k,l,I_RHOGW ) = rhogw (n,k,l)
            1249     4   p   6v                PRG_var(n,k,l,I_RHOGE ) = rhoge (n,k,l)
            1250     4   p   6v             enddo
            1251     3   p                  enddo
            1252     2   p                  enddo
            1253     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1254     2  pp                  do nq = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1255     3  pp                  do l  = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1256     4  pp                  do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1257     5   p   8v             do n  = 1, ADM_gall
            1258     5   p   8v                PRG_var(n,k,l,PRG_vmax0+nq) = rhogq(n,k,l,nq)
            1259     5   p   8v             enddo
            1260     4   p                  enddo
            1261     3   p                  enddo
            1262     2   p                  enddo
            1263     1               
            1264     1                      call COMM_data_transfer( PRG_var, PRG_var_pl )
            1265     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1266     1  pp   6s             PRG_var(suf(ADM_gall_1d,1),:,:,:) = PRG_var(suf(ADM_gmax+1,ADM_gmin),:,:,:)
            1267     1   p   6s             PRG_var(suf(1,ADM_gall_1d),:,:,:) = PRG_var(suf(ADM_gmin,ADM_gmax+1),:,:,:)
            1268     1               
            1269     1                   elseif( num == 1 ) then
            1270     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1271     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1272     3  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 150
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1273     4  pp   6v             do n = 1, ADM_gall
            1274     4   p   6v                PRG_var1(n,k,l,I_RHOG  ) = rhog  (n,k,l)
            1275     4   p   6v                PRG_var1(n,k,l,I_RHOGVX) = rhogvx(n,k,l)
            1276     4   p   6v                PRG_var1(n,k,l,I_RHOGVY) = rhogvy(n,k,l)
            1277     4   p   6v                PRG_var1(n,k,l,I_RHOGW ) = rhogw (n,k,l)
            1278     4   p   6v                PRG_var1(n,k,l,I_RHOGE ) = rhoge (n,k,l)
            1279     4   p   6v             enddo
            1280     3   p                  enddo
            1281     2   p                  enddo
            1282     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1283     2  pp                  do nq = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1284     3  pp                  do l  = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1285     4  pp                  do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1286     5   p   8v             do n  = 1, ADM_gall
            1287     5   p   8v                PRG_var1(n,k,l,PRG_vmax0+nq) = rhogq(n,k,l,nq)
            1288     5   p   8v             enddo
            1289     4   p                  enddo
            1290     3   p                  enddo
            1291     2   p                  enddo
            1292     1               
            1293     1                      call COMM_data_transfer( PRG_var1, PRG_var1_pl )
            1294     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1295     1  pp   6s             PRG_var1(suf(ADM_gall_1d,1),:,:,:) = PRG_var1(suf(ADM_gmax+1,ADM_gmin),:,:,:)
            1296     1   p   6s             PRG_var1(suf(1,ADM_gall_1d),:,:,:) = PRG_var1(suf(ADM_gmin,ADM_gmax+1),:,:,:)
            1297     1               
            1298     1                   endif
            1299                     
            1300                         return
            1301                       end subroutine prgvar_set_plane_nopl
            1302                     
            1303                       !-----------------------------------------------------------------------------
            1304                       subroutine restart_input( basename )
            1305                         use mod_misc, only: &
            1306                            MISC_get_available_fid, &
            1307                            MISC_make_idstr
            1308                         use mod_adm, only: &
            1309                            ADM_prc_tab, &
            1310                            ADM_prc_me,  &
            1311                            ADM_prc_pl,  &
            1312                            ADM_gall,    &
            1313                            ADM_lall,    &
            1314                            ADM_kall,    &
            1315                            ADM_kmax,    &
            1316                            ADM_kmin
            1317                         use mod_fio, only: &
            1318                            FIO_input
            1319                         use mod_comm, only: &
            1320                            COMM_var
            1321                         use mod_gtl, only: &
            1322                            GTL_max, &
            1323                            GTL_min
            1324                         use mod_runconf, only: &
            1325                            opt_2moment_water,    &
            1326                            flag_diagnose_number, &
            1327                            TRC_vmax, &
            1328                            TRC_name, &
            1329                            I_QC,     &
            1330                            I_QI,     &
            1331                            I_NI!,     &
            1332                     !       ISOTOPE,  & ! [add] K.Yoshimura 20120414
            1333                     !       ISO_MAX,  & ! [add] K.Yoshimura 20120414
            1334                     !       ISO_STR,  & ! [add] K.Yoshimura 20120414
            1335                     !       ISO_STR2    ! [add] K.Yoshimura 20120414
            1336                         use mod_dycoretest, only :  & ! [add] R.Yoshida 20121019
            1337                            dycore_input
            1338                         implicit none
            1339                     
            1340                         character(len=ADM_MAXFNAME), intent(in) :: basename
            1341                     
            1342                         character(len=ADM_MAXFNAME) :: fname
            1343                     
            1344                         real(8) :: val_max, val_min
            1345                         logical :: nonzero
            1346                     
            1347                         integer :: fid
            1348                         integer :: l, rgnid, nq
            1349                         !---------------------------------------------------------------------------
            1350                     
            1351                         write(ADM_LOG_FID,*)
            1352                         write(ADM_LOG_FID,*) '*** read restart/initial data'
            1353                     
            1354                         ! -> [add]&[Mod] H.Yashiro 20110819
            1355     1                   if ( input_io_mode == 'ADVANCED' ) then
            1356     1               
            1357     2                      do nq = 1, DIAG_vmax0
            1358     2                         call FIO_input(DIAG_var(:,:,:,nq),basename,DIAG_name(nq), &
            1359     2                                        layername,1,ADM_kall,1                     )
            1360     2                      enddo
            1361     1               
            1362     2                      do nq = 1, TRC_vmax_input
            1363     2                         call FIO_input(DIAG_var(:,:,:,DIAG_vmax0+nq),basename,TRC_name(nq), &
            1364     2                                        layername,1,ADM_kall,1,                              &
            1365     2                                        allow_missingq=allow_missingq                        )
            1366     2                      enddo
            1367     1               
            1368     1                      call comm_var( DIAG_var, DIAG_var_pl, ADM_kall, DIAG_vmax, comm_type=2, NSval_fix=.true. )
            1369     1               
            1370     1                   elseif( input_io_mode == 'LEGACY' ) then
            1371     1               
            1372     2                      if ( input_direct_access ) then !--- direct access ( defalut )
            1373     2               
            1374     3                         do l = 1, ADM_lall
            1375     3                            rgnid = ADM_prc_tab(l,ADM_prc_me)
            1376     3                            call MISC_make_idstr(fname,trim(basename),'rgn',rgnid)
            1377     3                            fid = MISC_get_available_fid()
            1378     3                            open( unit   = fid,                 &
            1379     3                                  file   = trim(fname),         &
            1380     3                                  form   = 'unformatted',       &
            1381     3                                  access = 'direct',            &
            1382     3                                  recl   = ADM_gall*ADM_kall*8, &
            1383     3                                  status = 'old'                )
            1384     3               
            1385     4   s                        do nq = 1, DIAG_vmax0+TRC_vmax_input
            1386     4   m                           read(fid,rec=nq) DIAG_var(:,:,l,nq)
            1387     4   p                        enddo
            1388     3               
            1389     3                            close(fid)
            1390     3                         enddo
            1391     2               
            1392     2                         call comm_var( DIAG_var, DIAG_var_pl, ADM_kall, DIAG_vmax, comm_type=2, NSval_fix=.true. )
            1393     2               
            1394     2                      else !--- sequential access
            1395     2               
            1396     3                         do l = 1, ADM_lall
            1397     3                            rgnid = ADM_prc_tab(l,ADM_prc_me)
            1398     3                            call MISC_make_idstr(fname,trim(basename),'rgn',rgnid)
            1399     3                            fid = MISC_get_available_fid()
            1400     3                            open( unit   = fid,                 &
            1401     3                                  file   = trim(fname),         &
            1402     3                                  form   = 'unformatted',       &
            1403     3                                  access = 'sequential',        &
            1404     3                                  status = 'old'                )
            1405     3               
            1406     4   s    s                   do nq = 1, DIAG_vmax0+TRC_vmax_input
            1407     4   m    s                      read(fid) DIAG_var(:,:,l,nq)
            1408     4   p    s                   enddo
            1409     3               
            1410     3                            close(fid)
            1411     3                         enddo
            1412     2               
            1413     3                         if ( ADM_prc_me == ADM_prc_pl ) then
            1414     3                            fname = trim(basename)//'.pl'
            1415     3                            fid = MISC_get_available_fid()
            1416     3                            open( unit   = fid,                 &
            1417     3                                  file   = trim(fname),         &
            1418     3                                  form   = 'unformatted',       &
            1419     3                                  access = 'sequential',        &
            1420     3                                  status = 'old'                )
            1421     3               
            1422     4   s    s                   do nq = 1, DIAG_vmax0+TRC_vmax_input
            1423     4   m    s                      read(fid) DIAG_var_pl(:,:,:,nq)
            1424     4   p    s                   enddo
            1425     3               
            1426     3                            close(fid)
            1427     3                         endif
            1428     2                      endif !--- direct/sequencial
            1429     1                   elseif( input_io_mode == 'IDEAL' ) then
            1430     1               
            1431     1                      write(ADM_LOG_FID,*) '*** make ideal initials'
            1432     1               
            1433     1                      call dycore_input( DIAG_var(:,:,:,:) ) !--- [OUT]
            1434     1               
            1435     1                      call comm_var( DIAG_var, DIAG_var_pl, ADM_kall, DIAG_vmax, comm_type=2, NSval_fix=.true. )
            1436     1               
            1437     1                   endif !--- io_mode
            1438                         ! <- [add]&[Mod] H.Yashiro 20110819
            1439                     
            1440                         write(ADM_LOG_FID,*)
            1441                         write(ADM_LOG_FID,*) '====== data range check : diagnostic variables ======'
            1442     1                   do nq = 1, DIAG_vmax0
            1443     1                      val_max = GTL_max( DIAG_var   (:,:,:,nq),       &
            1444     1                                         DIAG_var_pl(:,:,:,nq),       &
            1445     1                                         ADM_kall, ADM_kmin, ADM_kmax )
            1446     1                      val_min = GTL_min( DIAG_var   (:,:,:,nq),       &
            1447     1                                         DIAG_var_pl(:,:,:,nq),       &
            1448     1                                         ADM_kall, ADM_kmin, ADM_kmax )
            1449     1               
            1450     1                      write(ADM_LOG_FID,'(1x,A,A16,2(A,1PE24.17))') '--- ', DIAG_name(nq), ': max=', val_max, ', min=', val_min
            1451     1                   enddo
            1452                     
            1453     1                   do nq = 1, TRC_vmax
            1454     1                      val_max = GTL_max( DIAG_var   (:,:,:,DIAG_vmax0+nq), &
            1455     1                                         DIAG_var_pl(:,:,:,DIAG_vmax0+nq), &
            1456     1                                         ADM_kall, ADM_kmin, ADM_kmax      )
            1457     1               
            1458     2                      if ( val_max <= 0.D0 ) then
            1459     2                         nonzero = .false.
            1460     2                      else
            1461     2                         nonzero = .true.
            1462     2                      endif
            1463     1               
            1464     1                      val_min = GTL_min( DIAG_var   (:,:,:,DIAG_vmax0+nq), &
            1465     1                                         DIAG_var_pl(:,:,:,DIAG_vmax0+nq), &
            1466     1                                         ADM_kall, ADM_kmin, ADM_kmax, nonzero)
            1467     1               
            1468     1                      write(ADM_LOG_FID,'(1x,A,A16,2(A,1PE24.17))') '--- ', TRC_name(nq),  ': max=', val_max, ', min=', val_min
            1469     1                   enddo
            1470                     
            1471                     !    if ( trim(ISOTOPE) == "ON" ) then ! [add] K.Yoshimura 20110414
            1472                     !       do nq = 1, ISO_MAX/2
            1473                     !          DIAG_var(:,:,:,ISO_STR +5+nq) = DIAG_var(:,:,:,6+nq) * 0.99D0
            1474                     !          DIAG_var(:,:,:,ISO_STR2+5+nq) = DIAG_var(:,:,:,6+nq) * 0.92D0
            1475                     !       enddo
            1476                     !    endif
            1477                     
            1478                         call cnvvar_diag2prg( PRG_var (:,:,:,:), PRG_var_pl (:,:,:,:), & !--- [OUT]
            1479                                               DIAG_var(:,:,:,:), DIAG_var_pl(:,:,:,:)  ) !--- [IN]
            1480                     
            1481                     
            1482                         ! [Add] 09/04/14 T.Mitsui
            1483                         ! "option is chosen" and "QI is tracer"
            1484     1                   if ( I_QI <= 0 ) then
            1485     2                      if ( opt_diag_qi ) then
            1486     2                         call diag_qi( ADM_gall,              & !--- [IN]
            1487     2                                       ADM_kall,              & !--- [IN]
            1488     2                                       ADM_lall,              & !--- [IN]
            1489     2                                       DIAG_var(:,:,:,I_tem), & !--- [IN]
            1490     2                                       DIAG_var(:,:,:,I_QC),  & !--- [INOUT]
            1491     2                                       DIAG_var(:,:,:,I_QI),  & !--- [INOUT]
            1492     2                                       PRG_var (:,:,:,I_QC),  & !--- [INOUT]
            1493     2                                       PRG_var (:,:,:,I_QI)   ) !--- [INOUT]
            1494     3                         if ( opt_2moment_water ) then
            1495     4                            if ( I_NI <= 0 ) then
            1496     4                               flag_diagnose_number(I_NI) = .true.
            1497     4                            endif
            1498     3                         endif
            1499     2                      endif
            1500     1                   endif
            1501                     
            1502                         ![Add] 09/08/18 T.Mitsui
            1503                         ! qc and qi are converted into qv and temperature is modified.
            1504     1                   if ( opt_qcqi_to_qv )then
            1505     1                      call convert_qcqi_to_qv( ADM_gall,                             & !--- [IN]
            1506     1                                               ADM_kall,                             & !--- [IN]
            1507     1                                               ADM_lall,                             & !--- [IN]
            1508     1                                               TRC_vmax,                             & !--- [IN]
            1509     1                                               DIAG_var(:,:,:,I_tem),                & !--- [INOUT]
            1510     1                                               DIAG_var(:,:,:,I_qstr:I_qend),        & !--- [INOUT]
            1511     1                                               PRG_var (:,:,:,I_RHOGQstr:I_RHOGQend) ) !--- [INOUT]
            1512     1                   endif
            1513                     
            1514                         write(ADM_LOG_FID,*)
            1515                         write(ADM_LOG_FID,*) '====== data range check : prognostic variables ======'
            1516     1                   do nq = 1, DIAG_vmax0
            1517     1                      val_max = GTL_max( PRG_var   (:,:,:,nq),        &
            1518     1                                         PRG_var_pl(:,:,:,nq),        &
            1519     1                                         ADM_kall, ADM_kmin, ADM_kmax )
            1520     1                      val_min = GTL_min( PRG_var   (:,:,:,nq),        &
            1521     1                                         PRG_var_pl(:,:,:,nq),        &
            1522     1                                         ADM_kall, ADM_kmin, ADM_kmax )
            1523     1               
            1524     1                      write(ADM_LOG_FID,'(1x,A,A16,2(A,1PE24.17))') '--- ', PRG_name(nq), ': max=', val_max, ', min=', val_min
            1525     1                   enddo
            1526                     
            1527     1                   do nq = 1, TRC_vmax
            1528     1                      val_max = GTL_max( PRG_var   (:,:,:,PRG_vmax0+nq), &
            1529     1                                         PRG_var_pl(:,:,:,PRG_vmax0+nq), &
            1530     1                                         ADM_kall, ADM_kmin, ADM_kmax    )
            1531     1               
            1532     2                      if ( val_max <= 0.D0 ) then
            1533     2                         nonzero = .false.
            1534     2                      else
            1535     2                         nonzero = .true.
            1536     2                      endif
            1537     1               
            1538     1                      val_min = GTL_min( PRG_var   (:,:,:,PRG_vmax0+nq),      &
            1539     1                                         PRG_var_pl(:,:,:,PRG_vmax0+nq),      &
            1540     1                                         ADM_kall, ADM_kmin, ADM_kmax, nonzero)
            1541     1               
            1542     1                      write(ADM_LOG_FID,'(1x,A,A16,2(A,1PE24.17))') '--- rhog * ', TRC_name(nq),  ': max=', val_max, ', min=', val_min
            1543     1                   enddo
            1544                     
            1545                         return
            1546                       end subroutine restart_input
            1547                     
            1548                       !-----------------------------------------------------------------------------
            1549                       subroutine restart_output( basename )
            1550                         use mod_misc, only: &
            1551                            MISC_get_available_fid, &
            1552                            MISC_make_idstr
            1553                         use mod_adm, only: &
            1554                            ADM_prc_tab, &
            1555                            ADM_prc_me,  &
            1556                            ADM_prc_pl,  &
            1557                            ADM_gall,    &
            1558                            ADM_lall,    &
            1559                            ADM_kall,    &
            1560                            ADM_kmax,    &
            1561                            ADM_kmin
            1562                         use mod_fio, only : & ! [add] H.Yashiro 20110819
            1563                            FIO_output, &
            1564                            FIO_HSHORT, &
            1565                            FIO_HMID,   &
            1566                            FIO_REAL8
            1567                         use mod_comm, only: &
            1568                            COMM_var
            1569                         use mod_time, only : &
            1570                            TIME_CTIME
            1571                         use mod_gtl, only: &
            1572                            GTL_max, &
            1573                            GTL_min
            1574                         use mod_runconf, only : &
            1575                            TRC_vmax, &
            1576                            TRC_name, &
            1577                            WLABEL
            1578                         implicit none
            1579                     
            1580                         character(len=ADM_MAXFNAME), intent(in) :: basename
            1581                     
            1582                         character(len=FIO_HMID)   :: desc = 'INITIAL/RESTART_data_of_prognostic_variables' ! [add] H.Yashiro 20110819
            1583                     
            1584                         character(len=FIO_HSHORT) :: DLABEL(DIAG_vmax0)
            1585                         data DLABEL / 'Pressure ',        &
            1586                                       'Temperature ',     &
            1587                                       'H-Velocity(XDIR)', &
            1588                                       'H-Velocity(YDIR)', &
            1589                                       'H-Velocity(ZDIR)', &
            1590                                       'V-Velocity '       /
            1591                     
            1592                         character(len=FIO_HSHORT) :: DUNIT(DIAG_vmax0)
            1593                         data DUNIT /  'Pa',  &
            1594                                       'K',   &
            1595                                       'm/s', &
            1596                                       'm/s', &
            1597                                       'm/s', &
            1598                                       'm/s'  /
            1599                     
            1600                         character(len=FIO_HSHORT) :: WUNIT = 'kg/kg'
            1601                     
            1602                         character(len=ADM_MAXFNAME) :: fname
            1603                     
            1604                         real(8) :: val_max, val_min
            1605                         logical :: nonzero
            1606                     
            1607                         integer :: fid
            1608                         integer :: l, rgnid, nq
            1609                         !---------------------------------------------------------------------------
            1610                     
            1611                         call cnvvar_prg2diag( PRG_var (:,:,:,:), PRG_var_pl (:,:,:,:), & !--- [IN]
            1612                                               DIAG_var(:,:,:,:), DIAG_var_pl(:,:,:,:)  ) !--- [OUT]
            1613                     
            1614                         write(ADM_LOG_FID,*)
            1615                         write(ADM_LOG_FID,*) '====== data range check : prognostic variables ======'
            1616     1                   do nq = 1, DIAG_vmax0
            1617     1                      val_max = GTL_max( DIAG_var   (:,:,:,nq),       &
            1618     1                                         DIAG_var_pl(:,:,:,nq),       &
            1619     1                                         ADM_kall, ADM_kmin, ADM_kmax )
            1620     1                      val_min = GTL_min( DIAG_var   (:,:,:,nq),       &
            1621     1                                         DIAG_var_pl(:,:,:,nq),       &
            1622     1                                         ADM_kall, ADM_kmin, ADM_kmax )
            1623     1               
            1624     1                      write(ADM_LOG_FID,'(1x,A,A16,2(A,1PE24.17))') '--- ', DIAG_name(nq), ': max=', val_max, ', min=', val_min
            1625     1                   enddo
            1626                     
            1627     1                   do nq = 1, TRC_vmax
            1628     1                      val_max = GTL_max( DIAG_var   (:,:,:,DIAG_vmax0+nq), &
            1629     1                                         DIAG_var_pl(:,:,:,DIAG_vmax0+nq), &
            1630     1                                         ADM_kall, ADM_kmin, ADM_kmax      )
            1631     1               
            1632     2                      if ( val_max <= 0.D0 ) then
            1633     2                         nonzero = .false.
            1634     2                      else
            1635     2                         nonzero = .true.
            1636     2                      endif
            1637     1               
            1638     1                      val_min = GTL_min( DIAG_var   (:,:,:,DIAG_vmax0+nq), &
            1639     1                                         DIAG_var_pl(:,:,:,DIAG_vmax0+nq), &
            1640     1                                         ADM_kall, ADM_kmin, ADM_kmax, nonzero)
            1641     1               
            1642     1                      write(ADM_LOG_FID,'(1x,A,A16,2(A,1PE24.17))') '--- ', TRC_name(nq),  ': max=', val_max, ', min=', val_min
            1643     1                   enddo
            1644                     
            1645                         ! -> [add] H.Yashiro 20110819
            1646     1                   if ( output_io_mode == 'ADVANCED' ) then
            1647     1               
            1648     2                      do nq = 1, DIAG_vmax0
            1649     2                         call FIO_output( DIAG_var(:,:,:,nq), basename, desc, '', DIAG_name(nq), DLABEL(nq), '', DUNIT(nq), &
            1650     2                                          FIO_REAL8, layername, 1, ADM_kall, 1, TIME_CTIME, TIME_CTIME                      )
            1651     2                      enddo
            1652     1               
            1653     2                      do nq = 1, TRC_vmax
            1654     2                         call FIO_output( DIAG_var(:,:,:,DIAG_vmax0+nq), basename, desc, '', TRC_name(nq), WLABEL(nq), '', WUNIT, &
            1655     2                                          FIO_REAL8, layername, 1, ADM_kall, 1, TIME_CTIME, TIME_CTIME                            )
            1656     2                      enddo
            1657     1               
            1658     1                   elseif( output_io_mode == 'LEGACY' ) then
            1659     1               
            1660     2                      if ( output_direct_access ) then !--- direct access ( defalut )
            1661     2               
            1662     3                         do l = 1, ADM_lall
            1663     3                            rgnid = ADM_prc_tab(l,ADM_prc_me)
            1664     3                            call MISC_make_idstr(fname,trim(basename),'rgn',rgnid)
            1665     3                            fid = MISC_get_available_fid()
            1666     3                            open( unit   = fid,                 &
            1667     3                                  file   = trim(fname),         &
            1668     3                                  form   = 'unformatted',       &
            1669     3                                  access = 'direct',            &
            1670     3                                  recl   = ADM_gall*ADM_kall*8, &
            1671     3                                  status = 'unknown'            )
            1672     3               
            1673     4   s                        do nq = 1, DIAG_vmax
            1674     4   m                           write(fid,rec=nq) DIAG_var(:,:,l,nq)
            1675     4   p                        enddo
            1676     3               
            1677     3                            close(fid)
            1678     3                         enddo
            1679     2               
            1680     2                      else !--- sequential access
            1681     2               
            1682     3                         do l = 1, ADM_lall
            1683     3                            rgnid = ADM_prc_tab(l,ADM_prc_me)
            1684     3                            call MISC_make_idstr(fname,trim(basename),'rgn',rgnid)
            1685     3                            fid = MISC_get_available_fid()
            1686     3                            open( unit   = fid,                 &
            1687     3                                  file   = trim(fname),         &
            1688     3                                  form   = 'unformatted',       &
            1689     3                                  access = 'sequential',        &
            1690     3                                  status = 'unknown'            )
            1691     3               
            1692     4   s    s                   do nq = 1, DIAG_vmax
            1693     4   m    s                      write(fid) DIAG_var(:,:,l,nq)
            1694     4   p    s                   enddo
            1695     3               
            1696     3                            close(fid)
            1697     3                         enddo
            1698     2               
            1699     3                         if ( ADM_prc_me == ADM_prc_pl ) then
            1700     3                            fname = trim(basename)//'.pl'
            1701     3                            fid = misc_get_available_fid()
            1702     3                            open( unit   = fid,                 &
            1703     3                                  file   = trim(fname),         &
            1704     3                                  form   = 'unformatted',       &
            1705     3                                  access = 'sequential',        &
            1706     3                                  status = 'unknown'            )
            1707     3               
            1708     4   s    s                   do nq = 1, DIAG_vmax
            1709     4   m    s                      write(fid) DIAG_var_pl(:,:,:,nq)
            1710     4   p    s                   enddo
            1711     3               
            1712     3                            close(fid)
            1713     3                         endif
            1714     2               
            1715     2                      endif !--- direct/sequencial
            1716     1               
            1717     1                   endif  !--- io_mode
            1718                         ! <- [add] H.Yashiro 20110819
            1719                     
            1720                         return
            1721                       end subroutine restart_output
            1722                     
            1723                       !-----------------------------------------------------------------------------
            1724                       subroutine cnvvar_diag2prg( &
            1725                            prg,  prg_pl, & !--- [OUT]
            1726                            diag, diag_pl ) !--- [IN]
            1727                         use mod_adm, only: &
            1728                            ADM_prc_me,  &
            1729                            ADM_prc_pl,  &
            1730                            ADM_gall,    &
            1731                            ADM_gall_pl, &
            1732                            ADM_lall,    &
            1733                            ADM_lall_pl, &
            1734                            ADM_kall
            1735                         use mod_grd, only:  &
            1736                            GRD_afac, &
            1737                            GRD_bfac
            1738                         use mod_vmtr, only: &
            1739                            VMTR_GSGAM2,    &
            1740                            VMTR_GSGAM2_pl, &
            1741                            VMTR_GSGAM2H,   &
            1742                            VMTR_GSGAM2H_pl
            1743                         use mod_runconf, only: &
            1744                            TRC_vmax, &
            1745                            NQW_STR,  &
            1746                            NQW_END
            1747                         use mod_thrmdyn, only: &
            1748                            THRMDYN_qd_ijkl,  &
            1749                            THRMDYN_rho_ijkl, &
            1750                            THRMDYN_ein_ijkl
            1751                         implicit none
            1752                     
            1753                         real(8), intent(out) :: prg    (ADM_gall,   ADM_kall,ADM_lall,   PRG_vmax )
            1754                         real(8), intent(out) :: prg_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl,PRG_vmax )
            1755                         real(8), intent(in)  :: diag   (ADM_gall,   ADM_kall,ADM_lall,   DIAG_vmax)
            1756                         real(8), intent(in)  :: diag_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl,DIAG_vmax)
            1757                     
            1758                         real(8) :: qd       (ADM_gall,   ADM_kall,ADM_lall   )
            1759                         real(8) :: qd_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1760                         real(8) :: rho      (ADM_gall,   ADM_kall,ADM_lall   )
            1761                         real(8) :: rho_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1762                         real(8) :: ein      (ADM_gall,   ADM_kall,ADM_lall   )
            1763                         real(8) :: ein_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1764                     
            1765                         real(8) :: rhog_h   (ADM_gall,   ADM_kall)
            1766                         real(8) :: rhog_h_pl(ADM_gall_pl,ADM_kall)
            1767                     
            1768                         integer :: ij, k, l, iv
            1769                         !---------------------------------------------------------------------------
            1770                     
            1771                         !--- calculation of dry mass concentration
            1772                         call THRMDYN_qd_ijkl ( ADM_gall, ADM_kall, ADM_lall, & !--- [IN]
            1773                                                TRC_vmax, NQW_STR, NQW_END,   & !--- [IN]
            1774                                                qd  (:,:,:),                  & !--- [OUT]
            1775                                                diag(:,:,:,I_qstr:I_qend)     ) !--- [IN]
            1776                     
            1777                         !--- calculation  of density
            1778                         call THRMDYN_rho_ijkl( ADM_gall, ADM_kall, ADM_lall, & !--- [IN]
            1779                                                rho(:,:,:),                   & !--- [OUT]
            1780                                                diag(:,:,:,I_pre),            & !--- [IN]
            1781                                                diag(:,:,:,I_tem),            & !--- [IN]
            1782                                                qd  (:,:,:),                  & !--- [IN]
            1783                                                diag(:,:,:,I_qstr)            ) !--- [IN]
            1784                     
            1785                         !--- calculation of internal energy
            1786                         call THRMDYN_ein_ijkl( ADM_gall, ADM_kall, ADM_lall, & !--- [IN]
            1787                                                TRC_vmax, NQW_STR, NQW_END,   & !--- [IN]
            1788                                                ein(:,:,:),                   & !--- [OUT]
            1789                                                diag(:,:,:,I_tem),            & !--- [IN]
            1790                                                qd  (:,:,:),                  & !--- [IN]
            1791                                                diag(:,:,:,I_qstr:I_qend)     ) !--- [IN]
            1792                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1793     1  pp               do l  = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1794     2  pp               do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 149
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1795     3  pp   4v          do ij = 1, ADM_gall
            1796     3   p   4v             prg(ij,k,l,I_RHOG  ) = rho(ij,k,l) * VMTR_GSGAM2(ij,k,l)
            1797     3   p   4v             prg(ij,k,l,I_RHOGVX) = prg(ij,k,l,I_RHOG) * diag(ij,k,l,I_vx)
            1798     3   p   4v             prg(ij,k,l,I_RHOGVY) = prg(ij,k,l,I_RHOG) * diag(ij,k,l,I_vy)
            1799     3   p   4v             prg(ij,k,l,I_RHOGVZ) = prg(ij,k,l,I_RHOG) * diag(ij,k,l,I_vz)
            1800     3   p   4v             prg(ij,k,l,I_RHOGE ) = prg(ij,k,l,I_RHOG) * ein (ij,k,l)
            1801     3   p   4v          enddo
            1802     2   p               enddo
            1803     1   p               enddo
            1804                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 2)
                                   <<< Loop-information  End >>>
            1805     1  pp               do iv = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 1)
                                   <<< Loop-information  End >>>
            1806     2  pp               do l  = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1807     3  pp               do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1808     4   p   8v          do ij = 1, ADM_gall
            1809     4   p   8v             prg(ij,k,l,PRG_vmax0+iv) = prg(ij,k,l,I_RHOG) * diag(ij,k,l,DIAG_vmax0+iv)
            1810     4   p   8v          enddo
            1811     3   p               enddo
            1812     2   p               enddo
            1813     1   p               enddo
            1814                     
            1815     1                   do l  = 1, ADM_lall
            1816     1                      !------ interpolation of rhog_h
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 8
                                   <<<      GRD_afac: 4, GRD_bfac: 4
                                   <<< Loop-information  End >>>
            1817     2  pp                  do k  = 2, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 174
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1818     3  pp   6v             do ij = 1, ADM_gall
            1819     3   p   6v                rhog_h(ij,k) = VMTR_GSGAM2H(ij,k,l) * 0.5D0 * ( GRD_afac(k) * rho(ij,k  ,l) &
            1820     3                                                                       + GRD_bfac(k) * rho(ij,k-1,l) )
            1821     3   p   6v             enddo
            1822     2   p                  enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1823     2  pp   8v             do ij = 1, ADM_gall
            1824     2   p   8v                rhog_h(ij,1) = rhog_h(ij,2)
            1825     2   p   8v             enddo
            1826     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 3
                                   <<< Loop-information  End >>>
            1827     2  pp                  do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 422
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1828     3  pp   8v             do ij = 1, ADM_gall
            1829     3   p   8v                prg(ij,k,l,I_RHOGW) = rhog_h(ij,k) * diag(ij,k,l,I_w)
            1830     3   p   8v             enddo
            1831     2   p                  enddo
            1832     1                   enddo
            1833                     
            1834     1                   if ( ADM_prc_me == ADM_prc_pl ) then
            1835     1               
            1836     1                      !--- calculation of dry mass concentration
            1837     1                      call THRMDYN_qd_ijkl ( ADM_gall_pl, ADM_kall, ADM_lall_pl, & !--- [IN]
            1838     1                                             TRC_vmax, NQW_STR, NQW_END,         & !--- [IN]
            1839     1                                             qd_pl  (:,:,:),                     & !--- [OUT]
            1840     1                                             diag_pl(:,:,:,I_qstr:I_qend)        ) !--- [IN]
            1841     1               
            1842     1                      !--- calculation  of density
            1843     1                      call THRMDYN_rho_ijkl( ADM_gall_pl, ADM_kall, ADM_lall_pl, & !--- [IN]
            1844     1                                             rho_pl(:,:,:),                      & !--- [OUT]
            1845     1                                             diag_pl(:,:,:,I_pre),               & !--- [IN]
            1846     1                                             diag_pl(:,:,:,I_tem),               & !--- [IN]
            1847     1                                             qd_pl  (:,:,:),                     & !--- [IN]
            1848     1                                             diag_pl(:,:,:,I_qstr)               ) !--- [IN]
            1849     1               
            1850     1                      !--- calculation of internal energy
            1851     1                      call THRMDYN_ein_ijkl( ADM_gall_pl, ADM_kall, ADM_lall_pl, & !--- [IN]
            1852     1                                             TRC_vmax, NQW_STR, NQW_END,         & !--- [IN]
            1853     1                                             ein_pl(:,:,:),                      & !--- [OUT]
            1854     1                                             diag_pl(:,:,:,I_tem),               & !--- [IN]
            1855     1                                             qd_pl  (:,:,:),                     & !--- [IN]
            1856     1                                             diag_pl(:,:,:,I_qstr:I_qend)        ) !--- [IN]
            1857     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1858     2  pp                  do l  = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1859     3  pp                  do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 149
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1860     4  pp   4v             do ij = 1, ADM_gall_pl
            1861     4   p   4v                prg_pl(ij,k,l,I_RHOG  ) = rho_pl(ij,k,l) * VMTR_GSGAM2_pl(ij,k,l)
            1862     4   p   4v                prg_pl(ij,k,l,I_RHOGVX) = prg_pl(ij,k,l,I_RHOG) * diag_pl(ij,k,l,I_vx)
            1863     4   p   4v                prg_pl(ij,k,l,I_RHOGVY) = prg_pl(ij,k,l,I_RHOG) * diag_pl(ij,k,l,I_vy)
            1864     4   p   4v                prg_pl(ij,k,l,I_RHOGVZ) = prg_pl(ij,k,l,I_RHOG) * diag_pl(ij,k,l,I_vz)
            1865     4   p   4v                prg_pl(ij,k,l,I_RHOGE ) = prg_pl(ij,k,l,I_RHOG) * ein_pl (ij,k,l)
            1866     4   p   4v             enddo
            1867     3   p                  enddo
            1868     2   p                  enddo
            1869     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 2)
                                   <<< Loop-information  End >>>
            1870     2  pp                  do iv = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 1)
                                   <<< Loop-information  End >>>
            1871     3  pp                  do l  = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1872     4  pp                  do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1873     5   p   8v             do ij = 1, ADM_gall_pl
            1874     5   p   8v                prg_pl(ij,k,l,PRG_vmax0+iv) = prg_pl(ij,k,l,I_RHOG) * diag_pl(ij,k,l,DIAG_vmax0+iv)
            1875     5   p   8v             enddo
            1876     4   p                  enddo
            1877     3   p                  enddo
            1878     2   p                  enddo
            1879     1               
            1880     2                      do l  = 1, ADM_lall_pl
            1881     2                         !------ interpolation of rhog_h
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 8
                                   <<<      GRD_afac: 4, GRD_bfac: 4
                                   <<< Loop-information  End >>>
            1882     3  pp                     do k  = 2, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 174
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1883     4  pp   6v                do ij = 1, ADM_gall_pl
            1884     4   p   6v                   rhog_h_pl(ij,k) = VMTR_GSGAM2H_pl(ij,k,l) * 0.5D0 * ( GRD_afac(k) * rho_pl(ij,k  ,l) &
            1885     4                                                                                + GRD_bfac(k) * rho_pl(ij,k-1,l) )
            1886     4   p   6v                enddo
            1887     3   p                     enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1888     3  pp   8v                do ij = 1, ADM_gall_pl
            1889     3   p   8v                   rhog_h_pl(ij,1) = rhog_h_pl(ij,2)
            1890     3   p   8v                enddo
            1891     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 3
                                   <<< Loop-information  End >>>
            1892     3  pp                     do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 422
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1893     4  pp   8v                do ij = 1, ADM_gall_pl
            1894     4   p   8v                   prg_pl(ij,k,l,I_RHOGW) = rhog_h_pl(ij,k) * diag_pl(ij,k,l,I_w)
            1895     4   p   8v                enddo
            1896     3   p                     enddo
            1897     2                      enddo
            1898     1               
            1899     1                   endif
            1900                     
            1901                         return
            1902                       end subroutine cnvvar_diag2prg
            1903                     
            1904                       !-----------------------------------------------------------------------------
            1905                       subroutine cnvvar_prg2diag(&
            1906                            prg,  prg_pl, & !--- [OUT]
            1907                            diag, diag_pl ) !--- [IN]
            1908                         use mod_adm, only: &
            1909                            ADM_prc_me,  &
            1910                            ADM_prc_pl,  &
            1911                            ADM_gall,    &
            1912                            ADM_gall_pl, &
            1913                            ADM_lall,    &
            1914                            ADM_lall_pl, &
            1915                            ADM_kall
            1916                         use mod_grd, only:  &
            1917                            GRD_afac, &
            1918                            GRD_bfac
            1919                         use mod_vmtr, only : &
            1920                            VMTR_GSGAM2,    &
            1921                            VMTR_GSGAM2_pl, &
            1922                            VMTR_GSGAM2H,   &
            1923                            VMTR_GSGAM2H_pl
            1924                         use mod_runconf, only: &
            1925                            TRC_vmax, &
            1926                            NQW_STR,  &
            1927                            NQW_END
            1928                         use mod_thrmdyn, only: &
            1929                            THRMDYN_qd_ijkl,    &
            1930                            THRMDYN_tempre_ijkl
            1931                         implicit none
            1932                     
            1933                         real(8), intent(in)  :: prg    (ADM_gall,   ADM_kall,ADM_lall,   PRG_vmax )
            1934                         real(8), intent(in)  :: prg_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl,PRG_vmax )
            1935                         real(8), intent(out) :: diag   (ADM_gall,   ADM_kall,ADM_lall,   DIAG_vmax)
            1936                         real(8), intent(out) :: diag_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl,DIAG_vmax)
            1937                     
            1938                         real(8) :: qd       (ADM_gall,   ADM_kall,ADM_lall   )
            1939                         real(8) :: qd_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1940                         real(8) :: rho      (ADM_gall,   ADM_kall,ADM_lall   )
            1941                         real(8) :: rho_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1942                         real(8) :: ein      (ADM_gall,   ADM_kall,ADM_lall   )
            1943                         real(8) :: ein_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1944                     
            1945                         real(8) :: rhog_h   (ADM_gall,   ADM_kall)
            1946                         real(8) :: rhog_h_pl(ADM_gall_pl,ADM_kall)
            1947                     
            1948                         integer :: ij, k, l, iv
            1949                         !---------------------------------------------------------------------------
            1950                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1951     1  pp               do l  = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1952     2  pp               do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 99
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1953     3  pp   4v          do ij = 1, ADM_gall
            1954     3   p   4v             rho (ij,k,l)      = prg(ij,k,l,I_RHOG  ) / VMTR_GSGAM2(ij,k,l)
            1955     3   p   4v             diag(ij,k,l,I_vx) = prg(ij,k,l,I_RHOGVX) / prg(ij,k,l,I_RHOG)
            1956     3   p   4v             diag(ij,k,l,I_vy) = prg(ij,k,l,I_RHOGVY) / prg(ij,k,l,I_RHOG)
            1957     3   p   4v             diag(ij,k,l,I_vz) = prg(ij,k,l,I_RHOGVZ) / prg(ij,k,l,I_RHOG)
            1958     3   p   4v             ein (ij,k,l)      = prg(ij,k,l,I_RHOGE ) / prg(ij,k,l,I_RHOG)
            1959     3   p   4v          enddo
            1960     2   p               enddo
            1961     1   p               enddo
            1962                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1963     1  pp               do iv = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 381
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1964     2  pp   6v          do l  = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<< Loop-information  End >>>
            1965     3   p   6           do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<< Loop-information  End >>>
            1966     4   p   6           do ij = 1, ADM_gall
            1967     4   p   6v             diag(ij,k,l,DIAG_vmax0+iv) = prg(ij,k,l,PRG_vmax0+iv) / prg(ij,k,l,I_RHOG)
            1968     4   p   6v          enddo
            1969     3   p    v          enddo
            1970     2   p    v          enddo
            1971     1   p               enddo
            1972                     
            1973                         !--- calculation of dry mass concentration
            1974                         call THRMDYN_qd_ijkl ( ADM_gall, ADM_kall, ADM_lall, & !--- [IN]
            1975                                                TRC_vmax, NQW_STR, NQW_END,   & !--- [IN]
            1976                                                qd  (:,:,:),                  & !--- [OUT]
            1977                                                diag(:,:,:,I_qstr:I_qend)     ) !--- [IN]
            1978                     
            1979                         !--- calculation of tem, pre
            1980                         call THRMDYN_tempre_ijkl( ADM_gall, ADM_kall, ADM_lall, & !--- [IN]
            1981                                                   TRC_vmax, NQW_STR, NQW_END,   & !--- [IN]
            1982                                                   diag(:,:,:,I_tem),            & !--- [OUT]
            1983                                                   diag(:,:,:,I_pre),            & !--- [OUT]
            1984                                                   ein(:,:,:),                   & !--- [IN]
            1985                                                   rho(:,:,:),                   & !--- [IN]
            1986                                                   qd  (:,:,:),                  & !--- [IN]
            1987                                                   diag(:,:,:,I_qstr:I_qend)     ) !--- [IN]
            1988                     
            1989     1                   do l  = 1, ADM_lall
            1990     1                      !------ interpolation of rhog_h
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 8
                                   <<<      GRD_afac: 4, GRD_bfac: 4
                                   <<< Loop-information  End >>>
            1991     2  pp                  do k  = 2, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 174
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1992     3  pp   6v             do ij = 1, ADM_gall
            1993     3   p   6v                rhog_h(ij,k) = VMTR_GSGAM2H(ij,k,l) * 0.5D0 * ( GRD_afac(k) * rho(ij,k  ,l) &
            1994     3                                                                       + GRD_bfac(k) * rho(ij,k-1,l) )
            1995     3   p   6v             enddo
            1996     2   p                  enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1997     2  pp   8v             do ij = 1, ADM_gall
            1998     2   p   8v                rhog_h(ij,1) = rhog_h(ij,2)
            1999     2   p   8v             enddo
            2000     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2001     2  pp                  do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 327
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2002     3  pp   6v             do ij = 1, ADM_gall
            2003     3   p   6v                diag(ij,k,l,I_w) = prg(ij,k,l,I_RHOGW) / rhog_h(ij,k)
            2004     3   p   6v             enddo
            2005     2   p                  enddo
            2006     1                   enddo
            2007                     
            2008     1                   if ( ADM_prc_me == ADM_prc_pl ) then
            2009     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2010     2  pp                  do l  = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2011     3  pp                  do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 99
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2012     4  pp   4v             do ij = 1, ADM_gall_pl
            2013     4   p   4v                rho_pl (ij,k,l)      = prg_pl(ij,k,l,I_RHOG  ) / VMTR_GSGAM2_pl(ij,k,l)
            2014     4   p   4v                diag_pl(ij,k,l,I_vx) = prg_pl(ij,k,l,I_RHOGVX) / prg_pl(ij,k,l,I_RHOG)
            2015     4   p   4v                diag_pl(ij,k,l,I_vy) = prg_pl(ij,k,l,I_RHOGVY) / prg_pl(ij,k,l,I_RHOG)
            2016     4   p   4v                diag_pl(ij,k,l,I_vz) = prg_pl(ij,k,l,I_RHOGVZ) / prg_pl(ij,k,l,I_RHOG)
            2017     4   p   4v                ein_pl (ij,k,l)      = prg_pl(ij,k,l,I_RHOGE ) / prg_pl(ij,k,l,I_RHOG)
            2018     4   p   4v             enddo
            2019     3   p                  enddo
            2020     2   p                  enddo
            2021     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 2)
                                   <<< Loop-information  End >>>
            2022     2  pp                  do iv = 1, TRC_vmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 1)
                                   <<< Loop-information  End >>>
            2023     3  pp                  do l  = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2024     4  pp                  do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2025     5   p   6v             do ij = 1, ADM_gall_pl
            2026     5   p   6v                diag_pl(ij,k,l,DIAG_vmax0+iv) = prg_pl(ij,k,l,PRG_vmax0+iv) / prg_pl(ij,k,l,I_RHOG)
            2027     5   p   6v             enddo
            2028     4   p                  enddo
            2029     3   p                  enddo
            2030     2   p                  enddo
            2031     1               
            2032     1                      !--- calculation of dry mass concentration
            2033     1                      call THRMDYN_qd_ijkl ( ADM_gall_pl, ADM_kall, ADM_lall_pl, & !--- [IN]
            2034     1                                             TRC_vmax, NQW_STR, NQW_END,         & !--- [IN]
            2035     1                                             qd_pl  (:,:,:),                     & !--- [OUT]
            2036     1                                             diag_pl(:,:,:,I_qstr:I_qend)        ) !--- [IN]
            2037     1               
            2038     1                      !--- calculation of tem, pre
            2039     1                      call THRMDYN_tempre_ijkl( ADM_gall_pl, ADM_kall, ADM_lall_pl, & !--- [IN]
            2040     1                                                TRC_vmax, NQW_STR, NQW_END,         & !--- [IN]
            2041     1                                                diag_pl(:,:,:,I_tem),               & !--- [OUT]
            2042     1                                                diag_pl(:,:,:,I_pre),               & !--- [OUT]
            2043     1                                                ein_pl(:,:,:),                      & !--- [IN]
            2044     1                                                rho_pl(:,:,:),                      & !--- [IN]
            2045     1                                                qd_pl  (:,:,:),                     & !--- [IN]
            2046     1                                                diag_pl(:,:,:,I_qstr:I_qend)        ) !--- [IN]
            2047     1               
            2048     2                      do l  = 1, ADM_lall_pl
            2049     2                         !------ interpolation of rhog_h
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 8
                                   <<<      GRD_afac: 4, GRD_bfac: 4
                                   <<< Loop-information  End >>>
            2050     3  pp                     do k  = 2, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 174
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2051     4  pp   6v                do ij = 1, ADM_gall_pl
            2052     4   p   6v                   rhog_h_pl(ij,k) = VMTR_GSGAM2H_pl(ij,k,l) * 0.5D0 * ( GRD_afac(k) * rho_pl(ij,k  ,l) &
            2053     4                                                                                + GRD_bfac(k) * rho_pl(ij,k-1,l) )
            2054     4   p   6v                enddo
            2055     3   p                     enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2056     3  pp   8v                do ij = 1, ADM_gall_pl
            2057     3   p   8v                   rhog_h_pl(ij,1) = rhog_h_pl(ij,2)
            2058     3   p   8v                enddo
            2059     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2060     3  pp                     do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 327
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2061     4  pp   6v                do ij = 1, ADM_gall_pl
            2062     4   p   6v                   diag_pl(ij,k,l,I_w) = prg_pl(ij,k,l,I_RHOGW) / rhog_h_pl(ij,k)
            2063     4   p   6v                enddo
            2064     3   p                     enddo
            2065     2                      enddo
            2066     1               
            2067     1                   endif
            2068                     
            2069                         return
            2070                       end subroutine cnvvar_prg2diag
            2071                     
            2072                       !-----------------------------------------------------------------------------
            2073                       ! 09/04/14 [Add] T.Mitsui
            2074                       ! GCMs, including Reanalysis data, diagnose qi with qc and temperature implicitly
            2075                       ! and qi is never provided by them.
            2076                       ! Here we diagnose qi without release of latent heat.
            2077                       ! This assumption is equivalent with treatment of GCMs who never predict qi.
            2078                       !
            2079                       ! Therefore we should diagnose in this module before calculating rhoge
            2080                       ! because we should keep coservation laws for mass and energy.
            2081                       subroutine diag_qi( &
            2082                            gall, kall, lall, & ! in
            2083                            tem,                   & ! in
            2084                            qc, qi, rhogqc, rhogqi ) ! inout
            2085                         use mod_adm, only: &
            2086                            ADM_CTL_FID,  &
            2087                            ADM_LOG_FID
            2088                         implicit none
            2089                     
            2090                         integer, intent(in)    :: gall
            2091                         integer, intent(in)    :: kall
            2092                         integer, intent(in)    :: lall
            2093                         real(8), intent(in)    :: tem(gall,kall,lall)
            2094                         real(8), intent(inout) :: qc(gall,kall,lall)
            2095                         real(8), intent(inout) :: qi(gall,kall,lall)
            2096                         real(8), intent(inout) :: rhogqc(gall,kall,lall)
            2097                         real(8), intent(inout) :: rhogqi(gall,kall,lall)
            2098                         ! Reference: MIROC4.1, G98, Rogers and Yau(1989)(book) and so on.
            2099                         ! -15deg. is the most effective temperature of Bergeron process
            2100                         real(8), save :: tem_low = 258.15d0
            2101                         !   0deg. is begining of Bergeron process
            2102                         real(8), save :: tem_up  = 273.15d0
            2103                         !
            2104                         real(8), parameter :: dtem_min=0.1d0
            2105                         real(8), parameter :: tem_low_min = 173.15d0
            2106                         !
            2107                         namelist /nm_restart_diag_qi/ &
            2108                              tem_low, tem_up
            2109                         !
            2110                         real(8) :: r_dtem
            2111                         real(8) :: liquid_ratio
            2112                         !
            2113                         real(8) :: qc_pre(gall,kall,lall)
            2114                         real(8) :: rhogqc_pre(gall,kall,lall)
            2115                         real(8) :: dqc(gall,kall,lall)
            2116                         real(8) :: drhogqc(gall,kall,lall)
            2117                         !
            2118                         integer :: ij,k,l
            2119                         !---------------------------------------------------------------------------
            2120                     
            2121                         rewind(ADM_CTL_FID)
            2122                         read(ADM_CTL_FID,nml=nm_restart_diag_qi,end=100)
            2123                     100 continue
            2124                         ! 09/04/14 [Add] T.Mitsui, filter
            2125                         tem_low =  max(tem_low_min, min(tem_low, tem_up-dtem_min))
            2126                         tem_up  =  max(tem_up, tem_low+dtem_min)
            2127                         write(ADM_LOG_FID,nml=nm_restart_diag_qi)
            2128                         !
            2129                         r_dtem = 1.d0/(tem_up - tem_low)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 889
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2130        pp   8v          qc_pre(:,:,:)     = qc(:,:,:)
            2131         p   8v          rhogqc_pre(:,:,:) = rhogqc(:,:,:)
            2132                         !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 243
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2133     1  pp   4v          do l=1, lall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<< Loop-information  End >>>
            2134     2   p   4              do k=1, kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<< Loop-information  End >>>
            2135     3   p   4                 do ij=1, gall
            2136     3                            ! ratio=1 => all water,  ratio=0 => all ice.
            2137     3   p   4v                   liquid_ratio  = min(1.d0, max(0.d0, (tem(ij,k,l)-tem_low)*r_dtem))
            2138     3   p   4v                   dqc(ij,k,l)     = (liquid_ratio-1.d0)*qc(ij,k,l)
            2139     3   p   4v                   drhogqc(ij,k,l) = (liquid_ratio-1.d0)*rhogqc(ij,k,l)
            2140     3                            !
            2141     3   p   4v                   qc(ij,k,l)      = qc(ij,k,l)     + dqc(ij,k,l)
            2142     3   p   4v                   qi(ij,k,l)      = qi(ij,k,l)     - dqc(ij,k,l)
            2143     3   p   4v                   rhogqc(ij,k,l)  = rhogqc(ij,k,l) + drhogqc(ij,k,l)
            2144     3   p   4v                   rhogqi(ij,k,l)  = rhogqi(ij,k,l) - drhogqc(ij,k,l)
            2145     3   p   4v                end do
            2146     2   p                  end do
            2147     1   p               end do
            2148                         !
            2149                         write(ADM_LOG_FID,'(a)') "*** Diagnosis of QI, check max and min value "
            2150     1                   do k=1, kall
            2151     1                      write(ADM_LOG_FID,'(a,i5)') "Layer number  = ", k
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2152     1       8v             write(ADM_LOG_FID,'(a,2f16.6)') "tem(max,min)  = ",maxval(tem(:,k,:)), minval(tem(:,k,:))
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2153     1       8v             write(ADM_LOG_FID,'(a,e16.6,a,e16.6)') "qc(pre) max   =",maxval(qc_pre(:,k,:)),&
            2154     1                                                             " => qc(post) max   =" , maxval(qc(:,k,:))
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2155     1       8v             write(ADM_LOG_FID,'(a,e16.6,a,e16.6)') "qc(pre) min   =",minval(qc_pre(:,k,:)),&
            2156     1                                                             " => qc(post) min   =" , minval(qc(:,k,:))
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2157     1       8v             write(ADM_LOG_FID,'(a,e16.6,a,e16.6)') "dqc     min   =",minval(dqc(:,k,:)),&
            2158     1                                                             ",   qi(post) max   =" , maxval(qi(:,k,:))
            2159     1                   enddo
            2160                     
            2161                         return
            2162                       end subroutine diag_qi
            2163                     
            2164                       !-----------------------------------------------------------------------------
            2165                       ! [Add] 09/08/18 T.MItsui. convert qc and qi into qv(immediate evaporation).
            2166                       subroutine convert_qcqi_to_qv( &
            2167                            ijdim, kdim, lall, nqmax, &
            2168                            tem, q, rhogq )
            2169                         use mod_runconf, only: &
            2170                              I_QV, I_QC, I_QI, &
            2171                              I_NC, I_NI,       &
            2172                              NQW_STR, NQW_END, &
            2173                              opt_2moment_water
            2174                         use mod_cnst, only: &
            2175                              CNST_LH00,     &
            2176                              CNST_LHF00,    &
            2177                              CNST_CVV,      &
            2178                              CNST_CL,       &
            2179                              CNST_CI
            2180                         use mod_thrmdyn, only: &
            2181                              thrmdyn_cv
            2182                         implicit none
            2183                         !
            2184                         integer, intent(in) :: ijdim
            2185                         integer, intent(in) :: kdim
            2186                         integer, intent(in) :: lall
            2187                         integer, intent(in) :: nqmax
            2188                         real(8), intent(inout) :: tem(ijdim,kdim,lall)
            2189                         real(8), intent(inout) :: q(ijdim,kdim,lall,nqmax)
            2190                         real(8), intent(inout) :: rhogq(ijdim,kdim,lall,nqmax)
            2191                         !
            2192                         real(8) :: qd(ijdim,kdim)
            2193                         real(8) :: cva(ijdim,kdim)
            2194                         real(8) :: dqv(ijdim,kdim), dqi(ijdim,kdim)
            2195                         real(8) :: drhogqv(ijdim,kdim)
            2196                         real(8) :: drhoe(ijdim,kdim)
            2197                         !
            2198                         integer :: l_region,nq
            2199                         !---------------------------------------------------------------------------
            2200                     
            2201     1                   do l_region=1,lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1778
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2202     1  pp    v             qd(:,:) = 1.d0
            2203     2   s                  do nq=NQW_STR, NQW_END
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 942
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2204     2  pp   8v                qd(:,:) = qd(:,:) - q(:,:,l_region,nq)
            2205     2   p                  end do
            2206     1                      call thrmdyn_cv( &
            2207     1                           ijdim,      & !--- in
            2208     1                           cva,        & !--- out
            2209     1                           q,qd        ) !--- in
            2210     1                      !
            2211     2                      if( NQW_END >= I_QI )then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 314
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2212     2  pp   4v                dqv(:,:)     =   q(:,:,l_region,I_QC) + q(:,:,l_region,I_QI)
            2213     2   p   4v                dqi(:,:)     = - q(:,:,l_region,I_QI)
            2214     2   p   4v                drhogqv(:,:) = rhogq(:,:,l_region,I_QC) + rhogq(:,:,l_region,I_QI)
            2215     2   p   4v                drhoe(:,:)   = -CNST_LH00*dqv(:,:) + CNST_LHF00*dqi(:,:) &
            2216     2                              - (CNST_CVV*tem(:,:,l_region)-CNST_CL*tem(:,:,l_region))*dqv(:,:) &
            2217     2                              - (CNST_CI *tem(:,:,l_region)-CNST_CL*tem(:,:,l_region))*dqi(:,:)
            2218     2                         !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 250
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2219     2  pp   4v                tem(:,:,l_region)    = tem(:,:,l_region) + drhoe(:,:)/cva(:,:)
            2220     2   p   4v                q(:,:,l_region,I_QV) = q(:,:,l_region,I_QV) + dqv(:,:)
            2221     2   p   4v                q(:,:,l_region,I_QC) = 0.d0
            2222     2   p   4v                q(:,:,l_region,I_QI) = 0.d0
            2223     2   p   4v                rhogq(:,:,l_region,I_QV) = rhogq(:,:,l_region,I_QV) + drhogqv(:,:)
            2224     2   p   4v                rhogq(:,:,l_region,I_QC) = 0.d0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1778
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2225     2  pp    v                rhogq(:,:,l_region,I_QI) = 0.d0
            2226     3                         if( opt_2moment_water )then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 843
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2227     3  pp   8v                   q(:,:,l_region,I_NC)     = 0.d0
            2228     3   p   8v                   q(:,:,l_region,I_NI)     = 0.d0
            2229     3   p   8v                   rhogq(:,:,l_region,I_NC) = 0.d0
            2230     3   p   8v                   rhogq(:,:,l_region,I_NI) = 0.d0
            2231     3                         end if
            2232     2                      else
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 517
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2233     2  pp   6v                dqv(:,:)     = q(:,:,l_region,I_QC)
            2234     2   p   6v                drhogqv(:,:) = rhogq(:,:,l_region,I_QC)
            2235     2                         !
            2236     2   p   6v                drhoe(:,:)   = -CNST_LH00*dqv(:,:) &
            2237     2                              - (CNST_CVV*tem(:,:,l_region)-CNST_CL*tem(:,:,l_region))*dqv(:,:)
            2238     2                         !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 267
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2239     2  pp   4v                tem(:,:,l_region)    = tem(:,:,l_region) + drhoe(:,:)/cva(:,:)
            2240     2   p   4v                q(:,:,l_region,I_QV) = q(:,:,l_region,I_QV) + dqv(:,:)
            2241     2   p   4v                q(:,:,l_region,I_QC) = 0.d0
            2242     2   p   4v                rhogq(:,:,l_region,I_QV) = rhogq(:,:,l_region,I_QV) + drhogqv(:,:)
            2243     2   p   4v                rhogq(:,:,l_region,I_QC) = 0.d0
            2244     3                         if( opt_2moment_water )then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2245     3  pp   8v                   q(:,:,l_region,I_NC) = 0.d0
            2246     3   p   8v                   rhogq(:,:,l_region,I_NC) = 0.d0
            2247     3                         end if
            2248     2                      end if
            2249     1                   end do
            2250                     
            2251                         return
            2252                       end subroutine convert_qcqi_to_qv
            2253                     
            2254                     end module mod_prgvar
            2255                     !-------------------------------------------------------------------------------

 Diagnostic messages: program name(mod_prgvar)
   jwd8220o-i  "nhm/share/mod_prgvar.f90", line 27: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
  Module subprogram name(prgvar_get)
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 355: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 380: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 407: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 432: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(prgvar_set)
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 733: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 758: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 791: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 816: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(prgvar_get_in)
   jwd8201o-i  "nhm/share/mod_prgvar.f90", line 872: Invariant expression within loop is moved outside loop.
   jwd8201o-i  "nhm/share/mod_prgvar.f90", line 888: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 890: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(prgvar_get_in_withdiag)
   jwd8201o-i  "nhm/share/mod_prgvar.f90", line 957: Invariant expression within loop is moved outside loop.
   jwd8201o-i  "nhm/share/mod_prgvar.f90", line 982: Invariant expression within loop is moved outside loop.
  Module subprogram name(prgvar_set_in)
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 1060: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(prgvar_get_plane_nopl)
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 1126: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 1150: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(prgvar_set_plane_nopl)
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 1258: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 1287: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(cnvvar_diag2prg)
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 1799: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 1800: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 1819: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 1829: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 1864: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 1865: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 1884: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 1894: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(cnvvar_prg2diag)
   jwd8206o-i  "nhm/share/mod_prgvar.f90", line 1955: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "nhm/share/mod_prgvar.f90", line 1956: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 1957: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/share/mod_prgvar.f90", line 1957: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 1958: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/share/mod_prgvar.f90", line 1958: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "nhm/share/mod_prgvar.f90", line 1967: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "nhm/share/mod_prgvar.f90", line 1967: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 1993: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 2003: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/share/mod_prgvar.f90", line 2014: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "nhm/share/mod_prgvar.f90", line 2015: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 2016: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/share/mod_prgvar.f90", line 2016: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 2017: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/share/mod_prgvar.f90", line 2017: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 2052: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 2062: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(convert_qcqi_to_qv)
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 2215: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_prgvar.f90", line 2236: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 2255
   Statements : 1315
   Stack(byte): 21120
   Prefetch num: 632

 Total information
   Procedures       : 1
   Total lines      : 2255
   Total statements : 1315
   Total stack(byte): 21120
   Total prefetch num: 632


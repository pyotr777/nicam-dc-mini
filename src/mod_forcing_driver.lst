
 Fujitsu Fortran Version 1.2.0  Mon Dec 21 17:19:46 2015

 Compilation information
   Current directory : /volume1/home/ra000007/a03106/nicam-dc-mini/src
   Source file       : nhm/forcing/mod_forcing_driver.f90

 Option information
   Command line options : -Kident_mpi -f2004 -Kfast,parallel,auto,ocl,preex,array_private,noalias=s,mfunc=2 -Kparallel_iteration=8,instance=8,dynamic_iteration -Qi -Qt -X03 -Ncompdisp -Koptmsg=1 -Cpp -Kprefetch_cache_level=all,prefetch_iteration_L2=50 -Ksimd -Ntl_notrt -U_FIPP_ -U_FAPP_ -I../src/include -o mod_forcing_driver.o -c -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -W0,-zmpa=Yignore-intent -I/opt/FJSVtclang/GM-1.2.0-19/lib64
   Cpp options          : -U_FIPP_ -U_FAPP_ -I../src/include -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -I/opt/FJSVtclang/GM-1.2.0-19/lib64 -D__FUJITSU -Dunix -Dsparc -D__sparc__ -D__unix -D__sparc -D__frt_version=700 -D__HPC_ACE__ -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -Dlinux -otmp -D__sparcv9 -D__sparc_v9__ -D__arch64__
   Effective options    : -fi -g0 -AE -Free -O3 -Qi,p,t -X03
                          -x0
                          -KFLTLD -Kadr44 -Knoalias=s -Kauto -Knoautoobjstack
                          -Knocalleralloc -Kdalign -Keval -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kilfunc
                          -Klargepage -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_if -Kloop_fusion
                          -Kloop_interchange -Kloop_nopart_parallel
                          -Kloop_nopart_simd -Kloop_noversioning -Kns
                          -Kmfunc=2 -Kocl -Komitfp -Koptmsg=1 -Kpreex
                          -Kprefetch_conditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_iteration_L2=50 -Kprefetch_nostrong
                          -Kprefetch_strong_L2 -Knoshortloop -Ksimd=1
                          -Knosimd_region_constant -Knostriping -Kswp
                          -Knotemparraystack -Kunroll -Knouxsimd -KNOXFILL
                          -Knoopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_noordered_reduction -Knothreadsafe
                          -Kparallel -Kparallel_nofp_precision
                          -Karray_private -Kdynamic_iteration -Kreduction
                          -Kregion_extension -Kinstance=8
                          -Kparallel_iteration=8
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Ncompdisp
                          -Nnocopyarg -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nline -Nlst -Nlst=i -Nlst=p -Nlst=t
                          -Nnomallocfree -Nnoobsfun -Nquickdbg=noargchk
                          -Nquickdbg=nosubchk -Nquickdbg=noundef -NRnotrap
                          -Nnorecursive -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 Module "mod_forcing_driver"
  (inc)(line-no.)(nest)(optimize)
               1                     !-------------------------------------------------------------------------------
               2                     !>
               3                     !! Module forcing driver
               4                     !!
               5                     !! @par Description
               6                     !!         This module is for the artificial forcing
               7                     !!
               8                     !! @author R.Yoshida
               9                     !!
              10                     !! @par History
              11                     !! @li      2012-10-11 (R.Yoshida) [NEW] extract from phystep
              12                     !! @li      2013-03-07 (H.Yashiro) marge, refactoring
              13                     !!
              14                     !<
              15                     module mod_forcing_driver
              16                       !-----------------------------------------------------------------------------
              17                       !
              18                       !++ Used modules
              19                       !
              20                       use mod_adm, only: &
              21                          ADM_LOG_FID
              22                       !-----------------------------------------------------------------------------
              23                       implicit none
              24                       private
              25                       !-----------------------------------------------------------------------------
              26                       !
              27                       !++ Public procedure
              28                       !
              29                       public :: forcing_init
              30                       public :: forcing
              31                       public :: updating
              32                       !-----------------------------------------------------------------------------
              33                       !
              34                       !++ Public parameters & variables
              35                       !
              36                       !-----------------------------------------------------------------------------
              37                       !
              38                       !++ Private procedures
              39                       !
              40                       !-----------------------------------------------------------------------------
              41                       !
              42                       !++ Private parameters & variables
              43                       !
              44                       integer, private, parameter :: I_RHOG     = 1 ! Density x G^{1/2} x gamma^2
              45                       integer, private, parameter :: I_RHOGVX   = 2 ! Density x G^{1/2} x gamma^2 x Horizontal velocity (X-direction)
              46                       integer, private, parameter :: I_RHOGVY   = 3 ! Density x G^{1/2} x gamma^2 x Horizontal velocity (Y-direction)
              47                       integer, private, parameter :: I_RHOGVZ   = 4 ! Density x G^{1/2} x gamma^2 x Horizontal velocity (Z-direction)
              48                       integer, private, parameter :: I_RHOGW    = 5 ! Density x G^{1/2} x gamma^2 x Vertical   velocity
              49                       integer, private, parameter :: I_RHOGE    = 6 ! Density x G^{1/2} x gamma^2 x Internal Energy
              50                       integer, private, parameter :: I_RHOGETOT = 7 ! Density x G^{1/2} x gamma^2 x Total Energy
              51                       !
              52                       integer, private, parameter :: nmax_TEND     = 7
              53                       integer, private, parameter :: nmax_PROG     = 6
              54                       integer, private, parameter :: nmax_v_mean_c = 5
              55                       !
              56                       !-----------------------------------------------------------------------------
              57                     contains
              58                       !-----------------------------------------------------------------------------
              59                       subroutine forcing_init
              60                         use mod_runconf, only: &
              61                            AF_TYPE
              62                         use mod_af_heldsuarez, only: &
              63                            af_heldsuarez_init
              64                         implicit none
              65                     
              66                         !---------------------------------------------------------------------------
              67                     
              68     1                   select case(AF_TYPE)
              69     1                   case('NONE')
              70     1                      !--- do nothing
              71     1                   case('HELD-SUAREZ')
              72     1                      call af_heldsuarez_init
              73     1                   case default
              74     1                      write(*,*) 'Msg : Sub[af_init]/Mod[af_driver]'
              75     1                      write(*,*) ' *** WARNING : Not appropriate names in namelist!! CHECK!!'
              76     1                   end select
              77                     
              78                         return
              79                       end subroutine forcing_init
              80                     
              81                       !-----------------------------------------------------------------------------
              82                       subroutine forcing
              83                         use mod_adm, only: &
              84                            ADM_gall_in, &
              85                            ADM_kall,    &
              86                            ADM_lall,    &
              87                            ADM_kmin,    &
              88                            ADM_kmax
              89                         use mod_time, only: &
              90                            TIME_DTL
              91                         use mod_grd, only: &
              92                            GRD_vz, &
              93                            GRD_Z
              94                         use mod_gmtr, only: &
              95                            GMTR_lat
              96                         use mod_vmtr, only: &
              97                            VMTR_GSGAM2,  &
              98                            VMTR_GSGAM2H, &
              99                            VMTR_PHI
             100                         use mod_runconf, only: &
             101                            AF_TYPE, &
             102                            TRC_VMAX
             103                         use mod_prgvar, only: &
             104                            prgvar_get_in_withdiag, &
             105                            prgvar_set_in
             106                         use mod_gtl, only: &
             107                            GTL_clip_region, &
             108                            GTL_clip_region_1layer
             109                         use mod_bndcnd, only: &
             110                            bndcnd_thermo
             111                         use mod_af_heldsuarez, only: &
             112                            af_HeldSuarez
             113                         use mod_history, only: &
             114                            history_in
             115                         implicit none
             116                     
             117                         real(8) :: rhog  (ADM_gall_in,ADM_kall,ADM_lall)
             118                         real(8) :: rhogvx(ADM_gall_in,ADM_kall,ADM_lall)
             119                         real(8) :: rhogvy(ADM_gall_in,ADM_kall,ADM_lall)
             120                         real(8) :: rhogvz(ADM_gall_in,ADM_kall,ADM_lall)
             121                         real(8) :: rhogw (ADM_gall_in,ADM_kall,ADM_lall)
             122                         real(8) :: rhoge (ADM_gall_in,ADM_kall,ADM_lall)
             123                         real(8) :: rhogq (ADM_gall_in,ADM_kall,ADM_lall,TRC_vmax)
             124                         real(8) :: rho   (ADM_gall_in,ADM_kall,ADM_lall)
             125                         real(8) :: pre   (ADM_gall_in,ADM_kall,ADM_lall)
             126                         real(8) :: tem   (ADM_gall_in,ADM_kall,ADM_lall)
             127                         real(8) :: vx    (ADM_gall_in,ADM_kall,ADM_lall)
             128                         real(8) :: vy    (ADM_gall_in,ADM_kall,ADM_lall)
             129                         real(8) :: vz    (ADM_gall_in,ADM_kall,ADM_lall)
             130                         real(8) :: w     (ADM_gall_in,ADM_kall,ADM_lall)
             131                         real(8) :: q     (ADM_gall_in,ADM_kall,ADM_lall,TRC_vmax)
             132                     
             133                         ! forcing tendency
             134                         real(8) :: fvx(ADM_gall_in,ADM_kall,ADM_lall)
             135                         real(8) :: fvy(ADM_gall_in,ADM_kall,ADM_lall)
             136                         real(8) :: fvz(ADM_gall_in,ADM_kall,ADM_lall)
             137                         real(8) :: fw (ADM_gall_in,ADM_kall,ADM_lall)
             138                         real(8) :: fe (ADM_gall_in,ADM_kall,ADM_lall)
             139                         real(8) :: fq (ADM_gall_in,ADM_kall,ADM_lall,TRC_VMAX)
             140                     
             141                         ! geometry, coordinate
             142                         Real(8) :: gsgam2 (ADM_gall_in,ADM_kall,ADM_lall)
             143                         Real(8) :: gsgam2h(ADM_gall_in,ADM_kall,ADM_lall)
             144                         real(8) :: phi    (ADM_gall_in,ADM_kall,ADM_lall)
             145                         Real(8) :: z      (ADM_gall_in,ADM_kall,ADM_lall)
             146                         real(8) :: lat    (ADM_gall_in,ADM_lall)
             147                     
             148                         real(8) :: frhogq(ADM_gall_in,ADM_kall,ADM_lall)
             149                     
             150                         integer :: l, nq
             151                         !---------------------------------------------------------------------------
             152                     
             153                         call GTL_clip_region(VMTR_GSGAM2 (:,:,:),gsgam2, 1,ADM_kall)
             154                         call GTL_clip_region(VMTR_GSGAM2H(:,:,:),gsgam2h,1,ADM_kall)
             155                         call GTL_clip_region(VMTR_PHI    (:,:,:),phi,    1,ADM_kall)
             156                         call GTL_clip_region(GRD_vz(:,:,:,GRD_Z),z,      1,ADM_kall)
             157                     
             158                         call GTL_clip_region_1layer(GMTR_lat(:,:),lat)
             159                     
             160                         !--- get the prognostic and diagnostic variables
             161                         call prgvar_get_in_withdiag( rhog,   & ! [IN]
             162                                                      rhogvx, & ! [IN]
             163                                                      rhogvy, & ! [IN]
             164                                                      rhogvz, & ! [IN]
             165                                                      rhogw,  & ! [IN]
             166                                                      rhoge,  & ! [IN]
             167                                                      rhogq,  & ! [IN]
             168                                                      rho,    & ! [IN]
             169                                                      pre,    & ! [IN]
             170                                                      tem,    & ! [IN]
             171                                                      vx,     & ! [IN]
             172                                                      vy,     & ! [IN]
             173                                                      vz,     & ! [IN]
             174                                                      w,      & ! [IN]
             175                                                      q       ) ! [IN]
             176                     
             177                         !--- boundary condition
             178     1                   do l = 1, ADM_lall
             179     1                      call bndcnd_thermo( ADM_gall_in, & ! [IN]
             180     1                                          tem(:,:,l),  & ! [INOUT]
             181     1                                          rho(:,:,l),  & ! [INOUT]
             182     1                                          pre(:,:,l),  & ! [INOUT]
             183     1                                          phi(:,:,l)   ) ! [IN]
             184     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             185     1  pp   8v             vx(:,ADM_kmax+1,l) = vx(:,ADM_kmax,l)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             186     1  pp   8v             vy(:,ADM_kmax+1,l) = vy(:,ADM_kmax,l)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             187     1  pp   8v             vz(:,ADM_kmax+1,l) = vz(:,ADM_kmax,l)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             188     1  pp   8v             vx(:,ADM_kmin-1,l) = vx(:,ADM_kmin,l)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             189     1  pp   8v             vy(:,ADM_kmin-1,l) = vy(:,ADM_kmin,l)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             190     1  pp   8v             vz(:,ADM_kmin-1,l) = vz(:,ADM_kmin,l)
             191     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 6
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             192     1  pp   8v             q(:,ADM_kmax+1,l,:) = 0.D0
             193     1   p   8v             q(:,ADM_kmin-1,l,:) = 0.D0
             194     1                   enddo
             195                     
             196                         ! forcing
             197     1                   select case(trim(AF_TYPE))
             198     1                   case('HELD-SUAREZ')
             199     1               
             200     2   s    s             do l = 1, ADM_lall
             201     2   s    s                call af_HeldSuarez( ADM_gall_in, & ! [IN]
             202     2                                             lat(:,l),    & ! [IN]
             203     2                                             pre(:,:,l),  & ! [IN]
             204     2                                             tem(:,:,l),  & ! [IN]
             205     2                                             vx (:,:,l),  & ! [IN]
             206     2                                             vy (:,:,l),  & ! [IN]
             207     2                                             vz (:,:,l),  & ! [IN]
             208     2                                             fvx(:,:,l),  & ! [OUT]
             209     2                                             fvy(:,:,l),  & ! [OUT]
             210     2                                             fvz(:,:,l),  & ! [OUT]
             211     2                                             fw (:,:,l),  & ! [OUT]
             212     2                                             fe (:,:,l)   ) ! [OUT]
             213     2               
             214     2   s    s                call history_in( 'ml_af_fvx', fvx(:,:,l) )
             215     2   s    s                call history_in( 'ml_af_fvy', fvy(:,:,l) )
             216     2   s    s                call history_in( 'ml_af_fvz', fvz(:,:,l) )
             217     2   s    s                call history_in( 'ml_af_fw',  fw (:,:,l) )
             218     2   s    s                call history_in( 'ml_af_fe',  fe (:,:,l) )
             219     2   s    s             enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             220     1  pp    v             fq(:,:,:,:) = 0.D0
             221     1               
             222     1                   case default
             223     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             224     1  pp   8v             fvx(:,:,:) = 0.D0
             225     1   p   8v             fvy(:,:,:) = 0.D0
             226     1   p   8v             fvz(:,:,:) = 0.D0
             227     1   p   8v             fw (:,:,:) = 0.D0
             228     1   p   8v             fe (:,:,:) = 0.D0
             229     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             230     1  pp    v             fq (:,:,:,:) = 0.D0
             231     1               
             232     1                   end select
             233                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             234        pp   4v          rhogvx(:,:,:) = rhogvx(:,:,:) + TIME_DTL * fvx(:,:,:) * rho(:,:,:) * GSGAM2 (:,:,:)
             235         p   4v          rhogvy(:,:,:) = rhogvy(:,:,:) + TIME_DTL * fvy(:,:,:) * rho(:,:,:) * GSGAM2 (:,:,:)
             236         p   4v          rhogvz(:,:,:) = rhogvz(:,:,:) + TIME_DTL * fvz(:,:,:) * rho(:,:,:) * GSGAM2 (:,:,:)
             237         p   4v          rhogw (:,:,:) = rhogw (:,:,:) + TIME_DTL * fw (:,:,:) * rho(:,:,:) * GSGAM2H(:,:,:)
             238         p   4v          rhoge (:,:,:) = rhoge (:,:,:) + TIME_DTL * fe (:,:,:) * rho(:,:,:) * GSGAM2 (:,:,:)
             239                     
             240     1                   do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             241     1  pp   8v             frhogq(:,:,:) = fq(:,:,:,nq) * rho(:,:,:) * GSGAM2(:,:,:)
             242     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             243     1  pp   6v             rhog (:,:,:)    = rhog (:,:,:)    + TIME_DTL * frhogq(:,:,:)
             244     1   p   6v             rhogq(:,:,:,nq) = rhogq(:,:,:,nq) + TIME_DTL * frhogq(:,:,:)
             245     1                   enddo
             246                     
             247                         !--- set the prognostic variables
             248                         call prgvar_set_in( rhog,   & ! [IN]
             249                                             rhogvx, & ! [IN]
             250                                             rhogvy, & ! [IN]
             251                                             rhogvz, & ! [IN]
             252                                             rhogw,  & ! [IN]
             253                                             rhoge,  & ! [IN]
             254                                             rhogq   ) ! [IN]
             255                     
             256                         return
             257                       end subroutine forcing
             258                     
             259                       ! [add; original by H.Miura] 20130613 R.Yoshida
             260                       !-----------------------------------------------------------------------------
             261                       subroutine updating( &
             262                            PROG0, PROG0_pl,  &  !--- IN : prognostic variables for save
             263                            PROG,  PROG_pl    &  !--- INOUT : prognostic variables for update
             264                            )
             265                            !
             266                         use mod_adm, only: &
             267                            ADM_prc_me,  &
             268                            ADM_prc_pl,  &
             269                            ADM_gall,    &
             270                            ADM_gall_pl, &
             271                            ADM_lall,    &
             272                            ADM_lall_pl, &
             273                            ADM_kall,    &
             274                            ADM_gall_1d, &
             275                            ADM_gmax,    &
             276                            ADM_gmin,    &
             277                            ADM_kmax,    &
             278                            ADM_kmin,    &
             279                            ADM_log_fid, &  ! R.Yoshida 13/06/12 [add]
             280                            ADM_proc_stop   ! R.Yoshida 13/06/12 [add]
             281                         use mod_time, only:  &
             282                            TIME_DTL
             283                         use mod_grd, only: &
             284                            GRD_x,    &
             285                            GRD_x_pl, &
             286                            GRD_vz,   &
             287                            GRD_vz_pl
             288                         use mod_gmtr, only: &
             289                            GMTR_lon,    &
             290                            GMTR_lon_pl, &
             291                            GMTR_lat,    &
             292                            GMTR_lat_pl
             293                         use mod_runconf, only: &
             294                            RUN_TYPE,       & ! R.Yoshida 13/06/13 [add]
             295                            TRC_VMAX,       &
             296                            TRC_ADV_TYPE
             297                         use mod_af_trcadv, only: & ![add] 20130612 R.Yoshida
             298                            test11_velocity,  &
             299                            test12_velocity
             300                         implicit none
             301                         !--- prognostic variables (save)
             302                         real(8), intent(in) :: PROG0     (ADM_gall,   ADM_kall,ADM_lall,   nmax_PROG)
             303                         real(8), intent(in) :: PROG0_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl,nmax_PROG)
             304                         !--- prognostic variables
             305                         real(8), intent(inout) :: PROG      (ADM_gall,   ADM_kall,ADM_lall,   nmax_PROG)
             306                         real(8), intent(inout) :: PROG_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl,nmax_PROG)
             307                     
             308                         !--- horizontal velocity_x  ( physical )
             309                         real(8) :: vx   (ADM_gall,   ADM_kall,ADM_lall   )
             310                         real(8) :: vx_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             311                     
             312                         !--- horizontal velocity_y  ( physical )
             313                         real(8) :: vy   (ADM_gall,   ADM_kall,ADM_lall   )
             314                         real(8) :: vy_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             315                     
             316                         !--- horizontal velocity_z  ( physical )
             317                         real(8) :: vz   (ADM_gall,   ADM_kall,ADM_lall   )
             318                         real(8) :: vz_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             319                     
             320                         !--- vertical velocity ( physical )
             321                         real(8) :: w   (ADM_gall,   ADM_kall,ADM_lall   )
             322                         real(8) :: w_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             323                     
             324                         !--- density deviation from the base state ( G^{1/2} X gamma2 )
             325                         real(8) :: rhogd   (ADM_gall,   ADM_kall,ADM_lall   )
             326                         real(8) :: rhogd_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             327                     
             328                         integer :: ij, k ,l
             329                     
             330                         ! for tracer advection test  [add; original by H.Miura] 20130612 R.Yoshida
             331                         real(8), save :: time=0.d0
             332                     
             333                     
             334                         !--- reset density
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             335        pp   8v          rhogd(:,:,:)    = PROG0(:,:,:,I_rhog)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             336        pp   8v          rhogd_pl(:,:,:) = PROG0_pl(:,:,:,I_rhog)
             337                     
             338                         !--- update velocity
             339                         time=time+TIME_DTL
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             340        pp    v          vx=0.d0; vx_pl=0.d0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             341        pp    v          vy=0.d0; vy_pl=0.d0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             342        pp    v          vz=0.d0; vz_pl=0.d0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             343        pp    v          w=0.d0
             344                     
             345     1                   select case (RUN_TYPE)
             346     1                   !------------------------------------------------------------------------
             347     1                   case ("TRCADV-1")
             348     2                      do l=1,ADM_lall
             349     3                      do k=ADM_kmin-1,ADM_kmax+1
             350     3                         ! full (1): u,v
             351     3                         ! half (2): w
             352     4       2                 do ij=1,ADM_gall
             353     4       2                    call test11_velocity (time,GMTR_lon(ij,l),GMTR_lat(ij,l),GRD_vz(ij,k,l,1),GRD_vz(ij,k,l,2), &
             354     4                                                  vx(ij,k,l),vy(ij,k,l),vz(ij,k,l),w(ij,k,l))
             355     4       2                 end do
             356     3                      end do
             357     2                      end do
             358     1               
             359     2                      if(ADM_prc_me==ADM_prc_pl) then
             360     3                         do l=1,ADM_lall_pl
             361     4                         do k=ADM_kmin-1,ADM_kmax+1
             362     5       2                 do ij=1,ADM_GALL_PL
             363     5       2                    call test11_velocity (time,GMTR_lon_pl(ij,l),GMTR_lat_pl(ij,l),GRD_vz_pl(ij,k,l,1),GRD_vz_pl(ij,k,l,2), &
             364     5                                                  vx_pl(ij,k,l),vy_pl(ij,k,l),vz_pl(ij,k,l),w_pl(ij,k,l))
             365     5       2                 end do
             366     4                         end do
             367     3                         end do
             368     2                      end if
             369     1               
             370     1                   !------------------------------------------------------------------------
             371     1                   case ("TRCADV-2")
             372     2                      do l=1,ADM_lall
             373     3                      do k=ADM_kmin-1,ADM_kmax+1
             374     3                         ! full (1): u,v
             375     3                         ! half (2): w
             376     4       2                 do ij=1,ADM_gall
             377     4       2                    call test12_velocity (time,GMTR_lon(ij,l),GMTR_lat(ij,l),GRD_vz(ij,k,l,1),GRD_vz(ij,k,l,2), &
             378     4                                                  vx(ij,k,l),vy(ij,k,l),vz(ij,k,l),w(ij,k,l))
             379     4       2                 end do
             380     3                      end do
             381     2                      end do
             382     1               
             383     2                      if(ADM_prc_me==ADM_prc_pl) then
             384     3                         do l=1,ADM_lall_pl
             385     4                         do k=ADM_kmin-1,ADM_kmax+1
             386     5       2                 do ij=1,ADM_GALL_PL
             387     5       2                    call test12_velocity (time,GMTR_lon_pl(ij,l),GMTR_lat_pl(ij,l),GRD_vz_pl(ij,k,l,1),GRD_vz_pl(ij,k,l,2), &
             388     5                                                  vx_pl(ij,k,l),vy_pl(ij,k,l),vz_pl(ij,k,l),w_pl(ij,k,l))
             389     5       2                 end do
             390     4                         end do
             391     3                         end do
             392     2                      end if
             393     1               
             394     1                   !------------------------------------------------------------------------
             395     1                   end select
             396                         !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             397        pp   8v          PROG(:,:,:,I_RHOGVX)=vx(:,:,:)*rhogd(:,:,:); PROG_pl(:,:,:,I_RHOGVX)=vx_pl(:,:,:)*rhogd_pl(:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             398        pp   8v          PROG(:,:,:,I_RHOGVY)=vy(:,:,:)*rhogd(:,:,:); PROG_pl(:,:,:,I_RHOGVY)=vy_pl(:,:,:)*rhogd_pl(:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             399        pp   8v          PROG(:,:,:,I_RHOGVZ)=vz(:,:,:)*rhogd(:,:,:); PROG_pl(:,:,:,I_RHOGVZ)=vz_pl(:,:,:)*rhogd_pl(:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             400        pp   8v          PROG(:,:,:,I_RHOGW) =w(:,:,:) *rhogd(:,:,:); PROG_pl(:,:,:,I_RHOGW) =w_pl(:,:,:) *rhogd_pl(:,:,:)
             401                         !
             402                         return
             403                       end subroutine updating
             404                       !
             405                     end module mod_forcing_driver
             406                     !-------------------------------------------------------------------------------

 Diagnostic messages: program name(mod_forcing_driver)
   jwd8220o-i  "nhm/forcing/mod_forcing_driver.f90", line 15: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
  Module subprogram name(forcing)
   jwd8209o-i  "nhm/forcing/mod_forcing_driver.f90", line 234: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/forcing/mod_forcing_driver.f90", line 235: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/forcing/mod_forcing_driver.f90", line 236: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/forcing/mod_forcing_driver.f90", line 237: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/forcing/mod_forcing_driver.f90", line 238: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 406
   Statements : 203
   Stack(byte): 5200
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 406
   Total statements : 203
   Total stack(byte): 5200
   Total prefetch num: 0



 Fujitsu Fortran Version 1.2.0  Mon Dec 21 17:18:25 2015

 Compilation information
   Current directory : /volume1/home/ra000007/a03106/nicam-dc-mini/src
   Source file       : nhm/share/mod_embudget.f90

 Option information
   Command line options : -Kident_mpi -f2004 -Kfast,parallel,auto,ocl,preex,array_private,noalias=s,mfunc=2 -Kparallel_iteration=8,instance=8,dynamic_iteration -Qi -Qt -X03 -Ncompdisp -Koptmsg=1 -Cpp -Kprefetch_cache_level=all,prefetch_iteration_L2=50 -Ksimd -Ntl_notrt -U_FIPP_ -U_FAPP_ -I../src/include -o mod_embudget.o -c -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -W0,-zmpa=Yignore-intent -I/opt/FJSVtclang/GM-1.2.0-19/lib64
   Cpp options          : -U_FIPP_ -U_FAPP_ -I../src/include -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -I/opt/FJSVtclang/GM-1.2.0-19/lib64 -D__FUJITSU -Dunix -Dsparc -D__sparc__ -D__unix -D__sparc -D__frt_version=700 -D__HPC_ACE__ -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -Dlinux -otmp -D__sparcv9 -D__sparc_v9__ -D__arch64__
   Effective options    : -fi -g0 -AE -Free -O3 -Qi,p,t -X03
                          -x0
                          -KFLTLD -Kadr44 -Knoalias=s -Kauto -Knoautoobjstack
                          -Knocalleralloc -Kdalign -Keval -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kilfunc
                          -Klargepage -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_if -Kloop_fusion
                          -Kloop_interchange -Kloop_nopart_parallel
                          -Kloop_nopart_simd -Kloop_noversioning -Kns
                          -Kmfunc=2 -Kocl -Komitfp -Koptmsg=1 -Kpreex
                          -Kprefetch_conditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_iteration_L2=50 -Kprefetch_nostrong
                          -Kprefetch_strong_L2 -Knoshortloop -Ksimd=1
                          -Knosimd_region_constant -Knostriping -Kswp
                          -Knotemparraystack -Kunroll -Knouxsimd -KNOXFILL
                          -Knoopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_noordered_reduction -Knothreadsafe
                          -Kparallel -Kparallel_nofp_precision
                          -Karray_private -Kdynamic_iteration -Kreduction
                          -Kregion_extension -Kinstance=8
                          -Kparallel_iteration=8
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Ncompdisp
                          -Nnocopyarg -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nline -Nlst -Nlst=i -Nlst=p -Nlst=t
                          -Nnomallocfree -Nnoobsfun -Nquickdbg=noargchk
                          -Nquickdbg=nosubchk -Nquickdbg=noundef -NRnotrap
                          -Nnorecursive -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 Module "mod_embudget"
  (inc)(line-no.)(nest)(optimize)
               1                     !-------------------------------------------------------------------------------
               2                     !>
               3                     !! Energy/mass budget monitoring module
               4                     !!
               5                     !! @par Description
               6                     !!         This module is for monitoring the energy/mass budget
               7                     !!
               8                     !! @author H.Tomita
               9                     !!
              10                     !! @par History
              11                     !! @li      2009-07-10 (H.Tomita)   [NEW]
              12                     !! @li      2009-07-28 (H.Tomita)   Bug fix
              13                     !!
              14                     !<
              15                     !-------------------------------------------------------------------------------
              16                     module mod_embudget
              17                       !-----------------------------------------------------------------------------
              18                       !
              19                       !++ Used modules
              20                       !
              21                       !-----------------------------------------------------------------------------
              22                       implicit none
              23                       private
              24                       !-----------------------------------------------------------------------------
              25                       !
              26                       !++ Public procedure
              27                       !
              28                       public :: embudget_setup
              29                       public :: embudget_monitor
              30                     
              31                       !-----------------------------------------------------------------------------
              32                       !
              33                       !++ Public parameters & variables
              34                       !
              35                       !-----------------------------------------------------------------------------
              36                       !
              37                       !++ Private procedures
              38                       !
              39                       !-----------------------------------------------------------------------------
              40                       !
              41                       !++ Private parameters & variables
              42                       !
              43                       logical, private, save :: MNT_ON   = .false.
              44                       integer, private, save :: MNT_INTV = 1
              45                       integer, private, save :: MNT_m_fid
              46                       integer, private, save :: MNT_e_fid
              47                     
              48                       real(8), private, allocatable, save :: evap0     (:,:,:)
              49                       real(8), private, allocatable, save :: evap0_pl  (:,:,:)
              50                       real(8), private, allocatable, save :: precip0   (:,:,:)
              51                       real(8), private, allocatable, save :: precip0_pl(:,:,:)
              52                     
              53                       real(8), private, allocatable, save :: sfcrad0          (:,:,:)
              54                       real(8), private, allocatable, save :: sfcrad0_pl       (:,:,:)
              55                       real(8), private, allocatable, save :: toarad0          (:,:,:)
              56                       real(8), private, allocatable, save :: toarad0_pl       (:,:,:)
              57                       real(8), private, allocatable, save :: evap_energy0     (:,:,:)
              58                       real(8), private, allocatable, save :: evap_energy0_pl  (:,:,:)
              59                       real(8), private, allocatable, save :: precip_energy0   (:,:,:)
              60                       real(8), private, allocatable, save :: precip_energy0_pl(:,:,:)
              61                       real(8), private, allocatable, save :: sh_flux_sfc0     (:,:,:)
              62                       real(8), private, allocatable, save :: sh_flux_sfc0_pl  (:,:,:)
              63                       real(8), private, allocatable, save :: lh_flux_sfc0     (:,:,:)
              64                       real(8), private, allocatable, save :: lh_flux_sfc0_pl  (:,:,:)
              65                     
              66                       !-----------------------------------------------------------------------------
              67                     contains
              68                     
              69                       !-----------------------------------------------------------------------------
              70                       subroutine embudget_setup
              71                         use mod_misc, only: &
              72                            MISC_get_available_fid
              73                         use mod_adm, only: &
              74                            ADM_LOG_FID,        &
              75                            ADM_CTL_FID,        &
              76                            ADM_proc_stop,      &
              77                            ADM_prc_me,         &
              78                            ADM_prc_run_master, &
              79                            ADM_gall,           &
              80                            ADM_gall_pl,        &
              81                            ADM_KNONE,          &
              82                            ADM_lall,           &
              83                            ADM_lall_pl
              84                         implicit none
              85                     
              86                         integer :: ierr
              87                     
              88                         namelist / EMBUDGETPARAM / &
              89                              MNT_INTV, &
              90                              MNT_ON
              91                     
              92                         integer :: k0
              93                         !---------------------------------------------------------------------------
              94                     
              95                         !--- read parameters
              96                         write(ADM_LOG_FID,*)
              97                         write(ADM_LOG_FID,*) '+++ Module[embudget]/Category[nhm share]'
              98                         rewind(ADM_CTL_FID)
              99                         read(ADM_CTL_FID,nml=EMBUDGETPARAM,iostat=ierr)
             100     1                   if ( ierr < 0 ) then
             101     1                      write(ADM_LOG_FID,*) '*** EMBUDGETPARAM is not specified. use default.'
             102     1                   elseif( ierr > 0 ) then
             103     1                      write(*,          *) 'xxx Not appropriate names in namelist EMBUDGETPARAM. STOP.'
             104     1                      write(ADM_LOG_FID,*) 'xxx Not appropriate names in namelist EMBUDGETPARAM. STOP.'
             105     1                      call ADM_proc_stop
             106     1                   endif
             107                         write(ADM_LOG_FID,EMBUDGETPARAM)
             108                     
             109                         if(.not.MNT_ON) return
             110                     
             111                         ! open budget.info file
             112     1                   if ( ADM_prc_me == ADM_prc_run_master ) then
             113     1                      MNT_m_fid  = MISC_get_available_fid()
             114     1                      open( unit   = MNT_m_fid,          &
             115     1                            file   = 'MASS_BUDGET.info', &
             116     1                            form   = 'formatted',        &
             117     1                            status = 'unknown'           )
             118     1               
             119     1                         write(MNT_m_fid,'(A6)', ADVANCE='NO') '# STEP'
             120     1                         write(MNT_m_fid,'(A22)',ADVANCE='NO') 'Dry air[Kg]'
             121     1                         write(MNT_m_fid,'(A22)',ADVANCE='NO') 'Vapor[Kg]'
             122     1                         write(MNT_m_fid,'(A22)',ADVANCE='NO') 'Liquid water[Kg]'
             123     1                         write(MNT_m_fid,'(A22)',ADVANCE='NO') 'Ice water[Kg]'
             124     1                         write(MNT_m_fid,'(A22)',ADVANCE='NO') 'Total water[Kg]'
             125     1                         write(MNT_m_fid,'(A22)',ADVANCE='NO') 'diff.of Total water[Kg]'
             126     1                         write(MNT_m_fid,'(A22)',ADVANCE='NO') 'precipitaion[Kg]'
             127     1                         write(MNT_m_fid,'(A22)',ADVANCE='NO') 'evaporation[Kg]'
             128     1                         write(MNT_m_fid,'(A22)',ADVANCE='NO') 'evap - precip[Kg]'
             129     1                         write(MNT_m_fid,*)
             130     1               
             131     1                      MNT_e_fid = MISC_get_available_fid()
             132     1                      open( unit   = MNT_e_fid,            &
             133     1                            file   = 'ENERGY_BUDGET.info', &
             134     1                            form   = 'formatted',          &
             135     1                            status = 'unknown'             )
             136     1               
             137     1                         write(MNT_e_fid,'(A6)', ADVANCE='NO') '# STEP'
             138     1                         write(MNT_e_fid,'(A22)',ADVANCE='NO') 'Int. E(moist)'
             139     1                         write(MNT_e_fid,'(A22)',ADVANCE='NO') 'Potential'
             140     1                         write(MNT_e_fid,'(A22)',ADVANCE='NO') 'Kinematic'
             141     1                         write(MNT_e_fid,'(A22)',ADVANCE='NO') 'Total energy'
             142     1                         write(MNT_e_fid,'(A22)',ADVANCE='NO') 'diff. of tot. energy'
             143     1                         write(MNT_e_fid,'(A22)',ADVANCE='NO') 'Radiation (SFC)'
             144     1                         write(MNT_e_fid,'(A22)',ADVANCE='NO') 'Radiation (TOA)'
             145     1                         write(MNT_e_fid,'(A22)',ADVANCE='NO') 'Sensible heat(SFC)'
             146     1                         write(MNT_e_fid,'(A22)',ADVANCE='NO') 'Latent heat(SFC)'
             147     1                         write(MNT_e_fid,'(A22)',ADVANCE='NO') 'Evap energy(SFC)'
             148     1                         write(MNT_e_fid,'(A22)',ADVANCE='NO') 'Precip energy(SFC)'
             149     1                         write(MNT_e_fid,'(A22)',ADVANCE='NO') 'Net SFC/TOA energy'
             150     1                         write(MNT_e_fid,*)
             151     1                   endif
             152                     
             153                         k0 = ADM_KNONE
             154                     
             155                         allocate( evap0     (ADM_gall,   k0,ADM_lall   ) )
             156                         allocate( evap0_pl  (ADM_gall_pl,k0,ADM_lall_pl) )
             157                         allocate( precip0   (ADM_gall,   k0,ADM_lall   ) )
             158                         allocate( precip0_pl(ADM_gall_pl,k0,ADM_lall_pl) )
             159                     
             160                         allocate( sfcrad0          (ADM_gall,   k0,ADM_lall   ) )
             161                         allocate( sfcrad0_pl       (ADM_gall_pl,k0,ADM_lall_pl) )
             162                         allocate( toarad0          (ADM_gall,   k0,ADM_lall   ) )
             163                         allocate( toarad0_pl       (ADM_gall_pl,k0,ADM_lall_pl) )
             164                         allocate( evap_energy0     (ADM_gall,   k0,ADM_lall   ) )
             165                         allocate( evap_energy0_pl  (ADM_gall_pl,k0,ADM_lall_pl) )
             166                         allocate( precip_energy0   (ADM_gall,   k0,ADM_lall   ) )
             167                         allocate( precip_energy0_pl(ADM_gall_pl,k0,ADM_lall_pl) )
             168                         allocate( sh_flux_sfc0     (ADM_gall,   k0,ADM_lall   ) )
             169                         allocate( sh_flux_sfc0_pl  (ADM_gall_pl,k0,ADM_lall_pl) )
             170                         allocate( lh_flux_sfc0     (ADM_gall,   k0,ADM_lall   ) )
             171                         allocate( lh_flux_sfc0_pl  (ADM_gall_pl,k0,ADM_lall_pl) )
             172                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             173        pp    v          evap0     (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             174        pp    v          evap0_pl  (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             175        pp    v          precip0   (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             176        pp    v          precip0_pl(:,:,:) = 0.D0
             177                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             178        pp    v          sfcrad0          (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             179        pp    v          sfcrad0_pl       (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             180        pp    v          toarad0          (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             181        pp    v          toarad0_pl       (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             182        pp    v          evap_energy0     (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             183        pp    v          evap_energy0_pl  (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             184        pp    v          precip_energy0   (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             185        pp    v          precip_energy0_pl(:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             186        pp    v          sh_flux_sfc0     (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             187        pp    v          sh_flux_sfc0_pl  (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             188        pp    v          lh_flux_sfc0     (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             189        pp    v          lh_flux_sfc0_pl  (:,:,:) = 0.D0
             190                     
             191                         call diagnose_energy_mass
             192                     
             193                         return
             194                       end subroutine embudget_setup
             195                     
             196                       !-----------------------------------------------------------------------------
             197                       subroutine embudget_monitor
             198                         use mod_adm, only: &
             199                            ADM_gall,    &
             200                            ADM_gall_pl, &
             201                            ADM_KNONE,   &
             202                            ADM_lall,    &
             203                            ADM_lall_pl
             204                         use mod_time, only: &
             205                            TIME_CSTEP, &
             206                            TIME_DTL
             207                         use mod_sfcvar, only: &
             208                            sfcvar_get,      &
             209                            I_PRECIP_TOT,    &
             210                            I_EVAP_SFC,      &
             211                            I_SFCRAD_ENERGY, &
             212                            I_TOARAD_ENERGY, &
             213                            I_EVAP_ENERGY,   &
             214                            I_PRECIP_ENERGY, &
             215                            I_SH_FLUX_SFC,   &
             216                            I_LH_FLUX_SFC
             217                         implicit none
             218                     
             219                         real(8) :: evap     (ADM_gall,   ADM_KNONE,ADM_lall   )
             220                         real(8) :: evap_pl  (ADM_gall_pl,ADM_KNONE,ADM_lall_pl)
             221                         real(8) :: precip   (ADM_gall,   ADM_KNONE,ADM_lall   )
             222                         real(8) :: precip_pl(ADM_gall_pl,ADM_KNONE,ADM_lall_pl)
             223                     
             224                         real(8) :: sfcrad          (ADM_gall,   ADM_KNONE,ADM_lall   )
             225                         real(8) :: sfcrad_pl       (ADM_gall_pl,ADM_KNONE,ADM_lall_pl)
             226                         real(8) :: toarad          (ADM_gall,   ADM_KNONE,ADM_lall   )
             227                         real(8) :: toarad_pl       (ADM_gall_pl,ADM_KNONE,ADM_lall_pl)
             228                         real(8) :: evap_energy     (ADM_gall,   ADM_KNONE,ADM_lall   )
             229                         real(8) :: evap_energy_pl  (ADM_gall_pl,ADM_KNONE,ADM_lall_pl)
             230                         real(8) :: precip_energy   (ADM_gall,   ADM_KNONE,ADM_lall   )
             231                         real(8) :: precip_energy_pl(ADM_gall_pl,ADM_KNONE,ADM_lall_pl)
             232                         real(8) :: sh_flux_sfc     (ADM_gall,   ADM_KNONE,ADM_lall   )
             233                         real(8) :: sh_flux_sfc_pl  (ADM_gall_pl,ADM_KNONE,ADM_lall_pl)
             234                         real(8) :: lh_flux_sfc     (ADM_gall,   ADM_KNONE,ADM_lall   )
             235                         real(8) :: lh_flux_sfc_pl  (ADM_gall_pl,ADM_KNONE,ADM_lall_pl)
             236                         !---------------------------------------------------------------------------
             237                     
             238                         if( .NOT. MNT_ON ) return
             239                     
             240                         !--- mass
             241                         call sfcvar_get( evap, evap_pl, vid = I_EVAP_SFC )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             242        pp   8v          evap0    = evap0    + evap    * TIME_DTL
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             243        pp   8v          evap0_pl = evap0_pl + evap_pl * TIME_DTL
             244                     
             245                         call sfcvar_get( precip, precip_pl, vid = I_PRECIP_TOT    )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             246        pp   8v          precip0    = precip0    + precip    * TIME_DTL
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             247        pp   8v          precip0_pl = precip0_pl + precip_pl * TIME_DTL
             248                     
             249                         !--- energy
             250                         call sfcvar_get( sfcrad, sfcrad_pl, vid = I_SFCRAD_ENERGY )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             251        pp   8v          sfcrad0    = sfcrad0    + sfcrad    * TIME_DTL
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             252        pp   8v          sfcrad0_pl = sfcrad0_pl + sfcrad_pl * TIME_DTL
             253                     
             254                         call sfcvar_get( toarad, toarad_pl, vid = I_TOARAD_ENERGY )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             255        pp   8v          toarad0    = toarad0    + toarad    * TIME_DTL
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             256        pp   8v          toarad0_pl = toarad0_pl + toarad_pl * TIME_DTL
             257                     
             258                         call sfcvar_get( evap_energy, evap_energy_pl, vid = I_EVAP_ENERGY )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             259        pp   8v          evap_energy0    = evap_energy0    + evap_energy    * TIME_DTL
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             260        pp   8v          evap_energy0_pl = evap_energy0_pl + evap_energy_pl * TIME_DTL
             261                     
             262                         call sfcvar_get( precip_energy, precip_energy_pl, vid = I_PRECIP_ENERGY )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             263        pp   8v          precip_energy0    = precip_energy0    + precip_energy    * TIME_DTL
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             264        pp   8v          precip_energy0_pl = precip_energy0_pl + precip_energy_pl * TIME_DTL
             265                     
             266                         call sfcvar_get( sh_flux_sfc, sh_flux_sfc_pl, vid = I_SH_FLUX_SFC )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             267        pp   8v          sh_flux_sfc0    = sh_flux_sfc0    + sh_flux_sfc    * TIME_DTL
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             268        pp   8v          sh_flux_sfc0_pl = sh_flux_sfc0_pl + sh_flux_sfc_pl * TIME_DTL
             269                     
             270                         call sfcvar_get( lh_flux_sfc, lh_flux_sfc_pl, vid = I_LH_FLUX_SFC )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             271        pp   8v          lh_flux_sfc0    = lh_flux_sfc0    + lh_flux_sfc    * TIME_DTL
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             272        pp   8v          lh_flux_sfc0_pl = lh_flux_sfc0_pl + lh_flux_sfc_pl * TIME_DTL
             273                     
             274     1                   if ( mod(TIME_CSTEP,MNT_INTV) == 0 ) then
             275     1                      call diagnose_energy_mass
             276     1                   endif
             277                     
             278                         return
             279                       end subroutine embudget_monitor
             280                     
             281                       !-----------------------------------------------------------------------------
             282                       subroutine diagnose_energy_mass
             283                         use mod_adm, only: &
             284                            ADM_prc_me,         &
             285                            ADM_prc_run_master, &
             286                            ADM_prc_pl,         &
             287                            ADM_gall,           &
             288                            ADM_gall_pl,        &
             289                            ADM_kall,           &
             290                            ADM_lall,           &
             291                            ADM_lall_pl
             292                         use mod_cnst, only: &
             293                            CNST_CV
             294                         use mod_time, only: &
             295                            TIME_CSTEP
             296                         use mod_vmtr, only: &
             297                            VMTR_GSGAM2,     &
             298                            VMTR_GSGAM2_pl,  &
             299                            VMTR_GSGAM2H,    &
             300                            VMTR_GSGAM2H_pl, &
             301                            VMTR_PHI,        &
             302                            VMTR_PHI_pl
             303                         use mod_gtl, only: &
             304                            GTL_global_sum, &
             305                            GTL_global_sum_srf
             306                         use mod_runconf, only: &
             307                            TRC_vmax, &
             308                            NQW_STR,  &
             309                            NQW_END,  &
             310                            I_QV,     &
             311                            I_QC,     &
             312                            I_QR,     &
             313                            I_QI,     &
             314                            I_QS,     &
             315                            I_QG,     &
             316                            LHV,      &
             317                            LHF,      &
             318                            CVW
             319                         use mod_prgvar, only: &
             320                            prgvar_get_withdiag
             321                         use mod_thrmdyn, only: &
             322                            THRMDYN_qd_ijkl
             323                         use mod_cnvvar, only: &
             324                            cnvvar_kin
             325                         implicit none
             326                     
             327                         real(8) :: rhog     (ADM_gall,   ADM_kall,ADM_lall   )
             328                         real(8) :: rhog_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             329                         real(8) :: rhogvx   (ADM_gall,   ADM_kall,ADM_lall   )
             330                         real(8) :: rhogvx_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             331                         real(8) :: rhogvy   (ADM_gall,   ADM_kall,ADM_lall   )
             332                         real(8) :: rhogvy_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             333                         real(8) :: rhogvz   (ADM_gall,   ADM_kall,ADM_lall   )
             334                         real(8) :: rhogvz_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             335                         real(8) :: rhogw    (ADM_gall,   ADM_kall,ADM_lall   )
             336                         real(8) :: rhogw_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             337                         real(8) :: rhoge    (ADM_gall,   ADM_kall,ADM_lall   )
             338                         real(8) :: rhoge_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             339                         real(8) :: rhogq    (ADM_gall,   ADM_kall,ADM_lall   ,TRC_vmax)
             340                         real(8) :: rhogq_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl,TRC_vmax)
             341                     
             342                         real(8) :: rho      (ADM_gall,   ADM_kall,ADM_lall   )
             343                         real(8) :: rho_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             344                         real(8) :: pre      (ADM_gall,   ADM_kall,ADM_lall   )
             345                         real(8) :: pre_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             346                         real(8) :: tem      (ADM_gall,   ADM_kall,ADM_lall   )
             347                         real(8) :: tem_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             348                         real(8) :: vx       (ADM_gall,   ADM_kall,ADM_lall   )
             349                         real(8) :: vx_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             350                         real(8) :: vy       (ADM_gall,   ADM_kall,ADM_lall   )
             351                         real(8) :: vy_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             352                         real(8) :: vz       (ADM_gall,   ADM_kall,ADM_lall   )
             353                         real(8) :: vz_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             354                         real(8) :: w        (ADM_gall,   ADM_kall,ADM_lall   )
             355                         real(8) :: w_pl     (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             356                         real(8) :: q        (ADM_gall,   ADM_kall,ADM_lall   ,TRC_vmax)
             357                         real(8) :: q_pl     (ADM_gall_pl,ADM_kall,ADM_lall_pl,TRC_vmax)
             358                     
             359                         real(8) :: qd    (ADM_gall,   ADM_kall,ADM_lall   )
             360                         real(8) :: qd_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             361                     
             362                         real(8) :: tmp   (ADM_gall,   ADM_kall,ADM_lall   )
             363                         real(8) :: tmp_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             364                     
             365                         real(8) :: rho_sum
             366                         real(8) :: rhoqd_sum
             367                         real(8) :: rhoq_sum(1:TRC_vmax)
             368                         real(8) :: rhoqw_sum
             369                         real(8) :: rhoqv_sum
             370                         real(8) :: rhoql_sum
             371                         real(8) :: rhoqi_sum
             372                     
             373                         real(8) :: precip_sum
             374                         real(8) :: evap_sum
             375                     
             376                         real(8) :: rhoetot_sum
             377                         real(8) :: rhophi_sum
             378                         real(8) :: rhokin_sum
             379                         real(8) :: rhoein_sum
             380                         real(8) :: rhoein_qd_sum
             381                         real(8) :: rhoein_qw_sum(1:TRC_vmax)
             382                     
             383                         real(8) :: sfcrad_sum
             384                         real(8) :: toarad_sum
             385                         real(8) :: evap_energy_sum
             386                         real(8) :: precip_energy_sum
             387                         real(8) :: sh_flux_sfc_sum
             388                         real(8) :: lh_flux_sfc_sum
             389                     
             390                         real(8), save :: rhoqw_sum_old
             391                         real(8), save :: rhoetot_sum_old
             392                         logical, save :: iflag = .true.
             393                     
             394                         integer :: l, nq
             395                         !---------------------------------------------------------------------------
             396                     
             397                         call prgvar_get_withdiag( rhog,   rhog_pl,   & !--- [OUT]
             398                                                   rhogvx, rhogvx_pl, & !--- [OUT]
             399                                                   rhogvy, rhogvy_pl, & !--- [OUT]
             400                                                   rhogvz, rhogvz_pl, & !--- [OUT]
             401                                                   rhogw,  rhogw_pl,  & !--- [OUT]
             402                                                   rhoge,  rhoge_pl,  & !--- [OUT]
             403                                                   rhogq,  rhogq_pl,  & !--- [OUT]
             404                                                   rho,    rho_pl,    & !--- [OUT]
             405                                                   pre,    pre_pl,    & !--- [OUT]
             406                                                   tem,    tem_pl,    & !--- [OUT]
             407                                                   vx,     vx_pl,     & !--- [OUT]
             408                                                   vy,     vy_pl,     & !--- [OUT]
             409                                                   vz,     vz_pl,     & !--- [OUT]
             410                                                   w,      w_pl,      & !--- [OUT]
             411                                                   q,      q_pl       ) !--- [OUT]
             412                     
             413                         call THRMDYN_qd_ijkl ( ADM_gall, ADM_kall, ADM_lall, & !--- [IN]
             414                                                TRC_vmax, NQW_STR, NQW_END,   & !--- [IN]
             415                                                qd(:,:,:),                    & !--- [OUT]
             416                                                q (:,:,:,:)                   ) !--- [IN]
             417                     
             418                         !----- Mass budget
             419                     
             420                         !--- total mass ( dry + water )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             421        pp   8v          tmp(:,:,:) = rho(:,:,:)
             422     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             423     1  pp   8v             tmp_pl(:,:,:) = rho_pl(:,:,:)
             424     1                   end if
             425                         rho_sum = GTL_global_sum( tmp, tmp_pl ) ! [kg/m3] -> [kg]
             426                     
             427                         !--- total mass (dry air)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             428        pp   8v          tmp(:,:,:) = rho(:,:,:) * qd(:,:,:)
             429     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             430     1  pp   8v             tmp_pl(:,:,:) = rho_pl(:,:,:) * qd_pl(:,:,:)
             431     1                   endif
             432                         rhoqd_sum = GTL_global_sum( tmp, tmp_pl )
             433                     
             434                         !--- total mass (each water category)
             435     1                   do nq = NQW_STR, NQW_END
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             436     1  pp   8v             tmp(:,:,:) = rho(:,:,:) * q(:,:,:,nq)
             437     2                      if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             438     2  pp   8v                tmp_pl(:,:,:) = rho_pl(:,:,:) * q_pl(:,:,:,nq)
             439     2                      endif
             440     1                      rhoq_sum(nq) = GTL_global_sum( tmp, tmp_pl )
             441     1                   enddo
             442                     
             443                         !--- total mass (total/vapor/liquid/soild water)
             444                         rhoqw_sum = 0.D0
             445                         rhoqv_sum = 0.D0
             446                         rhoql_sum = 0.D0
             447                         rhoqi_sum = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 191
                                   <<< Loop-information  End >>>
             448     1  pp   2s          do nq = NQW_STR, NQW_END
             449     1   p   2m             rhoqw_sum = rhoqw_sum + rhoq_sum(nq)
             450     1               
             451     2   p   2v             if    ( nq == I_QV ) then
             452     2   p   2m                rhoqv_sum = rhoqv_sum + rhoq_sum(nq)
             453     2   p   2m             elseif( nq == I_QC .OR. nq == I_QR ) then
             454     2   p   2m                rhoql_sum = rhoql_sum + rhoq_sum(nq)
             455     2   p   2m             elseif( nq == I_QI .OR. nq == I_QS  .OR. nq == I_QG ) then
             456     2   p   2m                rhoqi_sum = rhoqi_sum + rhoq_sum(nq)
             457     2   p   2m             endif
             458     1   p   2v          enddo
             459                     
             460                         !--- total mass (precipitation/evapolation)
             461                         precip_sum = GTL_global_sum_srf( precip0(:,:,:), precip0_pl(:,:,:) )
             462                         evap_sum   = GTL_global_sum_srf( evap0  (:,:,:), evap0_pl  (:,:,:) )
             463                     
             464     1                   if ( iflag ) then
             465     1                      rhoqw_sum_old = rhoqw_sum
             466     1                   endif
             467                     
             468     1                   if ( ADM_prc_me == ADM_prc_run_master ) then
             469     1                      write(MNT_m_fid,'(I6)',    ADVANCE='NO') TIME_CSTEP
             470     1                      write(MNT_m_fid,'(E22.14)',ADVANCE='NO') rhoqd_sum
             471     1                      write(MNT_m_fid,'(E22.14)',ADVANCE='NO') rhoqv_sum
             472     1                      write(MNT_m_fid,'(E22.14)',ADVANCE='NO') rhoql_sum
             473     1                      write(MNT_m_fid,'(E22.14)',ADVANCE='NO') rhoqi_sum
             474     1                      write(MNT_m_fid,'(E22.14)',ADVANCE='NO') rhoqw_sum
             475     1                      write(MNT_m_fid,'(E22.14)',ADVANCE='NO') rhoqw_sum - rhoqw_sum_old
             476     1                      write(MNT_m_fid,'(E22.14)',ADVANCE='NO') precip_sum
             477     1                      write(MNT_m_fid,'(E22.14)',ADVANCE='NO') evap_sum
             478     1                      write(MNT_m_fid,'(E22.14)',ADVANCE='NO') evap_sum - precip_sum
             479     1                      write(MNT_m_fid,*)
             480     1                   endif
             481                     
             482                     
             483                         !----- Energy budget
             484                     
             485                         rhoein_sum = 0.D0
             486                     
             487                         !--- internal energy (dry air)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             488        pp   8v          tmp = rho * qd * CNST_CV * tem
             489     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             490     1  pp   8v             tmp_pl = rho_pl * qd_pl * CNST_CV * tem_pl
             491     1                   end if
             492                         rhoein_qd_sum = GTL_global_sum( tmp, tmp_pl )
             493                         rhoein_sum    = rhoein_sum + rhoein_qd_sum
             494                     
             495                         !--- internal energy (each water category)
             496     1                   do nq = NQW_STR,NQW_END
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             497     1  pp   8v             tmp(:,:,:) = rho(:,:,:) * q(:,:,:,nq) * CVW(nq) * tem(:,:,:)
             498     1               
             499     1                      !--- correct latent heat
             500     2                      if    ( nq == I_QV ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             501     2  pp   8v                tmp(:,:,:) = tmp(:,:,:) + rho(:,:,:) * q(:,:,:,nq) * LHV
             502     2                      elseif( nq == I_QI .OR. nq == I_QS .OR. nq == I_QG ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             503     2  pp   8v                tmp(:,:,:) = tmp(:,:,:) - rho(:,:,:) * q(:,:,:,nq) * LHF
             504     2                      endif
             505     1               
             506     2                      if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             507     2  pp   8v                tmp_pl(:,:,:) = rho_pl(:,:,:) * q_pl(:,:,:,nq) * CVW(nq) * tem_pl(:,:,:)
             508     2               
             509     3                         if    ( nq == I_QV ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             510     3  pp   8v                   tmp_pl(:,:,:) = tmp_pl(:,:,:) + rho_pl(:,:,:) * q_pl(:,:,:,nq) * LHV
             511     3                         elseif( nq == I_QI .OR. nq == I_QS .OR. nq == I_QG ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             512     3  pp   8v                   tmp_pl(:,:,:) = tmp_pl(:,:,:) - rho_pl(:,:,:) * q_pl(:,:,:,nq) * LHF
             513     3                         endif
             514     2                      endif
             515     1               
             516     1                      rhoein_qw_sum(nq) = GTL_global_sum( tmp, tmp_pl )
             517     1                      rhoein_sum        = rhoein_sum + rhoein_qw_sum(nq)
             518     1                   enddo
             519                     
             520                         !--- potential energy
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             521        pp   8v          tmp(:,:,:) = rho(:,:,:) * VMTR_PHI(:,:,:)
             522     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             523     1  pp   8v             tmp_pl(:,:,:) = rho_pl(:,:,:)*VMTR_PHI_pl(:,:,:)
             524     1                   endif
             525                         rhophi_sum = GTL_global_sum( tmp, tmp_pl )
             526                     
             527                         !--- kinetic energy
             528     1                   do l = 1, ADM_lall
             529     1                      call cnvvar_kin( ADM_gall,            & !--- [IN]
             530     1                                       rhog        (:,:,l), & !--- [IN]
             531     1                                       rhogvx      (:,:,l), & !--- [IN]
             532     1                                       rhogvy      (:,:,l), & !--- [IN]
             533     1                                       rhogvz      (:,:,l), & !--- [IN]
             534     1                                       rhogw       (:,:,l), & !--- [IN]
             535     1                                       VMTR_GSGAM2 (:,:,l), & !--- [IN]
             536     1                                       VMTR_GSGAM2H(:,:,l), & !--- [IN]
             537     1                                       tmp         (:,:,l)  ) !--- [OUT]
             538     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             539     1  pp   8v             tmp(:,:,l) = tmp(:,:,l) * rho(:,:,l)
             540     1                   enddo
             541                     
             542     1                   if ( ADM_prc_me == ADM_prc_pl ) then
             543     2                      do l = 1, ADM_lall_pl
             544     2                         call cnvvar_kin( ADM_gall_pl,            & !--- [IN]
             545     2                                          rhog_pl        (:,:,l), & !--- [IN]
             546     2                                          rhogvx_pl      (:,:,l), & !--- [IN]
             547     2                                          rhogvy_pl      (:,:,l), & !--- [IN]
             548     2                                          rhogvz_pl      (:,:,l), & !--- [IN]
             549     2                                          rhogw_pl       (:,:,l), & !--- [IN]
             550     2                                          VMTR_GSGAM2_pl (:,:,l), & !--- [IN]
             551     2                                          VMTR_GSGAM2H_pl(:,:,l), & !--- [IN]
             552     2                                          tmp_pl         (:,:,l)  ) !--- [OUT]
             553     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             554     2  pp   8v                tmp_pl(:,:,l) = tmp_pl(:,:,l) * rho_pl(:,:,l)
             555     2                      enddo
             556     1                   endif
             557                         rhokin_sum = GTL_global_sum( tmp, tmp_pl )
             558                     
             559                         !--- total energy
             560                         rhoetot_sum = rhoein_sum + rhophi_sum + rhokin_sum
             561                     
             562     1                   if ( iflag ) then
             563     1                      rhoetot_sum_old = rhoetot_sum
             564     1                   endif
             565                     
             566                         sfcrad_sum        = GTL_global_sum_srf( sfcrad0(:,:,:), sfcrad0_pl(:,:,:) )
             567                         toarad_sum        = GTL_global_sum_srf( toarad0(:,:,:), toarad0_pl(:,:,:) )
             568                     
             569                         evap_energy_sum   = GTL_global_sum_srf( evap_energy0  (:,:,:), evap_energy0_pl  (:,:,:) )
             570                         precip_energy_sum = GTL_global_sum_srf( precip_energy0(:,:,:), precip_energy0_pl(:,:,:) )
             571                     
             572                         sh_flux_sfc_sum   = GTL_global_sum_srf( sh_flux_sfc0(:,:,:), sh_flux_sfc0_pl(:,:,:) )
             573                         lh_flux_sfc_sum   = GTL_global_sum_srf( lh_flux_sfc0(:,:,:), lh_flux_sfc0_pl(:,:,:) )
             574                     
             575     1                   if ( ADM_prc_me == ADM_prc_run_master ) then
             576     1               
             577     1                      write(MNT_e_fid,'(I6)',    ADVANCE='NO') TIME_CSTEP
             578     1                      write(MNT_e_fid,'(E22.14)',ADVANCE='NO') rhoein_sum
             579     1                      write(MNT_e_fid,'(E22.14)',ADVANCE='NO') rhophi_sum
             580     1                      write(MNT_e_fid,'(E22.14)',ADVANCE='NO') rhokin_sum
             581     1                      write(MNT_e_fid,'(E22.14)',ADVANCE='NO') rhoetot_sum
             582     1                      write(MNT_e_fid,'(E22.14)',ADVANCE='NO') rhoetot_sum-rhoetot_sum_old
             583     1                      write(MNT_e_fid,'(E22.14)',ADVANCE='NO') sfcrad_sum
             584     1                      write(MNT_e_fid,'(E22.14)',ADVANCE='NO') toarad_sum
             585     1                      write(MNT_e_fid,'(E22.14)',ADVANCE='NO') sh_flux_sfc_sum
             586     1                      write(MNT_e_fid,'(E22.14)',ADVANCE='NO') lh_flux_sfc_sum
             587     1                      write(MNT_e_fid,'(E22.14)',ADVANCE='NO') evap_energy_sum
             588     1                      write(MNT_e_fid,'(E22.14)',ADVANCE='NO') precip_energy_sum
             589     1                      write(MNT_e_fid,'(E22.14)',ADVANCE='NO') sfcrad_sum-toarad_sum &
             590     1                                                             + evap_energy_sum-precip_energy_sum &
             591     1                                                             + sh_flux_sfc_sum+lh_flux_sfc_sum
             592     1                      write(MNT_e_fid,*)
             593     1                   endif
             594                     
             595                         if( iflag ) iflag = .false.
             596                         rhoqw_sum_old   = rhoqw_sum
             597                         rhoetot_sum_old = rhoetot_sum
             598                     
             599                         ! reset array
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             600        pp    v          evap0     (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             601        pp    v          evap0_pl  (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             602        pp    v          precip0   (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             603        pp    v          precip0_pl(:,:,:) = 0.D0
             604                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             605        pp    v          sfcrad0          (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             606        pp    v          sfcrad0_pl       (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             607        pp    v          toarad0          (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             608        pp    v          toarad0_pl       (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             609        pp    v          evap_energy0     (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             610        pp    v          evap_energy0_pl  (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             611        pp    v          precip_energy0   (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             612        pp    v          precip_energy0_pl(:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             613        pp    v          sh_flux_sfc0     (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             614        pp    v          sh_flux_sfc0_pl  (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             615        pp    v          lh_flux_sfc0     (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             616        pp    v          lh_flux_sfc0_pl  (:,:,:) = 0.D0
             617                     
             618                         return
             619                       end subroutine diagnose_energy_mass
             620                     
             621                     end module mod_embudget

 Diagnostic messages: program name(mod_embudget)
   jwd8220o-i  "nhm/share/mod_embudget.f90", line 16: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
  Module subprogram name(diagnose_energy_mass)
   jwd2005i-w  "nhm/share/mod_embudget.f90", line 430: 'qd_pl' is used but never set.
   jwd8208o-i  "nhm/share/mod_embudget.f90", line 449: Method of calculating sum or product is changed.
   jwd8209o-i  "nhm/share/mod_embudget.f90", line 488: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_embudget.f90", line 490: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_embudget.f90", line 497: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_embudget.f90", line 501: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_embudget.f90", line 503: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_embudget.f90", line 507: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_embudget.f90", line 510: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_embudget.f90", line 512: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_embudget.f90", line 589: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 621
   Statements : 374
   Stack(byte): 39712
   Prefetch num: 32

 Total information
   Procedures       : 1
   Total lines      : 621
   Total statements : 374
   Total stack(byte): 39712
   Total prefetch num: 32



 Fujitsu Fortran Version 1.2.0  Mon Dec 21 16:56:47 2015

 Compilation information
   Current directory : /volume1/home/ra000007/a03106/nicam-dc-mini/src
   Source file       : share/mod_oprt.f90

 Option information
   Command line options : -Kident_mpi -f2004 -Kfast,parallel,auto,ocl,preex,array_private,noalias=s,mfunc=2 -Kparallel_iteration=8,instance=8,dynamic_iteration -Qi -Qt -X03 -Ncompdisp -Koptmsg=1 -Cpp -Kprefetch_cache_level=all,prefetch_iteration_L2=50 -Ksimd -Ntl_notrt -U_FIPP_ -U_FAPP_ -I../src/include -o mod_oprt.o -c -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -W0,-zmpa=Yignore-intent -I/opt/FJSVtclang/GM-1.2.0-19/lib64
   Cpp options          : -U_FIPP_ -U_FAPP_ -I../src/include -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -I/opt/FJSVtclang/GM-1.2.0-19/lib64 -D__FUJITSU -Dunix -Dsparc -D__sparc__ -D__unix -D__sparc -D__frt_version=700 -D__HPC_ACE__ -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -Dlinux -otmp -D__sparcv9 -D__sparc_v9__ -D__arch64__
   Effective options    : -fi -g0 -AE -Free -O3 -Qi,p,t -X03
                          -x0
                          -KFLTLD -Kadr44 -Knoalias=s -Kauto -Knoautoobjstack
                          -Knocalleralloc -Kdalign -Keval -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kilfunc
                          -Klargepage -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_if -Kloop_fusion
                          -Kloop_interchange -Kloop_nopart_parallel
                          -Kloop_nopart_simd -Kloop_noversioning -Kns
                          -Kmfunc=2 -Kocl -Komitfp -Koptmsg=1 -Kpreex
                          -Kprefetch_conditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_iteration_L2=50 -Kprefetch_nostrong
                          -Kprefetch_strong_L2 -Knoshortloop -Ksimd=1
                          -Knosimd_region_constant -Knostriping -Kswp
                          -Knotemparraystack -Kunroll -Knouxsimd -KNOXFILL
                          -Knoopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_noordered_reduction -Knothreadsafe
                          -Kparallel -Kparallel_nofp_precision
                          -Karray_private -Kdynamic_iteration -Kreduction
                          -Kregion_extension -Kinstance=8
                          -Kparallel_iteration=8
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Ncompdisp
                          -Nnocopyarg -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nline -Nlst -Nlst=i -Nlst=p -Nlst=t
                          -Nnomallocfree -Nnoobsfun -Nquickdbg=noargchk
                          -Nquickdbg=nosubchk -Nquickdbg=noundef -NRnotrap
                          -Nnorecursive -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 Module "mod_oprt"
  (inc)(line-no.)(nest)(optimize)
               1                     !-------------------------------------------------------------------------------
               2                     !>
               3                     !! Operator module
               4                     !!
               5                     !! @par Description
               6                     !!         This module contains the subroutines for differential oeprators.
               7                     !!
               8                     !! @author  H.Tomita
               9                     !!
              10                     !! @par History
              11                     !! @li      2004-02-17 (H.Tomita)    Imported from igdc-4.33
              12                     !! @li      2006-04-17 (H.Tomita)    Add sub[OPRT_divergence]
              13                     !! @li      2006-08-11 (H.Tomita)    Implementatio of miura scheme(2004) with Thurbuen(1996)'s limiter.
              14                     !!                                   Add sub[OPRT_divergence2]
              15                     !!                                       sub[OPRT_divergence2_prep]
              16                     !!                                       sub[OPRT_divergence2_all].
              17                     !! @li      2006-08-22 (Y.Niwa)      divide the rows for the calc. of clap and clap_pl due to the rule of XLF.
              18                     !! @li      2007-01-26 (H.Tomita)    Optimization of sub[oprt_diffusion].
              19                     !! @li      2007-11-28 (T.Mitsui)    bugfix in oprt_divergence2, _all
              20                     !! @li      2008-01-24 (Y.Niwa)      add OPRT_divergence2{_prep,,_all}_rev
              21                     !! @li      2008-04-28 (T.Mitsui)    bug fix in OPRT_divergence2{_all}_rev
              22                     !! @li      2009-09-04 (H.Taniguchi) bug fix in OPRT_divergence2{_all}_rev Zero clear of wrk[_pl] is needed.
              23                     !! @li      2010-06-08 (S.Iga)       new grid is implemented (see, string XTMS)
              24                     !! @li      2011-09-27 (T.Seiki)     merge optimization by RIST and M.Terai
              25                     !! @li      2012-01-17 (M.Terai)     update optimization(case6) in div2rev
              26                     !! @li      2012-05-01 (T.Yamaura)   bug fix in div2rev
              27                     !! @li      2012-06-28 (M.Terai)     Removed wrapper subroutine to invoked the operators directly macro var.
              28                     !!
              29                     !<
              30                     module mod_oprt
              31                       !-----------------------------------------------------------------------------
              32                       !
              33                       !++ used modules
              34                       !
              35                       use mod_debug
              36                       use mod_adm, only: &
              37                          ADM_LOG_FID
              38                       !-----------------------------------------------------------------------------
              39                       implicit none
              40                       private
              41                       !-----------------------------------------------------------------------------
              42                       !
              43                       !++ Public procedure
              44                       !
              45                       public :: OPRT_setup
              46                       public :: OPRT_divergence
              47                       public :: OPRT_gradient
              48                       public :: OPRT_laplacian
              49                       public :: OPRT_diffusion
              50                       public :: OPRT_horizontalize_vec
              51                       public :: OPRT_vorticity
              52                       public :: OPRT_divdamp
              53                     
              54                       !-----------------------------------------------------------------------------
              55                       !
              56                       !++ Public parameters & variables
              57                       !
              58                       !-----------------------------------------------------------------------------
              59                       !
              60                       !++ Private procedure
              61                       !
              62                       !-----------------------------------------------------------------------------
              63                       !
              64                       !++ Private parameters & variables
              65                       !
              66                       integer, private, save :: OPRT_nstart
              67                       integer, private, save :: OPRT_nend
              68                     
              69                       ! < for divergence operator >
              70                       real(8), private, allocatable, save :: cdiv   (:,:,:,:)
              71                       real(8), private, allocatable, save :: cdiv_pl(:,:,:,:)
              72                     
              73                       ! < for gradient operator >
              74                       real(8), private, allocatable, save :: cgrad   (:,:,:,:)
              75                       real(8), private, allocatable, save :: cgrad_pl(:,:,:,:)
              76                     
              77                       ! < for laplacian operator >
              78                       real(8), private, allocatable, save :: clap   (:,:,:)
              79                       real(8), private, allocatable, save :: clap_pl(:,:,:)
              80                     
              81                       ! < for diffusion operator >
              82                       real(8), private, allocatable, save :: cmdif_P (:,:)     !(n,l) <- GMTR_P_VAR(n,1,l,P_RAREA)
              83                       real(8), private, allocatable, save :: cmdif_T (:,:,:)   !(TI:TJ,n,l) <- GMTR_T_VAR(n,1,l,TI:TJ,T_RAREA)
              84                       real(8), private, allocatable, save :: cmdif_AH(:,:,:,:) !(AI:AJ,1:3,n,l) <-GMTR_A_VAR(n,1,l,TI:TJ,HN[XYZ])
              85                       real(8), private, allocatable, save :: cmdif_AT(:,:,:,:) !(AI:AJ,1:3,n,l) <-GMTR_A_VAR(n,1,l,TI:TJ,TN[XYZ])
              86                     
              87                       !-----------------------------------------------------------------------------
              88                     contains
              89                       !-----------------------------------------------------------------------------
              90                       !> Setup
              91                       subroutine OPRT_setup
              92                         use mod_adm, only: &
              93                            ADM_W,          &
              94                            ADM_TI,         &
              95                            ADM_TJ,         &
              96                            ADM_AI,         &
              97                            ADM_AIJ,        &
              98                            ADM_AJ,         &
              99                            ADM_prc_tab,    &
             100                            ADM_prc_me,     &
             101                            ADM_prc_pl,     &
             102                            ADM_rgn_vnum,   &
             103                            ADM_vlink_nmax, &
             104                            ADM_lall,       &
             105                            ADM_lall_pl,    &
             106                            ADM_gall,       &
             107                            ADM_gall_pl,    &
             108                            ADM_kall,       &
             109                            ADM_gall_1d,    &
             110                            ADM_gmin,       &
             111                            ADM_gmax,       &
             112                            ADM_gslf_pl,    &
             113                            ADM_gmin_pl,    &
             114                            ADM_gmax_pl,    &
             115                            ADM_KNONE,      &
             116                            ADM_kmin,       &
             117                            ADM_kmax
             118                         use mod_gmtr, only: &
             119                            GMTR_P_rarea,  &
             120                            GMTR_T_W1,     &
             121                            GMTR_T_W2,     &
             122                            GMTR_T_W3,     &
             123                            GMTR_T_rarea,  &
             124                            GMTR_A_hnx,    &
             125                            GMTR_A_hny,    &
             126                            GMTR_A_hnz,    &
             127                            GMTR_A_tnx,    &
             128                            GMTR_A_tny,    &
             129                            GMTR_A_tnz,    &
             130                            GMTR_A_tn2x,   &
             131                            GMTR_A_tn2y,   &
             132                            GMTR_A_tn2z,   &
             133                            GMTR_P_var,    &
             134                            GMTR_P_var_pl, &
             135                            GMTR_T_var,    &
             136                            GMTR_T_var_pl, &
             137                            GMTR_A_var,    &
             138                            GMTR_A_var_pl
             139                         implicit none
             140                     
             141                         integer :: n0,n1,n2,n3,n4
             142                     
             143                         integer :: ij
             144                         integer :: im1j,ijm1,im1jm1
             145                         integer :: ip1j,ijp1,ip1jp1
             146                     
             147                         integer :: rgnid
             148                         integer :: n, l, m, md, v
             149                     
             150                         integer :: suf, i, j
             151                         suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
             152                     
             153                         integer :: TI,TJ,AI,AIJ,AJ,W1,W2,W3
             154                         integer :: k0,a0
             155                         integer :: tx1,ty1,tz1
             156                         integer :: tx2,ty2,tz2
             157                         integer :: hx1,hy1,hz1
             158                         !---------------------------------------------------------------------------
             159                     
             160                         write(ADM_LOG_FID,*)
             161                         write(ADM_LOG_FID,*) '+++ Module[oprt]/Category[common share]'
             162                     
             163                         k0  = ADM_KNONE
             164                     
             165                         TI  = ADM_TI
             166                         TJ  = ADM_TJ
             167                         AI  = ADM_AI
             168                         AIJ = ADM_AIJ
             169                         AJ  = ADM_AJ
             170                         W1  = GMTR_T_W1
             171                         W2  = GMTR_T_W2
             172                         W3  = GMTR_T_W3
             173                     
             174                         OPRT_nstart = suf(ADM_gmin,ADM_gmin)
             175                         OPRT_nend   = suf(ADM_gmax,ADM_gmax)
             176                     
             177                         !---< setup coefficient of divergence operator >
             178                         write(ADM_LOG_FID,*) '*** setup coefficient of divergence operator'
             179                     
             180                         allocate( cdiv   (0:6,             ADM_gall   ,ADM_lall   ,3) )
             181                         allocate( cdiv_pl(0:ADM_vlink_nmax,ADM_gall_pl,ADM_lall_pl,3) )
             182                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             183     1  pp               do l = 1, ADM_lall
             184     1   p                  rgnid = ADM_prc_tab(l,ADM_prc_me)
             185     1               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 36
                                   <<<      GMTR_T_var: 36
                                   <<< Loop-information  End >>>
             186     2   p                  do m = 1, 3
             187     2   p                     md = m + GMTR_A_HNX - 1
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 18
                                   <<<      GMTR_T_var: 18
                                   <<< Loop-information  End >>>
             188     3   p    v                do n = OPRT_nstart, OPRT_nend
             189     3   p    v                   ij     = n
             190     3   p    v                   ip1j   = n + 1
             191     3   p    v                   ip1jp1 = n + 1 + ADM_gall_1d
             192     3   p    v                   ijp1   = n     + ADM_gall_1d
             193     3   p    v                   im1j   = n - 1
             194     3   p    v                   im1jm1 = n - 1 - ADM_gall_1d
             195     3   p    v                   ijm1   = n     - ADM_gall_1d
             196     3               
             197     3                            ! ij
             198     3   p    v                   cdiv(0,n,l,m) = ( - GMTR_T_var(ijm1  ,k0,l,TJ,W3) * GMTR_A_var(ijm1  ,k0,l,AJ ,md) &
             199     3                                              + GMTR_T_var(ijm1  ,k0,l,TJ,W3) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             200     3                                              + GMTR_T_var(ij    ,k0,l,TI,W1) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             201     3                                              + GMTR_T_var(ij    ,k0,l,TI,W1) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             202     3                                              + GMTR_T_var(ij    ,k0,l,TJ,W1) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             203     3                                              + GMTR_T_var(ij    ,k0,l,TJ,W1) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             204     3                                              + GMTR_T_var(im1j  ,k0,l,TI,W2) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             205     3                                              - GMTR_T_var(im1j  ,k0,l,TI,W2) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             206     3                                              - GMTR_T_var(im1jm1,k0,l,TJ,W2) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             207     3                                              - GMTR_T_var(im1jm1,k0,l,TJ,W2) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             208     3                                              - GMTR_T_var(im1jm1,k0,l,TI,W3) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             209     3                                              - GMTR_T_var(im1jm1,k0,l,TI,W3) * GMTR_A_var(ijm1  ,k0,l,AJ ,md) &
             210     3                                            ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             211     3                            ! ip1j
             212     3   p    v                   cdiv(1,n,l,m) = ( - GMTR_T_var(ijm1  ,k0,l,TJ,W2) * GMTR_A_var(ijm1  ,k0,l,AJ ,md) &
             213     3                                              + GMTR_T_var(ijm1  ,k0,l,TJ,W2) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             214     3                                              + GMTR_T_var(ij    ,k0,l,TI,W2) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             215     3                                              + GMTR_T_var(ij    ,k0,l,TI,W2) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             216     3                                            ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             217     3                            ! ip1jp1
             218     3   p    v                   cdiv(2,n,l,m) = ( + GMTR_T_var(ij    ,k0,l,TI,W3) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             219     3                                              + GMTR_T_var(ij    ,k0,l,TI,W3) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             220     3                                              + GMTR_T_var(ij    ,k0,l,TJ,W2) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             221     3                                              + GMTR_T_var(ij    ,k0,l,TJ,W2) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             222     3                                            ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             223     3                            ! ijp1
             224     3   p    v                   cdiv(3,n,l,m) = ( + GMTR_T_var(ij    ,k0,l,TJ,W3) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             225     3                                              + GMTR_T_var(ij    ,k0,l,TJ,W3) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             226     3                                              + GMTR_T_var(im1j  ,k0,l,TI,W3) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             227     3                                              - GMTR_T_var(im1j  ,k0,l,TI,W3) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             228     3                                            ) * 0.5D0*GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             229     3                            ! im1j
             230     3   p    v                   cdiv(4,n,l,m) = ( + GMTR_T_var(im1j  ,k0,l,TI,W1) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             231     3                                              - GMTR_T_var(im1j  ,k0,l,TI,W1) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             232     3                                              - GMTR_T_var(im1jm1,k0,l,TJ,W3) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             233     3                                              - GMTR_T_var(im1jm1,k0,l,TJ,W3) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             234     3                                            ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             235     3                            ! im1jm1
             236     3   p    v                   cdiv(5,n,l,m) = ( - GMTR_T_var(im1jm1,k0,l,TJ,W1) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             237     3                                              - GMTR_T_var(im1jm1,k0,l,TJ,W1) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             238     3                                              - GMTR_T_var(im1jm1,k0,l,TI,W1) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             239     3                                              - GMTR_T_var(im1jm1,k0,l,TI,W1) * GMTR_A_var(ijm1  ,k0,l,AJ ,md) &
             240     3                                            ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             241     3                            ! ijm1
             242     3   p    v                   cdiv(6,n,l,m) = ( - GMTR_T_var(im1jm1,k0,l,TI,W2) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             243     3                                              - GMTR_T_var(im1jm1,k0,l,TI,W2) * GMTR_A_var(ijm1  ,k0,l,AJ ,md) &
             244     3                                              - GMTR_T_var(ijm1  ,k0,l,TJ,W1) * GMTR_A_var(ijm1  ,k0,l,AJ ,md) &
             245     3                                              + GMTR_T_var(ijm1  ,k0,l,TJ,W1) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             246     3                                            ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             247     3   p    v                enddo
             248     2   p                  enddo
             249     1               
             250     2   p                  if ( ADM_rgn_vnum(ADM_W,rgnid) == 3 ) then ! pentagon
             251     2   p                     n = suf(ADM_gmin,ADM_gmin)
             252     2               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             253     3   p    v                do m = 1, 3
             254     3   p    v                   md = m + GMTR_A_hnx - 1
             255     3               
             256     3   p    v                   ij     = n
             257     3   p    v                   ip1j   = n + 1
             258     3   p    v                   ip1jp1 = n + 1 + ADM_gall_1d
             259     3   p    v                   ijp1   = n     + ADM_gall_1d
             260     3   p    v                   im1j   = n - 1
             261     3   p    v                   im1jm1 = n - 1 - ADM_gall_1d
             262     3   p    v                   ijm1   = n     - ADM_gall_1d
             263     3               
             264     3                            ! ij
             265     3   p    v                   cdiv(0,n,l,m) = ( - GMTR_T_var(ijm1  ,k0,l,TJ,W3) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             266     3                                              + GMTR_T_var(ijm1  ,k0,l,TJ,W3) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             267     3                                              + GMTR_T_var(ij    ,k0,l,TI,W1) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             268     3                                              + GMTR_T_var(ij    ,k0,l,TI,W1) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             269     3                                              + GMTR_T_var(ij    ,k0,l,TJ,W1) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             270     3                                              + GMTR_T_var(ij    ,k0,l,TJ,W1) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             271     3                                              + GMTR_T_var(im1j  ,k0,l,TI,W2) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             272     3                                              - GMTR_T_var(im1j  ,k0,l,TI,W2) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             273     3                                              - GMTR_T_var(im1jm1,k0,l,TJ,W2) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             274     3                                              - GMTR_T_var(im1jm1,k0,l,TJ,W2) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             275     3                                            ) * 0.5D0 * GMTR_P_var(n,k0,l,GMTR_P_rarea)
             276     3                            ! ip1j
             277     3   p    v                   cdiv(1,n,l,m) = ( - GMTR_T_var(ijm1  ,k0,l,TJ,W2) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             278     3                                              + GMTR_T_var(ijm1  ,k0,l,TJ,W2) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             279     3                                              + GMTR_T_var(ij    ,k0,l,TI,W2) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             280     3                                              + GMTR_T_var(ij    ,k0,l,TI,W2) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             281     3                                            ) * 0.5D0 * GMTR_P_var(n,k0,l,GMTR_P_rarea)
             282     3                            ! ip1jp1
             283     3   p    v                   cdiv(2,n,l,m) = ( + GMTR_T_var(ij    ,k0,l,TI,W3) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             284     3                                              + GMTR_T_var(ij    ,k0,l,TI,W3) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             285     3                                              + GMTR_T_var(ij    ,k0,l,TJ,W2) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             286     3                                              + GMTR_T_var(ij    ,k0,l,TJ,W2) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             287     3                                            ) * 0.5D0 * GMTR_P_var(n,k0,l,GMTR_P_rarea)
             288     3                            ! ijp1
             289     3   p    v                   cdiv(3,n,l,m) = ( + GMTR_T_var(ij    ,k0,l,TJ,W3) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             290     3                                              + GMTR_T_var(ij    ,k0,l,TJ,W3) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             291     3                                              + GMTR_T_var(im1j  ,k0,l,TI,W3) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             292     3                                              - GMTR_T_var(im1j  ,k0,l,TI,W3) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             293     3                                            ) * 0.5D0 * GMTR_P_var(n,k0,l,GMTR_P_rarea)
             294     3                            ! im1j
             295     3   p    v                   cdiv(4,n,l,m) = ( + GMTR_T_var(im1j  ,k0,l,TI,W1) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             296     3                                              - GMTR_T_var(im1j  ,k0,l,TI,W1) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             297     3                                              - GMTR_T_var(im1jm1,k0,l,TJ,W3) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             298     3                                              - GMTR_T_var(im1jm1,k0,l,TJ,W3) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             299     3                                            ) * 0.5D0 * GMTR_P_var(n,k0,l,GMTR_P_rarea)
             300     3                            ! im1jm1
             301     3   p    v                   cdiv(5,n,l,m) = ( - GMTR_T_var(im1jm1,k0,l,TJ,W1) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             302     3                                              - GMTR_T_var(im1jm1,k0,l,TJ,W1) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             303     3                                            ) * 0.5D0 * GMTR_P_var(n,k0,l,GMTR_P_rarea)
             304     3                            ! ijm1
             305     3   p    v                   cdiv(6,n,l,m) = ( + GMTR_T_var(ijm1  ,k0,l,TJ,W1) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             306     3                                              - GMTR_T_var(ijm1  ,k0,l,TJ,W1) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             307     3                                            ) * 0.5D0 * GMTR_P_var(n,k0,l,GMTR_P_rarea)
             308     3   p    v                enddo
             309     2   p                  endif
             310     1               
             311     1   p               enddo ! loop l
             312                     
             313     1                   if ( ADM_prc_me == ADM_prc_pl ) then
             314     1                      n = ADM_gslf_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             315     2  pp                  do l = 1, ADM_lall_pl
             316     3   p                     do m = 1, 3
             317     3   p                        md = m + GMTR_A_hnx - 1
             318     3               
             319     3   p                        cdiv_pl(0,n,l,m) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             320     4   p   6s                   do v = ADM_gmin_pl, ADM_gmax_pl
             321     4   p   6v                      ij   = v
             322     4   p   6v                      ijp1 = v + 1
             323     4   p   6s                      if( ijp1 > ADM_gmax_pl ) ijp1 = ADM_gmin_pl
             324     4               
             325     4   p   6v                      cdiv_pl(0,n,l,m) = cdiv_pl(0,n,l,m) + ( GMTR_T_var_pl(ij,k0,l,W1) * GMTR_A_var_pl(ij  ,k0,l,md) &
             326     4                                                                     + GMTR_T_var_pl(ij,k0,l,W1) * GMTR_A_var_pl(ijp1,k0,l,md) )
             327     4   p   6v                   enddo
             328     3   p                        cdiv_pl(0,n,l,m) = cdiv_pl(0,n,l,m) * 0.5D0 * GMTR_P_var_pl(n,k0,l,GMTR_P_rarea)
             329     3               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             330     4   p   4s                   do v = ADM_gmin_pl, ADM_gmax_pl
             331     4   p   4v                      ij   = v
             332     4   p   4v                      ijp1 = v + 1
             333     4   p   4v                      ijm1 = v - 1
             334     4   p   4s                      if( ijp1 == ADM_gmax_pl + 1 ) ijp1 = ADM_gmin_pl
             335     4   p   4m                      if( ijm1 == ADM_gmin_pl - 1 ) ijm1 = ADM_gmax_pl
             336     4               
             337     4   p   4v                      cdiv_pl(v-1,n,l,m) = ( + GMTR_T_var_pl(ijm1,k0,l,W3) * GMTR_A_var_pl(ijm1,k0,l,md) &
             338     4                                                      + GMTR_T_var_pl(ijm1,k0,l,W3) * GMTR_A_var_pl(ij  ,k0,l,md) &
             339     4                                                      + GMTR_T_var_pl(ij  ,k0,l,W2) * GMTR_A_var_pl(ij  ,k0,l,md) &
             340     4                                                      + GMTR_T_var_pl(ij  ,k0,l,W2) * GMTR_A_var_pl(ijp1,k0,l,md) &
             341     4                                                    ) * 0.5D0 * GMTR_P_var_pl(n,k0,l,GMTR_P_rarea)
             342     4   p   4v                   enddo
             343     3   p                     enddo ! loop m
             344     2   p                  enddo ! loop l
             345     1                   endif
             346                     
             347                     
             348                     
             349                         !---< setup coefficient of gradient operator >
             350                     
             351                         write(ADM_LOG_FID,*) '*** setup coefficient of gradient operator'
             352                     
             353                         allocate( cgrad   (0:6,             ADM_gall   ,ADM_lall   ,3) )
             354                         allocate( cgrad_pl(0:ADM_vlink_nmax,ADM_gall_pl,ADM_lall_pl,3) )
             355                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             356     1  pp               do l = 1, ADM_lall
             357     1   p                  rgnid = ADM_prc_tab(l,ADM_prc_me)
             358     1               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 36
                                   <<<      GMTR_T_var: 36
                                   <<< Loop-information  End >>>
             359     2   p                  do m = 1, 3
             360     2   p                     md = m + GMTR_A_HNX - 1
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 18
                                   <<<      GMTR_T_var: 18
                                   <<< Loop-information  End >>>
             361     3   p    v                do n = OPRT_nstart, OPRT_nend
             362     3   p    v                   ij     = n
             363     3   p    v                   ip1j   = n + 1
             364     3   p    v                   ip1jp1 = n + 1 + ADM_gall_1d
             365     3   p    v                   ijp1   = n     + ADM_gall_1d
             366     3   p    v                   im1j   = n - 1
             367     3   p    v                   im1jm1 = n - 1 - ADM_gall_1d
             368     3   p    v                   ijm1   = n     - ADM_gall_1d
             369     3               
             370     3                            ! ij
             371     3   p    v                   cgrad(0,n,l,m) = ( - GMTR_T_var(ijm1  ,k0,l,TJ,W3) * GMTR_A_var(ijm1  ,k0,l,AJ ,md) &
             372     3                                               + GMTR_T_var(ijm1  ,k0,l,TJ,W3) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             373     3                                               + GMTR_T_var(ij    ,k0,l,TI,W1) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             374     3                                               + GMTR_T_var(ij    ,k0,l,TI,W1) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             375     3                                               + GMTR_T_var(ij    ,k0,l,TJ,W1) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             376     3                                               + GMTR_T_var(ij    ,k0,l,TJ,W1) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             377     3                                               + GMTR_T_var(im1j  ,k0,l,TI,W2) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             378     3                                               - GMTR_T_var(im1j  ,k0,l,TI,W2) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             379     3                                               - GMTR_T_var(im1jm1,k0,l,TJ,W2) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             380     3                                               - GMTR_T_var(im1jm1,k0,l,TI,W3) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             381     3                                               - GMTR_T_var(im1jm1,k0,l,TJ,W2) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             382     3                                               - GMTR_T_var(im1jm1,k0,l,TI,W3) * GMTR_A_var(ijm1  ,k0,l,AJ ,md) &
             383     3                                               - 2.D0 * GMTR_A_var(ij    ,k0,l,AI ,md)                          &
             384     3                                               - 2.D0 * GMTR_A_var(ij    ,k0,l,AIJ,md)                          &
             385     3                                               - 2.D0 * GMTR_A_var(ij    ,k0,l,AJ ,md)                          &
             386     3                                               + 2.D0 * GMTR_A_var(im1j  ,k0,l,AI ,md)                          &
             387     3                                               + 2.D0 * GMTR_A_var(im1jm1,k0,l,AIJ,md)                          &
             388     3                                               + 2.D0 * GMTR_A_var(ijm1  ,k0,l,AJ ,md)                          &
             389     3                                             ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             390     3                            ! ip1j
             391     3   p    v                   cgrad(1,n,l,m) = ( - GMTR_T_var(ijm1  ,k0,l,TJ,W2) * GMTR_A_var(ijm1  ,k0,l,AJ ,md) &
             392     3                                               + GMTR_T_var(ijm1  ,k0,l,TJ,W2) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             393     3                                               + GMTR_T_var(ij    ,k0,l,TI,W2) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             394     3                                               + GMTR_T_var(ij    ,k0,l,TI,W2) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             395     3                                             ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             396     3                            ! ip1jp1
             397     3   p    v                   cgrad(2,n,l,m) = ( + GMTR_T_var(ij    ,k0,l,TI,W3) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             398     3                                               + GMTR_T_var(ij    ,k0,l,TI,W3) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             399     3                                               + GMTR_T_var(ij    ,k0,l,TJ,W2) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             400     3                                               + GMTR_T_var(ij    ,k0,l,TJ,W2) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             401     3                                             ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             402     3                            ! ijp1
             403     3   p    v                   cgrad(3,n,l,m) = ( + GMTR_T_var(ij    ,k0,l,TJ,W3) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             404     3                                               + GMTR_T_var(ij    ,k0,l,TJ,W3) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             405     3                                               + GMTR_T_var(im1j  ,k0,l,TI,W3) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             406     3                                               - GMTR_T_var(im1j  ,k0,l,TI,W3) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             407     3                                             ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             408     3                            ! im1j
             409     3   p    v                   cgrad(4,n,l,m) = ( + GMTR_T_var(im1j  ,k0,l,TI,W1) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             410     3                                               - GMTR_T_var(im1j  ,k0,l,TI,W1) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             411     3                                               - GMTR_T_var(im1jm1,k0,l,TJ,W3) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             412     3                                               - GMTR_T_var(im1jm1,k0,l,TJ,W3) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             413     3                                             ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             414     3                            ! im1jm1
             415     3   p    v                   cgrad(5,n,l,m) = ( - GMTR_T_var(im1jm1,k0,l,TJ,W1) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             416     3                                               - GMTR_T_var(im1jm1,k0,l,TJ,W1) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             417     3                                               - GMTR_T_var(im1jm1,k0,l,TI,W1) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             418     3                                               - GMTR_T_var(im1jm1,k0,l,TI,W1) * GMTR_A_var(ijm1  ,k0,l,AJ ,md) &
             419     3                                             ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             420     3                            ! ijm1
             421     3   p    v                   cgrad(6,n,l,m) = ( - GMTR_T_var(im1jm1,k0,l,TI,W2) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             422     3                                               - GMTR_T_var(im1jm1,k0,l,TI,W2) * GMTR_A_var(ijm1  ,k0,l,AJ ,md) &
             423     3                                               - GMTR_T_var(ijm1  ,k0,l,TJ,W1) * GMTR_A_var(ijm1  ,k0,l,AJ ,md) &
             424     3                                               + GMTR_T_var(ijm1  ,k0,l,TJ,W1) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             425     3                                             ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             426     3   p    v                enddo
             427     2   p                  enddo
             428     1               
             429     2   p                  if ( ADM_rgn_vnum(ADM_W,rgnid) == 3 ) then ! pentagon
             430     2   p                     n = suf(ADM_gmin,ADM_gmin)
             431     2               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             432     3   p    v                do m = 1, 3
             433     3   p    v                   md = m + GMTR_A_hnx - 1
             434     3               
             435     3   p    v                   ij     = n
             436     3   p    v                   ip1j   = n + 1
             437     3   p    v                   ip1jp1 = n + 1 + ADM_gall_1d
             438     3   p    v                   ijp1   = n     + ADM_gall_1d
             439     3   p    v                   im1j   = n - 1
             440     3   p    v                   im1jm1 = n - 1 - ADM_gall_1d
             441     3   p    v                   ijm1   = n     - ADM_gall_1d
             442     3               
             443     3                            ! ij
             444     3   p    v                   cgrad(0,n,l,m) = ( - GMTR_T_var(ijm1  ,k0,l,TJ,W3) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             445     3                                               + GMTR_T_var(ijm1  ,k0,l,TJ,W3) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             446     3                                               + GMTR_T_var(ij    ,k0,l,TI,W1) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             447     3                                               + GMTR_T_var(ij    ,k0,l,TI,W1) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             448     3                                               + GMTR_T_var(ij    ,k0,l,TJ,W1) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             449     3                                               + GMTR_T_var(ij    ,k0,l,TJ,W1) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             450     3                                               + GMTR_T_var(im1j  ,k0,l,TI,W2) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             451     3                                               - GMTR_T_var(im1j  ,k0,l,TI,W2) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             452     3                                               - GMTR_T_var(im1jm1,k0,l,TJ,W2) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             453     3                                               - GMTR_T_var(im1jm1,k0,l,TJ,W2) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             454     3                                               - 2.D0 * GMTR_A_var(ij    ,k0,l,AI ,md)                          &
             455     3                                               - 2.D0 * GMTR_A_var(ij    ,k0,l,AIJ,md)                          &
             456     3                                               - 2.D0 * GMTR_A_var(ij    ,k0,l,AJ ,md)                          &
             457     3                                               + 2.D0 * GMTR_A_var(im1j  ,k0,l,AI ,md)                          &
             458     3                                               + 2.D0 * GMTR_A_var(im1jm1,k0,l,AIJ,md)                          &
             459     3                                             ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             460     3                            ! ip1j
             461     3   p    v                   cgrad(1,n,l,m) = ( - GMTR_T_var(ijm1  ,k0,l,TJ,W2) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             462     3                                               + GMTR_T_var(ijm1  ,k0,l,TJ,W2) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             463     3                                               + GMTR_T_var(ij    ,k0,l,TI,W2) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             464     3                                               + GMTR_T_var(ij    ,k0,l,TI,W2) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             465     3                                             ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             466     3                            ! ip1jp1
             467     3   p    v                   cgrad(2,n,l,m) = ( + GMTR_T_var(ij    ,k0,l,TI,W3) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             468     3                                               + GMTR_T_var(ij    ,k0,l,TI,W3) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             469     3                                               + GMTR_T_var(ij    ,k0,l,TJ,W2) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             470     3                                               + GMTR_T_var(ij    ,k0,l,TJ,W2) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             471     3                                             ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             472     3                            ! ijp1
             473     3   p    v                   cgrad(3,n,l,m) = ( + GMTR_T_var(ij    ,k0,l,TJ,W3) * GMTR_A_var(ij    ,k0,l,AIJ,md) &
             474     3                                               + GMTR_T_var(ij    ,k0,l,TJ,W3) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             475     3                                               + GMTR_T_var(im1j  ,k0,l,TI,W3) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             476     3                                               - GMTR_T_var(im1j  ,k0,l,TI,W3) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             477     3                                             ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             478     3                            ! im1j
             479     3   p    v                   cgrad(4,n,l,m) = ( + GMTR_T_var(im1j  ,k0,l,TI,W1) * GMTR_A_var(ij    ,k0,l,AJ ,md) &
             480     3                                               - GMTR_T_var(im1j  ,k0,l,TI,W1) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             481     3                                               - GMTR_T_var(im1jm1,k0,l,TJ,W3) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             482     3                                               - GMTR_T_var(im1jm1,k0,l,TJ,W3) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             483     3                                             ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             484     3                            ! im1jm1
             485     3   p    v                   cgrad(5,n,l,m) = ( - GMTR_T_var(im1jm1,k0,l,TJ,W1) * GMTR_A_var(im1j  ,k0,l,AI ,md) &
             486     3                                               - GMTR_T_var(im1jm1,k0,l,TJ,W1) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             487     3                                             ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             488     3                            ! ijm1
             489     3   p    v                   cgrad(6,n,l,m) = ( - GMTR_T_var(ijm1  ,k0,l,TJ,W1) * GMTR_A_var(im1jm1,k0,l,AIJ,md) &
             490     3                                               + GMTR_T_var(ijm1  ,k0,l,TJ,W1) * GMTR_A_var(ij    ,k0,l,AI ,md) &
             491     3                                             ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_rarea)
             492     3   p    v                enddo
             493     2   p                  endif
             494     1   p               enddo
             495                     
             496     1                   if ( ADM_prc_me == ADM_prc_pl ) then
             497     1                      n = ADM_gslf_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             498     2  pp                  do l = 1, ADM_lall_pl
             499     3   p                     do m = 1, 3
             500     3   p                        md = m + GMTR_A_hnx - 1
             501     3               
             502     3   p                        cgrad_pl(0,n,l,m) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             503     4   p   6s                   do v = ADM_gmin_pl, ADM_gmax_pl
             504     4   p   6v                      ij   = v
             505     4   p   6v                      ijp1 = v + 1
             506     4   p   6s                      if( ijp1 > ADM_gmax_pl ) ijp1 = ADM_gmin_pl
             507     4               
             508     4   p   6v                      cgrad_pl(0,n,l,m) = cgrad_pl(0,n,l,m) &
             509     4                                                 + 2.D0 * ( GMTR_T_var_pl(ij,k0,l,W1) - 1.D0 ) * GMTR_A_var_pl(ijp1,k0,l,md)
             510     4   p   6v                   enddo
             511     3   p                        cgrad_pl(0,n,l,m) = cdiv_pl(0,n,l,m) * 0.5D0 * GMTR_P_var_pl(n,k0,l,GMTR_P_rarea)
             512     3               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             513     4   p   4s                   do v = ADM_gmin_pl, ADM_gmax_pl
             514     4   p   4v                      ij   = v
             515     4   p   4v                      ijp1 = v + 1
             516     4   p   4v                      ijm1 = v - 1
             517     4   p   4s                      if( ijp1 == ADM_gmax_pl + 1 ) ijp1 = ADM_gmin_pl
             518     4   p   4m                      if( ijm1 == ADM_gmin_pl - 1 ) ijm1 = ADM_gmax_pl
             519     4               
             520     4   p   4v                      cgrad_pl(v-1,n,l,m) = ( + GMTR_T_var_pl(ijm1,k0,l,W3) * GMTR_A_var_pl(ijm1,k0,l,md) &
             521     4                                                       + GMTR_T_var_pl(ijm1,k0,l,W3) * GMTR_A_var_pl(ij  ,k0,l,md) &
             522     4                                                       + GMTR_T_var_pl(ij  ,k0,l,W2) * GMTR_A_var_pl(ij  ,k0,l,md) &
             523     4                                                       + GMTR_T_var_pl(ij  ,k0,l,W2) * GMTR_A_var_pl(ijp1,k0,l,md) &
             524     4                                                     ) * 0.5D0 * GMTR_P_var_pl(n,k0,l,GMTR_P_rarea)
             525     4   p   4v                   enddo
             526     3   p                     enddo ! loop m
             527     2   p                  enddo ! loop l
             528     1                   endif
             529                     
             530                         ! ---- setup coefficient of laplacian operator
             531                     
             532                         write(ADM_LOG_FID,*) '*** setup coefficient of laplacian operator'
             533                     
             534                         allocate( clap   (0:6,             ADM_gall   ,ADM_lall   ) )
             535                         allocate( clap_pl(0:ADM_vlink_nmax,ADM_gall_pl,ADM_lall_pl) )
             536                     
             537                         a0  = GMTR_T_rarea
             538                         tx1 = GMTR_A_tnx
             539                         ty1 = GMTR_A_tny
             540                         tz1 = GMTR_A_tnz
             541                         hx1 = GMTR_A_hnx
             542                         hy1 = GMTR_A_hny
             543                         hz1 = GMTR_A_hnz
             544                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             545     1  pp               do l = 1, ADM_lall
             546     1   p                  rgnid = ADM_prc_tab(l,ADM_prc_me)
             547     1               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    PREFETCH       : 90
                                   <<<      GMTR_A_var: 80, GMTR_P_var: 2
                                   <<<      GMTR_T_var: 8
                                   <<< Loop-information  End >>>
             548     2   p    v             do n = OPRT_nstart, OPRT_nend
             549     2   p    v                ij     = n
             550     2   p    v                ip1j   = n + 1
             551     2   p    v                ip1jp1 = n + 1 + ADM_gall_1d
             552     2   p    v                ijp1   = n     + ADM_gall_1d
             553     2   p    v                im1j   = n - 1
             554     2   p    v                im1jm1 = n - 1 - ADM_gall_1d
             555     2   p    v                ijm1   = n     - ADM_gall_1d
             556     2               
             557     2                         ! ij
             558     2   p    v                clap(0,ij,l) = ( &
             559     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             560     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             561     2                         +2*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             562     2                         +1*GMTR_A_var(ijm1,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             563     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             564     2                         +2*GMTR_A_var(ijm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             565     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             566     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             567     2                         +2*GMTR_A_var(ip1j,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             568     2                         +1*GMTR_A_var(ijm1,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             569     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             570     2                         +2*GMTR_A_var(ijm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             571     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             572     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             573     2                         +2*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             574     2                         +1*GMTR_A_var(ijm1,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             575     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             576     2                         +2*GMTR_A_var(ijm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             577     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             578     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             579     2                         +2*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             580     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             581     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             582     2                         -2*GMTR_A_var(ijp1,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             583     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             584     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             585     2                         +2*GMTR_A_var(ip1j,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             586     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             587     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             588     2                         -2*GMTR_A_var(ijp1,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             589     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             590     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             591     2                         +2*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             592     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             593     2                         -2*GMTR_A_var(ijp1,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             594     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             595     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             596     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             597     2                         -2*GMTR_A_var(ijp1,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             598     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             599     2                         -1*GMTR_A_var(im1j,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             600     2                         -2*GMTR_A_var(im1j,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             601     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             602     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             603     2                         -2*GMTR_A_var(ijp1,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             604     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             605     2                         -1*GMTR_A_var(im1j,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             606     2                         -2*GMTR_A_var(im1j,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             607     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             608     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             609     2                         -2*GMTR_A_var(ijp1,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             610     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             611     2                         -1*GMTR_A_var(im1j,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             612     2                         -2*GMTR_A_var(im1j,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             613     2                     )*GMTR_P_var(ij,k0,l,GMTR_P_rarea)/12.0d0
             614     2               
             615     2   p    v                clap(0,ij,l) = clap(0,ij,l) + ( &
             616     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             617     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             618     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             619     2                      +1*GMTR_A_var(ij    ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             620     2                      +1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             621     2                      +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             622     2                      +1*GMTR_A_var(ij    ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             623     2                      +1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             624     2                      +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             625     2                      +1*GMTR_A_var(ij    ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             626     2                      +1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             627     2                      +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             628     2                      +2*GMTR_A_var(im1j  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             629     2                      +2*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             630     2                      +2*GMTR_A_var(im1j  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             631     2                      +2*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             632     2                      +2*GMTR_A_var(im1j  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             633     2                      +2*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             634     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
             635     2                     -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
             636     2                     -2*GMTR_A_var(im1jm1,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
             637     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
             638     2                     -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
             639     2                     -2*GMTR_A_var(im1jm1,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
             640     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
             641     2                     -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
             642     2                     -2*GMTR_A_var(im1jm1,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
             643     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
             644     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
             645     2                     +2*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
             646     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
             647     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
             648     2                     +2*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
             649     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
             650     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
             651     2                     +2*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
             652     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hx1) &
             653     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hy1) &
             654     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hz1) &
             655     2                     -1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hx1) &
             656     2                     -1*GMTR_A_var(ij    ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hx1) &
             657     2                     -2*GMTR_A_var(ijm1  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hx1) &
             658     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hx1) &
             659     2                     -2*GMTR_A_var(im1jm1,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hx1) &
             660     2                     -1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hy1) &
             661     2                     -1*GMTR_A_var(ij    ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hy1) &
             662     2                     -2*GMTR_A_var(ijm1  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hy1) &
             663     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hy1) &
             664     2                     -2*GMTR_A_var(im1jm1,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hy1) &
             665     2                     -1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hz1) &
             666     2                     -1*GMTR_A_var(ij    ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hz1) &
             667     2                     -2*GMTR_A_var(ijm1  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hz1) &
             668     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hz1) &
             669     2                     -2*GMTR_A_var(im1jm1,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hz1) &
             670     2                     )*GMTR_P_var(ij,k0,l,GMTR_P_rarea)/12.0d0
             671     2               
             672     2                         ! ip1j
             673     2   p    v                clap(1,ij,l) = ( &
             674     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             675     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             676     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             677     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             678     2                         -1*GMTR_A_var(ijm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             679     2                         -2*GMTR_A_var(ijm1,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             680     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             681     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             682     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             683     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             684     2                         -1*GMTR_A_var(ijm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             685     2                         -2*GMTR_A_var(ijm1,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             686     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             687     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             688     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             689     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             690     2                         -1*GMTR_A_var(ijm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             691     2                         -2*GMTR_A_var(ijm1,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             692     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             693     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             694     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             695     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             696     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             697     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             698     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             699     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             700     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             701     2                     -1*GMTR_A_var(ij    ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hx1) &
             702     2                     -1*GMTR_A_var(ij    ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hy1) &
             703     2                     -1*GMTR_A_var(ij    ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hz1) &
             704     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hx1) &
             705     2                     +2*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hx1) &
             706     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hy1) &
             707     2                     +2*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hy1) &
             708     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hz1) &
             709     2                     +2*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hz1) &
             710     2                     )*GMTR_P_var(ij,k0,l,GMTR_P_rarea)/12.0d0
             711     2               
             712     2                         ! ip1jp1
             713     2   p    v                clap(2,ij,l) = ( &
             714     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             715     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             716     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             717     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             718     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             719     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             720     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             721     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             722     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             723     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             724     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             725     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             726     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             727     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             728     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             729     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             730     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             731     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             732     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             733     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             734     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             735     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             736     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             737     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             738     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             739     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             740     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             741     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             742     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             743     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             744     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             745     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             746     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             747     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             748     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             749     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             750     2                     )*GMTR_P_var(ij,k0,l,GMTR_P_rarea)/12.0d0
             751     2               
             752     2                         ! ijp1
             753     2   p    v                clap(3,ij,l) = ( &
             754     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             755     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             756     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             757     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             758     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             759     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             760     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             761     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             762     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             763     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             764     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             765     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             766     2                         +1*GMTR_A_var(im1j,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             767     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             768     2                         +2*GMTR_A_var(im1j,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             769     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             770     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             771     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             772     2                         +1*GMTR_A_var(im1j,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             773     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             774     2                         +2*GMTR_A_var(im1j,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             775     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             776     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             777     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             778     2                         +1*GMTR_A_var(im1j,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             779     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             780     2                         +2*GMTR_A_var(im1j,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             781     2                      +1*GMTR_A_var(ij    ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             782     2                      +1*GMTR_A_var(ij    ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             783     2                      +1*GMTR_A_var(ij    ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             784     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             785     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             786     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             787     2                      -2*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             788     2                      -2*GMTR_A_var(im1j  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             789     2                      -2*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             790     2                     )*GMTR_P_var(ij,k0,l,GMTR_P_rarea)/12.0d0
             791     2               
             792     2                         ! im1j
             793     2   p    v                clap(4,ij,l) = ( &
             794     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             795     2                         +1*GMTR_A_var(im1j,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             796     2                         -1*GMTR_A_var(im1j,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             797     2                         +1*GMTR_A_var(im1j,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             798     2                         -1*GMTR_A_var(im1j,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             799     2                         +1*GMTR_A_var(im1j,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             800     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             801     2                         -1*GMTR_A_var(im1j,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             802     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             803     2                      +1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             804     2                      +1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             805     2                      +1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             806     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             807     2                      -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             808     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             809     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             810     2                      -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             811     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             812     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             813     2                      -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             814     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             815     2                      -2*GMTR_A_var(ij    ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             816     2                      -2*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             817     2                      -2*GMTR_A_var(ij    ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             818     2                      -2*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             819     2                      -2*GMTR_A_var(ij    ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             820     2                      -2*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             821     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
             822     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
             823     2                     -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
             824     2                     -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
             825     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
             826     2                     -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
             827     2                     -2*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
             828     2                     -2*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
             829     2                     -2*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
             830     2                     )*GMTR_P_var(ij,k0,l,GMTR_P_rarea)/12.0d0
             831     2               
             832     2                         ! im1jm1
             833     2   p    v                clap(5,ij,l) = ( &
             834     2                      -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             835     2                      -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             836     2                      -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             837     2                      +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             838     2                      +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             839     2                      +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             840     2                      +2*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             841     2                      +2*GMTR_A_var(im1j  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             842     2                      +2*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             843     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
             844     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
             845     2                     -2*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
             846     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
             847     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
             848     2                     -2*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
             849     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
             850     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
             851     2                     -2*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
             852     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
             853     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
             854     2                     +2*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
             855     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
             856     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
             857     2                     +2*GMTR_A_var(im1j  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
             858     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
             859     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
             860     2                     +2*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
             861     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hx1) &
             862     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hy1) &
             863     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hz1) &
             864     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hx1) &
             865     2                     -2*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hx1) &
             866     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hy1) &
             867     2                     -2*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hy1) &
             868     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hz1) &
             869     2                     -2*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hz1) &
             870     2                     )*GMTR_P_var(ij,k0,l,GMTR_P_rarea)/12.0d0
             871     2               
             872     2                         ! ijm1
             873     2   p    v                clap(6,ij,l) = ( &
             874     2                         -1*GMTR_A_var(ijm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             875     2                         +1*GMTR_A_var(ijm1,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             876     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             877     2                         -1*GMTR_A_var(ijm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             878     2                         +1*GMTR_A_var(ijm1,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             879     2                         -1*GMTR_A_var(ijm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             880     2                         +1*GMTR_A_var(ijm1,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             881     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             882     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             883     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
             884     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
             885     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
             886     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
             887     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
             888     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
             889     2                     +2*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
             890     2                     +2*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
             891     2                     +2*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
             892     2                     -1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hx1) &
             893     2                     -1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hy1) &
             894     2                     -1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hz1) &
             895     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hx1) &
             896     2                     +2*GMTR_A_var(ij    ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hx1) &
             897     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hx1) &
             898     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hx1) &
             899     2                     +2*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hx1) &
             900     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hy1) &
             901     2                     +2*GMTR_A_var(ij    ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hy1) &
             902     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hy1) &
             903     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hy1) &
             904     2                     +2*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hy1) &
             905     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hz1) &
             906     2                     +2*GMTR_A_var(ij    ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hz1) &
             907     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hz1) &
             908     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hz1) &
             909     2                     +2*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TI,a0)*GMTR_A_var(ijm1,k0,l,ADM_AJ,hz1) &
             910     2                     )*GMTR_P_var(ij,k0,l,GMTR_P_rarea)/12.0d0
             911     2               
             912     2   p    v             enddo
             913     1               
             914     2   p                  if ( ADM_rgn_vnum(ADM_W,rgnid) == 3 ) then ! pentagon
             915     2   p                     n = suf(ADM_gmin,ADM_gmin)
             916     2               
             917     2   p                     ij     = n
             918     2   p                     ip1j   = n + 1
             919     2   p                     ip1jp1 = n + 1 + ADM_gall_1d
             920     2   p                     ijp1   = n     + ADM_gall_1d
             921     2   p                     im1j   = n - 1
             922     2   p                     im1jm1 = n - 1 - ADM_gall_1d
             923     2   p                     ijm1   = n     - ADM_gall_1d
             924     2               
             925     2                         ! 0: ij
             926     2   p                     clap(0,ij,l) = ( &
             927     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             928     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             929     2                         +2*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             930     2                         +1*GMTR_A_var(ijm1,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             931     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             932     2                         +2*GMTR_A_var(ijm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
             933     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             934     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             935     2                         +2*GMTR_A_var(ip1j,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             936     2                         +1*GMTR_A_var(ijm1,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             937     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             938     2                         +2*GMTR_A_var(ijm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
             939     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             940     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             941     2                         +2*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             942     2                         +1*GMTR_A_var(ijm1,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             943     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             944     2                         +2*GMTR_A_var(ijm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
             945     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             946     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             947     2                         +2*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             948     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             949     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             950     2                         -2*GMTR_A_var(ijp1,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
             951     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             952     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             953     2                         +2*GMTR_A_var(ip1j,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             954     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             955     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             956     2                         -2*GMTR_A_var(ijp1,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
             957     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             958     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             959     2                         +2*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             960     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             961     2                         -2*GMTR_A_var(ijp1,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             962     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
             963     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             964     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             965     2                         -2*GMTR_A_var(ijp1,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             966     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             967     2                         -1*GMTR_A_var(im1j,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             968     2                         -2*GMTR_A_var(im1j,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
             969     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             970     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             971     2                         -2*GMTR_A_var(ijp1,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             972     2                     )*GMTR_P_var(ij,k0,l,GMTR_P_rarea)/12.0d0  ! Y.Niwa add 06/08/22
             973     2               
             974     2   p                     clap(0,ij,l) = clap(0,ij,l) + ( &
             975     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             976     2                         -1*GMTR_A_var(im1j,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             977     2                         -2*GMTR_A_var(im1j,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
             978     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             979     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             980     2                         -2*GMTR_A_var(ijp1,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             981     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             982     2                         -1*GMTR_A_var(im1j,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             983     2                         -2*GMTR_A_var(im1j,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
             984     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             985     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             986     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             987     2                      +1*GMTR_A_var(ij    ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             988     2                      +1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             989     2                      +2*GMTR_A_var(im1j  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             990     2                      +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             991     2                      +2*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
             992     2                      +1*GMTR_A_var(ij    ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             993     2                      +1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             994     2                      +2*GMTR_A_var(im1j  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             995     2                      +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             996     2                      +2*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
             997     2                      +1*GMTR_A_var(ij    ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             998     2                      +1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
             999     2                      +2*GMTR_A_var(im1j  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
            1000     2                      +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
            1001     2                      +2*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
            1002     2                     -1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
            1003     2                     -1*GMTR_A_var(ij    ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
            1004     2                     -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
            1005     2                     -1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
            1006     2                     -1*GMTR_A_var(ij    ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
            1007     2                     -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
            1008     2                     -1*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
            1009     2                     -1*GMTR_A_var(ij    ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
            1010     2                     -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
            1011     2                     -2*GMTR_A_var(ijm1  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
            1012     2                     -2*GMTR_A_var(ijm1  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
            1013     2                     -2*GMTR_A_var(ijm1  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
            1014     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
            1015     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
            1016     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
            1017     2                     +2*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
            1018     2                     +2*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
            1019     2                     +2*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
            1020     2                     )*GMTR_P_var(ij,k0,l,GMTR_P_rarea)/12.0d0
            1021     2               
            1022     2                         ! ip1j
            1023     2   p                     clap(1,ij,l) = ( &
            1024     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
            1025     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
            1026     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
            1027     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
            1028     2                         -1*GMTR_A_var(ijm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
            1029     2                         -2*GMTR_A_var(ijm1,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
            1030     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
            1031     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
            1032     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
            1033     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
            1034     2                         -1*GMTR_A_var(ijm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
            1035     2                         -2*GMTR_A_var(ijm1,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
            1036     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
            1037     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
            1038     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
            1039     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
            1040     2                         -1*GMTR_A_var(ijm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
            1041     2                         -2*GMTR_A_var(ijm1,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
            1042     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
            1043     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
            1044     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
            1045     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
            1046     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
            1047     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
            1048     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
            1049     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
            1050     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
            1051     2                     -1*GMTR_A_var(ij    ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
            1052     2                     -1*GMTR_A_var(ij    ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
            1053     2                     -1*GMTR_A_var(ij    ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
            1054     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
            1055     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
            1056     2                     +1*GMTR_A_var(ijm1  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
            1057     2                     +2*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
            1058     2                     +2*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
            1059     2                     +2*GMTR_A_var(ijm1  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ijm1  ,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
            1060     2                     )*GMTR_P_var(ij,k0,l,GMTR_P_rarea)/12.0d0
            1061     2               
            1062     2                         ! ip1jp1
            1063     2   p                     clap(2,ij,l) = ( &
            1064     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
            1065     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
            1066     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
            1067     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
            1068     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
            1069     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
            1070     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
            1071     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
            1072     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
            1073     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
            1074     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
            1075     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
            1076     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
            1077     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
            1078     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
            1079     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
            1080     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
            1081     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
            1082     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
            1083     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
            1084     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
            1085     2                         -1*GMTR_A_var(ip1j,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
            1086     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
            1087     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
            1088     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
            1089     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
            1090     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
            1091     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
            1092     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
            1093     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
            1094     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
            1095     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
            1096     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
            1097     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
            1098     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
            1099     2                         -2*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
            1100     2                     )*GMTR_P_var(ij,k0,l,GMTR_P_rarea)/12.0d0
            1101     2               
            1102     2                         ! ijp1
            1103     2   p                     clap(3,ij,l) = ( &
            1104     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
            1105     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
            1106     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hx1) &
            1107     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
            1108     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
            1109     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
            1110     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hy1) &
            1111     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
            1112     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AIJ,hz1) &
            1113     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
            1114     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
            1115     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
            1116     2                         +1*GMTR_A_var(im1j,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
            1117     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
            1118     2                         +2*GMTR_A_var(im1j,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
            1119     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
            1120     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
            1121     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
            1122     2                         +1*GMTR_A_var(im1j,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
            1123     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
            1124     2                         +2*GMTR_A_var(im1j,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
            1125     2                         +1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
            1126     2                         +1*GMTR_A_var(ijp1,k0,l,ADM_AI ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
            1127     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ij  ,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
            1128     2                         +1*GMTR_A_var(im1j,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
            1129     2                         -1*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
            1130     2                         +2*GMTR_A_var(im1j,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
            1131     2                      +1*GMTR_A_var(ij    ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
            1132     2                      +1*GMTR_A_var(ij    ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
            1133     2                      +1*GMTR_A_var(ij    ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
            1134     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
            1135     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
            1136     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
            1137     2                      -2*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
            1138     2                      -2*GMTR_A_var(im1j  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
            1139     2                      -2*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
            1140     2                     )*GMTR_P_var(ij,k0,l,GMTR_P_rarea)/12.0d0
            1141     2               
            1142     2                         ! im1j
            1143     2   p                     clap(4,ij,l) = ( &
            1144     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
            1145     2                         +1*GMTR_A_var(im1j,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
            1146     2                         -1*GMTR_A_var(im1j,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hx1) &
            1147     2                         +1*GMTR_A_var(im1j,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
            1148     2                         -1*GMTR_A_var(im1j,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
            1149     2                         +1*GMTR_A_var(im1j,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
            1150     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hy1) &
            1151     2                         -1*GMTR_A_var(im1j,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
            1152     2                         +2*GMTR_A_var(ij  ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1j,k0,l,ADM_TI,a0)*GMTR_A_var(ij,k0,l,ADM_AJ,hz1) &
            1153     2                      +1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
            1154     2                      +1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
            1155     2                      +1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
            1156     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
            1157     2                      -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
            1158     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
            1159     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
            1160     2                      -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
            1161     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
            1162     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
            1163     2                      -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
            1164     2                      -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
            1165     2                      -2*GMTR_A_var(ij    ,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
            1166     2                      -2*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
            1167     2                      -2*GMTR_A_var(ij    ,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
            1168     2                      -2*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
            1169     2                      -2*GMTR_A_var(ij    ,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1j  ,k0,l,ADM_TI,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
            1170     2                      -2*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
            1171     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
            1172     2                     -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
            1173     2                     -2*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
            1174     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
            1175     2                     -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
            1176     2                     -2*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
            1177     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
            1178     2                     -1*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
            1179     2                     -2*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
            1180     2                     )*GMTR_P_var(ij,k0,l,GMTR_P_rarea)/12.0d0
            1181     2               
            1182     2                         ! im1jm1
            1183     2   p                     clap(5,ij,l) = ( &
            1184     2                      -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
            1185     2                      -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
            1186     2                      -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
            1187     2                      +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
            1188     2                      +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
            1189     2                      +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
            1190     2                      +2*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hx1) &
            1191     2                      +2*GMTR_A_var(im1j  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hy1) &
            1192     2                      +2*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1j,k0,l,ADM_AI,hz1) &
            1193     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
            1194     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
            1195     2                     -1*GMTR_A_var(im1jm1,k0,l,ADM_AJ ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
            1196     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
            1197     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
            1198     2                     +1*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
            1199     2                     +2*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
            1200     2                     +2*GMTR_A_var(im1j  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
            1201     2                     +2*GMTR_A_var(im1j  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(im1jm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
            1202     2                     )*GMTR_P_var(ij,k0,l,GMTR_P_rarea)/12.0d0
            1203     2               
            1204     2                         ! ijm1
            1205     2   p                     clap(6,ij,l) = ( &
            1206     2                     -1*GMTR_A_var(ijm1,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
            1207     2                     -1*GMTR_A_var(ijm1,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
            1208     2                     -1*GMTR_A_var(ijm1,k0,l,ADM_AJ ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
            1209     2                     +1*GMTR_A_var(ijm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
            1210     2                     +1*GMTR_A_var(ijm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
            1211     2                     +1*GMTR_A_var(ijm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
            1212     2                     +2*GMTR_A_var(ij  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hx1) &
            1213     2                     +2*GMTR_A_var(ij  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hy1) &
            1214     2                     +2*GMTR_A_var(ij  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(im1jm1,k0,l,ADM_AIJ,hz1) &
            1215     2                     -1*GMTR_A_var(ijm1,k0,l,ADM_AIJ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
            1216     2                     +1*GMTR_A_var(ijm1,k0,l,ADM_AJ ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
            1217     2                     -2*GMTR_A_var(ij  ,k0,l,ADM_AI ,tx1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hx1) &
            1218     2                     -1*GMTR_A_var(ijm1,k0,l,ADM_AIJ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
            1219     2                     +1*GMTR_A_var(ijm1,k0,l,ADM_AJ ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
            1220     2                     -1*GMTR_A_var(ijm1,k0,l,ADM_AIJ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
            1221     2                     +1*GMTR_A_var(ijm1,k0,l,ADM_AJ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
            1222     2                     -2*GMTR_A_var(ij  ,k0,l,ADM_AI ,tz1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hz1) &
            1223     2                     -2*GMTR_A_var(ij  ,k0,l,ADM_AI ,ty1)*GMTR_T_var(ijm1,k0,l,ADM_TJ,a0)*GMTR_A_var(ij,k0,l,ADM_AI,hy1) &
            1224     2                        )*GMTR_P_var(ij,k0,l,GMTR_P_rarea)/12.0d0
            1225     2               
            1226     2   p                 endif
            1227     1   p               enddo
            1228                     
            1229     1                   if ( ADM_prc_me == ADM_prc_pl ) then
            1230     1               
            1231     1                     n =ADM_gslf_pl
            1232     1                     n0=ADM_gmin_pl
            1233     1                     n1=ADM_gmin_pl+1
            1234     1                     n2=ADM_gmin_pl+2
            1235     1                     n3=ADM_gmin_pl+3
            1236     1                     n4=ADM_gmin_pl+4
            1237     1                     k0=ADM_KNONE
            1238     1                     a0=GMTR_T_rarea
            1239     1                     tx1=gMtr_a_tnx
            1240     1                     tx2=GMTR_A_tn2x
            1241     1                     ty1=GMTR_A_tny
            1242     1                     ty2=GMTR_A_tn2y
            1243     1                     tz1=GMTR_A_tnz
            1244     1                     tz2=GMTR_A_tn2z
            1245     1                     hx1=GMTR_A_hnx
            1246     1                     hy1=GMTR_A_hny
            1247     1                     hz1=GMTR_A_hnz
            1248     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 20
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1249     2  pp    v            do l = 1,ADM_lall_pl
            1250     2   p    v                clap_pl(0,n,l)=( &
            1251     2                                      +1*GMTR_A_var_pl(n4,k0,l,tx1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hx1) &
            1252     2                                      -2*GMTR_A_var_pl(n4,k0,l,tx2)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hx1) &
            1253     2                                      -1*GMTR_A_var_pl(n0,k0,l,tx1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hx1) &
            1254     2                                      +1*GMTR_A_var_pl(n0,k0,l,tx1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hx1) &
            1255     2                                      -2*GMTR_A_var_pl(n0,k0,l,tx2)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hx1) &
            1256     2                                      -1*GMTR_A_var_pl(n1,k0,l,tx1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hx1) &
            1257     2                                      +1*GMTR_A_var_pl(n4,k0,l,ty1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hy1) &
            1258     2                                      -2*GMTR_A_var_pl(n4,k0,l,ty2)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hy1) &
            1259     2                                      -1*GMTR_A_var_pl(n0,k0,l,ty1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hy1) &
            1260     2                                      +1*GMTR_A_var_pl(n0,k0,l,ty1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hy1) &
            1261     2                                      -2*GMTR_A_var_pl(n0,k0,l,ty2)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hy1) &
            1262     2                                      -1*GMTR_A_var_pl(n1,k0,l,ty1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hy1) &
            1263     2                                      +1*GMTR_A_var_pl(n4,k0,l,tz1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hz1) &
            1264     2                                      -2*GMTR_A_var_pl(n4,k0,l,tz2)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hz1) &
            1265     2                                      -1*GMTR_A_var_pl(n0,k0,l,tz1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hz1) &
            1266     2                                      +1*GMTR_A_var_pl(n0,k0,l,tz1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hz1) &
            1267     2                                      -2*GMTR_A_var_pl(n0,k0,l,tz2)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hz1) &
            1268     2                                      -1*GMTR_A_var_pl(n1,k0,l,tz1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hz1) &
            1269     2                                      +1*GMTR_A_var_pl(n0,k0,l,tx1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hx1) &
            1270     2                                      -2*GMTR_A_var_pl(n0,k0,l,tx2)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hx1) &
            1271     2                                      -1*GMTR_A_var_pl(n1,k0,l,tx1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hx1) &
            1272     2                                      +1*GMTR_A_var_pl(n1,k0,l,tx1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hx1) &
            1273     2                                      -2*GMTR_A_var_pl(n1,k0,l,tx2)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hx1) &
            1274     2                                      -1*GMTR_A_var_pl(n2,k0,l,tx1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hx1) &
            1275     2                                      +1*GMTR_A_var_pl(n0,k0,l,ty1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hy1) &
            1276     2                                      -2*GMTR_A_var_pl(n0,k0,l,ty2)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hy1) &
            1277     2                                      -1*GMTR_A_var_pl(n1,k0,l,ty1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hy1) &
            1278     2                                      +1*GMTR_A_var_pl(n1,k0,l,ty1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hy1) &
            1279     2                                      -2*GMTR_A_var_pl(n1,k0,l,ty2)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hy1) &
            1280     2                                      -1*GMTR_A_var_pl(n2,k0,l,ty1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hy1) &
            1281     2                                      +1*GMTR_A_var_pl(n0,k0,l,tz1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hz1) &
            1282     2                                      -2*GMTR_A_var_pl(n0,k0,l,tz2)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hz1) &
            1283     2                                      -1*GMTR_A_var_pl(n1,k0,l,tz1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hz1) &
            1284     2                                      +1*GMTR_A_var_pl(n1,k0,l,tz1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hz1) &
            1285     2                                      -2*GMTR_A_var_pl(n1,k0,l,tz2)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hz1) &
            1286     2                                      -1*GMTR_A_var_pl(n2,k0,l,tz1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hz1) &
            1287     2                                      +1*GMTR_A_var_pl(n1,k0,l,tx1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hx1) &
            1288     2                                      -2*GMTR_A_var_pl(n1,k0,l,tx2)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hx1) &
            1289     2                                      -1*GMTR_A_var_pl(n2,k0,l,tx1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hx1) &
            1290     2                                      +1*GMTR_A_var_pl(n2,k0,l,tx1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hx1) &
            1291     2                                      -2*GMTR_A_var_pl(n2,k0,l,tx2)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hx1) &
            1292     2                                      -1*GMTR_A_var_pl(n3,k0,l,tx1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hx1) &
            1293     2                                      +1*GMTR_A_var_pl(n1,k0,l,ty1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hy1) &
            1294     2                                      -2*GMTR_A_var_pl(n1,k0,l,ty2)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hy1) &
            1295     2                                      -1*GMTR_A_var_pl(n2,k0,l,ty1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hy1) &
            1296     2                                     )*GMTR_P_var_pl(n,k0,l,GMTR_P_rarea)/12.0d0   ! Y.Niwa add 060822
            1297     2               
            1298     2   p    v                clap_pl(0,n,l)= clap_pl(0,n,l) + ( &                        ! Y.Niwa add 060822
            1299     2                                      +1*GMTR_A_var_pl(n2,k0,l,ty1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hy1) &
            1300     2                                      -2*GMTR_A_var_pl(n2,k0,l,ty2)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hy1) &
            1301     2                                      -1*GMTR_A_var_pl(n3,k0,l,ty1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hy1) &
            1302     2                                      +1*GMTR_A_var_pl(n1,k0,l,tz1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hz1) &
            1303     2                                      -2*GMTR_A_var_pl(n1,k0,l,tz2)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hz1) &
            1304     2                                      -1*GMTR_A_var_pl(n2,k0,l,tz1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hz1) &
            1305     2                                      +1*GMTR_A_var_pl(n2,k0,l,tz1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hz1) &
            1306     2                                      -2*GMTR_A_var_pl(n2,k0,l,tz2)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hz1) &
            1307     2                                      -1*GMTR_A_var_pl(n3,k0,l,tz1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hz1) &
            1308     2                                      +1*GMTR_A_var_pl(n2,k0,l,tx1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hx1) &
            1309     2                                      -2*GMTR_A_var_pl(n2,k0,l,tx2)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hx1) &
            1310     2                                      -1*GMTR_A_var_pl(n3,k0,l,tx1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hx1) &
            1311     2                                      +1*GMTR_A_var_pl(n3,k0,l,tx1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hx1) &
            1312     2                                      -2*GMTR_A_var_pl(n3,k0,l,tx2)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hx1) &
            1313     2                                      -1*GMTR_A_var_pl(n4,k0,l,tx1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hx1) &
            1314     2                                      +1*GMTR_A_var_pl(n2,k0,l,ty1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hy1) &
            1315     2                                      -2*GMTR_A_var_pl(n2,k0,l,ty2)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hy1) &
            1316     2                                      -1*GMTR_A_var_pl(n3,k0,l,ty1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hy1) &
            1317     2                                      +1*GMTR_A_var_pl(n3,k0,l,ty1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hy1) &
            1318     2                                      -2*GMTR_A_var_pl(n3,k0,l,ty2)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hy1) &
            1319     2                                      -1*GMTR_A_var_pl(n4,k0,l,ty1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hy1) &
            1320     2                                      +1*GMTR_A_var_pl(n2,k0,l,tz1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hz1) &
            1321     2                                      -2*GMTR_A_var_pl(n2,k0,l,tz2)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hz1) &
            1322     2                                      -1*GMTR_A_var_pl(n3,k0,l,tz1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hz1) &
            1323     2                                      +1*GMTR_A_var_pl(n3,k0,l,tz1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hz1) &
            1324     2                                      -2*GMTR_A_var_pl(n3,k0,l,tz2)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hz1) &
            1325     2                                      -1*GMTR_A_var_pl(n4,k0,l,tz1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hz1) &
            1326     2                                      +1*GMTR_A_var_pl(n3,k0,l,tx1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hx1) &
            1327     2                                      -2*GMTR_A_var_pl(n3,k0,l,tx2)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hx1) &
            1328     2                                      -1*GMTR_A_var_pl(n4,k0,l,tx1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hx1) &
            1329     2                                      +1*GMTR_A_var_pl(n4,k0,l,tx1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hx1) &
            1330     2                                      -2*GMTR_A_var_pl(n4,k0,l,tx2)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hx1) &
            1331     2                                      -1*GMTR_A_var_pl(n0,k0,l,tx1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hx1) &
            1332     2                                      +1*GMTR_A_var_pl(n3,k0,l,ty1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hy1) &
            1333     2                                      -2*GMTR_A_var_pl(n3,k0,l,ty2)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hy1) &
            1334     2                                      -1*GMTR_A_var_pl(n4,k0,l,ty1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hy1) &
            1335     2                                      +1*GMTR_A_var_pl(n4,k0,l,ty1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hy1) &
            1336     2                                      -2*GMTR_A_var_pl(n4,k0,l,ty2)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hy1) &
            1337     2                                      -1*GMTR_A_var_pl(n0,k0,l,ty1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hy1) &
            1338     2                                      +1*GMTR_A_var_pl(n3,k0,l,tz1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hz1) &
            1339     2                                      -2*GMTR_A_var_pl(n3,k0,l,tz2)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hz1) &
            1340     2                                      -1*GMTR_A_var_pl(n4,k0,l,tz1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hz1) &
            1341     2                                      +1*GMTR_A_var_pl(n4,k0,l,tz1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hz1) &
            1342     2                                      -2*GMTR_A_var_pl(n4,k0,l,tz2)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hz1) &
            1343     2                                      -1*GMTR_A_var_pl(n0,k0,l,tz1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hz1) &
            1344     2                                     )*GMTR_P_var_pl(n,k0,l,GMTR_P_rarea)/12.0d0
            1345     2                         !
            1346     2                         ! n0
            1347     2   p    v                clap_pl(1,n,l)=( &
            1348     2                                      +1*GMTR_A_var_pl(n0,k0,l,tx2)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hx1) &
            1349     2                                      -2*GMTR_A_var_pl(n4,k0,l,tx1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hx1) &
            1350     2                                      -1*GMTR_A_var_pl(n0,k0,l,tx1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hx1) &
            1351     2                                      +1*GMTR_A_var_pl(n4,k0,l,tx2)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hx1) &
            1352     2                                      +1*GMTR_A_var_pl(n0,k0,l,tx1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hx1) &
            1353     2                                      +2*GMTR_A_var_pl(n1,k0,l,tx1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hx1) &
            1354     2                                      +1*GMTR_A_var_pl(n0,k0,l,ty2)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hy1) &
            1355     2                                      -2*GMTR_A_var_pl(n4,k0,l,ty1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hy1) &
            1356     2                                      -1*GMTR_A_var_pl(n0,k0,l,ty1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hy1) &
            1357     2                                      +1*GMTR_A_var_pl(n4,k0,l,ty2)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hy1) &
            1358     2                                      +1*GMTR_A_var_pl(n0,k0,l,ty1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hy1) &
            1359     2                                      +2*GMTR_A_var_pl(n1,k0,l,ty1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hy1) &
            1360     2                                      +1*GMTR_A_var_pl(n0,k0,l,tz2)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hz1) &
            1361     2                                      -2*GMTR_A_var_pl(n4,k0,l,tz1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hz1) &
            1362     2                                      -1*GMTR_A_var_pl(n0,k0,l,tz1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hz1) &
            1363     2                                      +1*GMTR_A_var_pl(n4,k0,l,tz2)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hz1) &
            1364     2                                      +1*GMTR_A_var_pl(n0,k0,l,tz1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hz1) &
            1365     2                                      +2*GMTR_A_var_pl(n1,k0,l,tz1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hz1) &
            1366     2                                      +1*GMTR_A_var_pl(n0,k0,l,tx1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hx1) &
            1367     2                                      +1*GMTR_A_var_pl(n0,k0,l,tx2)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hx1) &
            1368     2                                      +2*GMTR_A_var_pl(n1,k0,l,tx1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hx1) &
            1369     2                                      +1*GMTR_A_var_pl(n0,k0,l,ty1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hy1) &
            1370     2                                      +1*GMTR_A_var_pl(n0,k0,l,ty2)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hy1) &
            1371     2                                      +2*GMTR_A_var_pl(n1,k0,l,ty1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hy1) &
            1372     2                                      +1*GMTR_A_var_pl(n0,k0,l,tz1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hz1) &
            1373     2                                      +1*GMTR_A_var_pl(n0,k0,l,tz2)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hz1) &
            1374     2                                      +2*GMTR_A_var_pl(n1,k0,l,tz1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hz1) &
            1375     2                                      +1*GMTR_A_var_pl(n4,k0,l,tx2)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hx1) &
            1376     2                                      -2*GMTR_A_var_pl(n4,k0,l,tx1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hx1) &
            1377     2                                      -1*GMTR_A_var_pl(n0,k0,l,tx1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hx1) &
            1378     2                                      +1*GMTR_A_var_pl(n4,k0,l,ty2)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hy1) &
            1379     2                                      -2*GMTR_A_var_pl(n4,k0,l,ty1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hy1) &
            1380     2                                      -1*GMTR_A_var_pl(n0,k0,l,ty1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hy1) &
            1381     2                                      +1*GMTR_A_var_pl(n4,k0,l,tz2)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hz1) &
            1382     2                                      -2*GMTR_A_var_pl(n4,k0,l,tz1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hz1) &
            1383     2                                      -1*GMTR_A_var_pl(n0,k0,l,tz1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hz1) &
            1384     2                                     )*GMTR_P_var_pl(n,k0,l,GMTR_P_rarea)/12.0d0
            1385     2                         !
            1386     2                         ! n1
            1387     2   p    v                clap_pl(2,n,l)=( &
            1388     2                                      +1*GMTR_A_var_pl(n0,k0,l,tx2)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hx1) &
            1389     2                                      -2*GMTR_A_var_pl(n0,k0,l,tx1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hx1) &
            1390     2                                      -1*GMTR_A_var_pl(n1,k0,l,tx1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hx1) &
            1391     2                                      +1*GMTR_A_var_pl(n0,k0,l,ty2)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hy1) &
            1392     2                                      -2*GMTR_A_var_pl(n0,k0,l,ty1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hy1) &
            1393     2                                      -1*GMTR_A_var_pl(n1,k0,l,ty1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hy1) &
            1394     2                                      +1*GMTR_A_var_pl(n0,k0,l,tz2)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hz1) &
            1395     2                                      -2*GMTR_A_var_pl(n0,k0,l,tz1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hz1) &
            1396     2                                      -1*GMTR_A_var_pl(n1,k0,l,tz1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hz1) &
            1397     2                                      +1*GMTR_A_var_pl(n0,k0,l,tx2)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hx1) &
            1398     2                                      -2*GMTR_A_var_pl(n0,k0,l,tx1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hx1) &
            1399     2                                      -1*GMTR_A_var_pl(n1,k0,l,tx1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hx1) &
            1400     2                                      +1*GMTR_A_var_pl(n1,k0,l,tx1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hx1) &
            1401     2                                      +1*GMTR_A_var_pl(n1,k0,l,tx2)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hx1) &
            1402     2                                      +2*GMTR_A_var_pl(n2,k0,l,tx1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hx1) &
            1403     2                                      +1*GMTR_A_var_pl(n0,k0,l,ty2)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hy1) &
            1404     2                                      -2*GMTR_A_var_pl(n0,k0,l,ty1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hy1) &
            1405     2                                      -1*GMTR_A_var_pl(n1,k0,l,ty1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hy1) &
            1406     2                                      +1*GMTR_A_var_pl(n1,k0,l,ty1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hy1) &
            1407     2                                      +1*GMTR_A_var_pl(n1,k0,l,ty2)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hy1) &
            1408     2                                      +2*GMTR_A_var_pl(n2,k0,l,ty1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hy1) &
            1409     2                                      +1*GMTR_A_var_pl(n0,k0,l,tz2)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hz1) &
            1410     2                                      -2*GMTR_A_var_pl(n0,k0,l,tz1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hz1) &
            1411     2                                      -1*GMTR_A_var_pl(n1,k0,l,tz1)*GMTR_T_var_pl(n0,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hz1) &
            1412     2                                      +1*GMTR_A_var_pl(n1,k0,l,tz1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hz1) &
            1413     2                                      +1*GMTR_A_var_pl(n1,k0,l,tz2)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hz1) &
            1414     2                                      +2*GMTR_A_var_pl(n2,k0,l,tz1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hz1) &
            1415     2                                      +1*GMTR_A_var_pl(n1,k0,l,tx1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hx1) &
            1416     2                                      +1*GMTR_A_var_pl(n1,k0,l,tx2)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hx1) &
            1417     2                                      +2*GMTR_A_var_pl(n2,k0,l,tx1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hx1) &
            1418     2                                      +1*GMTR_A_var_pl(n1,k0,l,ty1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hy1) &
            1419     2                                      +1*GMTR_A_var_pl(n1,k0,l,ty2)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hy1) &
            1420     2                                      +2*GMTR_A_var_pl(n2,k0,l,ty1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hy1) &
            1421     2                                      +1*GMTR_A_var_pl(n1,k0,l,tz1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hz1) &
            1422     2                                      +1*GMTR_A_var_pl(n1,k0,l,tz2)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hz1) &
            1423     2                                      +2*GMTR_A_var_pl(n2,k0,l,tz1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hz1) &
            1424     2                                     )*GMTR_P_var_pl(n,k0,l,GMTR_P_rarea)/12.0d0
            1425     2                         !
            1426     2                         ! n2
            1427     2   p    v                clap_pl(3,n,l)=( &
            1428     2                                      +1*GMTR_A_var_pl(n1,k0,l,tx2)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hx1) &
            1429     2                                      -2*GMTR_A_var_pl(n1,k0,l,tx1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hx1) &
            1430     2                                      -1*GMTR_A_var_pl(n2,k0,l,tx1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hx1) &
            1431     2                                      +1*GMTR_A_var_pl(n1,k0,l,ty2)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hy1) &
            1432     2                                      -2*GMTR_A_var_pl(n1,k0,l,ty1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hy1) &
            1433     2                                      -1*GMTR_A_var_pl(n2,k0,l,ty1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hy1) &
            1434     2                                      +1*GMTR_A_var_pl(n1,k0,l,tz2)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hz1) &
            1435     2                                      -2*GMTR_A_var_pl(n1,k0,l,tz1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hz1) &
            1436     2                                      -1*GMTR_A_var_pl(n2,k0,l,tz1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n1,k0,l,hz1) &
            1437     2                                      +1*GMTR_A_var_pl(n1,k0,l,tx2)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hx1) &
            1438     2                                      -2*GMTR_A_var_pl(n1,k0,l,tx1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hx1) &
            1439     2                                      -1*GMTR_A_var_pl(n2,k0,l,tx1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hx1) &
            1440     2                                      +1*GMTR_A_var_pl(n2,k0,l,tx1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hx1) &
            1441     2                                      +1*GMTR_A_var_pl(n2,k0,l,tx2)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hx1) &
            1442     2                                      +2*GMTR_A_var_pl(n3,k0,l,tx1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hx1) &
            1443     2                                      +1*GMTR_A_var_pl(n1,k0,l,ty2)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hy1) &
            1444     2                                      -2*GMTR_A_var_pl(n1,k0,l,ty1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hy1) &
            1445     2                                      -1*GMTR_A_var_pl(n2,k0,l,ty1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hy1) &
            1446     2                                      +1*GMTR_A_var_pl(n2,k0,l,ty1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hy1) &
            1447     2                                      +1*GMTR_A_var_pl(n2,k0,l,ty2)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hy1) &
            1448     2                                      +2*GMTR_A_var_pl(n3,k0,l,ty1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hy1) &
            1449     2                                      +1*GMTR_A_var_pl(n1,k0,l,tz2)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hz1) &
            1450     2                                      -2*GMTR_A_var_pl(n1,k0,l,tz1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hz1) &
            1451     2                                      -1*GMTR_A_var_pl(n2,k0,l,tz1)*GMTR_T_var_pl(n1,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hz1) &
            1452     2                                      +1*GMTR_A_var_pl(n2,k0,l,tz1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hz1) &
            1453     2                                      +1*GMTR_A_var_pl(n2,k0,l,tz2)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hz1) &
            1454     2                                      +2*GMTR_A_var_pl(n3,k0,l,tz1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hz1) &
            1455     2                                      +1*GMTR_A_var_pl(n2,k0,l,tx1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hx1) &
            1456     2                                      +1*GMTR_A_var_pl(n2,k0,l,tx2)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hx1) &
            1457     2                                      +2*GMTR_A_var_pl(n3,k0,l,tx1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hx1) &
            1458     2                                      +1*GMTR_A_var_pl(n2,k0,l,ty1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hy1) &
            1459     2                                      +1*GMTR_A_var_pl(n2,k0,l,ty2)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hy1) &
            1460     2                                      +2*GMTR_A_var_pl(n3,k0,l,ty1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hy1) &
            1461     2                                      +1*GMTR_A_var_pl(n2,k0,l,tz1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hz1) &
            1462     2                                      +1*GMTR_A_var_pl(n2,k0,l,tz2)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hz1) &
            1463     2                                      +2*GMTR_A_var_pl(n3,k0,l,tz1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hz1) &
            1464     2                                     )*GMTR_P_var_pl(n,k0,l,GMTR_P_rarea)/12.0d0
            1465     2                         !
            1466     2                         ! n3
            1467     2   p    v                clap_pl(4,n,l)=( &
            1468     2                                      +1*GMTR_A_var_pl(n2,k0,l,tx2)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hx1) &
            1469     2                                      -2*GMTR_A_var_pl(n2,k0,l,tx1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hx1) &
            1470     2                                      -1*GMTR_A_var_pl(n3,k0,l,tx1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hx1) &
            1471     2                                      +1*GMTR_A_var_pl(n2,k0,l,ty2)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hy1) &
            1472     2                                      -2*GMTR_A_var_pl(n2,k0,l,ty1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hy1) &
            1473     2                                      -1*GMTR_A_var_pl(n3,k0,l,ty1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hy1) &
            1474     2                                      +1*GMTR_A_var_pl(n2,k0,l,tz2)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hz1) &
            1475     2                                      -2*GMTR_A_var_pl(n2,k0,l,tz1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hz1) &
            1476     2                                      -1*GMTR_A_var_pl(n3,k0,l,tz1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n2,k0,l,hz1) &
            1477     2                                      +1*GMTR_A_var_pl(n2,k0,l,tx2)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hx1) &
            1478     2                                      -2*GMTR_A_var_pl(n2,k0,l,tx1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hx1) &
            1479     2                                      -1*GMTR_A_var_pl(n3,k0,l,tx1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hx1) &
            1480     2                                      +1*GMTR_A_var_pl(n3,k0,l,tx1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hx1) &
            1481     2                                      +1*GMTR_A_var_pl(n3,k0,l,tx2)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hx1) &
            1482     2                                      +2*GMTR_A_var_pl(n4,k0,l,tx1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hx1) &
            1483     2                                      +1*GMTR_A_var_pl(n2,k0,l,ty2)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hy1) &
            1484     2                                      -2*GMTR_A_var_pl(n2,k0,l,ty1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hy1) &
            1485     2                                      -1*GMTR_A_var_pl(n3,k0,l,ty1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hy1) &
            1486     2                                      +1*GMTR_A_var_pl(n3,k0,l,ty1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hy1) &
            1487     2                                      +1*GMTR_A_var_pl(n3,k0,l,ty2)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hy1) &
            1488     2                                      +2*GMTR_A_var_pl(n4,k0,l,ty1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hy1) &
            1489     2                                      +1*GMTR_A_var_pl(n2,k0,l,tz2)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hz1) &
            1490     2                                      -2*GMTR_A_var_pl(n2,k0,l,tz1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hz1) &
            1491     2                                      -1*GMTR_A_var_pl(n3,k0,l,tz1)*GMTR_T_var_pl(n2,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hz1) &
            1492     2                                      +1*GMTR_A_var_pl(n3,k0,l,tz1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hz1) &
            1493     2                                      +1*GMTR_A_var_pl(n3,k0,l,tz2)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hz1) &
            1494     2                                      +2*GMTR_A_var_pl(n4,k0,l,tz1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hz1) &
            1495     2                                      +1*GMTR_A_var_pl(n3,k0,l,tx1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hx1) &
            1496     2                                      +1*GMTR_A_var_pl(n3,k0,l,tx2)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hx1) &
            1497     2                                      +2*GMTR_A_var_pl(n4,k0,l,tx1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hx1) &
            1498     2                                      +1*GMTR_A_var_pl(n3,k0,l,ty1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hy1) &
            1499     2                                      +1*GMTR_A_var_pl(n3,k0,l,ty2)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hy1) &
            1500     2                                      +2*GMTR_A_var_pl(n4,k0,l,ty1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hy1) &
            1501     2                                      +1*GMTR_A_var_pl(n3,k0,l,tz1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hz1) &
            1502     2                                      +1*GMTR_A_var_pl(n3,k0,l,tz2)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hz1) &
            1503     2                                      +2*GMTR_A_var_pl(n4,k0,l,tz1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hz1) &
            1504     2                                     )*GMTR_P_var_pl(n,k0,l,GMTR_P_rarea)/12.0d0
            1505     2                         !
            1506     2                         ! n4
            1507     2   p    v                clap_pl(5,n,l)=( &
            1508     2                                      +1*GMTR_A_var_pl(n4,k0,l,tx1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hx1) &
            1509     2                                      +1*GMTR_A_var_pl(n4,k0,l,tx2)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hx1) &
            1510     2                                      +2*GMTR_A_var_pl(n0,k0,l,tx1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hx1) &
            1511     2                                      +1*GMTR_A_var_pl(n4,k0,l,ty1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hy1) &
            1512     2                                      +1*GMTR_A_var_pl(n4,k0,l,ty2)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hy1) &
            1513     2                                      +2*GMTR_A_var_pl(n0,k0,l,ty1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hy1) &
            1514     2                                      +1*GMTR_A_var_pl(n4,k0,l,tz1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hz1) &
            1515     2                                      +1*GMTR_A_var_pl(n4,k0,l,tz2)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hz1) &
            1516     2                                      +2*GMTR_A_var_pl(n0,k0,l,tz1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n0,k0,l,hz1) &
            1517     2                                      +1*GMTR_A_var_pl(n3,k0,l,tx2)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hx1) &
            1518     2                                      -2*GMTR_A_var_pl(n3,k0,l,tx1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hx1) &
            1519     2                                      -1*GMTR_A_var_pl(n4,k0,l,tx1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hx1) &
            1520     2                                      +1*GMTR_A_var_pl(n3,k0,l,ty2)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hy1) &
            1521     2                                      -2*GMTR_A_var_pl(n3,k0,l,ty1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hy1) &
            1522     2                                      -1*GMTR_A_var_pl(n4,k0,l,ty1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hy1) &
            1523     2                                      +1*GMTR_A_var_pl(n3,k0,l,tz2)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hz1) &
            1524     2                                      -2*GMTR_A_var_pl(n3,k0,l,tz1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hz1) &
            1525     2                                      -1*GMTR_A_var_pl(n4,k0,l,tz1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n3,k0,l,hz1) &
            1526     2                                      +1*GMTR_A_var_pl(n3,k0,l,tx2)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hx1) &
            1527     2                                      -2*GMTR_A_var_pl(n3,k0,l,tx1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hx1) &
            1528     2                                      -1*GMTR_A_var_pl(n4,k0,l,tx1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hx1) &
            1529     2                                      +1*GMTR_A_var_pl(n4,k0,l,tx1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hx1) &
            1530     2                                      +1*GMTR_A_var_pl(n4,k0,l,tx2)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hx1) &
            1531     2                                      +2*GMTR_A_var_pl(n0,k0,l,tx1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hx1) &
            1532     2                                      +1*GMTR_A_var_pl(n3,k0,l,ty2)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hy1) &
            1533     2                                      -2*GMTR_A_var_pl(n3,k0,l,ty1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hy1) &
            1534     2                                      -1*GMTR_A_var_pl(n4,k0,l,ty1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hy1) &
            1535     2                                      +1*GMTR_A_var_pl(n4,k0,l,ty1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hy1) &
            1536     2                                      +1*GMTR_A_var_pl(n4,k0,l,ty2)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hy1) &
            1537     2                                      +2*GMTR_A_var_pl(n0,k0,l,ty1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hy1) &
            1538     2                                      +1*GMTR_A_var_pl(n3,k0,l,tz2)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hz1) &
            1539     2                                      -2*GMTR_A_var_pl(n3,k0,l,tz1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hz1) &
            1540     2                                      -1*GMTR_A_var_pl(n4,k0,l,tz1)*GMTR_T_var_pl(n3,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hz1) &
            1541     2                                      +1*GMTR_A_var_pl(n4,k0,l,tz1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hz1) &
            1542     2                                      +1*GMTR_A_var_pl(n4,k0,l,tz2)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hz1) &
            1543     2                                      +2*GMTR_A_var_pl(n0,k0,l,tz1)*GMTR_T_var_pl(n4,k0,l,a0)*GMTR_A_var_pl(n4,k0,l,hz1) &
            1544     2                                     )*GMTR_P_var_pl(n,k0,l,GMTR_P_rarea)/12.0d0
            1545     2   p    v            enddo
            1546     1                   endif
            1547                     
            1548                     
            1549                     
            1550                         allocate( cmdif_P (                  ADM_gall,ADM_lall) )
            1551                         allocate( cmdif_T (ADM_TI:ADM_TJ,    ADM_gall,ADM_lall) )
            1552                         allocate( cmdif_AT(ADM_AI:ADM_AJ,1:3,ADM_gall,ADM_lall) )
            1553                         allocate( cmdif_AH(ADM_AI:ADM_AJ,1:3,ADM_gall,ADM_lall) )
            1554                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1555     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 217
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1556     2  pp   8v          do n = 1, ADM_gall
            1557     2   p   8v             cmdif_P(n,l) = GMTR_P_var(n,k0,l,GMTR_P_RAREA)
            1558     2   p   8v          enddo
            1559     1   p               enddo
            1560                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1561     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 150
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1562     2  pp   4v          do n = 1, ADM_gall
            1563     2   p   4v             cmdif_T(TI,n,l) = GMTR_T_var(n,k0,l,TI,GMTR_T_RAREA)
            1564     2   p   4v             cmdif_T(TJ,n,l) = GMTR_T_var(n,k0,l,TJ,GMTR_T_RAREA)
            1565     2   p   4v          enddo
            1566     1   p               enddo
            1567                     
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 2)
                                   <<<    PREFETCH       : 12
                                   <<<      cmdif_AH: 6, cmdif_AT: 6
                                   <<< Loop-information  End >>>
            1568     1   p               do m=ADM_AI,ADM_AJ
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 1)
                                   <<< Loop-information  End >>>
            1569     2  pp                  do l=1,ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1570     3   p   2v                do n=1,ADM_gall
            1571     3   p   2v                   cmdif_AT(m, 1 , n, l) =  GMTR_A_var(n, ADM_KNONE, l, m, GMTR_A_TNX)
            1572     3   p   2v                   cmdif_AT(m, 2 , n, l) =  GMTR_A_var(n, ADM_KNONE, l, m, GMTR_A_TNY)
            1573     3   p   2v                   cmdif_AT(m, 3 , n, l) =  GMTR_A_var(n, ADM_KNONE, l, m, GMTR_A_TNZ)
            1574     3               
            1575     3   p   2v                   cmdif_AH(m, 1 , n, l) =  GMTR_A_var(n, ADM_KNONE, l, m, GMTR_A_HNX)
            1576     3   p   2v                   cmdif_AH(m, 2 , n, l) =  GMTR_A_var(n, ADM_KNONE, l, m, GMTR_A_HNY)
            1577     3   p   2v                   cmdif_AH(m, 3 , n, l) =  GMTR_A_var(n, ADM_KNONE, l, m, GMTR_A_HNZ)
            1578     3   p   2v                enddo
            1579     2   p                  enddo
            1580     1   p               enddo
            1581                     
            1582                         return
            1583                       end subroutine OPRT_setup
            1584                     
            1585                       !-----------------------------------------------------------------------------
            1586                       subroutine OPRT_divergence( &
            1587                            scl, scl_pl, &
            1588                            vx,  vx_pl,  &
            1589                            vy,  vy_pl,  &
            1590                            vz,  vz_pl,  &
            1591                            mfact        )
            1592                         use mod_adm, only: &
            1593                            ADM_prc_me,  &
            1594                            ADM_prc_pl,  &
            1595                            ADM_lall,    &
            1596                            ADM_lall_pl, &
            1597                            ADM_gall,    &
            1598                            ADM_gall_pl, &
            1599                            ADM_kall,    &
            1600                            ADM_gall_1d, &
            1601                            ADM_gslf_pl, &
            1602                            ADM_gmax_pl, &
            1603                            ADM_kmin,    &
            1604                            ADM_kmax
            1605                         implicit none
            1606                     
            1607                         real(8), intent(inout) :: scl   (ADM_gall   ,ADM_kall,ADM_lall   )
            1608                         real(8), intent(inout) :: scl_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1609                         real(8), intent(in)    :: vx    (ADM_gall   ,ADM_kall,ADM_lall   )
            1610                         real(8), intent(in)    :: vx_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1611                         real(8), intent(in)    :: vy    (ADM_gall   ,ADM_kall,ADM_lall   )
            1612                         real(8), intent(in)    :: vy_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1613                         real(8), intent(in)    :: vz    (ADM_gall   ,ADM_kall,ADM_lall   )
            1614                         real(8), intent(in)    :: vz_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1615                         real(8), intent(in), optional :: mfact
            1616                     
            1617                         real(8) :: fact
            1618                     
            1619                         integer :: ij
            1620                         integer :: im1j, ijm1, im1jm1
            1621                         integer :: ip1j, ijp1, ip1jp1
            1622                     
            1623                         integer :: n, k, l, v
            1624                         !---------------------------------------------------------------------------
            1625                     
            1626                         call DEBUG_rapstart('++++OPRT_divergence')
            1627                     
            1628     1                   if ( present(mfact) ) then
            1629     1                      fact = mfact
            1630     1                   else
            1631     1                      fact = 1.D0
            1632     1                   endif
            1633                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1634     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 216
                                   <<<      vz: 72, vy: 72, vx: 36, scl: 36
                                   <<< Loop-information  End >>>
            1635     2  pp               do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 58
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 36
                                   <<<      vx: 12, vz: 12, vy: 6, scl: 6
                                   <<< Loop-information  End >>>
            1636     3  pp    v          do n = OPRT_nstart, OPRT_nend
            1637     3   p    v             ij     = n
            1638     3   p    v             ip1j   = n + 1
            1639     3   p    v             ip1jp1 = n + 1 + ADM_gall_1d
            1640     3   p    v             ijp1   = n     + ADM_gall_1d
            1641     3   p    v             im1j   = n - 1
            1642     3   p    v             im1jm1 = n - 1 - ADM_gall_1d
            1643     3   p    v             ijm1   = n     - ADM_gall_1d
            1644     3               
            1645     3   p    v             scl(n,k,l) = ( cdiv(0,n,l,1) * vx(ij    ,k,l) &
            1646     3                                   + cdiv(1,n,l,1) * vx(ip1j  ,k,l) &
            1647     3                                   + cdiv(2,n,l,1) * vx(ip1jp1,k,l) &
            1648     3                                   + cdiv(3,n,l,1) * vx(ijp1  ,k,l) &
            1649     3                                   + cdiv(4,n,l,1) * vx(im1j  ,k,l) &
            1650     3                                   + cdiv(5,n,l,1) * vx(im1jm1,k,l) &
            1651     3                                   + cdiv(6,n,l,1) * vx(ijm1  ,k,l) &
            1652     3                                   + cdiv(0,n,l,2) * vy(ij    ,k,l) &
            1653     3                                   + cdiv(1,n,l,2) * vy(ip1j  ,k,l) &
            1654     3                                   + cdiv(2,n,l,2) * vy(ip1jp1,k,l) &
            1655     3                                   + cdiv(3,n,l,2) * vy(ijp1  ,k,l) &
            1656     3                                   + cdiv(4,n,l,2) * vy(im1j  ,k,l) &
            1657     3                                   + cdiv(5,n,l,2) * vy(im1jm1,k,l) &
            1658     3                                   + cdiv(6,n,l,2) * vy(ijm1  ,k,l) &
            1659     3                                   + cdiv(0,n,l,3) * vz(ij    ,k,l) &
            1660     3                                   + cdiv(1,n,l,3) * vz(ip1j  ,k,l) &
            1661     3                                   + cdiv(2,n,l,3) * vz(ip1jp1,k,l) &
            1662     3                                   + cdiv(3,n,l,3) * vz(ijp1  ,k,l) &
            1663     3                                   + cdiv(4,n,l,3) * vz(im1j  ,k,l) &
            1664     3                                   + cdiv(5,n,l,3) * vz(im1jm1,k,l) &
            1665     3                                   + cdiv(6,n,l,3) * vz(ijm1  ,k,l) ) * fact
            1666     3   p    v          enddo
            1667     2   p               enddo
            1668     1   p               enddo
            1669                     
            1670     1                   if ( ADM_prc_me == ADM_prc_pl ) then
            1671     1                      n = ADM_gslf_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1672     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1673     3  pp                  do k = ADM_kmin, ADM_kmax
            1674     3   p                     scl_pl(n,k,l) = 0.D0
            1675     3               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1676     4   p   6v                do v = ADM_gslf_pl, ADM_gmax_pl
            1677     4   p   6v                   scl_pl(n,k,l) = scl_pl(n,k,l) + ( cdiv_pl(v-1,n,l,1) * vx_pl(v,k,l) &
            1678     4                                                            + cdiv_pl(v-1,n,l,2) * vy_pl(v,k,l) &
            1679     4                                                            + cdiv_pl(v-1,n,l,3) * vz_pl(v,k,l) )
            1680     4   p   6v                enddo
            1681     3               
            1682     3   p                     scl_pl(n,k,l) = scl_pl(n,k,l) * fact
            1683     3   p                  enddo
            1684     2   p                  enddo
            1685     1                   endif
            1686                     
            1687                         call DEBUG_rapend('++++OPRT_divergence')
            1688                     
            1689                         return
            1690                       end subroutine OPRT_divergence
            1691                     
            1692                       !-----------------------------------------------------------------------------
            1693                       subroutine OPRT_gradient( &
            1694                            vx,  vx_pl,  &
            1695                            vy,  vy_pl,  &
            1696                            vz,  vz_pl,  &
            1697                            scl, scl_pl, &
            1698                            mfact        )
            1699                         use mod_adm, only: &
            1700                            ADM_prc_me,  &
            1701                            ADM_prc_pl,  &
            1702                            ADM_lall,    &
            1703                            ADM_lall_pl, &
            1704                            ADM_gall,    &
            1705                            ADM_gall_pl, &
            1706                            ADM_kall,    &
            1707                            ADM_gall_1d, &
            1708                            ADM_gslf_pl, &
            1709                            ADM_gmax_pl, &
            1710                            ADM_kmin,    &
            1711                            ADM_kmax
            1712                         implicit none
            1713                     
            1714                         real(8), intent(in)    :: scl   (ADM_gall   ,ADM_kall,ADM_lall   )
            1715                         real(8), intent(in)    :: scl_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1716                         real(8), intent(inout) :: vx    (ADM_gall   ,ADM_kall,ADM_lall   )
            1717                         real(8), intent(inout) :: vx_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1718                         real(8), intent(inout) :: vy    (ADM_gall   ,ADM_kall,ADM_lall   )
            1719                         real(8), intent(inout) :: vy_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1720                         real(8), intent(inout) :: vz    (ADM_gall   ,ADM_kall,ADM_lall   )
            1721                         real(8), intent(inout) :: vz_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1722                         real(8), intent(in), optional :: mfact
            1723                     
            1724                         real(8) :: fact
            1725                     
            1726                         integer :: ij
            1727                         integer :: im1j, ijm1, im1jm1
            1728                         integer :: ip1j, ijp1, ip1jp1
            1729                     
            1730                         integer :: n, k, l, v
            1731                         !---------------------------------------------------------------------------
            1732                     
            1733                         call DEBUG_rapstart('++++OPRT_gradient')
            1734                     
            1735     1                   if ( present(mfact) ) then
            1736     1                      fact = mfact
            1737     1                   else
            1738     1                      fact = 1.D0
            1739     1                   endif
            1740                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1741     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1742     2  pp               do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 67
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1743     3  pp    v          do n = OPRT_nstart, OPRT_nend
            1744     3   p    v             ij     = n
            1745     3   p    v             ip1j   = n + 1
            1746     3   p    v             ip1jp1 = n + 1 + ADM_gall_1d
            1747     3   p    v             ijp1   = n     + ADM_gall_1d
            1748     3   p    v             im1j   = n - 1
            1749     3   p    v             im1jm1 = n - 1 - ADM_gall_1d
            1750     3   p    v             ijm1   = n     - ADM_gall_1d
            1751     3               
            1752     3   p    v             vx(n,k,l) = ( cgrad(0,ij,l,1) * scl(ij    ,k,l) &
            1753     3                                  + cgrad(1,ij,l,1) * scl(ip1j  ,k,l) &
            1754     3                                  + cgrad(2,ij,l,1) * scl(ip1jp1,k,l) &
            1755     3                                  + cgrad(3,ij,l,1) * scl(ijp1  ,k,l) &
            1756     3                                  + cgrad(4,ij,l,1) * scl(im1j  ,k,l) &
            1757     3                                  + cgrad(5,ij,l,1) * scl(im1jm1,k,l) &
            1758     3                                  + cgrad(6,ij,l,1) * scl(ijm1  ,k,l) ) * fact
            1759     3               
            1760     3   p    v             vy(n,k,l) = ( cgrad(0,ij,l,2) * scl(ij    ,k,l) &
            1761     3                                  + cgrad(1,ij,l,2) * scl(ip1j  ,k,l) &
            1762     3                                  + cgrad(2,ij,l,2) * scl(ip1jp1,k,l) &
            1763     3                                  + cgrad(3,ij,l,2) * scl(ijp1  ,k,l) &
            1764     3                                  + cgrad(4,ij,l,2) * scl(im1j  ,k,l) &
            1765     3                                  + cgrad(5,ij,l,2) * scl(im1jm1,k,l) &
            1766     3                                  + cgrad(6,ij,l,2) * scl(ijm1  ,k,l) ) * fact
            1767     3               
            1768     3   p    v             vz(n,k,l) = ( cgrad(0,ij,l,3) * scl(ij    ,k,l) &
            1769     3                                  + cgrad(1,ij,l,3) * scl(ip1j  ,k,l) &
            1770     3                                  + cgrad(2,ij,l,3) * scl(ip1jp1,k,l) &
            1771     3                                  + cgrad(3,ij,l,3) * scl(ijp1  ,k,l) &
            1772     3                                  + cgrad(4,ij,l,3) * scl(im1j  ,k,l) &
            1773     3                                  + cgrad(5,ij,l,3) * scl(im1jm1,k,l) &
            1774     3                                  + cgrad(6,ij,l,3) * scl(ijm1  ,k,l) ) * fact
            1775     3   p    v          enddo
            1776     2   p               enddo
            1777     1   p               enddo
            1778                     
            1779     1                   if ( ADM_prc_me == ADM_prc_pl ) then
            1780     1                      n = ADM_gslf_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1781     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1782     3  pp                  do k = 1, ADM_kall
            1783     3   p                     vx_pl(n,k,l) = 0.D0
            1784     3   p                     vy_pl(n,k,l) = 0.D0
            1785     3   p                     vz_pl(n,k,l) = 0.D0
            1786     3               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1787     4   p   6v                do v = ADM_gslf_pl, ADM_gmax_pl
            1788     4   p   6v                   vx_pl(n,k,l) = vx_pl(n,k,l) + cgrad_pl(v-1,n,l,1) * scl_pl(v,k,l)
            1789     4   p   6v                   vy_pl(n,k,l) = vy_pl(n,k,l) + cgrad_pl(v-1,n,l,2) * scl_pl(v,k,l)
            1790     4   p   6v                   vz_pl(n,k,l) = vz_pl(n,k,l) + cgrad_pl(v-1,n,l,3) * scl_pl(v,k,l)
            1791     4   p   6v                enddo
            1792     3               
            1793     3   p                     vx_pl(n,k,l) = vx_pl(n,k,l) * fact
            1794     3   p                     vy_pl(n,k,l) = vy_pl(n,k,l) * fact
            1795     3   p                     vz_pl(n,k,l) = vz_pl(n,k,l) * fact
            1796     3   p                  enddo
            1797     2   p                  enddo
            1798     1                   endif
            1799                     
            1800                         call DEBUG_rapend('++++OPRT_gradient')
            1801                     
            1802                         return
            1803                       end subroutine OPRT_gradient
            1804                     
            1805                       !-----------------------------------------------------------------------------
            1806                       subroutine OPRT_laplacian( &
            1807                            dscl, dscl_pl, &
            1808                            scl,  scl_pl,  &
            1809                            mfact          )
            1810                         use mod_adm, only: &
            1811                            ADM_prc_me,  &
            1812                            ADM_prc_pl,  &
            1813                            ADM_lall,    &
            1814                            ADM_lall_pl, &
            1815                            ADM_gall,    &
            1816                            ADM_gall_pl, &
            1817                            ADM_kall,    &
            1818                            ADM_gall_1d, &
            1819                            ADM_gslf_pl, &
            1820                            ADM_gmax_pl, &
            1821                            ADM_kmin,    &
            1822                            ADM_kmax
            1823                         implicit none
            1824                     
            1825                         real(8), intent(inout) :: dscl   (ADM_gall   ,ADM_kall,ADM_lall   )
            1826                         real(8), intent(inout) :: dscl_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1827                         real(8), intent(in)    :: scl    (ADM_gall   ,ADM_kall,ADM_lall   )
            1828                         real(8), intent(in)    :: scl_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1829                         real(8), intent(in), optional :: mfact
            1830                     
            1831                         real(8) :: fact
            1832                     
            1833                         integer :: ij
            1834                         integer :: im1j, ijm1, im1jm1
            1835                         integer :: ip1j, ijp1, ip1jp1
            1836                     
            1837                         integer :: n, k, l, v
            1838                         !---------------------------------------------------------------------------
            1839                     
            1840                         call DEBUG_rapstart('++++OPRT_laplacian')
            1841                     
            1842     1                   if ( present(mfact) ) then
            1843     1                      fact = mfact
            1844     1                   else
            1845     1                      fact = 1.D0
            1846     1                   endif
            1847                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1848     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1849     2  pp               do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 111
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1850     3  pp   2v          do n = OPRT_nstart, OPRT_nend
            1851     3   p   2v             ij     = n
            1852     3   p   2v             ip1j   = n + 1
            1853     3   p   2v             ijp1   = n     + ADM_gall_1d
            1854     3   p   2v             ip1jp1 = n + 1 + ADM_gall_1d
            1855     3   p   2v             im1j   = n - 1
            1856     3   p   2v             ijm1   = n     - ADM_gall_1d
            1857     3   p   2v             im1jm1 = n - 1 - ADM_gall_1d
            1858     3               
            1859     3   p   2v             dscl(n,k,l) = ( clap(0,ij,l) * scl(ij    ,k,l) &
            1860     3                                    + clap(1,ij,l) * scl(ip1j  ,k,l) &
            1861     3                                    + clap(2,ij,l) * scl(ip1jp1,k,l) &
            1862     3                                    + clap(3,ij,l) * scl(ijp1  ,k,l) &
            1863     3                                    + clap(4,ij,l) * scl(im1j  ,k,l) &
            1864     3                                    + clap(5,ij,l) * scl(im1jm1,k,l) &
            1865     3                                    + clap(6,ij,l) * scl(ijm1  ,k,l) ) * fact
            1866     3   p   2v          enddo
            1867     2   p               enddo
            1868     1   p               enddo
            1869                     
            1870     1                   if ( ADM_prc_me == ADM_prc_pl ) then
            1871     1                      n = ADM_gslf_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1872     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1873     3  pp                  do k = 1, ADM_kall
            1874     3   p                     dscl_pl(n,k,l) = 0.D0
            1875     3               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1876     4   p   8v                do v = ADM_gslf_pl, ADM_gmax_pl
            1877     4   p   8v                   dscl_pl(n,k,l) = dscl_pl(n,k,l) + clap_pl(v-1,n,l) * scl_pl(v,k,l)
            1878     4   p   8v                enddo
            1879     3               
            1880     3   p                     dscl_pl(n,k,l) = dscl_pl(n,k,l) * fact
            1881     3   p                  enddo
            1882     2   p                  enddo
            1883     1                   endif
            1884                     
            1885                         call DEBUG_rapend('++++OPRT_laplacian')
            1886                     
            1887                         return
            1888                       end subroutine OPRT_laplacian
            1889                     
            1890                       !-----------------------------------------------------------------------------
            1891                       subroutine OPRT_diffusion( &
            1892                            dscl, dscl_pl,        &
            1893                            scl,scl_pl,           &
            1894                            kh, kh_pl,            &
            1895                            mfact )
            1896                         use mod_adm, only :   &
            1897                              !--- public parameters
            1898                              ADM_prc_pl,      &
            1899                              ADM_KNONE,       &
            1900                              ADM_TI,          &
            1901                              ADM_TJ,          &
            1902                              adm_ai,          &
            1903                              adm_aij,         &
            1904                              adm_aj,          &
            1905                              adm_w,           &
            1906                              ADM_lall_pl,     &
            1907                              ADM_GMAX_PL,     &
            1908                              ADM_gmin_pl,     &
            1909                              ADM_gslf_pl,     &
            1910                              ADM_gall_pl,     &
            1911                              ADM_rgn_vnum,    &
            1912                              !--- public variables
            1913                              ADM_prc_me,      &
            1914                              ADM_prc_tab,     &
            1915                              ADM_gall_1d,     &
            1916                              ADM_kall,        &
            1917                              ADM_lall,        &
            1918                              ADM_kmin,        &
            1919                              ADM_kmax,        &
            1920                              ADM_gmin,        &
            1921                              ADM_gmax,        &
            1922                              ADM_gall
            1923                         use mod_gmtr, only : &
            1924                              !--- public parameters
            1925                              GMTR_T_W1,       &
            1926                              GMTR_T_W2,       &
            1927                              GMTR_T_W3,       &
            1928                              GMTR_T_rarea,    &
            1929                              GMTR_A_hnx,      &
            1930                              GMTR_A_hny,      &
            1931                              GMTR_A_hnz,      &
            1932                              GMTR_A_htx,      &
            1933                              GMTR_A_hty,      &
            1934                              GMTR_A_htz,      &
            1935                              GMTR_A_tnx,      &
            1936                              GMTR_A_tny,      &
            1937                              GMTR_A_tnz,      &
            1938                              GMTR_A_tn2x,     &
            1939                              GMTR_A_tn2y,     &
            1940                              GMTR_A_tn2z,     &
            1941                              GMTR_P_rarea,    &
            1942                              !--- public variables
            1943                              GMTR_T_var,      &
            1944                              GMTR_T_var_pl,   &
            1945                              GMTR_P_var,      &
            1946                              GMTR_P_var_pl,   &
            1947                              GMTR_A_var,      &
            1948                              GMTR_A_var_pl
            1949                         implicit none
            1950                     
            1951                         real(8), intent(inout) :: dscl(ADM_gall   ,ADM_kall,ADM_lall   )
            1952                         real(8), intent(inout) :: dscl_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1953                         real(8), intent(in) :: scl(ADM_gall   ,ADM_kall,ADM_lall   )
            1954                         real(8), intent(in) :: scl_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1955                         real(8), intent(in) :: kh(ADM_gall   ,ADM_kall,ADM_lall   )
            1956                         real(8), intent(in) :: kh_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1957                         !
            1958                         real(8), intent(in), optional :: mfact
            1959                         !
            1960                         real(8)  :: vxt(         &
            1961                              ADM_gall,           &
            1962                              ADM_kall,           &
            1963                              ADM_lall,           &
            1964                              ADM_TI:ADM_TJ)
            1965                         real(8)  :: vxt_pl(      &
            1966                              ADM_gall_pl,        &
            1967                              ADM_kall,           &
            1968                              ADM_lall_pl)
            1969                         !
            1970                         real(8)  :: vyt(         &
            1971                              ADM_gall,           &
            1972                              ADM_kall,           &
            1973                              ADM_lall,           &
            1974                              ADM_TI:ADM_TJ)
            1975                         real(8)  :: vyt_pl(      &
            1976                              ADM_gall_pl,        &
            1977                              ADM_kall,           &
            1978                              ADM_lall_pl)
            1979                         !
            1980                         real(8)  :: vzt(         &
            1981                              ADM_gall,           &
            1982                              ADM_kall,           &
            1983                              ADM_lall,           &
            1984                              ADM_TI:ADM_TJ)
            1985                         real(8)  :: vzt_pl(      &
            1986                              ADM_gall_pl,        &
            1987                              ADM_kall,           &
            1988                              ADM_lall_pl)
            1989                         !
            1990                         real(8)  :: flux(        &
            1991                              ADM_gall,           &
            1992                              ADM_AI:ADM_AJ)
            1993                         real(8)  :: flux_pl(     &
            1994                              ADM_gall_pl)
            1995                         !
            1996                         integer :: l,n,k
            1997                         integer :: rgnid
            1998                         real(8) :: fact
            1999                         real(8) :: u1,u2,u3
            2000                         real(8) :: smean
            2001                         !
            2002                         integer :: nstart, nend
            2003                         integer :: nstart2, nstart3 !2011/02/25 for K by RIST
            2004                         !
            2005                         integer :: suf,i,j
            2006                         suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
            2007                         !---------------------------------------------------------------------------
            2008                     
            2009                         call DEBUG_rapstart('++++OPRT_diffusion')
            2010                     
            2011     1                   if ( present(mfact) ) then
            2012     1                      fact = mfact
            2013     1                   else
            2014     1                      fact=1.0D0
            2015     1                   end if
            2016                         !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2017     1  pp               do l=1,ADM_lall
            2018     1   p                  rgnid=ADM_prc_tab(l,ADM_prc_me)
            2019     1                      !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2020     2  pp                  do k= 1, ADM_kall
            2021     2                         !
            2022     2   p                     nstart = suf(ADM_gmin-1,ADM_gmin-1)
            2023     2   p                     nend   = suf(ADM_gmax  ,ADM_gmax  )
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2024     3   p    v                do n = nstart, nend
            2025     3                            !
            2026     3   p    v                   smean = (scl(n,k,l)+scl(n+1,k,l)+scl(n+1+ADM_gall_1d,k,l))/3.0D0
            2027     3   p    v                   u1=-cmdif_T(ADM_TI, n, l) &
            2028     3                                   *(0.5D0*(scl(n,k,l)+scl(n+1,k,l))-smean)
            2029     3   p    v                   u2=-cmdif_T(ADM_TI, n, l) &
            2030     3                                   *(0.5D0*(scl(n+1,k,l)+scl(n+1+ADM_gall_1d,k,l))-smean)
            2031     3   p    v                   u3=+cmdif_T(ADM_TI, n, l) &
            2032     3                                   *(0.5D0*(scl(n+1+ADM_gall_1d,k,l)+scl(n,k,l))-smean)
            2033     3   p    v                   vxt( n, k, l, ADM_TI ) &
            2034     3                                 =u1*cmdif_AT(ADM_AI , 1 , n  , l)&
            2035     3                                 +u2*cmdif_AT(ADM_AJ , 1 , n+1, l)&
            2036     3                                 +u3*cmdif_AT(ADM_AIJ, 1 , n  , l)
            2037     3   p    v                   vyt( n, k, l, ADM_TI ) &
            2038     3                                 =u1*cmdif_AT(ADM_AI , 2 , n  , l)&
            2039     3                                 +u2*cmdif_AT(ADM_AJ , 2 , n+1, l)&
            2040     3                                 +u3*cmdif_AT(ADM_AIJ, 2 , n  , l)
            2041     3   p    v                   vzt( n, k, l, ADM_TI ) &
            2042     3                                 =u1*cmdif_AT(ADM_AI , 3 , n  , l)&
            2043     3                                 +u2*cmdif_AT(ADM_AJ , 3 , n+1, l)&
            2044     3                                 +u3*cmdif_AT(ADM_AIJ, 3 , n  , l)
            2045     3               
            2046     3   p    v                   smean = (scl(n,k,l)+scl(n+1+ADM_gall_1d,k,l)+scl(n+ADM_gall_1d,k,l))/3.0D0
            2047     3   p    v                   u1=-cmdif_T(ADM_TJ, n, l) &
            2048     3                                   *(0.5D0*(scl(n              ,k,l)+scl(n+1+ADM_gall_1d,k,l))-smean)
            2049     3   p    v                   u2=+cmdif_T(ADM_TJ, n, l) &
            2050     3                                   *(0.5D0*(scl(n+1+ADM_gall_1d,k,l)+scl(n  +ADM_gall_1d,k,l))-smean)
            2051     3   p    v                   u3=+cmdif_T(ADM_TJ, n, l) &
            2052     3                                   *(0.5D0*(scl(n  +ADM_gall_1d,k,l)+scl(n              ,k,l))-smean)
            2053     3   p    v                   vxt( n, k, l, ADM_TJ ) &
            2054     3                                 =u1*cmdif_AT(ADM_AIJ, 1 , n            , l)&
            2055     3                                 +u2*cmdif_AT(ADM_AI , 1 , n+ADM_gall_1d, l)&
            2056     3                                 +u3*cmdif_AT(ADM_AJ , 1 , n            , l)
            2057     3   p    v                   vyt( n, k, l, ADM_TJ ) &
            2058     3                                 =u1*cmdif_AT(ADM_AIJ, 2 , n            , l)&
            2059     3                                 +u2*cmdif_AT(ADM_AI , 2 , n+ADM_gall_1d, l)&
            2060     3                                 +u3*cmdif_AT(ADM_AJ , 2 , n            , l)
            2061     3   p    v                   vzt( n, k, l, ADM_TJ ) &
            2062     3                                 =u1*cmdif_AT(ADM_AIJ, 3 , n            , l)&
            2063     3                                 +u2*cmdif_AT(ADM_AI , 3 , n+ADM_gall_1d, l)&
            2064     3                                 +u3*cmdif_AT(ADM_AJ , 3 , n            , l)
            2065     3                            !
            2066     3   p    v                end do
            2067     2                         !
            2068     3   p                     if(ADM_rgn_vnum(ADM_W,rgnid)==3) then
            2069     3   p                        vxt(suf(ADM_gmin-1,ADM_gmin-1),k,l,ADM_TI)     &
            2070     3                                 =vxt(suf(ADM_gmin,ADM_gmin-1),k,l,ADM_TJ)
            2071     3   p                        vyt(suf(ADM_gmin-1,ADM_gmin-1),k,l,ADM_TI)     &
            2072     3                                 =vyt(suf(ADM_gmin,ADM_gmin-1),k,l,ADM_TJ)
            2073     3   p                        vzt(suf(ADM_gmin-1,ADM_gmin-1),k,l,ADM_TI)     &
            2074     3                                 =vzt(suf(ADM_gmin,ADM_gmin-1),k,l,ADM_TJ)
            2075     3   p                     end if
            2076     2                         !
            2077     2   p                  end do
            2078     1   p               end do
            2079                     
            2080     1                   if(ADM_prc_me==ADM_prc_pl) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 82
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 2)
                                   <<<    SPLIT
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2081     2  pp    v             do k= 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 1)
                                   <<< Loop-information  End >>>
            2082     3  pp   2                 do l=1,ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 83
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2083     4  pp   2v                   do n=ADM_gmin_pl,ADM_GMAX_PL-1
            2084     4   p   2v                      smean = (scl_pl(ADM_gslf_pl,k,l)+scl_pl(n,k,l)+scl_pl(n+1,k,l))/3.0D0
            2085     4   p   2v                      u1=+GMTR_T_var_pl(n,ADM_KNONE,l,GMTR_T_RAREA)&
            2086     4                                    *(0.5D0*(scl_pl(ADM_gslf_pl,k,l)+scl_pl(n,k,l))-smean)
            2087     4   p   2v                      u2=+GMTR_T_var_pl(n,ADM_KNONE,l,GMTR_T_RAREA)&
            2088     4                                    *(0.5D0*(scl_pl(n,k,l)+scl_pl(n+1,k,l))-smean)
            2089     4   p   2v                      u3=-GMTR_T_var_pl(n,ADM_KNONE,l,GMTR_T_RAREA)&
            2090     4                                    *(0.5D0*(scl_pl(n+1,k,l)+scl_pl(ADM_gslf_pl,k,l))-smean)
            2091     4   p   2v                      vxt_pl(n,k,l)&
            2092     4                                    =u1*GMTR_A_var_pl(n,ADM_KNONE,l,GMTR_A_TNX)&
            2093     4                                    +u2*GMTR_A_var_pl(n,ADM_KNONE,l,GMTR_A_TN2X)&
            2094     4                                    +u3*GMTR_A_var_pl(n+1,ADM_KNONE,l,GMTR_A_TNX)
            2095     4   p   2v                      vyt_pl(n,k,l)&
            2096     4                                    =u1*GMTR_A_var_pl(n,ADM_KNONE,l,GMTR_A_TNY)&
            2097     4                                    +u2*GMTR_A_var_pl(n,ADM_KNONE,l,GMTR_A_TN2Y)&
            2098     4                                    +u3*GMTR_A_var_pl(n+1,ADM_KNONE,l,GMTR_A_TNY)
            2099     4   p   2v                      vzt_pl(n,k,l)&
            2100     4                                    =u1*GMTR_A_var_pl(n,ADM_KNONE,l,GMTR_A_TNZ)&
            2101     4                                    +u2*GMTR_A_var_pl(n,ADM_KNONE,l,GMTR_A_TN2Z)&
            2102     4                                    +u3*GMTR_A_var_pl(n+1,ADM_KNONE,l,GMTR_A_TNZ)
            2103     4   p   2v                   enddo
            2104     3   p   2v                   smean = (scl_pl(ADM_gslf_pl,k,l)+scl_pl(ADM_GMAX_PL,k,l)+scl_pl(ADM_gmin_pl,k,l))/3.0D0
            2105     3   p   2v                   u1=+GMTR_T_var_pl(ADM_GMAX_PL,ADM_KNONE,l,GMTR_T_RAREA)&
            2106     3                                 *(0.5D0*(scl_pl(ADM_gslf_pl,k,l)+scl_pl(ADM_GMAX_PL,k,l))-smean)
            2107     3   p   2v                   u2=+GMTR_T_var_pl(ADM_GMAX_PL,ADM_KNONE,l,GMTR_T_RAREA)&
            2108     3                                 *(0.5D0*(scl_pl(ADM_GMAX_PL,k,l)+scl_pl(ADM_gmin_pl,k,l))-smean)
            2109     3   p   2v                   u3=-GMTR_T_var_pl(ADM_GMAX_PL,ADM_KNONE,l,GMTR_T_RAREA)&
            2110     3                                 *(0.5D0*(scl_pl(ADM_gmin_pl,k,l)+scl_pl(ADM_gslf_pl,k,l))-smean)
            2111     3   p   2v                   vxt_pl(ADM_GMAX_PL,k,l)&
            2112     3                                 =u1*GMTR_A_var_pl(ADM_GMAX_PL,ADM_KNONE,l,GMTR_A_TNX)&
            2113     3                                 +u2*GMTR_A_var_pl(ADM_GMAX_PL,ADM_KNONE,l,GMTR_A_TN2X)&
            2114     3                                 +u3*GMTR_A_var_pl(ADM_gmin_pl,ADM_KNONE,l,GMTR_A_TNX)
            2115     3   p   2v                   vyt_pl(ADM_GMAX_PL,k,l)&
            2116     3                                 =u1*GMTR_A_var_pl(ADM_GMAX_PL,ADM_KNONE,l,GMTR_A_TNY)&
            2117     3                                 +u2*GMTR_A_var_pl(ADM_GMAX_PL,ADM_KNONE,l,GMTR_A_TN2Y)&
            2118     3                                 +u3*GMTR_A_var_pl(ADM_gmin_pl,ADM_KNONE,l,GMTR_A_TNY)
            2119     3   p   2v                   vzt_pl(ADM_GMAX_PL,k,l)&
            2120     3                                 =u1*GMTR_A_var_pl(ADM_GMAX_PL,ADM_KNONE,l,GMTR_A_TNZ)&
            2121     3                                 +u2*GMTR_A_var_pl(ADM_GMAX_PL,ADM_KNONE,l,GMTR_A_TN2Z)&
            2122     3                                 +u3*GMTR_A_var_pl(ADM_gmin_pl,ADM_KNONE,l,GMTR_A_TNZ)
            2123     3   p   2                 enddo
            2124     2   p   2v             enddo
            2125     1                   end if
            2126                         !
            2127     1                   do l=1,ADM_lall
            2128     1                      rgnid=ADM_prc_tab(l,ADM_prc_me)
            2129     1                      !
            2130     1                      !Do k=ADM_kmin,ADM_kmax
            2131     2                      do k= 1, ADM_kall
            2132     2                         nstart = suf(ADM_gmin-1,ADM_gmin  )
            2133     2                         nend   = suf(ADM_gmax  ,ADM_gmax  )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 120
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2134     3  pp    v                do n = nstart,nend
            2135     3   p    v                   flux( n, ADM_AI )  =(&
            2136     3                                 &(vxt( n-ADM_gall_1d, k, l, ADM_TJ ) +vxt( n, k, l, ADM_TI ) ) &
            2137     3                                 *cmdif_AH(ADM_AI, 1 , n, l)&
            2138     3                                 +(vyt( n-ADM_gall_1d, k, l, ADM_TJ ) +vyt( n, k, l, ADM_TI ) ) &
            2139     3                                 *cmdif_AH(ADM_AI, 2 , n, l)&
            2140     3                                 +(vzt( n-ADM_gall_1d, k, l, ADM_TJ ) +vzt( n, k, l, ADM_TI ) ) &
            2141     3                                 *cmdif_AH(ADM_AI, 3 , n, l)&
            2142     3                                 &)*0.5D0
            2143     3   p    v                   flux( n, ADM_AI )  = flux( n, ADM_AI )  * (kh(n,k,l)+kh(n+1,k,l))*0.5D0
            2144     3   p    v                   flux( n, ADM_AIJ )  =(&
            2145     3                                 &(vxt( n, k, l, ADM_TI ) +vxt( n, k, l, ADM_TJ ) ) &
            2146     3                                 *cmdif_AH(ADM_AIJ, 1 , n, l)&
            2147     3                                 +(vyt( n, k, l, ADM_TI ) +vyt( n, k, l, ADM_TJ ) ) &
            2148     3                                 *cmdif_AH(ADM_AIJ, 2 , n, l)&
            2149     3                                 +(vzt( n, k, l, ADM_TI ) +vzt( n, k, l, ADM_TJ ) ) &
            2150     3                                 *cmdif_AH(ADM_AIJ, 3 , n, l)&
            2151     3                                 &)*0.5D0
            2152     3   p    v                   flux( n, ADM_AIJ )  = flux( n, ADM_AIJ )  * (kh(n,k,l)+kh(n+ADM_gall_1d+1,k,l))*0.5D0
            2153     3   p    v                   flux( n, ADM_AJ )  =(&
            2154     3                                 &(vxt( n, k, l, ADM_TJ ) +vxt( n-1, k, l, ADM_TI ) ) &
            2155     3                                 *cmdif_AH(ADM_AJ, 1 , n, l)&
            2156     3                                 +(vyt( n, k, l, ADM_TJ ) +vyt( n-1, k, l, ADM_TI ) ) &
            2157     3                                 *cmdif_AH(ADM_AJ, 2 , n, l)&
            2158     3                                 +(vzt( n, k, l, ADM_TJ ) +vzt( n-1, k, l, ADM_TI ) ) &
            2159     3                                 *cmdif_AH(ADM_AJ, 3 , n, l)&
            2160     3                                 &)*0.5D0
            2161     3   p    v                   flux( n, ADM_AJ )  = flux( n, ADM_AJ )  * (kh(n,k,l)+kh(n+ADM_gall_1d,k,l))*0.5D0
            2162     3   p    v                end do
            2163     2                         nstart2 = suf(ADM_gmin-1,ADM_gmin-1)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 267
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2164     3  pp   2v                do n = nstart2, nstart-1
            2165     3   p   2v                   flux( n, ADM_AIJ )  =(&
            2166     3                                 &(vxt( n, k, l, ADM_TI ) +vxt( n, k, l, ADM_TJ ) ) &
            2167     3                                 *cmdif_AH(ADM_AIJ, 1 , n, l)&
            2168     3                                 +(vyt( n, k, l, ADM_TI ) +vyt( n, k, l, ADM_TJ ) ) &
            2169     3                                 *cmdif_AH(ADM_AIJ, 2 , n, l)&
            2170     3                                 +(vzt( n, k, l, ADM_TI ) +vzt( n, k, l, ADM_TJ ) ) &
            2171     3                                 *cmdif_AH(ADM_AIJ, 3 , n, l)&
            2172     3                                 &)*0.5D0
            2173     3   p   2v                   flux( n, ADM_AIJ )  = flux( n, ADM_AIJ )  * (kh(n,k,l)+kh(n+ADM_gall_1d+1,k,l))*0.5D0
            2174     3   p   2v                end do
            2175     2                         nstart3 = suf(ADM_gmin  ,ADM_gmin-1)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 267
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2176     3  pp   2v                do n = nstart3, nstart-1
            2177     3   p   2v                   flux( n, ADM_AJ )  =(&
            2178     3                                 &(vxt( n, k, l, ADM_TJ ) +vxt( n-1, k, l, ADM_TI ) ) &
            2179     3                                 *cmdif_AH(ADM_AJ, 1 , n, l)&
            2180     3                                 +(vyt( n, k, l, ADM_TJ ) +vyt( n-1, k, l, ADM_TI ) ) &
            2181     3                                 *cmdif_AH(ADM_AJ, 2 , n, l)&
            2182     3                                 +(vzt( n, k, l, ADM_TJ ) +vzt( n-1, k, l, ADM_TI ) ) &
            2183     3                                 *cmdif_AH(ADM_AJ, 3 , n, l)&
            2184     3                                 &)*0.5D0
            2185     3   p   2v                   flux( n, ADM_AJ )  = flux( n, ADM_AJ )  * (kh(n,k,l)+kh(n+ADM_gall_1d,k,l))*0.5D0
            2186     3   p   2v                end do
            2187     2                         !
            2188     2                         nstart = suf(ADM_gmin  ,ADM_gmin  )
            2189     2                         nend   = suf(ADM_gmax  ,ADM_gmax  )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 341
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2190     3  pp   4v                do n = nstart,nend
            2191     3   p   4v                   dscl(n,k,l)=(&
            2192     3                                 +flux( n              , ADM_AI  ) &
            2193     3                                 +flux( n              , ADM_AIJ ) &
            2194     3                                 +flux( n              , ADM_AJ  ) &
            2195     3                                 -flux( n-1            , ADM_AI  ) &
            2196     3                                 -flux( n-1-ADM_gall_1d, ADM_AIJ ) &
            2197     3                                 -flux( n  -ADM_gall_1d, ADM_AJ ) &
            2198     3                                 ) * cmdif_P( n, l)&
            2199     3                                 * fact
            2200     3   p   4v                end do
            2201     3                         if(ADM_rgn_vnum(ADM_W,rgnid)==3) then
            2202     3                            dscl(suf(ADM_gmin,ADM_gmin),k,l)=(&
            2203     3                                 +flux(suf(ADM_gmin,ADM_gmin),ADM_AI)&
            2204     3                                 +flux(suf(ADM_gmin,ADM_gmin),ADM_AIJ)&
            2205     3                                 +flux(suf(ADM_gmin,ADM_gmin),ADM_AJ)&
            2206     3                                 -flux(suf(ADM_gmin-1,ADM_gmin),ADM_AI)&
            2207     3                                 -flux(suf(ADM_gmin-1,ADM_gmin-1),ADM_AIJ)&
            2208     3                                 ) * GMTR_P_var(suf(ADM_gmin,ADM_gmin),ADM_KNONE,l,GMTR_P_RAREA)&
            2209     3                                 * fact
            2210     3                         end if
            2211     2                      end do
            2212     1                   end do
            2213                         !
            2214     1                   if(ADM_prc_me==ADM_prc_pl) then
            2215     2                      do k= 1, ADM_kall
            2216     3                         do l=1,ADM_lall_pl
            2217     3                            flux_pl(ADM_gmin_pl)&
            2218     3                                 =((vxt_pl(ADM_GMAX_PL,k,l)+vxt_pl(ADM_gmin_pl,k,l))&
            2219     3                                 *GMTR_A_var_pl(ADM_gmin_pl,ADM_KNONE,l,GMTR_A_HNX)&
            2220     3                                 +(vyt_pl(ADM_GMAX_PL,k,l)+vyt_pl(ADM_gmin_pl,k,l))&
            2221     3                                 *GMTR_A_var_pl(ADM_gmin_pl,ADM_KNONE,l,GMTR_A_HNY)&
            2222     3                                 +(vzt_pl(ADM_GMAX_PL,k,l)+vzt_pl(ADM_gmin_pl,k,l))&
            2223     3                                 *GMTR_A_var_pl(ADM_gmin_pl,ADM_KNONE,l,GMTR_A_HNZ) )*0.5D0
            2224     3                            flux_pl(ADM_gmin_pl) = flux_pl(ADM_gmin_pl)&
            2225     3                                 * ( kh_pl(ADM_gslf_pl,k,l)+kh_pl(ADM_gmin_pl,k,l) )*0.5D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 297
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2226     4  pp   4v                   do n=ADM_gmin_pl+1,ADM_GMAX_PL
            2227     4   p   4v                      flux_pl(n)&
            2228     4                                    =((vxt_pl(n-1,k,l)+vxt_pl(n,k,l))&
            2229     4                                    *GMTR_A_var_pl(n,ADM_KNONE,l,GMTR_A_HNX)&
            2230     4                                    +(vyt_pl(n-1,k,l)+vyt_pl(n,k,l))&
            2231     4                                    *GMTR_A_var_pl(n,ADM_KNONE,l,GMTR_A_HNY)&
            2232     4                                    +(vzt_pl(n-1,k,l)+vzt_pl(n,k,l))&
            2233     4                                    *GMTR_A_var_pl(n,ADM_KNONE,l,GMTR_A_HNZ) )*0.5D0
            2234     4   p   4v                      flux_pl(n) = flux_pl(n)&
            2235     4                                    * ( kh_pl(ADM_gslf_pl,k,l)+kh_pl(n,k,l) )*0.5D0
            2236     4   p   4v                   enddo
            2237     3                            !
            2238     3                            dscl_pl(ADM_gslf_pl,k,l)=(&
            2239     3                                 +flux_pl(ADM_gmin_pl  )&
            2240     3                                 +flux_pl(ADM_gmin_pl+1)&
            2241     3                                 +flux_pl(ADM_gmin_pl+2)&
            2242     3                                 +flux_pl(ADM_gmin_pl+3)&
            2243     3                                 +flux_pl(ADM_gmin_pl+4)&
            2244     3                                 ) * GMTR_P_var_pl(ADM_gslf_pl,ADM_KNONE,l,GMTR_P_RAREA)&
            2245     3                                 * fact
            2246     3                         enddo
            2247     2                      enddo
            2248     1                   end if
            2249                     
            2250                     
            2251                     
            2252                         call DEBUG_rapend('++++OPRT_diffusion')
            2253                     
            2254                     
            2255                       end subroutine OPRT_diffusion
            2256                     
            2257                       !-----------------------------------------------------------------------------
            2258                       subroutine OPRT_horizontalize_vec( &
            2259                            vx, vx_pl, &
            2260                            vy, vy_pl, &
            2261                            vz, vz_pl  )
            2262                         use mod_adm, only: &
            2263                            ADM_prc_me,  &
            2264                            ADM_prc_pl,  &
            2265                            ADM_gall,    &
            2266                            ADM_gall_pl, &
            2267                            ADM_lall,    &
            2268                            ADM_lall_pl, &
            2269                            ADM_kall
            2270                         use mod_grd, only: &
            2271                            GRD_XDIR, &
            2272                            GRD_YDIR, &
            2273                            GRD_ZDIR, &
            2274                            GRD_e,    &
            2275                            GRD_e_pl
            2276                         implicit none
            2277                     
            2278                         real(8), intent(inout) :: vx   (ADM_gall,   ADM_kall,ADM_lall   )
            2279                         real(8), intent(inout) :: vx_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2280                         real(8), intent(inout) :: vy   (ADM_gall,   ADM_kall,ADM_lall   )
            2281                         real(8), intent(inout) :: vy_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2282                         real(8), intent(inout) :: vz   (ADM_gall,   ADM_kall,ADM_lall   )
            2283                         real(8), intent(inout) :: vz_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2284                     
            2285                         real(8) :: prd
            2286                         integer :: g, k, l
            2287                         !---------------------------------------------------------------------------
            2288                     
            2289                         call DEBUG_rapstart('++++OPRT_horizontalize_vec')
            2290                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2291     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2292     2  pp               do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 173
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2293     3  pp   4v          do g = 1, ADM_gall
            2294     3   p   4v             prd = ( vx(g,k,l) * GRD_e(g,l,GRD_XDIR) &
            2295     3                            + vy(g,k,l) * GRD_e(g,l,GRD_YDIR) &
            2296     3                            + vz(g,k,l) * GRD_e(g,l,GRD_ZDIR) )
            2297     3               
            2298     3   p   4v             vx(g,k,l) = vx(g,k,l) - prd * GRD_e(g,l,GRD_XDIR)
            2299     3   p   4v             vy(g,k,l) = vy(g,k,l) - prd * GRD_e(g,l,GRD_YDIR)
            2300     3   p   4v             vz(g,k,l) = vz(g,k,l) - prd * GRD_e(g,l,GRD_ZDIR)
            2301     3   p   4v          enddo
            2302     2   p               enddo
            2303     1   p               enddo
            2304                     
            2305     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2306     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2307     3  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 173
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2308     4  pp   4v             do g = 1, ADM_gall_pl
            2309     4   p   4v                prd = ( vx_pl(g,k,l) * GRD_e_pl(g,l,GRD_XDIR) &
            2310     4                               + vy_pl(g,k,l) * GRD_e_pl(g,l,GRD_YDIR) &
            2311     4                               + vz_pl(g,k,l) * GRD_e_pl(g,l,GRD_ZDIR) )
            2312     4               
            2313     4   p   4v                vx_pl(g,k,l) = vx_pl(g,k,l) - prd * GRD_e_pl(g,l,GRD_XDIR)
            2314     4   p   4v                vy_pl(g,k,l) = vy_pl(g,k,l) - prd * GRD_e_pl(g,l,GRD_YDIR)
            2315     4   p   4v                vz_pl(g,k,l) = vz_pl(g,k,l) - prd * GRD_e_pl(g,l,GRD_ZDIR)
            2316     4   p   4v             enddo
            2317     3   p                  enddo
            2318     2   p                  enddo
            2319     1                   endif
            2320                     
            2321                         call DEBUG_rapend('++++OPRT_horizontalize_vec')
            2322                     
            2323                         return
            2324                       end subroutine OPRT_horizontalize_vec
            2325                     
            2326                       !-----------------------------------------------------------------------------
            2327                       subroutine OPRT_vorticity(       &
            2328                            scl, scl_pl,                &
            2329                            vx, vx_pl,                  &
            2330                            vy, vy_pl,                  &
            2331                            vz, vz_pl,                  &
            2332                            mfact )
            2333                         !
            2334                         use mod_adm, only :   &
            2335                              !--- public parameters
            2336                              ADM_W,           &
            2337                              ADM_prc_pl,      &
            2338                              ADM_TI,          &
            2339                              ADM_TJ,          &
            2340                              ADM_AI,          &
            2341                              ADM_AIJ,         &
            2342                              ADM_AJ,          &
            2343                              ADM_KNONE,       &
            2344                              ADM_lall_pl,     &
            2345                              ADM_gmin_pl,     &
            2346                              ADM_GMAX_PL,     &
            2347                              ADM_gslf_pl,     &
            2348                              ADM_gall_pl,     &
            2349                              !--- public variables
            2350                              ADM_prc_me,      &
            2351                              ADM_prc_tab,     &
            2352                              ADM_rgn_vnum,    &
            2353                              ADM_gall_1d,     &
            2354                              ADM_kall,        &
            2355                              ADM_lall,        &
            2356                              ADM_kmin,        &
            2357                              ADM_kmax,        &
            2358                              ADM_gmin,        &
            2359                              ADM_gmax,        &
            2360                              ADM_gall
            2361                         use mod_gmtr, only :  &
            2362                              !--- public parameters
            2363                              GMTR_T_W1,       &
            2364                              GMTR_T_W2,       &
            2365                              GMTR_T_W3,       &
            2366                              GMTR_A_htx,      &
            2367                              GMTR_A_hty,      &
            2368                              GMTR_A_htz,      &
            2369                              GMTR_P_rarea,    &
            2370                              !--- public variables
            2371                              GMTR_T_var,      &
            2372                              GMTR_T_var_pl,   &
            2373                              GMTR_P_var,      &
            2374                              GMTR_P_var_pl,   &
            2375                              GMTR_A_var,      &
            2376                              GMTR_A_var_pl
            2377                         !
            2378                         implicit none
            2379                         !
            2380                         real(8), intent(inout) :: scl(ADM_gall   ,ADM_kall,ADM_lall   )
            2381                         real(8), intent(inout) :: scl_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2382                         !
            2383                         real(8), intent(in)  :: vx(ADM_gall   ,ADM_kall,ADM_lall   )
            2384                         real(8), intent(in)  :: vx_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2385                         real(8), intent(in)  :: vy(ADM_gall   ,ADM_kall,ADM_lall   )
            2386                         real(8), intent(in)  :: vy_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2387                         real(8), intent(in)  :: vz(ADM_gall   ,ADM_kall,ADM_lall   )
            2388                         real(8), intent(in)  :: vz_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2389                         !
            2390                         real(8), intent(in), optional :: mfact
            2391                         !
            2392                         real(8)  :: vxt(         &
            2393                              ADM_gall,           &
            2394                              ADM_kall,           &
            2395                              ADM_lall,           &
            2396                              ADM_TI:ADM_TJ)
            2397                         real(8)  :: vxt_pl(      &
            2398                              ADM_gall_pl,        &
            2399                              ADM_kall,           &
            2400                              ADM_lall_pl)
            2401                         !
            2402                         real(8)  :: vyt(         &
            2403                              ADM_gall,           &
            2404                              ADM_kall,           &
            2405                              ADM_lall,           &
            2406                              ADM_TI:ADM_TJ)
            2407                         real(8)  :: vyt_pl(      &
            2408                              ADM_gall_pl,        &
            2409                              ADM_kall,           &
            2410                              ADM_lall_pl)
            2411                         !
            2412                         real(8)  :: vzt(         &
            2413                              ADM_gall,           &
            2414                              ADM_kall,           &
            2415                              ADM_lall,           &
            2416                              ADM_TI:ADM_TJ)
            2417                         real(8)  :: vzt_pl(      &
            2418                              ADM_gall_pl,        &
            2419                              ADM_kall,           &
            2420                              ADM_lall_pl)
            2421                         !
            2422                         real(8)  :: flux(        &
            2423                              ADM_gall,           &
            2424                              ADM_AI:ADM_AJ)
            2425                         real(8)  :: flux_pl(     &
            2426                              ADM_gall_pl)
            2427                         !
            2428                         integer :: l,n,k
            2429                         integer :: rgnid
            2430                         real(8) :: fact
            2431                         !
            2432                         integer :: nstart,nend
            2433                         !
            2434                         integer :: suf,i,j
            2435                         suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
            2436                     
            2437                         call DEBUG_rapstart('++++OPRT_vorticity')
            2438                     
            2439     1                   if(present(mfact)) then
            2440     1                      fact=mfact
            2441     1                   else
            2442     1                      fact=1.0D0
            2443     1                   end if
            2444                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2445     1  pp               do l=1,ADM_lall
            2446     1   p                  rgnid=ADM_prc_tab(l,ADM_prc_me)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 120
                                   <<<      GMTR_T_var: 48, vzt: 24, vyt: 24
                                   <<<      vxt: 24
                                   <<< Loop-information  End >>>
            2447     2  pp                  do k=ADM_kmin,ADM_kmax
            2448     2                         !
            2449     2   p                     nstart = suf(ADM_gmin-1,ADM_gmin-1)
            2450     2   p                     nend = suf(ADM_gmax,ADM_gmax)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 30
                                   <<<      GMTR_T_var: 12, vzt: 6, vyt: 6, vxt: 6
                                   <<< Loop-information  End >>>
            2451     3   p   2v                do n = nstart,nend
            2452     3   p   2v                   vxt(n,k,l,ADM_TI)                            &
            2453     3                                 =GMTR_T_var(n,ADM_KNONE,l,ADM_TI,GMTR_T_W1)&
            2454     3                                 *vx(n,k,l)                         &
            2455     3                                 +GMTR_T_var(n,ADM_KNONE,l,ADM_TI,GMTR_T_W2)&
            2456     3                                 *vx(n+1,k,l)                       &
            2457     3                                 +GMTR_T_var(n,ADM_KNONE,l,ADM_TI,GMTR_T_W3)&
            2458     3                                 *vx(n+1+ADM_gall_1d,k,l)
            2459     3   p   2v                   vxt(n,k,l,ADM_TJ)                            &
            2460     3                                 =GMTR_T_var(n,ADM_KNONE,l,ADM_TJ,GMTR_T_W1)&
            2461     3                                 *vx(n,k,l)                         &
            2462     3                                 +GMTR_T_var(n,ADM_KNONE,l,ADM_TJ,GMTR_T_W2)&
            2463     3                                 *vx(n+1+ADM_gall_1d,k,l)                     &
            2464     3                                 +GMTR_T_var(n,ADM_KNONE,l,ADM_TJ,GMTR_T_W3)&
            2465     3                                 *vx(n+ADM_gall_1d,k,l)
            2466     3   p   2v                   vyt(n,k,l,ADM_TI)                            &
            2467     3                                 =GMTR_T_var(n,ADM_KNONE,l,ADM_TI,GMTR_T_W1)&
            2468     3                                 *vy(n,k,l)                         &
            2469     3                                 +GMTR_T_var(n,ADM_KNONE,l,ADM_TI,GMTR_T_W2)&
            2470     3                                 *vy(n+1,k,l)                       &
            2471     3                                 +GMTR_T_var(n,ADM_KNONE,l,ADM_TI,GMTR_T_W3)&
            2472     3                                 *vy(n+1+ADM_gall_1d,k,l)
            2473     3   p   2v                   vyt(n,k,l,ADM_TJ)                            &
            2474     3                                 =GMTR_T_var(n,ADM_KNONE,l,ADM_TJ,GMTR_T_W1)&
            2475     3                                 *vy(n,k,l)                         &
            2476     3                                 +GMTR_T_var(n,ADM_KNONE,l,ADM_TJ,GMTR_T_W2)&
            2477     3                                 *vy(n+1+ADM_gall_1d,k,l)                     &
            2478     3                                 +GMTR_T_var(n,ADM_KNONE,l,ADM_TJ,GMTR_T_W3)&
            2479     3                                 *vy(n+ADM_gall_1d,k,l)
            2480     3   p   2v                   vzt(n,k,l,ADM_TI)                            &
            2481     3                                 =GMTR_T_var(n,ADM_KNONE,l,ADM_TI,GMTR_T_W1)&
            2482     3                                 *vz(n,k,l)                         &
            2483     3                                 +GMTR_T_var(n,ADM_KNONE,l,ADM_TI,GMTR_T_W2)&
            2484     3                                 *vz(n+1,k,l)                       &
            2485     3                                 +GMTR_T_var(n,ADM_KNONE,l,ADM_TI,GMTR_T_W3)&
            2486     3                                 *vz(n+1+ADM_gall_1d,k,l)
            2487     3   p   2v                   vzt(n,k,l,ADM_TJ)                            &
            2488     3                                 =GMTR_T_var(n,ADM_KNONE,l,ADM_TJ,GMTR_T_W1)&
            2489     3                                 *vz(n,k,l)                         &
            2490     3                                 +GMTR_T_var(n,ADM_KNONE,l,ADM_TJ,GMTR_T_W2)&
            2491     3                                 *vz(n+1+ADM_gall_1d,k,l)                     &
            2492     3                                 +GMTR_T_var(n,ADM_KNONE,l,ADM_TJ,GMTR_T_W3)&
            2493     3                                 *vz(n+ADM_gall_1d,k,l)
            2494     3   p   2v                enddo
            2495     3   p                     if(ADM_rgn_vnum(ADM_W,rgnid)==3) then
            2496     3   p                        vxt(suf(ADM_gmin-1,ADM_gmin-1),k,l,ADM_TI)     &
            2497     3                                 =vxt(suf(ADM_gmin,ADM_gmin-1),k,l,ADM_TJ)
            2498     3   p                        vyt(suf(ADM_gmin-1,ADM_gmin-1),k,l,ADM_TI)     &
            2499     3                                 =vyt(suf(ADM_gmin,ADM_gmin-1),k,l,ADM_TJ)
            2500     3   p                        vzt(suf(ADM_gmin-1,ADM_gmin-1),k,l,ADM_TI)     &
            2501     3                                 =vzt(suf(ADM_gmin,ADM_gmin-1),k,l,ADM_TJ)
            2502     3   p                     end if
            2503     2   p                  enddo
            2504     1   p               enddo
            2505                         !
            2506     1                   if(ADM_prc_me==ADM_prc_pl) then
            2507     1                      !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 124
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 2)
                                   <<<    SPLIT
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2508     2  pp    v             do k=ADM_kmin,ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 1)
                                   <<< Loop-information  End >>>
            2509     3  pp   2                 do l=1,ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 125
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2510     4  pp   2v                   do n=ADM_gmin_pl,ADM_GMAX_PL-1
            2511     4   p   2v                      vxt_pl(n,k,l)                            &
            2512     4                                    =GMTR_T_var_pl(n,ADM_KNONE,l,GMTR_T_W1)&
            2513     4                                    *vx_pl(ADM_gslf_pl,k,l)              &
            2514     4                                    +GMTR_T_var_pl(n,ADM_KNONE,l,GMTR_T_W2)&
            2515     4                                    *vx_pl(n,k,l)                        &
            2516     4                                    +GMTR_T_var_pl(n,ADM_KNONE,l,GMTR_T_W3)&
            2517     4                                    *vx_pl(n+1,k,l)
            2518     4   p   2v                      vyt_pl(n,k,l)                            &
            2519     4                                    =GMTR_T_var_pl(n,ADM_KNONE,l,GMTR_T_W1)&
            2520     4                                    *vy_pl(ADM_gslf_pl,k,l)              &
            2521     4                                    +GMTR_T_var_pl(n,ADM_KNONE,l,GMTR_T_W2)&
            2522     4                                    *vy_pl(n,k,l)                        &
            2523     4                                    +GMTR_T_var_pl(n,ADM_KNONE,l,GMTR_T_W3)&
            2524     4                                    *vy_pl(n+1,k,l)
            2525     4   p   2v                      vzt_pl(n,k,l)                            &
            2526     4                                    =GMTR_T_var_pl(n,ADM_KNONE,l,GMTR_T_W1)&
            2527     4                                    *vz_pl(ADM_gslf_pl,k,l)              &
            2528     4                                    +GMTR_T_var_pl(n,ADM_KNONE,l,GMTR_T_W2)&
            2529     4                                    *vz_pl(n,k,l)                        &
            2530     4                                    +GMTR_T_var_pl(n,ADM_KNONE,l,GMTR_T_W3)&
            2531     4                                    *vz_pl(n+1,k,l)
            2532     4   p   2v                   enddo
            2533     3   p   2v                   vxt_pl(ADM_GMAX_PL,k,l)&
            2534     3                                 =GMTR_T_var_pl(ADM_GMAX_PL,ADM_KNONE,l,GMTR_T_W1)&
            2535     3                                 *vx_pl(ADM_gslf_pl,k,l)                        &
            2536     3                                 +GMTR_T_var_pl(ADM_GMAX_PL,ADM_KNONE,l,GMTR_T_W2)&
            2537     3                                 *vx_pl(ADM_GMAX_PL,k,l)                        &
            2538     3                                 +GMTR_T_var_pl(ADM_GMAX_PL,ADM_KNONE,l,GMTR_T_W3)&
            2539     3                                 *vx_pl(ADM_gmin_pl,k,l)
            2540     3   p   2v                   vyt_pl(ADM_GMAX_PL,k,l)&
            2541     3                                 =GMTR_T_var_pl(ADM_GMAX_PL,ADM_KNONE,l,GMTR_T_W1)&
            2542     3                                 *vy_pl(ADM_gslf_pl,k,l)                        &
            2543     3                                 +GMTR_T_var_pl(ADM_GMAX_PL,ADM_KNONE,l,GMTR_T_W2)&
            2544     3                                 *vy_pl(ADM_GMAX_PL,k,l)                        &
            2545     3                                 +GMTR_T_var_pl(ADM_GMAX_PL,ADM_KNONE,l,GMTR_T_W3)&
            2546     3                                 *vy_pl(ADM_gmin_pl,k,l)
            2547     3   p   2v                   vzt_pl(ADM_GMAX_PL,k,l)&
            2548     3                                 =GMTR_T_var_pl(ADM_GMAX_PL,ADM_KNONE,l,GMTR_T_W1)&
            2549     3                                 *vz_pl(ADM_gslf_pl,k,l)                        &
            2550     3                                 +GMTR_T_var_pl(ADM_GMAX_PL,ADM_KNONE,l,GMTR_T_W2)&
            2551     3                                 *vz_pl(ADM_GMAX_PL,k,l)                        &
            2552     3                                 +GMTR_T_var_pl(ADM_GMAX_PL,ADM_KNONE,l,GMTR_T_W3)&
            2553     3                                 *vz_pl(ADM_gmin_pl,k,l)
            2554     3   p   2                 enddo
            2555     2   p   2v             enddo
            2556     1                   end if
            2557                         !
            2558     1                   do l=1,ADM_lall
            2559     1                      rgnid=ADM_prc_tab(l,ADM_prc_me)
            2560     1                      !
            2561     2                      do k=ADM_kmin,ADM_kmax
            2562     2                         !
            2563     2                         nstart = suf(ADM_gmin-1,ADM_gmin  )
            2564     2                         nend   = suf(ADM_gmax  ,ADM_gmax  )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 302
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2565     3  pp   4v                do n = nstart,nend
            2566     3   p   4v                   flux(n,ADM_AI)&
            2567     3                                 =((vxt(n-ADM_gall_1d,k,l,ADM_TJ)+vxt(n,k,l,ADM_TI))&
            2568     3                                 *GMTR_A_var(n,ADM_KNONE,l,ADM_AI,GMTR_A_HTX)&
            2569     3                                 +(vyt(n-ADM_gall_1d,k,l,ADM_TJ)+vyt(n,k,l,ADM_TI))&
            2570     3                                 *GMTR_A_var(n,ADM_KNONE,l,ADM_AI,GMTR_A_HTY)&
            2571     3                                 +(vzt(n-ADM_gall_1d,k,l,ADM_TJ)+vzt(n,k,l,ADM_TI))&
            2572     3                                 *GMTR_A_var(n,ADM_KNONE,l,ADM_AI,GMTR_A_HTZ))*0.5D0
            2573     3   p   4v                enddo
            2574     2                         nstart = suf(ADM_gmin-1,ADM_gmin-1)
            2575     2                         nend   = suf(ADM_gmax  ,ADM_gmax  )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 327
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2576     3  pp   4v                do n = nstart,nend
            2577     3   p   4v                   flux(n,ADM_AIJ)&
            2578     3                                 =((vxt(n,k,l,ADM_TI)+vxt(n,k,l,ADM_TJ))&
            2579     3                                 *GMTR_A_var(n,ADM_KNONE,l,ADM_AIJ,GMTR_A_HTX)&
            2580     3                                 +(vyt(n,k,l,ADM_TI)+vyt(n,k,l,ADM_TJ))&
            2581     3                                 *GMTR_A_var(n,ADM_KNONE,l,ADM_AIJ,GMTR_A_HTY)&
            2582     3                                 +(vzt(n,k,l,ADM_TI)+vzt(n,k,l,ADM_TJ))&
            2583     3                                 *GMTR_A_var(n,ADM_KNONE,l,ADM_AIJ,GMTR_A_HTZ))*0.5D0
            2584     3   p   4v                enddo
            2585     2                         nstart = suf(ADM_gmin  ,ADM_gmin-1)
            2586     2                         nend   = suf(ADM_gmax  ,ADM_gmax  )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 327
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2587     3  pp   4v                do n = nstart,nend
            2588     3   p   4v                   flux(n,ADM_AJ)&
            2589     3                                 =((vxt(n,k,l,ADM_TJ)+vxt(n-1,k,l,ADM_TI))&
            2590     3                                 *GMTR_A_var(n,ADM_KNONE,l,ADM_AJ,GMTR_A_HTX)&
            2591     3                                 +(vyt(n,k,l,ADM_TJ)+vyt(n-1,k,l,ADM_TI))&
            2592     3                                 *GMTR_A_var(n,ADM_KNONE,l,ADM_AJ,GMTR_A_HTY)&
            2593     3                                 +(vzt(n,k,l,ADM_TJ)+vzt(n-1,k,l,ADM_TI))&
            2594     3                                 *GMTR_A_var(n,ADM_KNONE,l,ADM_AJ,GMTR_A_HTZ))*0.5D0
            2595     3   p   4v                enddo
            2596     2                         !
            2597     2                         nstart = suf(ADM_gmin  ,ADM_gmin  )
            2598     2                         nend   = suf(ADM_gmax  ,ADM_gmax  )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2599     3  pp   4v                do n = nstart,nend
            2600     3   p   4v                   scl(n,k,l)=-(&
            2601     3                                 +flux(n,ADM_AI)&
            2602     3                                 +flux(n,ADM_AIJ)&
            2603     3                                 +flux(n,ADM_AJ)&
            2604     3                                 -flux(n-1,ADM_AI)&
            2605     3                                 -flux(n-1-ADM_gall_1d,ADM_AIJ)&
            2606     3                                 -flux(n-ADM_gall_1d,ADM_AJ)&
            2607     3                                 ) * GMTR_P_var(n,ADM_KNONE,l,GMTR_P_RAREA)&
            2608     3                                 * fact
            2609     3   p   4v                enddo
            2610     2                         !
            2611     3                         if(ADM_rgn_vnum(ADM_W,rgnid)==3) then
            2612     3                            scl(suf(ADM_gmin,ADM_gmin),k,l)=-(&
            2613     3                                 +flux(suf(ADM_gmin,ADM_gmin),ADM_AI)&
            2614     3                                 +flux(suf(ADM_gmin,ADM_gmin),ADM_AIJ)&
            2615     3                                 +flux(suf(ADM_gmin,ADM_gmin),ADM_AJ)&
            2616     3                                 -flux(suf(ADM_gmin-1,ADM_gmin),ADM_AI)&
            2617     3                                 -flux(suf(ADM_gmin-1,ADM_gmin-1),ADM_AIJ)&
            2618     3                                 ) * GMTR_P_var(suf(ADM_gmin,ADM_gmin),ADM_KNONE,l,GMTR_P_RAREA)&
            2619     3                                 * fact
            2620     3                         end if
            2621     2                      enddo
            2622     1                   enddo
            2623                         !
            2624     1                   if(ADM_prc_me==ADM_prc_pl) then
            2625     2                      do k=ADM_kmin,ADM_kmax
            2626     3                         do l=1,ADM_lall_pl
            2627     3                            !
            2628     3                            flux_pl(ADM_gmin_pl)&
            2629     3                                 =((vxt_pl(ADM_GMAX_PL,k,l)+vxt_pl(ADM_gmin_pl,k,l))&
            2630     3                                 *GMTR_A_var_pl(ADM_gmin_pl,ADM_KNONE,l,GMTR_A_HTX)&
            2631     3                                 +(vyt_pl(ADM_GMAX_PL,k,l)+vyt_pl(ADM_gmin_pl,k,l))&
            2632     3                                 *GMTR_A_var_pl(ADM_gmin_pl,ADM_KNONE,l,GMTR_A_HTY)&
            2633     3                                 +(vzt_pl(ADM_GMAX_PL,k,l)+vzt_pl(ADM_gmin_pl,k,l))&
            2634     3                                 *GMTR_A_var_pl(ADM_gmin_pl,ADM_KNONE,l,GMTR_A_HTZ) )*0.5D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 327
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2635     4  pp   4v                   do n=ADM_gmin_pl+1,ADM_GMAX_PL
            2636     4   p   4v                      flux_pl(n)&
            2637     4                                    =((vxt_pl(n-1,k,l)+vxt_pl(n,k,l))&
            2638     4                                    *GMTR_A_var_pl(n,ADM_KNONE,l,GMTR_A_HTX)&
            2639     4                                    +(vyt_pl(n-1,k,l)+vyt_pl(n,k,l))&
            2640     4                                    *GMTR_A_var_pl(n,ADM_KNONE,l,GMTR_A_HTY)&
            2641     4                                    +(vzt_pl(n-1,k,l)+vzt_pl(n,k,l))&
            2642     4                                    *GMTR_A_var_pl(n,ADM_KNONE,l,GMTR_A_HTZ) )*0.5D0
            2643     4   p   4v                   enddo
            2644     3                            !
            2645     3                            scl_pl(ADM_gslf_pl,k,l)=-(&
            2646     3                                 +flux_pl(ADM_gmin_pl  )&
            2647     3                                 +flux_pl(ADM_gmin_pl+1)&
            2648     3                                 +flux_pl(ADM_gmin_pl+2)&
            2649     3                                 +flux_pl(ADM_gmin_pl+3)&
            2650     3                                 +flux_pl(ADM_gmin_pl+4)&
            2651     3                                 ) * GMTR_P_var_pl(ADM_gslf_pl,ADM_KNONE,l,GMTR_P_RAREA)&
            2652     3                                 * fact
            2653     3                         enddo
            2654     2                      enddo
            2655     1                   end if
            2656                     
            2657                         call DEBUG_rapend('++++OPRT_vorticity')
            2658                     
            2659                       end subroutine OPRT_vorticity
            2660                     
            2661                       !-----------------------------------------------------------------------------
            2662                       subroutine OPRT_divdamp( &
            2663                            grdx, grdx_pl, &
            2664                            grdy, grdy_pl, &
            2665                            grdz, grdz_pl, &
            2666                            vx,   vx_pl,   &
            2667                            vy,   vy_pl,   &
            2668                            vz,   vz_pl,   &
            2669                            mfact          )
            2670                         use mod_adm, only: &
            2671                            ADM_W,        &
            2672                            ADM_TI,       &
            2673                            ADM_TJ,       &
            2674                            ADM_AI,       &
            2675                            ADM_AIJ,      &
            2676                            ADM_AJ,       &
            2677                            ADM_prc_tab,  &
            2678                            ADM_prc_me,   &
            2679                            ADM_prc_pl,   &
            2680                            ADM_rgn_vnum, &
            2681                            ADM_lall,     &
            2682                            ADM_lall_pl,  &
            2683                            ADM_gall,     &
            2684                            ADM_gall_pl,  &
            2685                            ADM_kall,     &
            2686                            ADM_gall_1d,  &
            2687                            ADM_gmin,     &
            2688                            ADM_gmax,     &
            2689                            ADM_gslf_pl,  &
            2690                            ADM_gmin_pl,  &
            2691                            ADM_gmax_pl,  &
            2692                            ADM_KNONE,    &
            2693                            ADM_kmin,     &
            2694                            ADM_kmax
            2695                         use mod_gmtr, only: &
            2696                            GMTR_P_RAREA,  &
            2697                            GMTR_T_RAREA,  &
            2698                            GMTR_A_HNX,    &
            2699                            GMTR_A_HNY,    &
            2700                            GMTR_A_HNZ,    &
            2701                            GMTR_A_TNX,    &
            2702                            GMTR_A_TNY,    &
            2703                            GMTR_A_TNZ,    &
            2704                            GMTR_A_TN2X,   &
            2705                            GMTR_A_TN2Y,   &
            2706                            GMTR_A_TN2Z,   &
            2707                            GMTR_P_var,    &
            2708                            GMTR_P_var_pl, &
            2709                            GMTR_T_var,    &
            2710                            GMTR_T_var_pl, &
            2711                            GMTR_A_var,    &
            2712                            GMTR_A_var_pl
            2713                         implicit none
            2714                     
            2715                         real(8), intent(inout) :: grdx   (ADM_gall   ,ADM_kall,ADM_lall   )
            2716                         real(8), intent(inout) :: grdx_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2717                         real(8), intent(inout) :: grdy   (ADM_gall   ,ADM_kall,ADM_lall   )
            2718                         real(8), intent(inout) :: grdy_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2719                         real(8), intent(inout) :: grdz   (ADM_gall   ,ADM_kall,ADM_lall   )
            2720                         real(8), intent(inout) :: grdz_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2721                         real(8), intent(in)    :: vx     (ADM_gall   ,ADM_kall,ADM_lall   )
            2722                         real(8), intent(in)    :: vx_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2723                         real(8), intent(in)    :: vy     (ADM_gall   ,ADM_kall,ADM_lall   )
            2724                         real(8), intent(in)    :: vy_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2725                         real(8), intent(in)    :: vz     (ADM_gall   ,ADM_kall,ADM_lall   )
            2726                         real(8), intent(in)    :: vz_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2727                         real(8), intent(in), optional :: mfact
            2728                     
            2729                         real(8) :: sclt   (ADM_gall,   ADM_kall,ADM_TI:ADM_TJ)
            2730                         real(8) :: sclt_pl(ADM_gall_pl,ADM_kall)
            2731                         real(8) :: fact
            2732                     
            2733                         integer :: rgnid
            2734                         integer :: nstart, nend
            2735                     
            2736                         integer :: ij
            2737                         integer :: im1j, ijm1, im1jm1
            2738                         integer :: ip1j, ijp1, ip1jp1
            2739                     
            2740                         integer :: k, l, n, v, k0
            2741                     
            2742                         integer :: suf,i,j
            2743                         suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
            2744                     
            2745                         integer :: TI,TJ,AI,AIJ,AJ,TNX,TNY,TNZ,TN2X,TN2Y,TN2Z,HNX,HNY,HNZ
            2746                         !---------------------------------------------------------------------------
            2747                     
            2748                         call DEBUG_rapstart('++++OPRT_divdamp')
            2749                     
            2750                         k0   = ADM_KNONE
            2751                         TI   = ADM_TI
            2752                         TJ   = ADM_TJ
            2753                         AI   = ADM_AI
            2754                         AIJ  = ADM_AIJ
            2755                         AJ   = ADM_AJ
            2756                         TNX  = GMTR_A_TNX
            2757                         TNY  = GMTR_A_TNY
            2758                         TNZ  = GMTR_A_TNZ
            2759                         HNX  = GMTR_A_HNX
            2760                         HNY  = GMTR_A_HNY
            2761                         HNZ  = GMTR_A_HNZ
            2762                         TN2X = GMTR_A_TN2X
            2763                         TN2Y = GMTR_A_TN2Y
            2764                         TN2Z = GMTR_A_TN2Z
            2765                     
            2766     1                   if ( present(mfact) ) then
            2767     1                      fact = mfact
            2768     1                   else
            2769     1                      fact = 1.D0
            2770     1                   endif
            2771                     
            2772     1                   do l = 1, ADM_lall
            2773     1                      rgnid = ADM_prc_tab(l,ADM_prc_me)
            2774     1               
            2775     1                      nstart = suf(ADM_gmin-1,ADM_gmin-1)
            2776     1                      nend   = suf(ADM_gmax,  ADM_gmax  )
            2777     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 450
                                   <<<      GMTR_A_var: 270, vx: 30, vy: 30, vz: 30
                                   <<<      GMTR_T_var: 30, sclt: 60
                                   <<< Loop-information  End >>>
            2778     2  pp                  do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 51
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 90
                                   <<<      GMTR_A_var: 54, GMTR_T_var: 6, sclt: 12
                                   <<<      vx: 6, vy: 6, vz: 6
                                   <<< Loop-information  End >>>
            2779     3  pp    v                do n = nstart, nend
            2780     3   p    v                   ij     = n
            2781     3   p    v                   ip1j   = n + 1
            2782     3   p    v                   ijp1   = n     + ADM_gall_1d
            2783     3   p    v                   ip1jp1 = n + 1 + ADM_gall_1d
            2784     3               
            2785     3   p    v                   sclt(n,k,ADM_TI) = ( - ( vx(ij    ,k,l) + vx(ip1j  ,k,l) ) * GMTR_A_var(ij,  k0,l,AI, TNX) &
            2786     3                                                 - ( vy(ij    ,k,l) + vy(ip1j  ,k,l) ) * GMTR_A_var(ij,  k0,l,AI, TNY) &
            2787     3                                                 - ( vz(ij    ,k,l) + vz(ip1j  ,k,l) ) * GMTR_A_var(ij,  k0,l,AI, TNZ) &
            2788     3                                                 - ( vx(ip1j  ,k,l) + vx(ip1jp1,k,l) ) * GMTR_A_var(ip1j,k0,l,AJ, TNX) &
            2789     3                                                 - ( vy(ip1j  ,k,l) + vy(ip1jp1,k,l) ) * GMTR_A_var(ip1j,k0,l,AJ, TNY) &
            2790     3                                                 - ( vz(ip1j  ,k,l) + vz(ip1jp1,k,l) ) * GMTR_A_var(ip1j,k0,l,AJ, TNZ) &
            2791     3                                                 + ( vx(ip1jp1,k,l) + vx(ij    ,k,l) ) * GMTR_A_var(ij,  k0,l,AIJ,TNX) &
            2792     3                                                 + ( vy(ip1jp1,k,l) + vy(ij    ,k,l) ) * GMTR_A_var(ij,  k0,l,AIJ,TNY) &
            2793     3                                                 + ( vz(ip1jp1,k,l) + vz(ij    ,k,l) ) * GMTR_A_var(ij,  k0,l,AIJ,TNZ) &
            2794     3                                               ) * 0.5D0 * GMTR_T_var(ij,k0,l,ADM_TI,GMTR_T_RAREA)
            2795     3               
            2796     3   p    v                   sclt(n,k,ADM_TJ) = ( - ( vx(ij    ,k,l) + vx(ip1jp1,k,l) ) * GMTR_A_var(ij,  k0,l,AIJ,TNX) &
            2797     3                                                 - ( vy(ij    ,k,l) + vy(ip1jp1,k,l) ) * GMTR_A_var(ij,  k0,l,AIJ,TNY) &
            2798     3                                                 - ( vz(ij    ,k,l) + vz(ip1jp1,k,l) ) * GMTR_A_var(ij,  k0,l,AIJ,TNZ) &
            2799     3                                                 + ( vx(ip1jp1,k,l) + vx(ijp1  ,k,l) ) * GMTR_A_var(ijp1,k0,l,AI, TNX) &
            2800     3                                                 + ( vy(ip1jp1,k,l) + vy(ijp1  ,k,l) ) * GMTR_A_var(ijp1,k0,l,AI, TNY) &
            2801     3                                                 + ( vz(ip1jp1,k,l) + vz(ijp1  ,k,l) ) * GMTR_A_var(ijp1,k0,l,AI, TNZ) &
            2802     3                                                 + ( vx(ijp1  ,k,l) + vx(ij    ,k,l) ) * GMTR_A_var(ij,  k0,l,AJ, TNX) &
            2803     3                                                 + ( vy(ijp1  ,k,l) + vy(ij    ,k,l) ) * GMTR_A_var(ij,  k0,l,AJ, TNY) &
            2804     3                                                 + ( vz(ijp1  ,k,l) + vz(ij    ,k,l) ) * GMTR_A_var(ij,  k0,l,AJ, TNZ) &
            2805     3                                               ) * 0.5D0 * GMTR_T_var(ij,k0,l,ADM_TJ,GMTR_T_RAREA)
            2806     3   p    v                enddo
            2807     2   p                  enddo
            2808     1               
            2809     1                      nstart = suf(ADM_gmin,ADM_gmin)
            2810     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 432
                                   <<<      GMTR_A_var: 360, grdy: 36, grdx: 36
                                   <<< Loop-information  End >>>
            2811     2  pp                  do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 53
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 72
                                   <<<      GMTR_A_var: 60, grdy: 6, grdx: 6
                                   <<< Loop-information  End >>>
            2812     3  pp   2v                do n = nstart, nend
            2813     3   p   2v                   ij     = n
            2814     3   p   2v                   im1j   = n - 1
            2815     3   p   2v                   im1jm1 = n - 1 - ADM_gall_1d
            2816     3   p   2v                   ijm1   = n     - ADM_gall_1d
            2817     3               
            2818     3   p   2v                   grdx(n,k,l) = ( + ( sclt(ijm1,  k,TJ) + sclt(ij,    k,TI) ) * GMTR_A_var(ij,    k0,l,AI, HNX) &
            2819     3                                            + ( sclt(ij,    k,TI) + sclt(ij,    k,TJ) ) * GMTR_A_var(ij,    k0,l,AIJ,HNX) &
            2820     3                                            + ( sclt(ij,    k,TJ) + sclt(im1j,  k,TI) ) * GMTR_A_var(ij,    k0,l,AJ, HNX) &
            2821     3                                            - ( sclt(im1jm1,k,TJ) + sclt(im1j,  k,TI) ) * GMTR_A_var(im1j,  k0,l,AI, HNX) &
            2822     3                                            - ( sclt(im1jm1,k,TI) + sclt(im1jm1,k,TJ) ) * GMTR_A_var(im1jm1,k0,l,AIJ,HNX) &
            2823     3                                            - ( sclt(ijm1  ,k,TJ) + sclt(im1jm1,k,TI) ) * GMTR_A_var(ijm1,  k0,l,AJ, HNX) &
            2824     3                                          ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_RAREA) * fact
            2825     3               
            2826     3   p   2v                   grdy(n,k,l) = ( + ( sclt(ijm1,  k,TJ) + sclt(ij,    k,TI) ) * GMTR_A_var(ij,    k0,l,AI, HNY) &
            2827     3                                            + ( sclt(ij,    k,TI) + sclt(ij,    k,TJ) ) * GMTR_A_var(ij,    k0,l,AIJ,HNY) &
            2828     3                                            + ( sclt(ij,    k,TJ) + sclt(im1j,  k,TI) ) * GMTR_A_var(ij,    k0,l,AJ, HNY) &
            2829     3                                            - ( sclt(im1jm1,k,TJ) + sclt(im1j,  k,TI) ) * GMTR_A_var(im1j,  k0,l,AI, HNY) &
            2830     3                                            - ( sclt(im1jm1,k,TI) + sclt(im1jm1,k,TJ) ) * GMTR_A_var(im1jm1,k0,l,AIJ,HNY) &
            2831     3                                            - ( sclt(ijm1  ,k,TJ) + sclt(im1jm1,k,TI) ) * GMTR_A_var(ijm1,  k0,l,AJ, HNY) &
            2832     3                                          ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_RAREA) * fact
            2833     3               
            2834     3   p   2v                   grdz(n,k,l) = ( + ( sclt(ijm1,  k,TJ) + sclt(ij,    k,TI) ) * GMTR_A_var(ij,    k0,l,AI, HNZ) &
            2835     3                                            + ( sclt(ij,    k,TI) + sclt(ij,    k,TJ) ) * GMTR_A_var(ij,    k0,l,AIJ,HNZ) &
            2836     3                                            + ( sclt(ij,    k,TJ) + sclt(im1j,  k,TI) ) * GMTR_A_var(ij,    k0,l,AJ, HNZ) &
            2837     3                                            - ( sclt(im1jm1,k,TJ) + sclt(im1j,  k,TI) ) * GMTR_A_var(im1j,  k0,l,AI, HNZ) &
            2838     3                                            - ( sclt(im1jm1,k,TI) + sclt(im1jm1,k,TJ) ) * GMTR_A_var(im1jm1,k0,l,AIJ,HNZ) &
            2839     3                                            - ( sclt(ijm1  ,k,TJ) + sclt(im1jm1,k,TI) ) * GMTR_A_var(ijm1,  k0,l,AJ, HNZ) &
            2840     3                                          ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_RAREA) * fact
            2841     3   p   2v                enddo
            2842     2   p                  enddo
            2843     1               
            2844     2                      if ( ADM_rgn_vnum(ADM_W,rgnid) == 3 ) then
            2845     2                         n = suf(ADM_gmin,ADM_gmin)
            2846     2               
            2847     2                         ij     = n
            2848     2                         im1j   = n - 1
            2849     2                         im1jm1 = n - 1 - ADM_gall_1d
            2850     2                         ijm1   = n     - ADM_gall_1d
            2851     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 191
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2852     3  pp    v                do k = ADM_kmin, ADM_kmax
            2853     3   p    v                   sclt(im1jm1,k,ADM_TI) = sclt(ijm1,k,ADM_TJ) ! copy
            2854     3               
            2855     3   p    v                   grdx(n,k,l) = ( + ( sclt(ijm1,  k,TJ) + sclt(ij,    k,TI) ) * GMTR_A_var(ij,    k0,l,AI, HNX) &
            2856     3                                            + ( sclt(ij,    k,TI) + sclt(ij,    k,TJ) ) * GMTR_A_var(ij,    k0,l,AIJ,HNX) &
            2857     3                                            + ( sclt(ij,    k,TJ) + sclt(im1j,  k,TI) ) * GMTR_A_var(ij,    k0,l,AJ, HNX) &
            2858     3                                            - ( sclt(im1jm1,k,TJ) + sclt(im1j,  k,TI) ) * GMTR_A_var(im1j,  k0,l,AI, HNX) &
            2859     3                                            - ( sclt(im1jm1,k,TI) + sclt(im1jm1,k,TJ) ) * GMTR_A_var(im1jm1,k0,l,AIJ,HNX) &
            2860     3                                          ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_RAREA) * fact
            2861     3               
            2862     3   p    v                   grdy(n,k,l) = ( + ( sclt(ijm1,  k,TJ) + sclt(ij,    k,TI) ) * GMTR_A_var(ij,    k0,l,AI, HNY) &
            2863     3                                            + ( sclt(ij,    k,TI) + sclt(ij,    k,TJ) ) * GMTR_A_var(ij,    k0,l,AIJ,HNY) &
            2864     3                                            + ( sclt(ij,    k,TJ) + sclt(im1j,  k,TI) ) * GMTR_A_var(ij,    k0,l,AJ, HNY) &
            2865     3                                            - ( sclt(im1jm1,k,TJ) + sclt(im1j,  k,TI) ) * GMTR_A_var(im1j,  k0,l,AI, HNY) &
            2866     3                                            - ( sclt(im1jm1,k,TI) + sclt(im1jm1,k,TJ) ) * GMTR_A_var(im1jm1,k0,l,AIJ,HNY) &
            2867     3                                          ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_RAREA) * fact
            2868     3               
            2869     3   p    v                   grdz(n,k,l) = ( + ( sclt(ijm1,  k,TJ) + sclt(ij,    k,TI) ) * GMTR_A_var(ij,    k0,l,AI, HNZ) &
            2870     3                                            + ( sclt(ij,    k,TI) + sclt(ij,    k,TJ) ) * GMTR_A_var(ij,    k0,l,AIJ,HNZ) &
            2871     3                                            + ( sclt(ij,    k,TJ) + sclt(im1j,  k,TI) ) * GMTR_A_var(ij,    k0,l,AJ, HNZ) &
            2872     3                                            - ( sclt(im1jm1,k,TJ) + sclt(im1j,  k,TI) ) * GMTR_A_var(im1j,  k0,l,AI, HNZ) &
            2873     3                                            - ( sclt(im1jm1,k,TI) + sclt(im1jm1,k,TJ) ) * GMTR_A_var(im1jm1,k0,l,AIJ,HNZ) &
            2874     3                                          ) * 0.5D0 * GMTR_P_var(ij,k0,l,GMTR_P_RAREA) * fact
            2875     3   p    v                enddo
            2876     2                      endif
            2877     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 640
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2878     1  pp   6v             grdx   (:,ADM_kmin-1,l) = 0.D0
            2879     1   p   6v             grdx   (:,ADM_kmax+1,l) = 0.D0
            2880     1   p   6v             grdy   (:,ADM_kmin-1,l) = 0.D0
            2881     1   p   6v             grdy   (:,ADM_kmax+1,l) = 0.D0
            2882     1   p   6v             grdz   (:,ADM_kmin-1,l) = 0.D0
            2883     1   p   6v             grdz   (:,ADM_kmax+1,l) = 0.D0
            2884     1                   enddo
            2885                     
            2886     1                   if ( ADM_prc_me == ADM_prc_pl ) then
            2887     1                      n = ADM_GSLF_PL
            2888     2                      do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2889     3  pp                     do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 76
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2890     4  pp   2s                   do v = ADM_gmin_pl, ADM_gmax_pl
            2891     4   p   2v                      ij   = v
            2892     4   p   2v                      ijp1 = v + 1
            2893     4   p   2s                      if( ijp1 > ADM_gmax_pl ) ijp1 = ADM_gmin_pl
            2894     4               
            2895     4   p   2v                      sclt_pl(v,k) = ( + ( vx_pl(n   ,k,l) + vx_pl(ij  ,k,l) ) * GMTR_A_var_pl(ij,  k0,l,TNX ) &
            2896     4                                                + ( vy_pl(n   ,k,l) + vy_pl(ij  ,k,l) ) * GMTR_A_var_pl(ij,  k0,l,TNY ) &
            2897     4                                                + ( vz_pl(n   ,k,l) + vz_pl(ij  ,k,l) ) * GMTR_A_var_pl(ij,  k0,l,TNZ ) &
            2898     4                                                + ( vx_pl(ij  ,k,l) + vx_pl(ijp1,k,l) ) * GMTR_A_var_pl(ij,  k0,l,TN2X) &
            2899     4                                                + ( vy_pl(ij  ,k,l) + vy_pl(ijp1,k,l) ) * GMTR_A_var_pl(ij,  k0,l,TN2Y) &
            2900     4                                                + ( vz_pl(ij  ,k,l) + vz_pl(ijp1,k,l) ) * GMTR_A_var_pl(ij,  k0,l,TN2Z) &
            2901     4                                                - ( vx_pl(ijp1,k,l) + vx_pl(n   ,k,l) ) * GMTR_A_var_pl(ijp1,k0,l,TNX ) &
            2902     4                                                - ( vy_pl(ijp1,k,l) + vy_pl(n   ,k,l) ) * GMTR_A_var_pl(ijp1,k0,l,TNY ) &
            2903     4                                                - ( vz_pl(ijp1,k,l) + vz_pl(n   ,k,l) ) * GMTR_A_var_pl(ijp1,k0,l,TNZ ) &
            2904     4                                              ) * 0.5D0 * GMTR_T_var_pl(ij,k0,l,GMTR_T_RAREA)
            2905     4   p   2v                   enddo
            2906     3   p                     enddo
            2907     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2908     3  pp                     do k = ADM_kmin, ADM_kmax
            2909     3   p                        grdx_pl(n,k,l) = 0.D0
            2910     3   p                        grdy_pl(n,k,l) = 0.D0
            2911     3   p                        grdz_pl(n,k,l) = 0.D0
            2912     3               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2913     4   p   4s                   do v = ADM_gmin_pl, ADM_gmax_pl
            2914     4   p   4v                      ij   = v
            2915     4   p   4v                      ijm1 = v - 1
            2916     4   p   4s                      if( ijm1 < ADM_gmin_pl ) ijm1 = ADM_gmax_pl ! cyclic condition
            2917     4               
            2918     4   p   4v                      grdx_pl(n,k,l) = grdx_pl(n,k,l) + ( sclt_pl(ijm1,k) + sclt_pl(ij,k) ) * GMTR_A_var_pl(ij,k0,l,HNX)
            2919     4   p   4v                      grdy_pl(n,k,l) = grdy_pl(n,k,l) + ( sclt_pl(ijm1,k) + sclt_pl(ij,k) ) * GMTR_A_var_pl(ij,k0,l,HNY)
            2920     4   p   4v                      grdz_pl(n,k,l) = grdz_pl(n,k,l) + ( sclt_pl(ijm1,k) + sclt_pl(ij,k) ) * GMTR_A_var_pl(ij,k0,l,HNZ)
            2921     4   p   4v                   enddo
            2922     3               
            2923     3   p                        grdx_pl(n,k,l) = grdx_pl(n,k,l) * 0.5D0 * GMTR_P_var_pl(n,k0,l,GMTR_P_RAREA) * fact
            2924     3   p                        grdy_pl(n,k,l) = grdy_pl(n,k,l) * 0.5D0 * GMTR_P_var_pl(n,k0,l,GMTR_P_RAREA) * fact
            2925     3   p                        grdz_pl(n,k,l) = grdz_pl(n,k,l) * 0.5D0 * GMTR_P_var_pl(n,k0,l,GMTR_P_RAREA) * fact
            2926     3   p                     enddo
            2927     2               
            2928     2                      enddo
            2929     1                   endif
            2930                     
            2931                         call DEBUG_rapend('++++OPRT_divdamp')
            2932                     
            2933                         return
            2934                       end subroutine OPRT_divdamp
            2935                     
            2936                     end module mod_oprt
            2937                     !-------------------------------------------------------------------------------

 Diagnostic messages: program name(mod_oprt)
   jwd8220o-i  "share/mod_oprt.f90", line 30: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
  Module subprogram name(OPRT_setup)
   jwd8209o-i  "share/mod_oprt.f90", line 194: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 198: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 212: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 218: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 224: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 230: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 236: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 242: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 265: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 277: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 283: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 289: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 295: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 301: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 305: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 325: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8208o-i  "share/mod_oprt.f90", line 325: Method of calculating sum or product is changed.
   jwd8209o-i  "share/mod_oprt.f90", line 328: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "share/mod_oprt.f90", line 330: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "share/mod_oprt.f90", line 337: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 367: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 371: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 391: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 397: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 403: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 409: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 415: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 421: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 444: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 461: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 467: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 473: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 479: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 485: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 489: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 508: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8208o-i  "share/mod_oprt.f90", line 508: Method of calculating sum or product is changed.
   jwd8201o-i  "share/mod_oprt.f90", line 513: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "share/mod_oprt.f90", line 520: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 554: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 558: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 558: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 615: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 615: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 673: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 673: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 713: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 713: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 753: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 753: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 793: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 793: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 833: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 833: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 873: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 873: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 926: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 926: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 974: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 974: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 1023: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 1023: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 1063: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 1063: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 1103: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 1103: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 1143: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 1143: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 1183: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 1183: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 1205: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 1205: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 1250: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 1250: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 1298: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 1298: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 1347: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 1347: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 1387: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 1387: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 1427: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 1427: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 1467: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 1467: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 1507: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 1507: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(OPRT_divergence)
   jwd8209o-i  "share/mod_oprt.f90", line 1645: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 1677: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8208o-i  "share/mod_oprt.f90", line 1677: Method of calculating sum or product is changed.
  Module subprogram name(OPRT_gradient)
   jwd8209o-i  "share/mod_oprt.f90", line 1752: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 1760: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 1768: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8208o-i  "share/mod_oprt.f90", line 1789: Method of calculating sum or product is changed.
  Module subprogram name(OPRT_laplacian)
   jwd8209o-i  "share/mod_oprt.f90", line 1859: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8208o-i  "share/mod_oprt.f90", line 1877: Method of calculating sum or product is changed.
  Module subprogram name(OPRT_diffusion)
   jwd8206o-i  "share/mod_oprt.f90", line 2026: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 2026: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2027: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2029: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2031: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2033: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2037: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2041: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 2046: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 2047: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2053: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2057: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2061: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_oprt.f90", line 2084: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "share/mod_oprt.f90", line 2085: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "share/mod_oprt.f90", line 2089: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2091: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "share/mod_oprt.f90", line 2091: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "share/mod_oprt.f90", line 2095: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "share/mod_oprt.f90", line 2095: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "share/mod_oprt.f90", line 2099: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "share/mod_oprt.f90", line 2099: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "share/mod_oprt.f90", line 2104: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_oprt.f90", line 2109: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2111: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2115: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2119: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2135: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2143: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2144: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2152: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2153: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2161: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2165: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2173: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2177: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2185: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2191: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2202: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2217: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2224: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2227: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2234: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2238: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(OPRT_horizontalize_vec)
   jwd8209o-i  "share/mod_oprt.f90", line 2294: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "share/mod_oprt.f90", line 2294: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "share/mod_oprt.f90", line 2309: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "share/mod_oprt.f90", line 2309: Invariant expression within loop is moved outside loop.
  Module subprogram name(OPRT_vorticity)
   jwd8209o-i  "share/mod_oprt.f90", line 2452: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2459: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2466: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2473: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2480: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2487: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2511: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "share/mod_oprt.f90", line 2511: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "share/mod_oprt.f90", line 2518: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2525: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2533: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2540: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2547: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2566: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2577: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2588: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2600: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2609: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2612: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2628: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2636: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2645: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(OPRT_divdamp)
   jwd8209o-i  "share/mod_oprt.f90", line 2785: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2796: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2818: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2826: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2834: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2852: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2855: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2862: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2869: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2895: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8208o-i  "share/mod_oprt.f90", line 2918: Method of calculating sum or product is changed.
   jwd8208o-i  "share/mod_oprt.f90", line 2919: Method of calculating sum or product is changed.
   jwd8208o-i  "share/mod_oprt.f90", line 2920: Method of calculating sum or product is changed.
   jwd8209o-i  "share/mod_oprt.f90", line 2923: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2924: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_oprt.f90", line 2925: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 2937
   Statements : 866
   Stack(byte): 5088
   Prefetch num: 2022

 Total information
   Procedures       : 1
   Total lines      : 2937
   Total statements : 866
   Total stack(byte): 5088
   Total prefetch num: 2022


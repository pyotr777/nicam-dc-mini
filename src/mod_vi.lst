
 Fujitsu Fortran Version 1.2.0  Mon Dec 21 17:45:55 2015

 Compilation information
   Current directory : /volume1/home/ra000007/a03106/nicam-dc-mini/src
   Source file       : nhm/dynamics/mod_vi.f90

 Option information
   Command line options : -Kident_mpi -f2004 -Kfast,parallel,auto,ocl,preex,array_private,noalias=s,mfunc=2 -Kparallel_iteration=8,instance=8,dynamic_iteration -Qi -Qt -X03 -Ncompdisp -Koptmsg=1 -Cpp -Kprefetch_cache_level=all,prefetch_iteration_L2=50 -Ksimd -Ntl_notrt -U_FIPP_ -U_FAPP_ -I../src/include -o mod_vi.o -c -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -W0,-zmpa=Yignore-intent -I/opt/FJSVtclang/GM-1.2.0-19/lib64
   Cpp options          : -U_FIPP_ -U_FAPP_ -I../src/include -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -I/opt/FJSVtclang/GM-1.2.0-19/lib64 -D__FUJITSU -Dunix -Dsparc -D__sparc__ -D__unix -D__sparc -D__frt_version=700 -D__HPC_ACE__ -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -Dlinux -otmp -D__sparcv9 -D__sparc_v9__ -D__arch64__
   Effective options    : -fi -g0 -AE -Free -O3 -Qi,p,t -X03
                          -x0
                          -KFLTLD -Kadr44 -Knoalias=s -Kauto -Knoautoobjstack
                          -Knocalleralloc -Kdalign -Keval -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kilfunc
                          -Klargepage -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_if -Kloop_fusion
                          -Kloop_interchange -Kloop_nopart_parallel
                          -Kloop_nopart_simd -Kloop_noversioning -Kns
                          -Kmfunc=2 -Kocl -Komitfp -Koptmsg=1 -Kpreex
                          -Kprefetch_conditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_iteration_L2=50 -Kprefetch_nostrong
                          -Kprefetch_strong_L2 -Knoshortloop -Ksimd=1
                          -Knosimd_region_constant -Knostriping -Kswp
                          -Knotemparraystack -Kunroll -Knouxsimd -KNOXFILL
                          -Knoopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_noordered_reduction -Knothreadsafe
                          -Kparallel -Kparallel_nofp_precision
                          -Karray_private -Kdynamic_iteration -Kreduction
                          -Kregion_extension -Kinstance=8
                          -Kparallel_iteration=8
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Ncompdisp
                          -Nnocopyarg -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nline -Nlst -Nlst=i -Nlst=p -Nlst=t
                          -Nnomallocfree -Nnoobsfun -Nquickdbg=noargchk
                          -Nquickdbg=nosubchk -Nquickdbg=noundef -NRnotrap
                          -Nnorecursive -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 Module "mod_vi"
  (inc)(line-no.)(nest)(optimize)
               1                     !-------------------------------------------------------------------------------
               2                     !
               3                     !+  Vertical Implicit module
               4                     !
               5                     !-------------------------------------------------------------------------------
               6                     module mod_vi
               7                       !-----------------------------------------------------------------------------
               8                       !
               9                       !++ Description:
              10                       !       This module is for the vertical implicit scheme of non-hydorostatic
              11                       !       model.
              12                       !
              13                       !
              14                       !++ Current Corresponding Author : H.Tomita
              15                       !
              16                       !++ History:
              17                       !      Version   Date       Comment
              18                       !      -----------------------------------------------------------------------
              19                       !      0.00      04-02-17   Imported from igdc-4.34
              20                       !                06-08-11   Add averaged rhog for tracer advection.
              21                       !                11-05-07   Y.Yamada: Implementation of ES tuning cord by NEC.
              22                       !                             Modified line: (20110405 NEC)
              23                       !                                                or (!ftr< vi_small_step.r???)
              24                       !                11-11-28   Y.Yamada: Merge Terai-san timer code
              25                       !                                                    into the original code.
              26                       !                11-12-29   Y.Yamada: Delete ES tuning and merge fjtimer
              27                       !                12-3-9    S.Iga: tuned (phase4-1)
              28                       !
              29                       !      -----------------------------------------------------------------------
              30                       !
              31                       !-----------------------------------------------------------------------------
              32                       !
              33                       !++ Used modules
              34                       !
              35                       use mod_debug
              36                       use mod_adm, only: &
              37                          ADM_LOG_FID
              38                       !-----------------------------------------------------------------------------
              39                       implicit none
              40                       private
              41                       !-----------------------------------------------------------------------------
              42                       !
              43                       !++ Public procedure
              44                       !
              45                       public :: vi_small_step
              46                     
              47                       !-----------------------------------------------------------------------------
              48                       !
              49                       !++ Public parameters & variables
              50                       !
              51                       !-----------------------------------------------------------------------------
              52                       !
              53                       !++ Private procedures
              54                       !
              55                       private :: vi_path2
              56                     
              57                       private :: vi_rhow_update_matrix
              58                       private :: vi_rhow
              59                     
              60                       !-----------------------------------------------------------------------------
              61                       !
              62                       !++ Private parameters & variables
              63                       !
              64                       integer, private, parameter :: vmax_split2 = 6
              65                       integer, private, parameter :: vmax_mean_c = 5
              66                     
              67                       integer, private, parameter :: I_rhogvx = 1
              68                       integer, private, parameter :: I_rhogvy = 2
              69                       integer, private, parameter :: I_rhogvz = 3
              70                       integer, private, parameter :: I_rhog   = 4
              71                       integer, private, parameter :: I_rhogw  = 5
              72                       integer, private, parameter :: I_rhoge  = 6
              73                     
              74                       real(8), private, allocatable, save :: Mc   (:,:,:)
              75                       real(8), private, allocatable, save :: Mc_pl(:,:,:)
              76                       real(8), private, allocatable, save :: Ml   (:,:,:)
              77                       real(8), private, allocatable, save :: Ml_pl(:,:,:)
              78                       real(8), private, allocatable, save :: Mu   (:,:,:)
              79                       real(8), private, allocatable, save :: Mu_pl(:,:,:)
              80                     
              81                       real(8), private, allocatable, save :: A2_o     (:,:,:)
              82                       real(8), private, allocatable, save :: A2_o_pl  (:,:,:)
              83                       real(8), private, allocatable, save :: CooCip   (:,:,:)
              84                       real(8), private, allocatable, save :: CooCip_pl(:,:,:)
              85                       real(8), private, allocatable, save :: CooCim   (:,:,:)
              86                       real(8), private, allocatable, save :: CooCim_pl(:,:,:)
              87                       real(8), private, allocatable, save :: D2       (:,:,:)
              88                       real(8), private, allocatable, save :: D2_pl    (:,:,:)
              89                     
              90                       real(8), private, save :: alfa
              91                     
              92                       logical, private, save :: iflag = .true.
              93                     
              94                       !-----------------------------------------------------------------------------
              95                     contains
              96                     
              97                       !-----------------------------------------------------------------------------
              98                       subroutine vi_small_step( &
              99                            rhog,         rhog_pl,         & !--- [INOUT]
             100                            rhogvx,       rhogvx_pl,       & !--- [INOUT]
             101                            rhogvy,       rhogvy_pl,       & !--- [INOUT]
             102                            rhogvz,       rhogvz_pl,       & !--- [INOUT]
             103                            rhogw,        rhogw_pl,        & !--- [INOUT]
             104                            rhoge,        rhoge_pl,        & !--- [INOUT]
             105                            vx,           vx_pl,           & !--- [IN]    : Vx
             106                            vy,           vy_pl,           & !--- [IN]    : Vy
             107                            vz,           vz_pl,           & !--- [IN]    : Vz
             108                            eth,          eth_pl,          & !--- [IN]    : enthalpy
             109                            rhogd,        rhogd_pl,        & !--- [IN]    : perturb dens.( gam2 X G^{1/2} )
             110                            pregd,        pregd_pl,        & !--- [IN]    : perturb pres.( gam2 X G^{1/2} )
             111                            grhog0,       grhog0_pl,       & !--- [IN]
             112                            grhogvx0,     grhogvx0_pl,     & !--- [IN]
             113                            grhogvy0,     grhogvy0_pl,     & !--- [IN]
             114                            grhogvz0,     grhogvz0_pl,     & !--- [IN]
             115                            grhogw0,      grhogw0_pl,      & !--- [IN]
             116                            grhoge0,      grhoge0_pl,      & !--- [IN]
             117                            grhogetot0,   grhogetot0_pl,   & !--- [IN]
             118                            rhog_split,   rhog_split_pl,   & !--- [INOUT] : rhog_split
             119                            rhogvx_split, rhogvx_split_pl, & !--- [INOUT] : rhogvx_split
             120                            rhogvy_split, rhogvy_split_pl, & !--- [INOUT] : rhogvy_split
             121                            rhogvz_split, rhogvz_split_pl, & !--- [INOUT] : rhogvz_split
             122                            rhogw_split,  rhogw_split_pl,  & !--- [INOUT] : rhogw_split
             123                            rhoge_split,  rhoge_split_pl,  & !--- [INOUT] : rhoge_split
             124                            v_mean_c,     v_mean_c_pl,     & !--- [OUT]
             125                            num_of_itr,                    & !--- [IN]
             126                            dt                             ) !--- [IN]
             127                         use mod_adm, only: &
             128                            ADM_prc_me,  &
             129                            ADM_prc_pl,  &
             130                            ADM_gall,    &
             131                            ADM_gall_pl, &
             132                            ADM_lall,    &
             133                            ADM_lall_pl, &
             134                            ADM_kall,    &
             135                            ADM_gall_1d, &
             136                            ADM_gmax,    &
             137                            ADM_gmin,    &
             138                            ADM_kmax,    &
             139                            ADM_kmin
             140                         use mod_comm, only: &
             141                            COMM_data_transfer
             142                         use mod_time, only: &
             143                            TIME_SPLIT
             144                         use mod_cnst, only: &
             145                            CNST_EGRAV, &
             146                            CNST_RAIR,  &
             147                            CNST_CV
             148                         use mod_grd, only: &
             149                            GRD_afac, &
             150                            GRD_bfac, &
             151                            GRD_cfac, &
             152                            GRD_dfac
             153                         use mod_oprt, only: &
             154                            OPRT_horizontalize_vec
             155                         use mod_vmtr, only: &
             156                            VMTR_GSGAM2H,     &
             157                            VMTR_GSGAM2H_pl,  &
             158                            VMTR_GSGAM2,      &
             159                            VMTR_GSGAM2_pl,   &
             160                            VMTR_RGSGAM2H,    &
             161                            VMTR_RGSGAM2H_pl, &
             162                            VMTR_RGSGAM2,     &
             163                            VMTR_RGSGAM2_pl
             164                         use mod_runconf, only: &
             165                            NON_HYDRO_ALPHA
             166                         use mod_bndcnd, only: &
             167                            BNDCND_rhovxvyvz
             168                         use mod_numfilter, only: &
             169                            numfilter_divdamp,   &
             170                            numfilter_divdamp_2d
             171                         use mod_src, only: &
             172                            src_advection_convergence, &
             173                            src_flux_convergence,      &
             174                            src_gradient,              &
             175                            src_buoyancy,              &
             176                            I_SRC_default,             &
             177                            I_SRC_horizontal
             178                         implicit none
             179                     
             180                         real(8), intent(inout) :: rhog     (ADM_gall,   ADM_kall,ADM_lall   ) ! density ( gam2 X G^{1/2} )
             181                         real(8), intent(inout) :: rhog_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             182                         real(8), intent(inout) :: rhogvx   (ADM_gall,   ADM_kall,ADM_lall   ) ! rho*Vx  ( gam2 X G^{1/2} )
             183                         real(8), intent(inout) :: rhogvx_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             184                         real(8), intent(inout) :: rhogvy   (ADM_gall,   ADM_kall,ADM_lall   ) ! rho*Vy  ( gam2 X G^{1/2} )
             185                         real(8), intent(inout) :: rhogvy_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             186                         real(8), intent(inout) :: rhogvz   (ADM_gall,   ADM_kall,ADM_lall   ) ! rho*Vz  ( gam2 X G^{1/2} )
             187                         real(8), intent(inout) :: rhogvz_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             188                         real(8), intent(inout) :: rhogw    (ADM_gall,   ADM_kall,ADM_lall   ) ! rho*w   ( gam2 X G^{1/2} )
             189                         real(8), intent(inout) :: rhogw_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             190                         real(8), intent(inout) :: rhoge    (ADM_gall,   ADM_kall,ADM_lall   ) ! rho*ein ( gam2 X G^{1/2} )
             191                         real(8), intent(inout) :: rhoge_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             192                         !
             193                         real(8), intent(in)    :: vx      (ADM_gall,   ADM_kall,ADM_lall   ) ! diagnostic variables
             194                         real(8), intent(in)    :: vx_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             195                         real(8), intent(in)    :: vy      (ADM_gall,   ADM_kall,ADM_lall   )
             196                         real(8), intent(in)    :: vy_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             197                         real(8), intent(in)    :: vz      (ADM_gall,   ADM_kall,ADM_lall   )
             198                         real(8), intent(in)    :: vz_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             199                         real(8), intent(in)    :: eth     (ADM_gall,   ADM_kall,ADM_lall   )
             200                         real(8), intent(in)    :: eth_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             201                         real(8), intent(in)    :: rhogd   (ADM_gall,   ADM_kall,ADM_lall   )
             202                         real(8), intent(in)    :: rhogd_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             203                         real(8), intent(in)    :: pregd   (ADM_gall,   ADM_kall,ADM_lall   )
             204                         real(8), intent(in)    :: pregd_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             205                     
             206                         real(8), intent(in)    :: grhog0       (ADM_gall,   ADM_kall,ADM_lall   ) ! source term (large step)
             207                         real(8), intent(in)    :: grhog0_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             208                         real(8), intent(in)    :: grhogvx0     (ADM_gall,   ADM_kall,ADM_lall   )
             209                         real(8), intent(in)    :: grhogvx0_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             210                         real(8), intent(in)    :: grhogvy0     (ADM_gall,   ADM_kall,ADM_lall   )
             211                         real(8), intent(in)    :: grhogvy0_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             212                         real(8), intent(in)    :: grhogvz0     (ADM_gall,   ADM_kall,ADM_lall   )
             213                         real(8), intent(in)    :: grhogvz0_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             214                         real(8), intent(in)    :: grhogw0      (ADM_gall,   ADM_kall,ADM_lall   )
             215                         real(8), intent(in)    :: grhogw0_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             216                         real(8), intent(in)    :: grhoge0      (ADM_gall,   ADM_kall,ADM_lall   )
             217                         real(8), intent(in)    :: grhoge0_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             218                         real(8), intent(in)    :: grhogetot0   (ADM_gall,   ADM_kall,ADM_lall   )
             219                         real(8), intent(in)    :: grhogetot0_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             220                     
             221                         real(8), intent(inout) :: rhog_split     (ADM_gall,   ADM_kall,ADM_lall   )
             222                         real(8), intent(inout) :: rhog_split_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             223                         real(8), intent(inout) :: rhogvx_split   (ADM_gall,   ADM_kall,ADM_lall   )
             224                         real(8), intent(inout) :: rhogvx_split_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             225                         real(8), intent(inout) :: rhogvy_split   (ADM_gall,   ADM_kall,ADM_lall   )
             226                         real(8), intent(inout) :: rhogvy_split_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             227                         real(8), intent(inout) :: rhogvz_split   (ADM_gall,   ADM_kall,ADM_lall   )
             228                         real(8), intent(inout) :: rhogvz_split_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             229                         real(8), intent(inout) :: rhogw_split    (ADM_gall,   ADM_kall,ADM_lall   )
             230                         real(8), intent(inout) :: rhogw_split_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             231                         real(8), intent(inout) :: rhoge_split    (ADM_gall,   ADM_kall,ADM_lall   )
             232                         real(8), intent(inout) :: rhoge_split_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             233                     
             234                         real(8), intent(out)   :: v_mean_c   (ADM_gall,   ADM_kall,ADM_lall   ,vmax_mean_c) ! mean_flux for tracer advection
             235                         real(8), intent(out)   :: v_mean_c_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl,vmax_mean_c)
             236                     
             237                         integer, intent(in)    :: num_of_itr
             238                         real(8), intent(in)    :: dt
             239                     
             240                         !--- tendency term (large step + small step)
             241                         real(8) :: grhog     (ADM_gall,   ADM_kall,ADM_lall   )
             242                         real(8) :: grhog_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             243                         real(8) :: grhogvx   (ADM_gall,   ADM_kall,ADM_lall   )
             244                         real(8) :: grhogvx_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             245                         real(8) :: grhogvy   (ADM_gall,   ADM_kall,ADM_lall   )
             246                         real(8) :: grhogvy_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             247                         real(8) :: grhogvz   (ADM_gall,   ADM_kall,ADM_lall   )
             248                         real(8) :: grhogvz_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             249                         real(8) :: grhogw    (ADM_gall,   ADM_kall,ADM_lall   )
             250                         real(8) :: grhogw_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             251                         real(8) :: grhoge    (ADM_gall,   ADM_kall,ADM_lall   )
             252                         real(8) :: grhoge_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             253                     
             254                         !--- tendency term 2
             255                         real(8) :: drhog     (ADM_gall,   ADM_kall,ADM_lall   )
             256                         real(8) :: drhog_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             257                         real(8) :: drhogvx   (ADM_gall,   ADM_kall,ADM_lall   )
             258                         real(8) :: drhogvx_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             259                         real(8) :: drhogvy   (ADM_gall,   ADM_kall,ADM_lall   )
             260                         real(8) :: drhogvy_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             261                         real(8) :: drhogvz   (ADM_gall,   ADM_kall,ADM_lall   )
             262                         real(8) :: drhogvz_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             263                         real(8) :: drhogw    (ADM_gall,   ADM_kall,ADM_lall   )
             264                         real(8) :: drhogw_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             265                         real(8) :: drhoge    (ADM_gall,   ADM_kall,ADM_lall   )
             266                         real(8) :: drhoge_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             267                     
             268                         !--- divergence damping
             269                         real(8) :: gdx       (ADM_gall,   ADM_kall,ADM_lall   )
             270                         real(8) :: gdx_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             271                         real(8) :: gdy       (ADM_gall,   ADM_kall,ADM_lall   )
             272                         real(8) :: gdy_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             273                         real(8) :: gdz       (ADM_gall,   ADM_kall,ADM_lall   )
             274                         real(8) :: gdz_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             275                         real(8) :: gdvz      (ADM_gall,   ADM_kall,ADM_lall   )
             276                         real(8) :: gdvz_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             277                     
             278                         real(8) :: gdx_2d    (ADM_gall,   ADM_kall,ADM_lall   )
             279                         real(8) :: gdx_2d_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             280                         real(8) :: gdy_2d    (ADM_gall,   ADM_kall,ADM_lall   )
             281                         real(8) :: gdy_2d_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             282                         real(8) :: gdz_2d    (ADM_gall,   ADM_kall,ADM_lall   )
             283                         real(8) :: gdz_2d_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             284                     
             285                         !--- pressure gradient force
             286                         real(8) :: gpx       (ADM_gall,   ADM_kall,ADM_lall   )
             287                         real(8) :: gpx_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             288                         real(8) :: gpy       (ADM_gall,   ADM_kall,ADM_lall   )
             289                         real(8) :: gpy_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             290                         real(8) :: gpz       (ADM_gall,   ADM_kall,ADM_lall   )
             291                         real(8) :: gpz_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             292                         real(8) :: gpvz      (ADM_gall,   ADM_kall,ADM_lall   )
             293                         real(8) :: gpvz_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             294                     
             295                         !--- buoyancy force
             296                         real(8) :: gbvz      (ADM_gall,   ADM_kall,ADM_lall   )
             297                         real(8) :: gbvz_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             298                     
             299                         !--- pressure work
             300                         real(8) :: drhoge_pw   (ADM_gall,   ADM_kall,ADM_lall   )
             301                         real(8) :: drhoge_pw_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             302                     
             303                         real(8) :: drhog_h     (ADM_gall,   ADM_kall,ADM_lall   )
             304                         real(8) :: drhog_h_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             305                         real(8) :: gz_tilde    (ADM_gall,   ADM_kall,ADM_lall   )
             306                         real(8) :: gz_tilde_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             307                         real(8) :: gpzw        (ADM_gall,   ADM_kall,ADM_lall   )
             308                         real(8) :: gpzw_pl     (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             309                         real(8) :: drhogez     (ADM_gall,   ADM_kall,ADM_lall   )
             310                         real(8) :: drhogez_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             311                         real(8) :: eth_h       (ADM_gall,   ADM_kall,ADM_lall   )
             312                         real(8) :: eth_h_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             313                     
             314                         real(8) :: pregd_split   (ADM_gall,   ADM_kall,ADM_lall   )
             315                         real(8) :: pregd_split_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             316                     
             317                         !--- for communication
             318                         real(8) :: v_split2   (ADM_gall,   ADM_kall,ADM_lall   ,vmax_split2)
             319                         real(8) :: v_split2_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl,vmax_split2)
             320                         logical :: comm_flag1(vmax_split2)
             321                         logical :: comm_flag2(vmax_split2)
             322                     
             323                         real(8) :: rweight_itr
             324                     
             325                         integer :: ij, k, l, ns
             326                     
             327                         integer :: i, j, suf
             328                         suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
             329                         !---------------------------------------------------------------------------
             330                     
             331                         !--- comm_flag1 ( rhogvx_split2, rhogvy_split2, rhogvz_split2 )
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    FULL UNROLLING
                                   <<< Loop-information  End >>>
             332         s   fs          comm_flag1(:) = .false.
             333                         comm_flag1(I_rhogvx) = .true.
             334                         comm_flag1(I_rhogvy) = .true.
             335                         comm_flag1(I_rhogvz) = .true.
             336                     
             337                         !--- comm_flag2 ( rhog_split2, rhogw_split2, rhoge_split2 )
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    FULL UNROLLING
                                   <<< Loop-information  End >>>
             338         s   fs          comm_flag2(:) = .false.
             339                         comm_flag2(I_rhog)  = .true.
             340                         comm_flag2(I_rhogw) = .true.
             341                         comm_flag2(I_rhoge) = .true.
             342                     
             343                         !---------------------------------------------------------------------------
             344                         ! vi_path0
             345                         !---------------------------------------------------------------------------
             346                     
             347                         !---< Calculation of drhog
             348                         call src_flux_convergence( rhogvx, rhogvx_pl, & !--- [IN]
             349                                                    rhogvy, rhogvy_pl, & !--- [IN]
             350                                                    rhogvz, rhogvz_pl, & !--- [IN]
             351                                                    rhogw,  rhogw_pl,  & !--- [IN]
             352                                                    drhog,  drhog_pl,  & !--- [OUT]
             353                                                    I_SRC_default      ) !--- [IN]
             354                     
             355                         !---< Calculation of drhogvx, drhogvy, drhogvz, drhogw
             356                     
             357                         !--- divergence damping
             358                         call numfilter_divdamp( rhogvx, rhogvx_pl, & !--- [IN]
             359                                                 rhogvy, rhogvy_pl, & !--- [IN]
             360                                                 rhogvz, rhogvz_pl, & !--- [IN]
             361                                                 rhogw,  rhogw_pl,  & !--- [IN]
             362                                                 gdx,    gdx_pl,    & !--- [OUT]
             363                                                 gdy,    gdy_pl,    & !--- [OUT]
             364                                                 gdz,    gdz_pl,    & !--- [OUT]
             365                                                 gdvz,   gdvz_pl    ) !--- [OUT]
             366                     
             367                         call numfilter_divdamp_2d( rhogvx, rhogvx_pl, & !--- [IN]
             368                                                    rhogvy, rhogvy_pl, & !--- [IN]
             369                                                    rhogvz, rhogvz_pl, & !--- [IN]
             370                                                    gdx_2d, gdx_2d_pl, & !--- [OUT]
             371                                                    gdy_2d, gdy_2d_pl, & !--- [OUT]
             372                                                    gdz_2d, gdz_2d_pl  ) !--- [OUT]
             373                     
             374                         !--- pressure force
             375                         call src_gradient( pregd, pregd_pl, & !--- [IN]
             376                                            gpx,   gpx_pl,   & !--- [OUT]
             377                                            gpy,   gpy_pl,   & !--- [OUT]
             378                                            gpz,   gpz_pl,   & !--- [OUT]
             379                                            gpvz,  gpvz_pl,  & !--- [OUT]
             380                                            I_SRC_default    ) !--- [IN]
             381                     
             382                         !--- buoyancy force
             383                         call src_buoyancy( rhogd, rhogd_pl, & !--- [IN]
             384                                            gbvz,  gbvz_pl   ) !--- [OUT]
             385                     
             386                         !---< Calculation of drhoge
             387                     
             388                         !--- advection convergence for eth
             389                         call src_advection_convergence( rhogvx, rhogvx_pl, & !--- [IN]
             390                                                         rhogvy, rhogvy_pl, & !--- [IN]
             391                                                         rhogvz, rhogvz_pl, & !--- [IN]
             392                                                         rhogw,  rhogw_pl,  & !--- [IN]
             393                                                         eth,    eth_pl,    & !--- [IN]
             394                                                         drhoge, drhoge_pl, & !--- [OUT]
             395                                                         I_SRC_default      ) !--- [IN]
             396                     
             397                         !--- pressure work (horizontal)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             398        pp   6v          drhoge_pw(:,:,:) = vx(:,:,:) * gpx(:,:,:) &
             399                                          + vy(:,:,:) * gpy(:,:,:) &
             400                                          + vz(:,:,:) * gpz(:,:,:)
             401                     
             402     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             403     1  pp   6v             drhoge_pw_pl(:,:,:) = vx_pl(:,:,:) * gpx_pl(:,:,:) &
             404     1                                          + vy_pl(:,:,:) * gpy_pl(:,:,:) &
             405     1                                          + vz_pl(:,:,:) * gpz_pl(:,:,:)
             406     1                   endif
             407                     
             408                     
             409                         !--- Caluculation of (-rhogw * g_tilde) and interpolation to half level
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             410     1  pp               do l = 1, ADM_lall
             411     1                      !--- Calculation of gz_tilde
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 16
                                   <<<      GRD_afac: 8, GRD_bfac: 8
                                   <<< Loop-information  End >>>
             412     2  pp                  do k  = ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 123
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             413     3  pp   6v             do ij = 1, ADM_gall
             414     3   p   6v                drhog_h(ij,k,l) = 0.5D0 * ( GRD_afac(k) * VMTR_RGSGAM2(ij,k  ,l) * rhog(ij,k,  l) &
             415     3                                                   + GRD_bfac(k) * VMTR_RGSGAM2(ij,k-1,l) * rhog(ij,k-1,l) &
             416     3                                                   ) * VMTR_GSGAM2H(ij,k,l)
             417     3   p   6v             enddo
             418     2   p                  enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1231
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             419     2  pp   8v             do ij = 1, ADM_gall
             420     2   p   8v                drhog_h(ij,ADM_kmin-1,l) = drhog_h(ij,ADM_kmin,l)
             421     2   p   8v             enddo
             422     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             423     2  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 272
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             424     3  pp   4v                do ij = 1, ADM_gall
             425     3   p   4v                   gz_tilde(ij,k,l) = CNST_EGRAV - ( gpvz(ij,k,l)-gbvz(ij,k,l) ) / drhog_h(ij,k,l)
             426     3   p   4v                   gpzw    (ij,k,l) = -gz_tilde(ij,k,l) * rhogw(ij,k,l)
             427     3   p   4v                enddo
             428     2   p                  enddo
             429     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 16
                                   <<<      GRD_cfac: 8, GRD_dfac: 8
                                   <<< Loop-information  End >>>
             430     2  pp                  do k  = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 125
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             431     3  pp   6v             do ij = 1, ADM_gall
             432     3   p   6v                drhogez(ij,k,l) = 0.5D0 * ( GRD_cfac(k) * VMTR_RGSGAM2H(ij,k+1,l) * gpzw(ij,k+1,l) &
             433     3                                                   + GRD_dfac(k) * VMTR_RGSGAM2H(ij,k,  l) * gpzw(ij,k,  l) &
             434     3                                                   ) * VMTR_GSGAM2(ij,k,l)
             435     3   p   6v             enddo
             436     2   p                  enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             437     2  pp   8v             do ij = 1, ADM_gall
             438     2   p   8v                drhogez(ij,ADM_kmin-1,l) = 0.D0
             439     2   p   8v                drhogez(ij,ADM_kmax+1,l) = 0.D0
             440     2   p   8v             enddo
             441     1   p               enddo
             442                     
             443     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             444     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 16
                                   <<<      GRD_afac: 8, GRD_bfac: 8
                                   <<< Loop-information  End >>>
             445     3  pp                     do k  = ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 123
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             446     4  pp   6v                do ij = 1, ADM_gall_pl
             447     4   p   6v                   drhog_h_pl(ij,k,l) = 0.5D0 * ( GRD_afac(k) * VMTR_RGSGAM2_pl(ij,k  ,l)*rhog_pl(ij,k,  l) &
             448     4                                                         + GRD_bfac(k) * VMTR_RGSGAM2_pl(ij,k-1,l)*rhog_pl(ij,k-1,l) &
             449     4                                                         ) * VMTR_GSGAM2H_pl(ij,k,l)
             450     4   p   6v                enddo
             451     3   p                     enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1231
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             452     3  pp   8v                do ij = 1, ADM_gall_pl
             453     3   p   8v                   drhog_h_pl(ij,ADM_kmin-1,l) = drhog_h_pl(ij,ADM_kmin,l)
             454     3   p   8v                enddo
             455     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             456     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 272
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             457     4  pp   4v                   do ij = 1, ADM_gall_pl
             458     4   p   4v                      gz_tilde_pl(ij,k,l) = CNST_EGRAV - ( gpvz_pl(ij,k,l) - gbvz_pl(ij,k,l) ) / drhog_h_pl(ij,k,l)
             459     4   p   4v                      gpzw_pl    (ij,k,l) = -gz_tilde_pl(ij,k,l) * rhogw_pl(ij,k,l)
             460     4   p   4v                   enddo
             461     3   p                     enddo
             462     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 16
                                   <<<      GRD_cfac: 8, GRD_dfac: 8
                                   <<< Loop-information  End >>>
             463     3  pp                     do k  = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 125
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             464     4  pp   6v                do ij = 1, ADM_gall_pl
             465     4   p   6v                   drhogez_pl(ij,k,l) = 0.5D0 * ( GRD_cfac(k) * gpzw_pl(ij,k+1,l) * VMTR_RGSGAM2H_pl(ij,k+1,l) &
             466     4                                                         + GRD_dfac(k) * gpzw_pl(ij,k,  l) * VMTR_RGSGAM2H_pl(ij,k,  l) &
             467     4                                                         ) * VMTR_GSGAM2_pl(ij,k,l)
             468     4   p   6v                enddo
             469     3   p                     enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1000
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             470     3  pp   8v                do ij = 1, ADM_gall_pl
             471     3   p   8v                   drhogez_pl(ij,ADM_kmin-1,l) = 0.D0
             472     3   p   8v                   drhogez_pl(ij,ADM_kmax+1,l) = 0.D0
             473     3   p   8v                enddo
             474     2   p                  enddo
             475     1                   endif
             476                     
             477                         !--- sum of tendencies ( large step + pres-grad + div-damp + div-damp_2d + buoyancy )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             478     1  pp               do l  = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 216
                                   <<<      gdy: 18, grhogvy0: 18, gpy: 18
                                   <<<      gdx_2d: 18, gdx: 18, grhogvx0: 18
                                   <<<      gpx: 18, grhogvy: 18, grhog0: 18
                                   <<<      drhog: 18, grhogvx: 18, grhog: 18
                                   <<< Loop-information  End >>>
             479     2  pp                  do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 103
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 72
                                   <<<      gdy: 6, grhogvy0: 6, gpy: 6, grhogvy: 6
                                   <<<      gdx_2d: 6, gdx: 6, grhog0: 6
                                   <<<      grhogvx0: 6, gpx: 6, drhog: 6
                                   <<<      grhogvx: 6, grhog: 6
                                   <<< Loop-information  End >>>
             480     3  pp   2v                do ij = 1, ADM_gall
             481     3   p   2v                   grhog  (ij,k,l) = grhog0  (ij,k,l) + drhog(ij,k,l)
             482     3               
             483     3   p   2v                   grhogvx(ij,k,l) = grhogvx0(ij,k,l) - gpx (ij,k,l) + gdx(ij,k,l) + gdx_2d(ij,k,l)
             484     3   p   2v                   grhogvy(ij,k,l) = grhogvy0(ij,k,l) - gpy (ij,k,l) + gdy(ij,k,l) + gdy_2d(ij,k,l)
             485     3   p   2v                   grhogvz(ij,k,l) = grhogvz0(ij,k,l) - gpz (ij,k,l) + gdz(ij,k,l) + gdz_2d(ij,k,l)
             486     3               
             487     3   p   2v                   grhogw (ij,k,l) = grhogw0 (ij,k,l) - gpvz(ij,k,l) + gdvz(ij,k,l) * NON_HYDRO_ALPHA &
             488     3                                                               + gbvz(ij,k,l)
             489     3               
             490     3   p   2v                   grhoge (ij,k,l) = grhoge0 (ij,k,l) + drhoge   (ij,k,l) &
             491     3                                                               + drhoge_pw(ij,k,l) &
             492     3                                                               + drhogez  (ij,k,l)
             493     3   p   2v                enddo
             494     2   p                  enddo
             495     1   p               enddo
             496                     
             497     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             498     2  pp                  do l  = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 162
                                   <<<      grhogvx0_pl: 18, gpx_pl: 18, gpy_pl: 18
                                   <<<      gdx_pl: 18, grhogvy_pl: 18
                                   <<<      grhog0_pl: 18, drhog_pl: 18
                                   <<<      grhogvx_pl: 18, grhog_pl: 18
                                   <<< Loop-information  End >>>
             499     3  pp                     do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 114
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 54
                                   <<<      gpy_pl: 6, grhogvy_pl: 6, grhogvx0_pl: 6
                                   <<<      gpx_pl: 6, gdx_pl: 6, grhog0_pl: 6
                                   <<<      drhog_pl: 6, grhogvx_pl: 6, grhog_pl: 6
                                   <<< Loop-information  End >>>
             500     4  pp   2v                   do ij = 1, ADM_gall_pl
             501     4   p   2v                      grhog_pl  (ij,k,l) = grhog0_pl  (ij,k,l) + drhog_pl(ij,k,l)
             502     4               
             503     4   p   2v                      grhogvx_pl(ij,k,l) = grhogvx0_pl(ij,k,l) - gpx_pl (ij,k,l) + gdx_pl (ij,k,l)
             504     4   p   2v                      grhogvy_pl(ij,k,l) = grhogvy0_pl(ij,k,l) - gpy_pl (ij,k,l) + gdy_pl (ij,k,l)
             505     4   p   2v                      grhogvz_pl(ij,k,l) = grhogvz0_pl(ij,k,l) - gpz_pl (ij,k,l) + gdz_pl (ij,k,l)
             506     4               
             507     4   p   2v                      grhogw_pl (ij,k,l) = grhogw0_pl (ij,k,l) - gpvz_pl(ij,k,l) + gdvz_pl(ij,k,l) * NON_HYDRO_ALPHA &
             508     4                                                                        + gbvz_pl(ij,k,l)
             509     4               
             510     4   p   2v                      grhoge_pl (ij,k,l) = grhoge0_pl (ij,k,l) + drhoge_pl   (ij,k,l) &
             511     4                                                                        + drhoge_pw_pl(ij,k,l) &
             512     4                                                                        + drhogez_pl  (ij,k,l)
             513     4   p   2v                   enddo
             514     3   p                     enddo
             515     2   p                  enddo
             516     1                   endif
             517                     
             518                         !---------------------------------------------------------------------------
             519                         ! END vi_path0
             520                         !---------------------------------------------------------------------------
             521                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             522     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 16
                                   <<<      GRD_afac: 8, GRD_bfac: 8
                                   <<< Loop-information  End >>>
             523     2  pp                  do k = ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 272
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             524     3  pp   8v                do ij = 1, ADM_gall
             525     3   p   8v                   eth_h(ij,k,l) = 0.5D0 * ( GRD_afac(k) * eth(ij,k,  l) &
             526     3                                                    + GRD_bfac(k) * eth(ij,k-1,l) )
             527     3   p   8v                enddo
             528     2   p                  enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1231
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             529     2  pp   8v             do ij = 1, ADM_gall
             530     2   p   8v                eth_h(ij,ADM_kmin-1,l) = eth_h(ij,ADM_kmin,l)
             531     2   p   8v             enddo
             532     1   p               enddo
             533                     
             534     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             535     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 16
                                   <<<      GRD_afac: 8, GRD_bfac: 8
                                   <<< Loop-information  End >>>
             536     3  pp                     do k = ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 272
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             537     4  pp   8v                   do ij = 1, ADM_gall_pl
             538     4   p   8v                      eth_h_pl(ij,k,l) = 0.5D0 * ( GRD_afac(k) * eth_pl(ij,k,  l) &
             539     4                                                          + GRD_bfac(k) * eth_pl(ij,k-1,l) )
             540     4   p   8v                   enddo
             541     3   p                     enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1231
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             542     3  pp   8v                do ij = 1, ADM_gall_pl
             543     3   p   8v                   eth_h_pl(ij,ADM_kmin-1,l) = eth_h_pl(ij,ADM_kmin,l)
             544     3   p   8v                enddo
             545     2   p                  enddo
             546     1                   endif
             547                     
             548                         ! update working matrix in mod_rhow
             549                         call vi_rhow_update_matrix( eth_h,    eth_h_pl,    & !--- [IN] : enthalpy at the h-lev
             550                                                     gz_tilde, gz_tilde_pl, & !--- [IN] : effective gravitation at the h-lev
             551                                                     dt                     ) !--- [IN] : delta t
             552                     
             553                         !--- initialization of mean mass flux
             554                         rweight_itr = 1.D0 / real(num_of_itr,kind=8)
             555                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             556     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             557     2  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 243
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             558     3  pp   6v                do ij = 1, ADM_gall
             559     3   p   6v                   v_mean_c(ij,k,l,I_rhogvx) = rhogvx(ij,k,l)
             560     3   p   6v                   v_mean_c(ij,k,l,I_rhogvy) = rhogvy(ij,k,l)
             561     3   p   6v                   v_mean_c(ij,k,l,I_rhogvz) = rhogvz(ij,k,l)
             562     3   p   6v                   v_mean_c(ij,k,l,I_rhogw)  = rhogw (ij,k,l)
             563     3   p   6v                   v_mean_c(ij,k,l,I_rhog)   = rhog  (ij,k,l)
             564     3   p   6v                enddo
             565     2   p                  enddo
             566     1   p               enddo
             567                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             568     1  pp               do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             569     2  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 243
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             570     3  pp   6v                do ij = 1, ADM_gall_pl
             571     3   p   6v                   v_mean_c_pl(ij,k,l,I_rhogvx) = rhogvx_pl(ij,k,l)
             572     3   p   6v                   v_mean_c_pl(ij,k,l,I_rhogvy) = rhogvy_pl(ij,k,l)
             573     3   p   6v                   v_mean_c_pl(ij,k,l,I_rhogvz) = rhogvz_pl(ij,k,l)
             574     3   p   6v                   v_mean_c_pl(ij,k,l,I_rhogw)  = rhogw_pl (ij,k,l)
             575     3   p   6v                   v_mean_c_pl(ij,k,l,I_rhog)   = rhog_pl  (ij,k,l)
             576     3   p   6v                enddo
             577     2   p                  enddo
             578     1   p               enddo
             579                     
             580                         !---------------------------------------------------------------------------
             581                         !
             582                         !> Start small step iteration
             583                         !
             584                         !---------------------------------------------------------------------------
             585     1                   do ns = 1, num_of_itr
             586     1               
             587     1                      !---< calculation of pregd(*) from rhog(*) & rhoge(*)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             588     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             589     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 400
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             590     4  pp   8v                   do ij = 1, ADM_gall
             591     4   p   8v                      pregd_split(ij,k,l) = rhoge_split(ij,k,l) * ( CNST_RAIR / CNST_CV )
             592     4   p   8v                   enddo
             593     3   p                     enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 471
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             594     3  pp   6v                do ij = 1, ADM_gall
             595     3   p   6v                   pregd_split(ij,ADM_kmin-1,l) = pregd_split(ij,ADM_kmin,l)
             596     3   p   6v                   pregd_split(ij,ADM_kmax+1,l) = pregd_split(ij,ADM_kmax,l)
             597     3   p   6v                   rhoge_split(ij,ADM_kmin-1,l) = rhoge_split(ij,ADM_kmin,l)
             598     3   p   6v                   rhoge_split(ij,ADM_kmax+1,l) = rhoge_split(ij,ADM_kmax,l)
             599     3   p   6v                enddo
             600     2   p                  enddo
             601     1               
             602     2                      if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             603     3  pp                     do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             604     4  pp                        do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 400
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             605     5  pp   8v                      do ij = 1, ADM_gall_pl
             606     5   p   8v                         pregd_split_pl(ij,k,l) = rhoge_split_pl(ij,k,l) * ( CNST_RAIR / CNST_CV )
             607     5   p   8v                      enddo
             608     4   p                        enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 471
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             609     4  pp   6v                   do ij = 1, ADM_gall_pl
             610     4   p   6v                      pregd_split_pl(ij,ADM_kmin-1,l) = pregd_split_pl(ij,ADM_kmin,l)
             611     4   p   6v                      pregd_split_pl(ij,ADM_kmax+1,l) = pregd_split_pl(ij,ADM_kmax,l)
             612     4   p   6v                      rhoge_split_pl(ij,ADM_kmin-1,l) = rhoge_split_pl(ij,ADM_kmin,l)
             613     4   p   6v                      rhoge_split_pl(ij,ADM_kmax+1,l) = rhoge_split_pl(ij,ADM_kmax,l)
             614     4   p   6v                   enddo
             615     3   p                     enddo
             616     2                      endif
             617     1               
             618     2                      if ( TIME_SPLIT ) then
             619     2                         !---------------------------------------------------------------------
             620     2                         ! vi_path1
             621     2                         !---------------------------------------------------------------------
             622     2               
             623     2                         !---< Calculation of grhogvx, grhogvy, grhogvz, grhogw
             624     2               
             625     2                         !--- divergence damping
             626     2                         call numfilter_divdamp( rhogvx_split, rhogvx_split_pl, & !--- [IN]
             627     2                                                 rhogvy_split, rhogvy_split_pl, & !--- [IN]
             628     2                                                 rhogvz_split, rhogvz_split_pl, & !--- [IN]
             629     2                                                 rhogw_split,  rhogw_split_pl,  & !--- [IN]
             630     2                                                 gdx,          gdx_pl,          & !--- [OUT]
             631     2                                                 gdy,          gdy_pl,          & !--- [OUT]
             632     2                                                 gdz,          gdz_pl,          & !--- [OUT]
             633     2                                                 gdvz,         gdvz_pl          ) !--- [OUT]
             634     2               
             635     2                         !--- 2d divergence damping
             636     2                         call numfilter_divdamp_2d( rhogvx_split, rhogvx_split_pl, & !--- [IN]
             637     2                                                    rhogvy_split, rhogvy_split_pl, & !--- [IN]
             638     2                                                    rhogvz_split, rhogvz_split_pl, & !--- [IN]
             639     2                                                    gdx_2d,       gdx_2d_pl,       & !--- [OUT]
             640     2                                                    gdy_2d,       gdy_2d_pl,       & !--- [OUT]
             641     2                                                    gdz_2d,       gdz_2d_pl        ) !--- [OUT]
             642     2               
             643     2                         !--- pressure force
             644     2                         !--- gpvz=0.D0 becaude of f_type='HORIZONTAL'.
             645     2                         call src_gradient( pregd_split, pregd_split_pl, & !--- [IN]
             646     2                                            gpx,         gpx_pl,         & !--- [OUT]
             647     2                                            gpy,         gpy_pl,         & !--- [OUT]
             648     2                                            gpz,         gpz_pl,         & !--- [OUT]
             649     2                                            gpvz,        gpvz_pl,        & !--- [OUT]
             650     2                                            I_SRC_horizontal             ) !--- [IN]
             651     2               
             652     2                         !--- buoyancy force
             653     2                         !--- not calculated, because this term is implicit.
             654     2               
             655     2                         !---------------------------------------------------------------------
             656     2                         ! END vi_path1
             657     2                         !---------------------------------------------------------------------
             658     2               
             659     2                         !--- sum of tendency ( large step + pres-grad + div-damp + div-damp_2d )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             660     3  pp                     do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 36
                                   <<<      gpx: 18, drhogvx: 18
                                   <<< Loop-information  End >>>
             661     4  pp                        do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 146
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 12
                                   <<<      gpx: 6, drhogvx: 6
                                   <<< Loop-information  End >>>
             662     5  pp   4v                      do ij = 1, ADM_gall
             663     5   p   4v                         drhogvx(ij,k,l) = grhogvx(ij,k,l) - gpx(ij,k,l) + gdx(ij,k,l) + gdx_2d(ij,k,l)
             664     5   p   4v                         drhogvy(ij,k,l) = grhogvy(ij,k,l) - gpy(ij,k,l) + gdy(ij,k,l) + gdy_2d(ij,k,l)
             665     5   p   4v                         drhogvz(ij,k,l) = grhogvz(ij,k,l) - gpz(ij,k,l) + gdz(ij,k,l) + gdz_2d(ij,k,l)
             666     5   p   4v                         drhogw(ij,k,l)  = grhogw(ij,k,l)                + gdvz(ij,k,l) * NON_HYDRO_ALPHA
             667     5   p   4v                      enddo
             668     4   p                        enddo
             669     3   p                     enddo
             670     2               
             671     3                         if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             672     4  pp                        do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 36
                                   <<<      gpx_pl: 18, drhogvx_pl: 18
                                   <<< Loop-information  End >>>
             673     5  pp                           do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 146
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 12
                                   <<<      gpx_pl: 6, drhogvx_pl: 6
                                   <<< Loop-information  End >>>
             674     6  pp   4v                         do ij = 1, ADM_gall_pl
             675     6   p   4v                            drhogvx_pl(ij,k,l) = grhogvx_pl(ij,k,l) - gpx_pl(ij,k,l) + gdx_pl(ij,k,l) + gdx_2d_pl(ij,k,l)
             676     6   p   4v                            drhogvy_pl(ij,k,l) = grhogvy_pl(ij,k,l) - gpy_pl(ij,k,l) + gdy_pl(ij,k,l) + gdy_2d_pl(ij,k,l)
             677     6   p   4v                            drhogvz_pl(ij,k,l) = grhogvz_pl(ij,k,l) - gpz_pl(ij,k,l) + gdz_pl(ij,k,l) + gdz_2d_pl(ij,k,l)
             678     6   p   4v                            drhogw_pl(ij,k,l)  = grhogw_pl(ij,k,l)                   + gdvz_pl(ij,k,l) * NON_HYDRO_ALPHA
             679     6   p   4v                         enddo
             680     5   p                           enddo
             681     4   p                        enddo
             682     3                         endif
             683     2               
             684     2                      else !--- NO-SPLITING
             685     2                         !---------------------------------------------------------------------
             686     2                         ! vi_path1 is skipped
             687     2                         !---------------------------------------------------------------------
             688     2               
             689     2                         !------ sum of tendency ( large step )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             690     3  pp                     do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             691     4  pp                        do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 314
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             692     5  pp   6v                      do ij = 1, ADM_gall
             693     5   p   6v                         drhogvx(ij,k,l) = grhogvx(ij,k,l)
             694     5   p   6v                         drhogvy(ij,k,l) = grhogvy(ij,k,l)
             695     5   p   6v                         drhogvz(ij,k,l) = grhogvz(ij,k,l)
             696     5   p   6v                         drhogw(ij,k,l)  = grhogw(ij,k,l)
             697     5   p   6v                      enddo
             698     4   p                        enddo
             699     3   p                     enddo
             700     2               
             701     3                         if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             702     4  pp                        do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             703     5  pp                           do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 314
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             704     6  pp   6v                         do ij = 1, ADM_gall_pl
             705     6   p   6v                            drhogvx_pl(ij,k,l) = grhogvx_pl(ij,k,l)
             706     6   p   6v                            drhogvy_pl(ij,k,l) = grhogvy_pl(ij,k,l)
             707     6   p   6v                            drhogvz_pl(ij,k,l) = grhogvz_pl(ij,k,l)
             708     6   p   6v                            drhogw_pl(ij,k,l)  = grhogw_pl(ij,k,l)
             709     6   p   6v                         enddo
             710     5   p                           enddo
             711     4   p                        enddo
             712     3                         endif
             713     2               
             714     2                      endif ! Split/Non-split
             715     1               
             716     2                      do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             717     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 239
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             718     4  pp   6v                   do ij = 1, ADM_gall
             719     4   p   6v                      v_split2(ij,k,l,I_rhogvx) = rhogvx_split(ij,k,l) + dt * drhogvx(ij,k,l)
             720     4   p   6v                      v_split2(ij,k,l,I_rhogvy) = rhogvy_split(ij,k,l) + dt * drhogvy(ij,k,l)
             721     4   p   6v                      v_split2(ij,k,l,I_rhogvz) = rhogvz_split(ij,k,l) + dt * drhogvz(ij,k,l)
             722     4   p   6v                   enddo
             723     3   p                     enddo
             724     2               
             725     2                         call BNDCND_rhovxvyvz( ADM_gall,                 & !--- [IN]
             726     2                                                rhog(:,:,l),              & !--- [IN]
             727     2                                                v_split2(:,:,l,I_rhogvx), & !--- [INOUT]
             728     2                                                v_split2(:,:,l,I_rhogvy), & !--- [INOUT]
             729     2                                                v_split2(:,:,l,I_rhogvz)  ) !--- [INOUT]
             730     2                      enddo
             731     1               
             732     2                      if ( ADM_prc_me == ADM_prc_pl ) then
             733     3                         do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             734     4  pp                        do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 239
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             735     5  pp   6v                      do ij = 1, ADM_gall_pl
             736     5   p   6v                         v_split2_pl(ij,k,l,I_rhogvx) = rhogvx_split_pl(ij,k,l) + dt * drhogvx_pl(ij,k,l)
             737     5   p   6v                         v_split2_pl(ij,k,l,I_rhogvy) = rhogvy_split_pl(ij,k,l) + dt * drhogvy_pl(ij,k,l)
             738     5   p   6v                         v_split2_pl(ij,k,l,I_rhogvz) = rhogvz_split_pl(ij,k,l) + dt * drhogvz_pl(ij,k,l)
             739     5   p   6v                      enddo
             740     4   p                        enddo
             741     3               
             742     3                            call BNDCND_rhovxvyvz( ADM_gall_pl,                 & !--- [IN]
             743     3                                                   rhog_pl(:,:,l),              & !--- [IN]
             744     3                                                   v_split2_pl(:,:,l,I_rhogvx), & !--- [INOUT]
             745     3                                                   v_split2_pl(:,:,l,I_rhogvy), & !--- [INOUT]
             746     3                                                   v_split2_pl(:,:,l,I_rhogvz)  ) !--- [INOUT]
             747     3                         enddo
             748     2                      endif
             749     1               
             750     1                      !--- communication of horizontal momentum
             751     1                      call COMM_data_transfer(v_split2,v_split2_pl,trn=comm_flag1)
             752     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             753     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 145
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             754     3  pp   2s                do k = 1, ADM_kall
             755     3   p   2s                   v_split2(suf(ADM_gall_1d,1),k,l,I_rhogvx) = v_split2(suf(ADM_gmax+1,ADM_gmin),k,l,I_rhogvx)
             756     3   p   2s                   v_split2(suf(1,ADM_gall_1d),k,l,I_rhogvx) = v_split2(suf(ADM_gmin,ADM_gmax+1),k,l,I_rhogvx)
             757     3   p   2s                   v_split2(suf(ADM_gall_1d,1),k,l,I_rhogvy) = v_split2(suf(ADM_gmax+1,ADM_gmin),k,l,I_rhogvy)
             758     3   p   2s                   v_split2(suf(1,ADM_gall_1d),k,l,I_rhogvy) = v_split2(suf(ADM_gmin,ADM_gmax+1),k,l,I_rhogvy)
             759     3   p   2s                   v_split2(suf(ADM_gall_1d,1),k,l,I_rhogvz) = v_split2(suf(ADM_gmax+1,ADM_gmin),k,l,I_rhogvz)
             760     3   p   2s                   v_split2(suf(1,ADM_gall_1d),k,l,I_rhogvz) = v_split2(suf(ADM_gmin,ADM_gmax+1),k,l,I_rhogvz)
             761     3   p   2s                enddo
             762     2   p                  enddo
             763     1               
             764     1                      !--- 2nd small step : vertical implicit : rhog, rhogw, pregd: next step
             765     1                      call vi_path2( v_split2(:,:,:,I_rhog),   v_split2_pl(:,:,:,I_rhog),   & !--- [OUT]
             766     1                                     v_split2(:,:,:,I_rhogvx), v_split2_pl(:,:,:,I_rhogvx), & !--- [IN]
             767     1                                     v_split2(:,:,:,I_rhogvy), v_split2_pl(:,:,:,I_rhogvy), & !--- [IN]
             768     1                                     v_split2(:,:,:,I_rhogvz), v_split2_pl(:,:,:,I_rhogvz), & !--- [IN]
             769     1                                     v_split2(:,:,:,I_rhogw),  v_split2_pl(:,:,:,I_rhogw),  & !--- [OUT]
             770     1                                     v_split2(:,:,:,I_rhoge),  v_split2_pl(:,:,:,I_rhoge),  & !--- [OUT]
             771     1                                     rhog_split,   rhog_split_pl,                           & !--- [IN]
             772     1                                     rhogvx_split, rhogvx_split_pl,                         & !--- [IN]
             773     1                                     rhogvy_split, rhogvy_split_pl,                         & !--- [IN]
             774     1                                     rhogvz_split, rhogvz_split_pl,                         & !--- [IN]
             775     1                                     rhogw_split,  rhogw_split_pl,                          & !--- [IN]
             776     1                                     rhoge_split,  rhoge_split_pl,                          & !--- [IN]
             777     1                                     pregd_split,  pregd_split_pl,                          & !--- [IN]
             778     1                                     rhog,         rhog_pl,                                 & !--- [IN]
             779     1                                     rhogvx,       rhogvx_pl,                               & !--- [IN]
             780     1                                     rhogvy,       rhogvy_pl,                               & !--- [IN]
             781     1                                     rhogvz,       rhogvz_pl,                               & !--- [IN]
             782     1                                     rhogw,        rhogw_pl,                                & !--- [IN]
             783     1                                     eth,          eth_pl,                                  & !--- [IN]
             784     1                                     grhog,        grhog_pl,                                & !--- [IN]
             785     1                                     drhogw,       drhogw_pl,                               & !--- [IN]
             786     1                                     grhoge,       grhoge_pl,                               & !--- [IN]
             787     1                                     grhogetot0,   grhogetot0_pl,                           & !--- [IN]
             788     1                                     dt                                                     ) !--- [IN]
             789     1               
             790     1                      !--- communication of rhog, rhogw, and rhoge
             791     1                      call COMM_data_transfer(v_split2,v_split2_pl,trn=comm_flag2)
             792     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             793     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 143
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             794     3  pp   2s                do k = 1, ADM_kall
             795     3   p   2s                   v_split2(suf(ADM_gall_1d,1),k,l,I_rhog ) = v_split2(suf(ADM_gmax+1,ADM_gmin),k,l,I_rhog )
             796     3   p   2s                   v_split2(suf(1,ADM_gall_1d),k,l,I_rhog ) = v_split2(suf(ADM_gmin,ADM_gmax+1),k,l,I_rhog )
             797     3   p   2s                   v_split2(suf(ADM_gall_1d,1),k,l,I_rhogw) = v_split2(suf(ADM_gmax+1,ADM_gmin),k,l,I_rhogw)
             798     3   p   2s                   v_split2(suf(1,ADM_gall_1d),k,l,I_rhogw) = v_split2(suf(ADM_gmin,ADM_gmax+1),k,l,I_rhogw)
             799     3   p   2s                   v_split2(suf(ADM_gall_1d,1),k,l,I_rhoge) = v_split2(suf(ADM_gmax+1,ADM_gmin),k,l,I_rhoge)
             800     3   p   2s                   v_split2(suf(1,ADM_gall_1d),k,l,I_rhoge) = v_split2(suf(ADM_gmin,ADM_gmax+1),k,l,I_rhoge)
             801     3   p   2s                enddo
             802     2   p                  enddo
             803     1               
             804     1                      !--- update for next step
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             805     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             806     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 211
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             807     4  pp   4v                   do ij = 1, ADM_gall
             808     4   p   4v                      rhog_split(ij,k,l)   = v_split2(ij,k,l,I_rhog)
             809     4   p   4v                      rhogvx_split(ij,k,l) = v_split2(ij,k,l,I_rhogvx)
             810     4   p   4v                      rhogvy_split(ij,k,l) = v_split2(ij,k,l,I_rhogvy)
             811     4   p   4v                      rhogvz_split(ij,k,l) = v_split2(ij,k,l,I_rhogvz)
             812     4   p   4v                      rhogw_split(ij,k,l)  = v_split2(ij,k,l,I_rhogw)
             813     4   p   4v                      rhoge_split(ij,k,l)  = v_split2(ij,k,l,I_rhoge)
             814     4   p   4v                   enddo
             815     3   p                     enddo
             816     2   p                  enddo
             817     1               
             818     2                      if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             819     3  pp                     do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             820     4  pp                        do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 211
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             821     5  pp   4v                      do ij = 1, ADM_gall_pl
             822     5   p   4v                         rhog_split_pl(ij,k,l)   = v_split2_pl(ij,k,l,I_rhog)
             823     5   p   4v                         rhogvx_split_pl(ij,k,l) = v_split2_pl(ij,k,l,I_rhogvx)
             824     5   p   4v                         rhogvy_split_pl(ij,k,l) = v_split2_pl(ij,k,l,I_rhogvy)
             825     5   p   4v                         rhogvz_split_pl(ij,k,l) = v_split2_pl(ij,k,l,I_rhogvz)
             826     5   p   4v                         rhogw_split_pl(ij,k,l)  = v_split2_pl(ij,k,l,I_rhogw)
             827     5   p   4v                         rhoge_split_pl(ij,k,l)  = v_split2_pl(ij,k,l,I_rhoge)
             828     5   p   4v                      enddo
             829     4   p                        enddo
             830     3   p                     enddo
             831     2                      endif
             832     1               
             833     1                      !--- calculation of mean mass flux ( for tracers )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             834     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             835     3  pp                     do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 176
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             836     4  pp   4v                   do ij = 1, ADM_gall
             837     4   p   4v                      v_mean_c(ij,k,l,I_rhog)   = v_mean_c(ij,k,l,I_rhog)   + rhog_split  (ij,k,l) * rweight_itr
             838     4   p   4v                      v_mean_c(ij,k,l,I_rhogvx) = v_mean_c(ij,k,l,I_rhogvx) + rhogvx_split(ij,k,l) * rweight_itr
             839     4   p   4v                      v_mean_c(ij,k,l,I_rhogvy) = v_mean_c(ij,k,l,I_rhogvy) + rhogvy_split(ij,k,l) * rweight_itr
             840     4   p   4v                      v_mean_c(ij,k,l,I_rhogvz) = v_mean_c(ij,k,l,I_rhogvz) + rhogvz_split(ij,k,l) * rweight_itr
             841     4   p   4v                      v_mean_c(ij,k,l,I_rhogw)  = v_mean_c(ij,k,l,I_rhogw)  + rhogw_split (ij,k,l) * rweight_itr
             842     4   p   4v                   enddo
             843     3   p                     enddo
             844     2   p                  enddo
             845     1               
             846     2                      if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             847     3  pp                     do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             848     4  pp                        do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 176
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             849     5  pp   4v                      do ij = 1, ADM_gall_pl
             850     5   p   4v                         v_mean_c_pl(ij,k,l,I_rhog)   = v_mean_c_pl(ij,k,l,I_rhog)   + rhog_split_pl  (ij,k,l) * rweight_itr
             851     5   p   4v                         v_mean_c_pl(ij,k,l,I_rhogvx) = v_mean_c_pl(ij,k,l,I_rhogvx) + rhogvx_split_pl(ij,k,l) * rweight_itr
             852     5   p   4v                         v_mean_c_pl(ij,k,l,I_rhogvy) = v_mean_c_pl(ij,k,l,I_rhogvy) + rhogvy_split_pl(ij,k,l) * rweight_itr
             853     5   p   4v                         v_mean_c_pl(ij,k,l,I_rhogvz) = v_mean_c_pl(ij,k,l,I_rhogvz) + rhogvz_split_pl(ij,k,l) * rweight_itr
             854     5   p   4v                         v_mean_c_pl(ij,k,l,I_rhogw)  = v_mean_c_pl(ij,k,l,I_rhogw)  + rhogw_split_pl (ij,k,l) * rweight_itr
             855     5   p   4v                      enddo
             856     4   p                        enddo
             857     3   p                     enddo
             858     2                      endif
             859     1               
             860     1                   enddo  ! small step end
             861                     
             862                         !--- update prognostic variables
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             863     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             864     2  pp                  do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 176
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             865     3  pp   4v             do ij = 1, ADM_gall
             866     3   p   4v                   rhog  (ij,k,l) = rhog  (ij,k,l) + rhog_split  (ij,k,l)
             867     3   p   4v                   rhogvx(ij,k,l) = rhogvx(ij,k,l) + rhogvx_split(ij,k,l)
             868     3   p   4v                   rhogvy(ij,k,l) = rhogvy(ij,k,l) + rhogvy_split(ij,k,l)
             869     3   p   4v                   rhogvz(ij,k,l) = rhogvz(ij,k,l) + rhogvz_split(ij,k,l)
             870     3   p   4v                   rhogw (ij,k,l) = rhogw (ij,k,l) + rhogw_split (ij,k,l)
             871     3   p   4v                   rhoge (ij,k,l) = rhoge (ij,k,l) + rhoge_split (ij,k,l)
             872     3   p   4v             enddo
             873     2   p                  enddo
             874     1   p               enddo
             875                     
             876     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             877     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             878     3  pp                     do k  = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 176
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             879     4  pp   4v                do ij = 1, ADM_gall_pl
             880     4   p   4v                   rhog_pl  (ij,k,l) = rhog_pl  (ij,k,l) + rhog_split_pl  (ij,k,l)
             881     4   p   4v                   rhogvx_pl(ij,k,l) = rhogvx_pl(ij,k,l) + rhogvx_split_pl(ij,k,l)
             882     4   p   4v                   rhogvy_pl(ij,k,l) = rhogvy_pl(ij,k,l) + rhogvy_split_pl(ij,k,l)
             883     4   p   4v                   rhogvz_pl(ij,k,l) = rhogvz_pl(ij,k,l) + rhogvz_split_pl(ij,k,l)
             884     4   p   4v                   rhogw_pl (ij,k,l) = rhogw_pl (ij,k,l) + rhogw_split_pl (ij,k,l)
             885     4   p   4v                   rhoge_pl (ij,k,l) = rhoge_pl (ij,k,l) + rhoge_split_pl (ij,k,l)
             886     4   p   4v                enddo
             887     3   p                     enddo
             888     2   p                  enddo
             889     1                   endif
             890                     
             891                         call OPRT_horizontalize_vec( rhogvx, rhogvx_pl, & !--- [INOUT]
             892                                                      rhogvy, rhogvy_pl, & !--- [INOUT]
             893                                                      rhogvz, rhogvz_pl  ) !--- [INOUT]
             894                     
             895                         !--- communication of mean velocity
             896                         call COMM_data_transfer( v_mean_c, v_mean_c_pl )
             897                     
             898                         return
             899                       end subroutine vi_small_step
             900                     
             901                       !-----------------------------------------------------------------------------
             902                       subroutine vi_path2( &
             903                            rhog_split2,   rhog_split2_pl,   & !--- [OUT]
             904                            rhogvx_split2, rhogvx_split2_pl, & !--- [IN]
             905                            rhogvy_split2, rhogvy_split2_pl, & !--- [IN]
             906                            rhogvz_split2, rhogvz_split2_pl, & !--- [IN]
             907                            rhogw_split2,  rhogw_split2_pl,  & !--- [OUT]
             908                            rhoge_split2,  rhoge_split2_pl,  & !--- [OUT]
             909                            rhog_split,    rhog_split_pl,    & !--- [IN]
             910                            rhogvx_split,  rhogvx_split_pl,  & !--- [IN]
             911                            rhogvy_split,  rhogvy_split_pl,  & !--- [IN]
             912                            rhogvz_split,  rhogvz_split_pl,  & !--- [IN]
             913                            rhogw_split,   rhogw_split_pl,   & !--- [IN]
             914                            rhoge_split,   rhoge_split_pl,   & !--- [IN]
             915                            pregd_split,   pregd_split_pl,   & !--- [IN]
             916                            rhog,          rhog_pl,          & !--- [IN]
             917                            rhogvx,        rhogvx_pl,        & !--- [IN]
             918                            rhogvy,        rhogvy_pl,        & !--- [IN]
             919                            rhogvz,        rhogvz_pl,        & !--- [IN]
             920                            rhogw,         rhogw_pl,         & !--- [IN]
             921                            eth,           eth_pl,           & !--- [IN]
             922                            grhog,         grhog_pl,         & !--- [IN]
             923                            grhogw,        grhogw_pl,        & !--- [IN]
             924                            grhoge,        grhoge_pl,        & !--- [IN]
             925                            grhogetot,     grhogetot_pl,     & !--- [IN]
             926                            dt                               ) !--- [IN]
             927                         use mod_adm, only: &
             928                            ADM_prc_me,  &
             929                            ADM_prc_pl,  &
             930                            ADM_gall,    &
             931                            ADM_gall_pl, &
             932                            ADM_lall,    &
             933                            ADM_lall_pl, &
             934                            ADM_kall
             935                         use mod_cnst, only: &
             936                            CNST_RAIR, &
             937                            CNST_CV
             938                         use mod_time, only: &
             939                            TIME_SPLIT
             940                         use mod_vmtr, only: &
             941                            VMTR_C2Wfact,    &
             942                            VMTR_C2Wfact_pl
             943                         use mod_src, only: &
             944                            src_flux_convergence,      &
             945                            src_advection_convergence, &
             946                            I_SRC_horizontal,          &
             947                            I_SRC_default
             948                         use mod_cnvvar, only: &
             949                            cnvvar_rhokin, &
             950                            cnvvar_rhokin_ijkl
             951                         use mod_bsstate, only: &
             952                            phi, phi_pl
             953                         use mod_bndcnd, only: &
             954                            BNDCND_rhow
             955                         implicit none
             956                     
             957                         real(8), intent(out) :: rhog_split2     (ADM_gall,   ADM_kall,ADM_lall   ) ! prognostic vars (split, at n step)
             958                         real(8), intent(out) :: rhog_split2_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             959                         real(8), intent(in)  :: rhogvx_split2   (ADM_gall,   ADM_kall,ADM_lall   )
             960                         real(8), intent(in)  :: rhogvx_split2_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             961                         real(8), intent(in)  :: rhogvy_split2   (ADM_gall,   ADM_kall,ADM_lall   )
             962                         real(8), intent(in)  :: rhogvy_split2_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             963                         real(8), intent(in)  :: rhogvz_split2   (ADM_gall,   ADM_kall,ADM_lall   )
             964                         real(8), intent(in)  :: rhogvz_split2_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             965                         real(8), intent(out) :: rhogw_split2    (ADM_gall,   ADM_kall,ADM_lall   )
             966                         real(8), intent(out) :: rhogw_split2_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             967                         real(8), intent(out) :: rhoge_split2    (ADM_gall,   ADM_kall,ADM_lall   )
             968                         real(8), intent(out) :: rhoge_split2_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             969                     
             970                         real(8), intent(in)  :: rhog_split      (ADM_gall,   ADM_kall,ADM_lall   ) ! prognostic vars (split, at n step)
             971                         real(8), intent(in)  :: rhog_split_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             972                         real(8), intent(in)  :: rhogvx_split    (ADM_gall,   ADM_kall,ADM_lall   )
             973                         real(8), intent(in)  :: rhogvx_split_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             974                         real(8), intent(in)  :: rhogvy_split    (ADM_gall,   ADM_kall,ADM_lall   )
             975                         real(8), intent(in)  :: rhogvy_split_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             976                         real(8), intent(in)  :: rhogvz_split    (ADM_gall,   ADM_kall,ADM_lall   )
             977                         real(8), intent(in)  :: rhogvz_split_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             978                         real(8), intent(in)  :: rhogw_split     (ADM_gall,   ADM_kall,ADM_lall   )
             979                         real(8), intent(in)  :: rhogw_split_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             980                         real(8), intent(in)  :: rhoge_split     (ADM_gall,   ADM_kall,ADM_lall   )
             981                         real(8), intent(in)  :: rhoge_split_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             982                         real(8), intent(in)  :: pregd_split     (ADM_gall,   ADM_kall,ADM_lall   )
             983                         real(8), intent(in)  :: pregd_split_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             984                     
             985                         real(8), intent(in)  :: rhog     (ADM_gall,   ADM_kall,ADM_lall   ) ! prognostic vars
             986                         real(8), intent(in)  :: rhog_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             987                         real(8), intent(in)  :: rhogvx   (ADM_gall,   ADM_kall,ADM_lall   )
             988                         real(8), intent(in)  :: rhogvx_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             989                         real(8), intent(in)  :: rhogvy   (ADM_gall,   ADM_kall,ADM_lall   )
             990                         real(8), intent(in)  :: rhogvy_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             991                         real(8), intent(in)  :: rhogvz   (ADM_gall,   ADM_kall,ADM_lall   )
             992                         real(8), intent(in)  :: rhogvz_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             993                         real(8), intent(in)  :: rhogw    (ADM_gall,   ADM_kall,ADM_lall   )
             994                         real(8), intent(in)  :: rhogw_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             995                         real(8), intent(in)  :: eth      (ADM_gall,   ADM_kall,ADM_lall   )
             996                         real(8), intent(in)  :: eth_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             997                     
             998                         real(8), intent(in)  :: grhog       (ADM_gall,   ADM_kall,ADM_lall   ) ! large step tendency
             999                         real(8), intent(in)  :: grhog_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1000                         real(8), intent(in)  :: grhogw      (ADM_gall,   ADM_kall,ADM_lall   )
            1001                         real(8), intent(in)  :: grhogw_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1002                         real(8), intent(in)  :: grhoge      (ADM_gall,   ADM_kall,ADM_lall   )
            1003                         real(8), intent(in)  :: grhoge_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1004                         real(8), intent(in)  :: grhogetot   (ADM_gall,   ADM_kall,ADM_lall   )
            1005                         real(8), intent(in)  :: grhogetot_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1006                     
            1007                         real(8), intent(in)  :: dt
            1008                     
            1009                         real(8) :: drhog_split       (ADM_gall,   ADM_kall,ADM_lall   ) ! source term at t=n+1
            1010                         real(8) :: drhog_split_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1011                         real(8) :: drhoge_split      (ADM_gall,   ADM_kall,ADM_lall   )
            1012                         real(8) :: drhoge_split_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1013                         real(8) :: drhogetot_split   (ADM_gall,   ADM_kall,ADM_lall   )
            1014                         real(8) :: drhogetot_split_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1015                     
            1016                         real(8) :: drhog1    (ADM_gall,   ADM_kall,ADM_lall   ) ! source term ( large step + t=n+1 )
            1017                         real(8) :: drhog1_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1018                         real(8) :: drhoge1   (ADM_gall,   ADM_kall,ADM_lall   )
            1019                         real(8) :: drhoge1_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1020                         real(8) :: dpre1     (ADM_gall,   ADM_kall,ADM_lall   )
            1021                         real(8) :: dpre1_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1022                     
            1023                         real(8) :: wk_rhog     (ADM_gall,   ADM_kall,ADM_lall   )
            1024                         real(8) :: wk_rhog_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1025                         real(8) :: wk_rhogvx   (ADM_gall,   ADM_kall,ADM_lall   )
            1026                         real(8) :: wk_rhogvx_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1027                         real(8) :: wk_rhogvy   (ADM_gall,   ADM_kall,ADM_lall   )
            1028                         real(8) :: wk_rhogvy_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1029                         real(8) :: wk_rhogvz   (ADM_gall,   ADM_kall,ADM_lall   )
            1030                         real(8) :: wk_rhogvz_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1031                         real(8) :: wk_rhogw    (ADM_gall,   ADM_kall,ADM_lall   )
            1032                         real(8) :: wk_rhogw_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1033                     
            1034                         real(8) :: rhogkin0   (ADM_gall,   ADM_kall,ADM_lall   )
            1035                         real(8) :: rhogkin0_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1036                         real(8) :: rhogkin1   (ADM_gall,   ADM_kall,ADM_lall   )
            1037                         real(8) :: rhogkin1_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1038                         real(8) :: rhogkin2   (ADM_gall,   ADM_kall,ADM_lall   )
            1039                         real(8) :: rhogkin2_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1040                         real(8) :: ethtot     (ADM_gall,   ADM_kall,ADM_lall   )
            1041                         real(8) :: ethtot_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1042                     
            1043                         integer :: ij, k, l
            1044                         !---------------------------------------------------------------------------
            1045                     
            1046                         call DEBUG_rapstart('++++vi_path2')
            1047                     
            1048                         ! calc rhogkin ( previous )
            1049                         call cnvvar_rhokin_ijkl( rhog,     rhog_pl,    & !--- [IN]
            1050                                                  rhogvx,   rhogvx_pl,  & !--- [IN]
            1051                                                  rhogvy,   rhogvy_pl,  & !--- [IN]
            1052                                                  rhogvz,   rhogvz_pl,  & !--- [IN]
            1053                                                  rhogw,    rhogw_pl,   & !--- [IN]
            1054                                                  rhogkin0, rhogkin0_pl ) !--- [OUT]
            1055                     
            1056                         ! prognostic variables ( large step + split (t=n) )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1057     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1058     2  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 191
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1059     3  pp   4v                do ij = 1, ADM_gall
            1060     3   p   4v                   wk_rhog  (ij,k,l) = rhog  (ij,k,l) + rhog_split  (ij,k,l)
            1061     3   p   4v                   wk_rhogvx(ij,k,l) = rhogvx(ij,k,l) + rhogvx_split(ij,k,l)
            1062     3   p   4v                   wk_rhogvy(ij,k,l) = rhogvy(ij,k,l) + rhogvy_split(ij,k,l)
            1063     3   p   4v                   wk_rhogvz(ij,k,l) = rhogvz(ij,k,l) + rhogvz_split(ij,k,l)
            1064     3   p   4v                   wk_rhogw (ij,k,l) = rhogw (ij,k,l) + rhogw_split (ij,k,l)
            1065     3   p   4v                enddo
            1066     2   p                  enddo
            1067     1   p               enddo
            1068                     
            1069     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1070     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1071     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 191
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1072     4  pp   4v                   do ij = 1, ADM_gall_pl
            1073     4   p   4v                      wk_rhog_pl  (ij,k,l) = rhog_pl  (ij,k,l) + rhog_split_pl  (ij,k,l)
            1074     4   p   4v                      wk_rhogvx_pl(ij,k,l) = rhogvx_pl(ij,k,l) + rhogvx_split_pl(ij,k,l)
            1075     4   p   4v                      wk_rhogvy_pl(ij,k,l) = rhogvy_pl(ij,k,l) + rhogvy_split_pl(ij,k,l)
            1076     4   p   4v                      wk_rhogvz_pl(ij,k,l) = rhogvz_pl(ij,k,l) + rhogvz_split_pl(ij,k,l)
            1077     4   p   4v                      wk_rhogw_pl (ij,k,l) = rhogw_pl (ij,k,l) + rhogw_split_pl (ij,k,l)
            1078     4   p   4v                   enddo
            1079     3   p                     enddo
            1080     2   p                  enddo
            1081     1                   endif
            1082                     
            1083                         ! calc rhogkin ( previous + split(t=n) )
            1084                         call cnvvar_rhokin_ijkl( wk_rhog,   wk_rhog_pl,   & !--- [IN]
            1085                                                  wk_rhogvx, wk_rhogvx_pl, & !--- [IN]
            1086                                                  wk_rhogvy, wk_rhogvy_pl, & !--- [IN]
            1087                                                  wk_rhogvz, wk_rhogvz_pl, & !--- [IN]
            1088                                                  wk_rhogw,  wk_rhogw_pl,  & !--- [IN]
            1089                                                  rhogkin1,  rhogkin1_pl   ) !--- [OUT]
            1090                     
            1091                         !---------------------------------------------------------------------------
            1092                         ! update drhog & drhoge
            1093                         !---------------------------------------------------------------------------
            1094                     
            1095     1                   if ( TIME_SPLIT ) then
            1096     1                      !--- horizontal flux convergence
            1097     1                      call src_flux_convergence( rhogvx_split2, rhogvx_split2_pl, & !--- [IN]
            1098     1                                                 rhogvy_split2, rhogvy_split2_pl, & !--- [IN]
            1099     1                                                 rhogvz_split2, rhogvz_split2_pl, & !--- [IN]
            1100     1                                                 rhogw_split,   rhogw_split_pl,   & !--- [IN]
            1101     1                                                 drhog_split,   drhog_split_pl,   & !--- [OUT]
            1102     1                                                 I_SRC_horizontal                 ) !--- [IN]
            1103     1                   else
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1104     1  pp    v             drhog_split   (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1105     1  pp    v             drhog_split_pl(:,:,:) = 0.D0
            1106     1                   endif
            1107                     
            1108     1                   if ( TIME_SPLIT ) then
            1109     1                      !--- horizontal advection convergence
            1110     1                      call src_advection_convergence( rhogvx_split2, rhogvx_split2_pl, & !--- [IN]
            1111     1                                                      rhogvy_split2, rhogvy_split2_pl, & !--- [IN]
            1112     1                                                      rhogvz_split2, rhogvz_split2_pl, & !--- [IN]
            1113     1                                                      rhogw_split,   rhogw_split_pl,   & !--- [IN]
            1114     1                                                      eth,           eth_pl,           & !--- [IN]
            1115     1                                                      drhoge_split,  drhoge_split_pl,  & !--- [OUT]
            1116     1                                                      I_SRC_horizontal                 ) !--- [IN]
            1117     1                   else
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1118     1  pp    v             drhoge_split   (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1119     1  pp    v             drhoge_split_pl(:,:,:) = 0.D0
            1120     1                   endif
            1121                     
            1122                         !--- update drhog, drhoge, and calc source term of pressure
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1123     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1124     2  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 302
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1125     3  pp   6v                do ij = 1, ADM_gall
            1126     3   p   6v                   drhog1(ij,k,l)  = grhog(ij,k,l) + drhog_split(ij,k,l)
            1127     3   p   6v                   drhoge1(ij,k,l) = grhoge(ij,k,l) + drhoge_split(ij,k,l)
            1128     3   p   6v                   dpre1(ij,k,l)   = drhoge1(ij,k,l) * CNST_RAIR / CNST_CV
            1129     3   p   6v                enddo
            1130     2   p                  enddo
            1131     1   p               enddo
            1132                     
            1133     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1134     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1135     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 302
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1136     4  pp   6v                   do ij = 1, ADM_gall_pl
            1137     4   p   6v                      drhog1_pl(ij,k,l)  = grhog_pl(ij,k,l) + drhog_split_pl(ij,k,l)
            1138     4   p   6v                      drhoge1_pl(ij,k,l) = grhoge_pl(ij,k,l) + drhoge_split_pl(ij,k,l)
            1139     4   p   6v                      dpre1_pl(ij,k,l)   = drhoge1_pl(ij,k,l) * CNST_RAIR / CNST_CV
            1140     4   p   6v                   enddo
            1141     3   p                     enddo
            1142     2   p                  enddo
            1143     1                   endif
            1144                     
            1145                         !---------------------------------------------------------------------------
            1146                         ! verical implict calculation
            1147                         !---------------------------------------------------------------------------
            1148                     
            1149                         !------ boundary condition for rhogw_split2
            1150     1                   do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<< Loop-information  End >>>
            1151     2  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 696
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1152     3  pp    v                do ij = 1, ADM_gall
            1153     3   p    v                   rhogw_split2(ij,k,l) = 0.D0 ! [add] S.Iga 090827
            1154     3   p    v                enddo
            1155     2   p                  enddo
            1156     1               
            1157     1                      call BNDCND_rhow( ADM_gall,               & !--- [IN]
            1158     1                                        rhogvx_split2(:,:,l),   & !--- [IN]
            1159     1                                        rhogvy_split2(:,:,l),   & !--- [IN]
            1160     1                                        rhogvz_split2(:,:,l),   & !--- [IN]
            1161     1                                        rhogw_split2 (:,:,l),   & !--- [INOUT]
            1162     1                                        VMTR_C2Wfact (:,:,:,l)  ) !--- [IN]
            1163     1                   enddo
            1164                     
            1165     1                   if ( ADM_prc_me == ADM_prc_pl ) then
            1166     2                      do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<< Loop-information  End >>>
            1167     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 696
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1168     4  pp    v                   do ij = 1, ADM_gall_pl
            1169     4   p    v                      rhogw_split2_pl(ij,k,l) = 0.D0 ! [add] S.Iga 090827
            1170     4   p    v                   enddo
            1171     3   p                     enddo
            1172     2               
            1173     2                         call BNDCND_rhow( ADM_gall_pl,               & !--- [IN]
            1174     2                                           rhogvx_split2_pl(:,:,l),   & !--- [IN]
            1175     2                                           rhogvy_split2_pl(:,:,l),   & !--- [IN]
            1176     2                                           rhogvz_split2_pl(:,:,l),   & !--- [IN]
            1177     2                                           rhogw_split2_pl (:,:,l),   & !--- [INOUT]
            1178     2                                           VMTR_C2Wfact_pl (:,:,:,l)  ) !--- [IN]
            1179     2                      enddo
            1180     1                   endif
            1181                     
            1182                         !---< vertical implicit : solved by tridiagonal matrix
            1183                         call vi_rhow( rhogw_split2, rhogw_split2_pl, & !--- [INOUT]
            1184                                       rhogw_split,  rhogw_split_pl,  & !--- [IN]
            1185                                       pregd_split,  pregd_split_pl,  & !--- [IN]
            1186                                       rhog_split,   rhog_split_pl,   & !--- [IN]
            1187                                       drhog1,       drhog1_pl,       & !--- [IN]
            1188                                       grhogw,       grhogw_pl,       & !--- [IN]
            1189                                       dpre1,        dpre1_pl,        & !--- [IN]
            1190                                       dt                             ) !--- [IN]
            1191                     
            1192                         !--- < rhog integration > ---
            1193                         call src_flux_convergence( rhogvx_split2, rhogvx_split2_pl, & !--- [IN]
            1194                                                    rhogvy_split2, rhogvy_split2_pl, & !--- [IN]
            1195                                                    rhogvz_split2, rhogvz_split2_pl, & !--- [IN]
            1196                                                    rhogw_split2,  rhogw_split2_pl,  & !--- [IN]
            1197                                                    drhog_split,   drhog_split_pl,   & !--- [OUT]
            1198                                                    I_SRC_default                    ) !--- [IN] [mod] H.Yashiro 20120530
            1199                     
            1200                         !------ update drhog & rhog_split2
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1201        pp   8v          rhog_split2(:,:,:) = rhog_split(:,:,:) + ( grhog(:,:,:) + drhog_split(:,:,:) ) * dt
            1202                     
            1203     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1204     1  pp   8v             rhog_split2_pl(:,:,:) = rhog_split_pl(:,:,:) + ( grhog_pl(:,:,:) + drhog_split_pl(:,:,:) ) * dt
            1205     1                   endif
            1206                     
            1207                         !---------------------------------------------------------------------------
            1208                         ! energy correction by ETOT scheme (Satoh,2002)
            1209                         !---------------------------------------------------------------------------
            1210                     
            1211                         ! prognostic variables ( large step + split (t=n+1) )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1212        pp   4v          wk_rhog  (:,:,:) = rhog  (:,:,:) + rhog_split2  (:,:,:)
            1213         p   4v          wk_rhogvx(:,:,:) = rhogvx(:,:,:) + rhogvx_split2(:,:,:)
            1214         p   4v          wk_rhogvy(:,:,:) = rhogvy(:,:,:) + rhogvy_split2(:,:,:)
            1215         p   4v          wk_rhogvz(:,:,:) = rhogvz(:,:,:) + rhogvz_split2(:,:,:)
            1216         p   4v          wk_rhogw (:,:,:) = rhogw (:,:,:) + rhogw_split2 (:,:,:)
            1217                     
            1218     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1219     1  pp   4v             wk_rhog_pl  (:,:,:) = rhog_pl  (:,:,:) + rhog_split2_pl  (:,:,:)
            1220     1   p   4v             wk_rhogvx_pl(:,:,:) = rhogvx_pl(:,:,:) + rhogvx_split2_pl(:,:,:)
            1221     1   p   4v             wk_rhogvy_pl(:,:,:) = rhogvy_pl(:,:,:) + rhogvy_split2_pl(:,:,:)
            1222     1   p   4v             wk_rhogvz_pl(:,:,:) = rhogvz_pl(:,:,:) + rhogvz_split2_pl(:,:,:)
            1223     1   p   4v             wk_rhogw_pl (:,:,:) = rhogw_pl (:,:,:) + rhogw_split2_pl (:,:,:)
            1224     1                   endif
            1225                     
            1226                         ! calc rhogkin ( previous + split(t=n+1) )
            1227                         call cnvvar_rhokin_ijkl( wk_rhog,   wk_rhog_pl,   & !--- [IN]
            1228                                                  wk_rhogvx, wk_rhogvx_pl, & !--- [IN]
            1229                                                  wk_rhogvy, wk_rhogvy_pl, & !--- [IN]
            1230                                                  wk_rhogvz, wk_rhogvz_pl, & !--- [IN]
            1231                                                  wk_rhogw,  wk_rhogw_pl,  & !--- [IN]
            1232                                                  rhogkin2,  rhogkin2_pl   ) !--- [OUT]
            1233                     
            1234                         !--- calculate ( h + v^{2}/2 + phi )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1235        pp   6v          ethtot(:,:,:) = eth(:,:,:)                    &
            1236                                       + rhogkin0(:,:,:) / rhog(:,:,:) &
            1237                                       + phi(:,:,:)
            1238                     
            1239     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1240     1  pp   6v             ethtot_pl(:,:,:) = eth_pl(:,:,:)                       &
            1241     1                                       + rhogkin0_pl(:,:,:) / rhog_pl(:,:,:) &
            1242     1                                       + phi_pl(:,:,:)
            1243     1                   endif
            1244                     
            1245                         !--- advection convergence for eth + kin + phi
            1246                         call src_advection_convergence( wk_rhogvx,       wk_rhogvx_pl,       & !--- [IN]
            1247                                                         wk_rhogvy,       wk_rhogvy_pl,       & !--- [IN]
            1248                                                         wk_rhogvz,       wk_rhogvz_pl,       & !--- [IN]
            1249                                                         wk_rhogw,        wk_rhogw_pl,        & !--- [IN]
            1250                                                         ethtot,          ethtot_pl,          & !--- [IN]
            1251                                                         drhogetot_split, drhogetot_split_pl, & !--- [OUT]
            1252                                                         I_SRC_default                        ) !--- [IN]
            1253                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1254        pp   4v          rhoge_split2(:,:,:) = rhoge_split      (:,:,:)                 & ! t=n
            1255                                             + ( grhogetot      (:,:,:)                 & ! tendency of total energy (num.diff+smg+nudge)
            1256                                               + drhogetot_split(:,:,:) ) * dt          & ! tendency of total energy (adv.conv.)
            1257                                             + ( rhogkin1       (:,:,:)                 & ! kinetic   energy (t=n)
            1258                                               - rhogkin2       (:,:,:) )               & ! kinetic   energy (t=n+1)
            1259                                             + ( rhog_split     (:,:,:)                 & ! potential energy (diff,t=n)
            1260                                               - rhog_split2    (:,:,:) ) * phi(:,:,:)    ! potential energy (diff,t=n+1)
            1261                     
            1262     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1263     1  pp   4v             rhoge_split2_pl(:,:,:) = rhoge_split_pl      (:,:,:)                    &
            1264     1                                             + ( grhogetot_pl      (:,:,:)                    &
            1265     1                                               + drhogetot_split_pl(:,:,:) ) * dt             &
            1266     1                                             + ( rhogkin1_pl       (:,:,:)                    &
            1267     1                                               - rhogkin2_pl       (:,:,:) )                  &
            1268     1                                             + ( rhog_split_pl     (:,:,:)                    &
            1269     1                                               - rhog_split2_pl    (:,:,:) ) * phi_pl(:,:,:)
            1270     1                   endif
            1271                     
            1272                         call DEBUG_rapend('++++vi_path2')
            1273                     
            1274                         return
            1275                       end subroutine vi_path2
            1276                     
            1277                       !-----------------------------------------------------------------------------
            1278                       subroutine vi_rhow_update_matrix( &
            1279                            eth,     eth_pl,     & !--- [IN]
            1280                            g_tilde, g_tilde_pl, & !--- [IN]
            1281                            dt                   ) !--- [IN]
            1282                         use mod_adm, only: &
            1283                            ADM_prc_me,  &
            1284                            ADM_prc_pl,  &
            1285                            ADM_gall,    &
            1286                            ADM_gall_pl, &
            1287                            ADM_lall,    &
            1288                            ADM_lall_pl, &
            1289                            ADM_kall,    &
            1290                            ADM_kmin,    &
            1291                            ADM_kmax
            1292                         use mod_cnst, only: &
            1293                            CNST_EGRAV, &
            1294                            CNST_CV,    &
            1295                            CNST_RAIR
            1296                         use mod_grd, only: &
            1297                            GRD_rdgzh, &
            1298                            GRD_rdgz,  &
            1299                            GRD_cfac,  &
            1300                            GRD_dfac
            1301                         use mod_vmtr, only: &
            1302                            VMTR_RGSGAM2,    &
            1303                            VMTR_RGSGAM2_pl, &
            1304                            VMTR_GAM2H,      &
            1305                            VMTR_GAM2H_pl,   &
            1306                            VMTR_RGAM2H,     &
            1307                            VMTR_RGAM2H_pl,  &
            1308                            VMTR_RGSH,       &
            1309                            VMTR_RGSH_pl
            1310                         use mod_runconf, only: &
            1311                            NON_HYDRO_ALPHA
            1312                         implicit none
            1313                     
            1314                         real(8), intent(in) :: eth       (ADM_gall,   ADM_kall,ADM_lall   ) ! enthalpy at the h-lev
            1315                         real(8), intent(in) :: eth_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1316                         real(8), intent(in) :: g_tilde   (ADM_gall,   ADM_kall,ADM_lall   ) ! effective gravitation at the h-lev
            1317                         real(8), intent(in) :: g_tilde_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1318                         real(8), intent(in) :: dt
            1319                     
            1320                         real(8), save :: GCVovR ! g * Cv / R
            1321                         real(8), save :: ACVovR ! alfa * Cv / R
            1322                     
            1323                         integer :: ij, k, l
            1324                         !---------------------------------------------------------------------------
            1325                     
            1326                         call DEBUG_rapstart('++++vi_rhow_update_matrix')
            1327                     
            1328                     ! Original concept
            1329                     !
            1330                     !    A_o(:,:,:) = VMTR_RGSGAM2(:,:,:)
            1331                     !    A_i(:,:,:) = VMTR_GAM2H(:,:,:) * eth(:,:,:) ! [debug] 20120727 H.Yashiro
            1332                     !    B  (:,:,:) = g_tilde(:,:,:)
            1333                     !    C_o(:,:,:) = VMTR_RGAM2H (:,:,:) * ( CNST_CV / CNST_RAIR * CNST_EGRAV )
            1334                     !    C_i(:,:,:) = 1.D0 / VMTR_RGAM2H(:,:,:)
            1335                     !    D  (:,:,:) = CNST_CV / CNST_RAIR / ( dt*dt ) / VMTR_RGSH(:,:,:)
            1336                     !
            1337                     !    do k = ADM_kmin+1, ADM_kmax
            1338                     !       Mc(:,k,:) = dble(NON_HYDRO_ALPHA)*D(:,k,:)&
            1339                     !            + GRD_rdgzh(k)*(                     &
            1340                     !            + GRD_rdgz(k)*A_o(:,k,:)*A_i(:,k,:)      &
            1341                     !            + GRD_rdgz(k-1)*A_o(:,k-1,:)*A_i(:,k,:)  &
            1342                     !            -0.5D0*(GRD_dfac(k)-GRD_cfac(k-1))*(B(:,k,:)+C_o(:,k,:)*C_i(:,k,:))&
            1343                     !            )
            1344                     !       Mu(:,k,:) = -GRD_rdgzh(k)*GRD_rdgz(k)*A_o(:,k,:)*A_i(:,k+1,:)&
            1345                     !            -0.5D0*GRD_rdgzh(k)*GRD_cfac(k)*(B(:,k+1,:)+C_o(:,k,:)*C_i(:,k+1,:))
            1346                     !       Ml(:,k,:) = -GRD_rdgzh(k)*GRD_rdgz(k)*A_o(:,k,:)*A_i(:,k-1,:)&
            1347                     !            +0.5D0*GRD_rdgzh(k)*GRD_dfac(k-1)*(B(:,k-1,:)+C_o(:,k,:)*C_i(:,k-1,:))
            1348                     !    end do
            1349                     
            1350     1                   if ( iflag ) then
            1351     1                      iflag = .false.
            1352     1               
            1353     1                      allocate( Mc   (ADM_gall,   ADM_kall,ADM_lall   ) )
            1354     1                      allocate( Mc_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl) )
            1355     1                      allocate( Mu   (ADM_gall,   ADM_kall,ADM_lall   ) )
            1356     1                      allocate( Mu_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl) )
            1357     1                      allocate( Ml   (ADM_gall,   ADM_kall,ADM_lall   ) )
            1358     1                      allocate( Ml_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl) )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1359     1  pp    v             Mc   (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1360     1  pp    v             Mc_pl(:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1361     1  pp    v             Mu   (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1362     1  pp    v             Mu_pl(:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1363     1  pp    v             Ml   (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1364     1  pp    v             Ml_pl(:,:,:) = 0.D0
            1365     1               
            1366     1                      allocate( A2_o     (ADM_gall,   ADM_kall,ADM_lall   ) )
            1367     1                      allocate( A2_o_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
            1368     1                      allocate( CooCip   (ADM_gall,   ADM_kall,ADM_lall   ) )
            1369     1                      allocate( CooCip_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl) )
            1370     1                      allocate( CooCim   (ADM_gall,   ADM_kall,ADM_lall   ) )
            1371     1                      allocate( CooCim_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl) )
            1372     1                      allocate( D2       (ADM_gall,   ADM_kall,ADM_lall   ) )
            1373     1                      allocate( D2_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
            1374     1               
            1375     1                      GCVovR = CNST_EGRAV * CNST_CV / CNST_RAIR
            1376     1                      alfa   = real(NON_HYDRO_ALPHA,kind=8)
            1377     1                      ACVovR = alfa * CNST_CV / CNST_RAIR
            1378     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1379     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 8
                                   <<<      GRD_rdgz: 8
                                   <<< Loop-information  End >>>
            1380     3  pp                     do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 54
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1381     4  pp   4v                   do ij = 1, ADM_gall
            1382     4   p   4v                      A2_o  (ij,k,l) = VMTR_RGSGAM2(ij,k,l) * GRD_rdgz(k)
            1383     4   p   4v                      CooCip(ij,k,l) = GCVovR * VMTR_RGAM2H(ij,k,l) * VMTR_GAM2H(ij,k+1,l)
            1384     4   p   4v                      CooCim(ij,k,l) = GCVovR * VMTR_RGAM2H(ij,k,l) * VMTR_GAM2H(ij,k-1,l)
            1385     4   p   4v                      D2    (ij,k,l) = ACVovR / ( dt*dt ) / VMTR_RGSH(ij,k,l)
            1386     4   p   4v                   enddo
            1387     3   p                     enddo
            1388     2   p                  enddo
            1389     1               
            1390     2                      if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1391     3  pp                     do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 8
                                   <<<      GRD_rdgz: 8
                                   <<< Loop-information  End >>>
            1392     4  pp                        do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 54
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1393     5  pp   4v                      do ij = 1, ADM_gall_pl
            1394     5   p   4v                         A2_o_pl  (ij,k,l) = VMTR_RGSGAM2_pl(ij,k,l) * GRD_rdgz(k)
            1395     5   p   4v                         CooCip_pl(ij,k,l) = GCVovR * VMTR_RGAM2H_pl(ij,k,l) * VMTR_GAM2H_pl(ij,k+1,l)
            1396     5   p   4v                         CooCim_pl(ij,k,l) = GCVovR * VMTR_RGAM2H_pl(ij,k,l) * VMTR_GAM2H_pl(ij,k-1,l)
            1397     5   p   4v                         D2_pl    (ij,k,l) = ACVovR / ( dt*dt ) / VMTR_RGSH_pl(ij,k,l)
            1398     5   p   4v                      enddo
            1399     4   p                        enddo
            1400     3   p                     enddo
            1401     2                      endif
            1402     1               
            1403     1                   endif ! only once
            1404                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1405     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 78
                                   <<<      Mc: 54, GRD_cfac: 8, GRD_rdgzh: 8
                                   <<<      GRD_dfac: 8
                                   <<< Loop-information  End >>>
            1406     2  pp                  do k  = ADM_kmin+1, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 43
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 6
                                   <<<      Mc: 6
                                   <<< Loop-information  End >>>
            1407     3  pp   2v             do ij = 1, ADM_gall
            1408     3   p   2v                Mc(ij,k,l) = D2(ij,k,l) &
            1409     3                                    + GRD_rdgzh(k) * ( ( A2_o(ij,k,l)+A2_o(ij,k-1,l) )       &
            1410     3                                                     * VMTR_GAM2H(ij,k,l) * eth(ij,k,l)      &
            1411     3                                                     - 0.5D0 * ( GRD_dfac(k)-GRD_cfac(k-1) ) &
            1412     3                                                     * ( g_tilde(ij,k,l)+GCVovR )            )
            1413     3               
            1414     3   p   2v                Mu(ij,k,l) = -GRD_rdgzh(k) * ( A2_o(ij,k,l)                         &
            1415     3                                                      * VMTR_GAM2H(ij,k+1,l) * eth(ij,k+1,l) &
            1416     3                                                      + 0.5D0 * GRD_cfac(k)                  &
            1417     3                                                      * ( g_tilde(ij,k+1,l)+CooCip(ij,k,l) ) )
            1418     3               
            1419     3   p   2v                Ml(ij,k,l) = -GRD_rdgzh(k) * ( A2_o(ij,k,l)                         &
            1420     3                                                      * VMTR_GAM2H(ij,k-1,l) * eth(ij,k-1,l) &
            1421     3                                                      - 0.5D0 * GRD_dfac(k-1)                &
            1422     3                                                      * ( g_tilde(ij,k-1,l)+CooCim(ij,k,l) ) )
            1423     3   p   2v             enddo
            1424     2   p                  enddo
            1425     1   p               enddo
            1426                     
            1427     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1428     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 78
                                   <<<      Mc_pl: 54, GRD_cfac: 8, GRD_rdgzh: 8
                                   <<<      GRD_dfac: 8
                                   <<< Loop-information  End >>>
            1429     3  pp                     do k  = ADM_kmin+1, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 43
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 6
                                   <<<      Mc_pl: 6
                                   <<< Loop-information  End >>>
            1430     4  pp   2v                do ij = 1, ADM_gall_pl
            1431     4   p   2v                   Mc_pl(ij,k,l) = D2_pl(ij,k,l) &
            1432     4                                          + GRD_rdgzh(k) * ( ( A2_o_pl(ij,k,l)+A2_o_pl(ij,k-1,l) )  &
            1433     4                                                           * VMTR_GAM2H_pl(ij,k,l) * eth_pl(ij,k,l) &
            1434     4                                                           - 0.5D0 * ( GRD_dfac(k)-GRD_cfac(k-1) )  &
            1435     4                                                           * ( g_tilde_pl(ij,k,l)+GCVovR )          )
            1436     4               
            1437     4   p   2v                   Mu_pl(ij,k,l) = -GRD_rdgzh(k) * ( A2_o_pl(ij,k,l)                            &
            1438     4                                                            * VMTR_GAM2H_pl(ij,k+1,l) * eth_pl(ij,k+1,l) &
            1439     4                                                            + 0.5D0 * GRD_cfac(k)                        &
            1440     4                                                            * ( g_tilde_pl(ij,k+1,l)+CooCip_pl(ij,k,l) ) )
            1441     4               
            1442     4   p   2v                   Ml_pl(ij,k,l) = -GRD_rdgzh(k) * ( A2_o_pl(ij,k,l)                            &
            1443     4                                                            * VMTR_GAM2H_pl(ij,k-1,l) * eth_pl(ij,k-1,l) &
            1444     4                                                            - 0.5D0 * GRD_dfac(k-1)                      &
            1445     4                                                            * ( g_tilde_pl(ij,k-1,l)+CooCim_pl(ij,k,l) ) )
            1446     4   p   2v                enddo
            1447     3   p                     enddo
            1448     2   p                  enddo
            1449     1                   endif
            1450                     
            1451                         call DEBUG_rapend('++++vi_rhow_update_matrix')
            1452                     
            1453                         return
            1454                       end subroutine vi_rhow_update_matrix
            1455                     
            1456                       !-----------------------------------------------------------------------------
            1457                       subroutine vi_rhow( &
            1458                            rhogw_new, rhogw_new_pl, & !--- [INOUT]
            1459                            rhogw,     rhogw_pl,     & !--- [IN]
            1460                            preg,      preg_pl,      & !--- [IN]
            1461                            rhog,      rhog_pl,      & !--- [IN]
            1462                            Sr,        Sr_pl,        & !--- [IN]
            1463                            Sw,        Sw_pl,        & !--- [IN]
            1464                            Sp,        Sp_pl,        & !--- [IN]
            1465                            dt                       )
            1466                         use mod_adm, only: &
            1467                            ADM_prc_me,  &
            1468                            ADM_prc_pl,  &
            1469                            ADM_gall,    &
            1470                            ADM_gall_pl, &
            1471                            ADM_lall,    &
            1472                            ADM_lall_pl, &
            1473                            ADM_kall,    &
            1474                            ADM_kmin,    &
            1475                            ADM_kmax
            1476                         use mod_grd, only: &
            1477                            GRD_rdgzh, &
            1478                            GRD_afac,  &
            1479                            GRD_bfac
            1480                         use mod_cnst, only: &
            1481                            CNST_EGRAV, &
            1482                            CNST_CV,    &
            1483                            CNST_RAIR
            1484                         use mod_vmtr, only: &
            1485                            VMTR_RGSGAM2,     &
            1486                            VMTR_RGSGAM2_pl,  &
            1487                            VMTR_RGSGAM2H,    &
            1488                            VMTR_RGSGAM2H_pl, &
            1489                            VMTR_RGAM2H,      &
            1490                            VMTR_RGAM2H_pl,   &
            1491                            VMTR_RGAM2,       &
            1492                            VMTR_RGAM2_pl,    &
            1493                            VMTR_GSGAM2H,     &
            1494                            VMTR_GSGAM2H_pl
            1495                         implicit none
            1496                     
            1497                         real(8), intent(inout) :: rhogw_new   (ADM_gall,   ADM_kall,ADM_lall   ) ! rho*w (split) ( gam2 X G^{1/2} )
            1498                         real(8), intent(inout) :: rhogw_new_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1499                     
            1500                         real(8), intent(in)    :: rhogw   (ADM_gall,   ADM_kall,ADM_lall   ) ! rho*w    (split) ( gam2 X G^{1/2} )
            1501                         real(8), intent(in)    :: rhogw_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1502                         real(8), intent(in)    :: preg    (ADM_gall,   ADM_kall,ADM_lall   ) ! pertub p (split) ( gam2 X G^{1/2} )
            1503                         real(8), intent(in)    :: preg_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1504                         real(8), intent(in)    :: rhog    (ADM_gall,   ADM_kall,ADM_lall   ) ! rhod     (split) ( gam2 X G^{1/2} )
            1505                         real(8), intent(in)    :: rhog_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1506                         real(8), intent(in)    :: Sr      (ADM_gall,   ADM_kall,ADM_lall   ) ! source term for rho at the int-lev
            1507                         real(8), intent(in)    :: Sr_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1508                         real(8), intent(in)    :: Sw      (ADM_gall,   ADM_kall,ADM_lall   ) ! source term for rhow at the h-lev
            1509                         real(8), intent(in)    :: Sw_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1510                         real(8), intent(in)    :: Sp      (ADM_gall,   ADM_kall,ADM_lall   ) ! source term for p at the int-lev
            1511                         real(8), intent(in)    :: Sp_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1512                         real(8), intent(in)    :: dt
            1513                     
            1514                         real(8) :: Sall   (ADM_gall,   ADM_kall)
            1515                         real(8) :: Sall_pl(ADM_gall_pl,ADM_kall)
            1516                     
            1517                         real(8) :: beta   (ADM_gall   )
            1518                         real(8) :: beta_pl(ADM_gall_pl)
            1519                     
            1520                         real(8) :: gamma   (ADM_gall,   ADM_kall)
            1521                         real(8) :: gamma_pl(ADM_gall_pl,ADM_kall)
            1522                     
            1523                         integer :: ij, k, l
            1524                         !---------------------------------------------------------------------------
            1525                     
            1526                         call DEBUG_rapstart('++++vi_rhow')
            1527                     
            1528     1                   do l = 1, ADM_lall
            1529     1               
            1530     1                      !--- boundary conditions
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 500
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1531     2  pp   6v             do ij = 1, ADM_gall
            1532     2   p   6v                rhogw_new(ij,ADM_kmin,  l) = rhogw_new(ij,ADM_kmin,  l) * VMTR_RGSGAM2H(ij,ADM_kmin,  l)
            1533     2   p   6v                rhogw_new(ij,ADM_kmax+1,l) = rhogw_new(ij,ADM_kmax+1,l) * VMTR_RGSGAM2H(ij,ADM_kmax+1,l)
            1534     2   p   6v             enddo
            1535     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 12
                                   <<<      GRD_rdgzh: 4, GRD_afac: 4, GRD_bfac: 4
                                   <<< Loop-information  End >>>
            1536     2  pp                  do k  = ADM_kmin+1, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 65
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1537     3  pp   2v                do ij = 1, ADM_gall
            1538     3   p   2v                   Sall(ij,k) = (   VMTR_RGAM2H (ij,k,  l)               * ( rhogw(ij,k,  l)*alfa + dt*Sw(ij,k,  l) ) &
            1539     3                                         - ( VMTR_RGSGAM2(ij,k,  l)               * ( preg (ij,k,  l)      + dt*Sp(ij,k,  l) ) &
            1540     3                                           - VMTR_RGSGAM2(ij,k-1,l)               * ( preg (ij,k-1,l)      + dt*Sp(ij,k-1,l) ) &
            1541     3                                           ) * dt * GRD_rdgzh(k)                                                               &
            1542     3                                         - ( VMTR_RGAM2  (ij,k,  l) * GRD_afac(k) * ( rhog (ij,k,  l)      + dt*Sr(ij,k,  l) ) &
            1543     3                                           + VMTR_RGAM2  (ij,k-1,l) * GRD_bfac(k) * ( rhog (ij,k-1,l)      + dt*Sr(ij,k-1,l) ) &
            1544     3                                           ) * dt * 0.5D0 * CNST_EGRAV                                                         &
            1545     3                                         ) * ( CNST_CV / CNST_RAIR / (dt*dt) )
            1546     3   p   2v                enddo
            1547     2   p                  enddo
            1548     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 364
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1549     2  pp   6v             do ij = 1, ADM_gall
            1550     2   p   6v                Sall(ij,ADM_kmin+1) = Sall(ij,ADM_kmin+1) - Ml(ij,ADM_kmin+1,l) * rhogw_new(ij,ADM_kmin,  l)
            1551     2   p   6v                Sall(ij,ADM_kmax  ) = Sall(ij,ADM_kmax  ) - Mu(ij,ADM_kmax,  l) * rhogw_new(ij,ADM_kmax+1,l)
            1552     2   p   6v             enddo
            1553     1               
            1554     1                      !
            1555     1                      !--- < solve tri-daigonal matrix > ---
            1556     1                      !
            1557     1               
            1558     1                      ! condition at ADM_kmin+1
            1559     1                      k = ADM_kmin+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 458
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1560     2  pp   6v             do ij = 1, ADM_gall
            1561     2   p   6v                beta(ij) = Mc(ij,k,l)
            1562     2   p   6v                rhogw_new(ij,k,l) = Sall(ij,k) / beta(ij)
            1563     2   p   6v             enddo
            1564     1               
            1565     1                      !--- forward
            1566     2                      do k  = ADM_kmin+2, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 223
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1567     3  pp   4v                do ij = 1, ADM_gall
            1568     3   p   4v                   gamma(ij,k) = Mu(ij,k-1,l) / beta(ij)
            1569     3               
            1570     3   p   4v                   beta(ij)    = Mc(ij,k,l) - Ml(ij,k,l) * gamma(ij,k)
            1571     3               
            1572     3   p   4v                   rhogw_new(ij,k,l) = ( Sall(ij,k) - Ml(ij,k,l) * rhogw_new(ij,k-1,l) ) / beta(ij)
            1573     3   p   4v                enddo
            1574     2                      enddo
            1575     1               
            1576     1                      !--- backward
            1577     2                      do k  = ADM_kmax-1, ADM_kmin+1, -1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 728
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1578     3  pp   8v                do ij = 1, ADM_gall
            1579     3   p   8v                   rhogw_new(ij,k,l) = rhogw_new(ij,k,l) - gamma(ij,k+1) * rhogw_new(ij,k+1,l)
            1580     3   p   8v                enddo
            1581     2                      enddo
            1582     1               
            1583     1                      !--- return value ( gam2 X G^{1/2} )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1584     2  pp                  do k  = ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 276
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1585     3  pp   8v                do ij = 1, ADM_gall
            1586     3   p   8v                   rhogw_new(ij,k,l) = rhogw_new(ij,k,l) * VMTR_GSGAM2H(ij,k,l)
            1587     3   p   8v                enddo
            1588     2   p                  enddo
            1589     1                   enddo
            1590                     
            1591     1                   if ( ADM_prc_me == ADM_prc_pl ) then
            1592     2                      do l = 1, ADM_lall_pl
            1593     2               
            1594     2                         !--- boundary conditions
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 500
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1595     3  pp   6v                do ij = 1, ADM_gall_pl
            1596     3   p   6v                   rhogw_new_pl(ij,ADM_kmin,  l) = rhogw_new_pl(ij,ADM_kmin,  l) * VMTR_RGSGAM2H_pl(ij,ADM_kmin,  l)
            1597     3   p   6v                   rhogw_new_pl(ij,ADM_kmax+1,l) = rhogw_new_pl(ij,ADM_kmax+1,l) * VMTR_RGSGAM2H_pl(ij,ADM_kmax+1,l)
            1598     3   p   6v                enddo
            1599     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 12
                                   <<<      GRD_rdgzh: 4, GRD_afac: 4, GRD_bfac: 4
                                   <<< Loop-information  End >>>
            1600     3  pp                     do k  = ADM_kmin+1, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 65
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1601     4  pp   2v                   do ij = 1, ADM_gall_pl
            1602     4   p   2v                      Sall_pl(ij,k) = (   VMTR_RGAM2H_pl (ij,k,  l)               * ( rhogw_pl(ij,k,  l)*alfa + dt*Sw_pl(ij,k,  l) ) &
            1603     4                                               - ( VMTR_RGSGAM2_pl(ij,k,  l)               * ( preg_pl (ij,k,  l)      + dt*Sp_pl(ij,k,  l) ) &
            1604     4                                                 - VMTR_RGSGAM2_pl(ij,k-1,l)               * ( preg_pl (ij,k-1,l)      + dt*Sp_pl(ij,k-1,l) ) &
            1605     4                                                 ) * dt * GRD_rdgzh(k)                                                               &
            1606     4                                               - ( VMTR_RGAM2_pl  (ij,k,  l) * GRD_afac(k) * ( rhog_pl (ij,k,  l)      + dt*Sr_pl(ij,k,  l) ) &
            1607     4                                                 + VMTR_RGAM2_pl  (ij,k-1,l) * GRD_bfac(k) * ( rhog_pl (ij,k-1,l)      + dt*Sr_pl(ij,k-1,l) ) &
            1608     4                                                 ) * dt * 0.5D0 * CNST_EGRAV                                                                  &
            1609     4                                               ) * ( CNST_CV / CNST_RAIR / (dt*dt) )
            1610     4   p   2v                   enddo
            1611     3   p                     enddo
            1612     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 364
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1613     3  pp   6v                do ij = 1, ADM_gall_pl
            1614     3   p   6v                   Sall_pl(ij,ADM_kmin+1) = Sall_pl(ij,ADM_kmin+1) - Ml_pl(ij,ADM_kmin+1,l) * rhogw_new_pl(ij,ADM_kmin,  l)
            1615     3   p   6v                   Sall_pl(ij,ADM_kmax  ) = Sall_pl(ij,ADM_kmax  ) - Mu_pl(ij,ADM_kmax,  l) * rhogw_new_pl(ij,ADM_kmax+1,l)
            1616     3   p   6v                enddo
            1617     2               
            1618     2                         !
            1619     2                         !--- < solve tri-daigonal matrix > ---
            1620     2                         !
            1621     2               
            1622     2                         ! condition at ADM_kmin+1
            1623     2                         k = ADM_kmin+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 458
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1624     3  pp   6v                do ij = 1, ADM_gall_pl
            1625     3   p   6v                   beta_pl(ij) = Mc_pl(ij,k,l)
            1626     3   p   6v                   rhogw_new_pl(ij,k,l) = Sall_pl(ij,k) / beta_pl(ij)
            1627     3   p   6v                enddo
            1628     2               
            1629     2                         !--- forward
            1630     3                         do k  = ADM_kmin+2, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 223
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1631     4  pp   4v                   do ij = 1, ADM_gall_pl
            1632     4   p   4v                      gamma_pl(ij,k) = Mu_pl(ij,k-1,l) / beta_pl(ij)
            1633     4               
            1634     4   p   4v                      beta_pl(ij)    = Mc_pl(ij,k,l) - Ml_pl(ij,k,l) * gamma_pl(ij,k)
            1635     4               
            1636     4   p   4v                      rhogw_new_pl(ij,k,l) = ( Sall_pl(ij,k) - Ml_pl(ij,k,l) * rhogw_new_pl(ij,k-1,l) ) / beta_pl(ij)
            1637     4   p   4v                   enddo
            1638     3                         enddo
            1639     2               
            1640     2                         !--- backward
            1641     3                         do k  = ADM_kmax-1, ADM_kmin+1, -1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 728
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1642     4  pp   8v                   do ij = 1, ADM_gall_pl
            1643     4   p   8v                      rhogw_new_pl(ij,k,l) = rhogw_new_pl(ij,k,l) - gamma_pl(ij,k+1) * rhogw_new_pl(ij,k+1,l)
            1644     4   p   8v                   enddo
            1645     3                         enddo
            1646     2               
            1647     2                         !--- return value ( gam2 X G^{1/2} )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1648     3  pp                     do k  = ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 276
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1649     4  pp   8v                   do ij = 1, ADM_gall_pl
            1650     4   p   8v                      rhogw_new_pl(ij,k,l) = rhogw_new_pl(ij,k,l) * VMTR_GSGAM2H_pl(ij,k,l)
            1651     4   p   8v                   enddo
            1652     3   p                     enddo
            1653     2                      enddo
            1654     1               
            1655     1                   endif
            1656                     
            1657                         call DEBUG_rapend('++++vi_rhow')
            1658                     
            1659                         return
            1660                       end subroutine vi_rhow
            1661                     
            1662                     end module mod_vi
            1663                     !-------------------------------------------------------------------------------
            1664                     

 Diagnostic messages: program name(mod_vi)
   jwd8220o-i  "nhm/dynamics/mod_vi.f90", line 6: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
  Module subprogram name(vi_small_step)
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 398: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 403: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 414: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 417: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 420: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 425: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 427: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 432: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 435: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 447: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 450: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 453: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 458: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 460: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 465: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 468: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 483: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 484: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 485: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 487: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 490: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 507: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 510: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 530: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 543: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "nhm/dynamics/mod_vi.f90", line 590: Invariant expression within loop is moved outside loop.
   jwd8201o-i  "nhm/dynamics/mod_vi.f90", line 605: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 663: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 664: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 665: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 675: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 676: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 677: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 755: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 795: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(vi_path2)
   jwd8201o-i  "nhm/dynamics/mod_vi.f90", line 1125: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1128: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "nhm/dynamics/mod_vi.f90", line 1136: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1139: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1153: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1169: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1235: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1240: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1254: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1263: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(vi_rhow_update_matrix)
   jwd8201o-i  "nhm/dynamics/mod_vi.f90", line 1381: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1385: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "nhm/dynamics/mod_vi.f90", line 1393: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1397: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1408: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1414: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1419: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1431: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1437: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1442: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(vi_rhow)
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1532: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1537: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1538: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1546: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1550: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1562: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1572: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1579: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1586: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1596: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1601: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1602: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1610: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1614: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1626: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1636: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1643: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_vi.f90", line 1650: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 1664
   Statements : 910
   Stack(byte): 12032
   Prefetch num: 1090

 Total information
   Procedures       : 1
   Total lines      : 1664
   Total statements : 910
   Total stack(byte): 12032
   Total prefetch num: 1090


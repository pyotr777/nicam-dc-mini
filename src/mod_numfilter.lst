
 Fujitsu Fortran Version 1.2.0  Mon Dec 21 17:26:57 2015

 Compilation information
   Current directory : /volume1/home/ra000007/a03106/nicam-dc-mini/src
   Source file       : nhm/dynamics/mod_numfilter.f90

 Option information
   Command line options : -Kident_mpi -f2004 -Kfast,parallel,auto,ocl,preex,array_private,noalias=s,mfunc=2 -Kparallel_iteration=8,instance=8,dynamic_iteration -Qi -Qt -X03 -Ncompdisp -Koptmsg=1 -Cpp -Kprefetch_cache_level=all,prefetch_iteration_L2=50 -Ksimd -Ntl_notrt -U_FIPP_ -U_FAPP_ -I../src/include -o mod_numfilter.o -c -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -W0,-zmpa=Yignore-intent -I/opt/FJSVtclang/GM-1.2.0-19/lib64
   Cpp options          : -U_FIPP_ -U_FAPP_ -I../src/include -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -I/opt/FJSVtclang/GM-1.2.0-19/lib64 -D__FUJITSU -Dunix -Dsparc -D__sparc__ -D__unix -D__sparc -D__frt_version=700 -D__HPC_ACE__ -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -Dlinux -otmp -D__sparcv9 -D__sparc_v9__ -D__arch64__
   Effective options    : -fi -g0 -AE -Free -O3 -Qi,p,t -X03
                          -x0
                          -KFLTLD -Kadr44 -Knoalias=s -Kauto -Knoautoobjstack
                          -Knocalleralloc -Kdalign -Keval -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kilfunc
                          -Klargepage -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_if -Kloop_fusion
                          -Kloop_interchange -Kloop_nopart_parallel
                          -Kloop_nopart_simd -Kloop_noversioning -Kns
                          -Kmfunc=2 -Kocl -Komitfp -Koptmsg=1 -Kpreex
                          -Kprefetch_conditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_iteration_L2=50 -Kprefetch_nostrong
                          -Kprefetch_strong_L2 -Knoshortloop -Ksimd=1
                          -Knosimd_region_constant -Knostriping -Kswp
                          -Knotemparraystack -Kunroll -Knouxsimd -KNOXFILL
                          -Knoopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_noordered_reduction -Knothreadsafe
                          -Kparallel -Kparallel_nofp_precision
                          -Karray_private -Kdynamic_iteration -Kreduction
                          -Kregion_extension -Kinstance=8
                          -Kparallel_iteration=8
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Ncompdisp
                          -Nnocopyarg -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nline -Nlst -Nlst=i -Nlst=p -Nlst=t
                          -Nnomallocfree -Nnoobsfun -Nquickdbg=noargchk
                          -Nquickdbg=nosubchk -Nquickdbg=noundef -NRnotrap
                          -Nnorecursive -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 Module "mod_numfilter"
  (inc)(line-no.)(nest)(optimize)
               1                     !-------------------------------------------------------------------------------
               2                     !
               3                     !+  Numerical smoothing module
               4                     !
               5                     !-------------------------------------------------------------------------------
               6                     module mod_numfilter
               7                       !-----------------------------------------------------------------------------
               8                       !
               9                       !++ Description:
              10                       !       This module contains subroutines for numerical smoothings or filters.
              11                       !
              12                       !
              13                       !++ Current Corresponding Author : H.Tomita
              14                       !
              15                       !++ History:
              16                       !      Version   Date       Comment
              17                       !      -----------------------------------------------------------------------
              18                       !      0.00      04-02-17   Imported from igdc-4.34
              19                       !                05-11-02   add 2 dimensional damping (N. Hirota)
              20                       !                05-11-10   add z dependent horizontal diffusion (N. Hirota)
              21                       !                05-12-09   M.Satoh bug fix
              22                       !                05-12-10   1/gamma -> tau when type==E_FOLD_TIME (N. Hirota)
              23                       !                05-12-17   M.Satoh: read namelist twice for compatibility
              24                       !                06-01-10   S.Iga: add 'Kh_coef_lap1'
              25                       !                06-04-17   H.Tomita : Add nonlinear diffusion
              26                       !                06-10-20   K.Suzuki : not calling tracer diffusion in using
              27                       !                                      Miura(2004) advection scheme
              28                       !                07-01-26   H.Tomita : Add an option [rayleigh_damp_only_w].
              29                       !                                      Some change in
              30                       !                                      sub[numfilter_rayleigh_damping].
              31                       !                07-08-07   T.Mitsui : trivial fix
              32                       !                08-01-24   Y.Niwa : add MIURA2004OLD in numerical_hdiff
              33                       !                                    hdiff_fact_q = 0.D0
              34                       !                08-01-30   Y.Niwa : bug fix
              35                       !                08-04-12   T.Mitsui: omit needless calculation in hdiff
              36                       !                09-04-14   H.Tomita: Add the initilization ( zero clear )
              37                       !                                     for Kh_coef_lap1.
              38                       !                11-11-28   Y.Yamada: Merge Terai-san code
              39                       !                                        into the original code.
              40                       !                12-02-10   T.Yamaura: Optimized numfilter_divdamp and
              41                       !                                        numfilter_hdiffusion for K-Computer (comitted by Iga 12-03-09)
              42                       !                12-03-28   T.Seiki : fix undefined reference,
              43                       !                                     change the method to calculate AREA_ave
              44                       !                                     collective communication => analytic diagnosis
              45                       !                12-05-30   T.Yashiro: Change arguments from character to index/switch
              46                       !                12-07-21   S.Iga: add switch 'logical:smooth_1var' which control
              47                       !                                 'call smooth_1var'
              48                       !      -----------------------------------------------------------------------
              49                       !
              50                       !-----------------------------------------------------------------------------
              51                       !
              52                       !++ Used modules
              53                       !
              54                       use mod_debug
              55                       use mod_adm, only: &
              56                          ADM_LOG_FID, &
              57                          ADM_NSYS
              58                       !-----------------------------------------------------------------------------
              59                       implicit none
              60                       private
              61                       !-----------------------------------------------------------------------------
              62                       !
              63                       !++ Public procedure
              64                       !
              65                       public :: numfilter_setup
              66                     
              67                       public :: numfilter_rayleigh_damping
              68                       public :: numfilter_hdiffusion
              69                       public :: numfilter_vdiffusion
              70                       public :: numfilter_divdamp
              71                       public :: numfilter_divdamp_2d
              72                     
              73                       !-----------------------------------------------------------------------------
              74                       !
              75                       !++ Public parameters & variables
              76                       !
              77                       logical, public, save :: NUMFILTER_DOrayleigh            = .false. ! use rayleigh damping?
              78                       logical, public, save :: NUMFILTER_DOhorizontaldiff      = .false. ! use horizontal diffusion?
              79                       logical, public, save :: NUMFILTER_DOhorizontaldiff_lap1 = .false. ! use horizontal 1st-order damping? (for upper layer)
              80                       logical, public, save :: NUMFILTER_DOverticaldiff        = .false. ! use vertical diffusion?
              81                       logical, public, save :: NUMFILTER_DOdivdamp             = .false. ! use 3D divergence damping?
              82                       logical, public, save :: NUMFILTER_DOdivdamp_v           = .false. ! use 3D divergence damping for vertical velocity?
              83                       logical, public, save :: NUMFILTER_DOdivdamp_2d          = .false. ! use 2D divergence damping?
              84                     
              85                       !-----------------------------------------------------------------------------
              86                       !
              87                       !++ Private procedures
              88                       !
              89                       private :: numfilter_rayleigh_damping_setup
              90                       private :: numfilter_hdiffusion_setup
              91                       private :: numfilter_vdiffusion_setup
              92                       private :: numfilter_divdamp_setup
              93                       private :: numfilter_divdamp_2d_setup
              94                     
              95                       private :: numfilter_smooth_1var
              96                       private :: height_factor
              97                     
              98                       !-----------------------------------------------------------------------------
              99                       !
             100                       !++ Private parameters & variables
             101                       !
             102                       real(8), private, allocatable, save :: rayleigh_coef  (:)             ! Rayleigh damping coefficient at cell center
             103                       real(8), private, allocatable, save :: rayleigh_coef_h(:)             ! Rayleigh damping coefficient at cell wall
             104                       logical, private,              save :: rayleigh_damp_only_w = .false. ! damp only w?
             105                     
             106                       real(8), private, allocatable, save :: Kh_coef   (:,:,:)              ! horizontal diffusion coefficient at cell center
             107                       real(8), private, allocatable, save :: Kh_coef_pl(:,:,:)
             108                       integer, private,              save :: lap_order_hdiff = 2            ! laplacian order
             109                       real(8), private,              save :: hdiff_fact_rho  = 1.D-2
             110                       real(8), private,              save :: hdiff_fact_q    = 0.D0
             111                       real(8), private,              save :: Kh_coef_minlim  = 3.D9
             112                       real(8), private,              save :: Kh_coef_maxlim  = 1.D99
             113                     
             114                       logical, private,              save :: hdiff_nonlinear = .false.
             115                       real(8), private,              save :: ZD_hdiff_nl     = 25000.D0     ! hight for decay of nonlinear diffusion
             116                     
             117                       real(8), private, allocatable, save :: Kh_coef_lap1   (:,:,:)         ! Kh_coef but 1st order laplacian
             118                       real(8), private, allocatable, save :: Kh_coef_lap1_pl(:,:,:)
             119                     
             120                       real(8), private, allocatable, save :: Kv_coef  (:)                   ! vertical diffusion coefficient at cell center
             121                       real(8), private, allocatable, save :: Kv_coef_h(:)                   ! vertical diffusion coefficient at cell wall
             122                     
             123                       real(8), private, allocatable, save :: divdamp_coef   (:,:,:)         ! divergence damping coefficient at cell center
             124                       real(8), private, allocatable, save :: divdamp_coef_pl(:,:,:)
             125                       integer, private,              save :: lap_order_divdamp = 2          ! laplacian order
             126                       real(8), private,              save :: divdamp_coef_v    = 0.D0
             127                     
             128                       real(8), private, allocatable, save :: divdamp_2d_coef   (:,:,:)      ! divergence damping coefficient at cell center
             129                       real(8), private, allocatable, save :: divdamp_2d_coef_pl(:,:,:)
             130                       integer, private,              save :: lap_order_divdamp_2d = 1       ! laplacian order
             131                     
             132                       logical, private,              save :: dep_hgrid = .false.            ! depend on the horizontal grid spacing?
             133                       real(8), private,              save :: AREA_ave                       ! averaged grid area
             134                     
             135                       logical, private,              save :: smooth_1var = .true.           ! should be false for stretched grid [add] S.Iga 20120721
             136                     
             137                       logical, private,              save :: deep_effect = .false.
             138                       real(8), private, allocatable, save :: Kh_deep_factor       (:)
             139                       real(8), private, allocatable, save :: Kh_deep_factor_h     (:)
             140                       real(8), private, allocatable, save :: Kh_lap1_deep_factor  (:)
             141                       real(8), private, allocatable, save :: Kh_lap1_deep_factor_h(:)
             142                       real(8), private, allocatable, save :: divdamp_deep_factor  (:)
             143                     
             144                       logical, private,              save :: debug = .false.
             145                     
             146                       !-----------------------------------------------------------------------------
             147                     contains
             148                       !-----------------------------------------------------------------------------
             149                       subroutine numfilter_setup
             150                         use mod_adm, only: &
             151                            ADM_CTL_FID,   &
             152                            ADM_proc_stop, &
             153                            ADM_GLEVEL,    &
             154                            ADM_kall
             155                         use mod_cnst, only: &
             156                            PI      => CNST_PI, &
             157                            ERADIUS => CNST_ERADIUS
             158                         use mod_grd, only: &
             159                            GRD_gz,   &
             160                            GRD_gzh
             161                         use mod_gmtr, only: &
             162                            GMTR_area,    &
             163                            GMTR_area_pl
             164                         implicit none
             165                     
             166                         ! rayleigh damping
             167                         real(8)                 :: alpha_r         = 0.D0                 ! coefficient for rayleigh damping
             168                         real(8)                 :: ZD              = 25000.D0             ! lower limit of rayleigh damping [m]
             169                         ! horizontal diffusion
             170                         character(len=ADM_NSYS) :: hdiff_type      = 'NONDIM_COEF'        ! diffusion type
             171                         real(8)                 :: gamma_h         = 1.D0 / 16.D0 / 10.D0 ! coefficient    for horizontal diffusion
             172                         real(8)                 :: tau_h           = 160000.D0            ! e-folding time for horizontal diffusion [sec]
             173                         ! horizontal diffusion (1st order laplacian)
             174                         character(len=ADM_NSYS) :: hdiff_type_lap1 = 'DIRECT'             ! diffusion type
             175                         real(8)                 :: gamma_h_lap1    = 0.D0                 ! height-dependent gamma_h but 1st-order laplacian
             176                         real(8)                 :: tau_h_lap1      = 160000.D0            ! height-dependent tau_h   but 1st-order laplacian [sec]
             177                         real(8)                 :: ZD_hdiff_lap1   = 25000.D0             ! lower limit of horizontal diffusion [m]
             178                         ! vertical diffusion
             179                         real(8)                 :: gamma_v         = 0.D0                 ! coefficient of vertical diffusion
             180                         ! 3D divergence damping
             181                         character(len=ADM_NSYS) :: divdamp_type    = 'NONDIM_COEF'        ! damping type
             182                         real(8)                 :: alpha_d         = 0.D0                 ! coefficient    for divergence damping
             183                         real(8)                 :: tau_d           = 132800.D0            ! e-folding time for divergence damping
             184                         real(8)                 :: alpha_dv        = 0.D0                 ! vertical coefficient
             185                         ! 2D divergence damping
             186                         character(len=ADM_NSYS) :: divdamp_2d_type = 'NONDIM_COEF'        ! damping type
             187                         real(8)                 :: alpha_d_2d      = 0.D0                 ! coefficient    for divergence damping
             188                         real(8)                 :: tau_d_2d        = 1328000.D0           ! e-folding time for divergence damping [sec]
             189                         real(8)                 :: ZD_d_2d         = 25000.D0             ! lower limit of divergence damping [m]
             190                     
             191                         namelist / NUMFILTERPARAM / &
             192                              alpha_r,              &
             193                              ZD,                   &
             194                              rayleigh_damp_only_w, &
             195                              hdiff_type,           &
             196                              lap_order_hdiff,      &
             197                              gamma_h,              &
             198                              tau_h,                &
             199                              ZD_hdiff_nl,          &
             200                              hdiff_fact_rho,       &
             201                              hdiff_fact_q,         &
             202                              Kh_coef_minlim,       &
             203                              Kh_coef_maxlim,       &
             204                              hdiff_type_lap1,      &
             205                              gamma_h_lap1,         &
             206                              tau_h_lap1,           &
             207                              ZD_hdiff_lap1,        &
             208                              gamma_v,              &
             209                              divdamp_type,         &
             210                              lap_order_divdamp,    &
             211                              alpha_d,              &
             212                              tau_d,                &
             213                              alpha_dv,             &
             214                              divdamp_2d_type,      &
             215                              lap_order_divdamp_2d, &
             216                              alpha_d_2d,           &
             217                              tau_d_2d,             &
             218                              ZD_d_2d,              &
             219                              dep_hgrid,            &
             220                              smooth_1var,          &
             221                              deep_effect,          &
             222                              debug
             223                     
             224                         real(8) :: global_area, global_grid
             225                     
             226                         integer :: ierr
             227                         integer :: k
             228                         !---------------------------------------------------------------------------
             229                     
             230                         !--- read parameters
             231                         write(ADM_LOG_FID,*)
             232                         write(ADM_LOG_FID,*) '+++ Module[numfilter]/Category[nhm dynamics]'
             233                         rewind(ADM_CTL_FID)
             234                         read(ADM_CTL_FID,nml=NUMFILTERPARAM,iostat=ierr)
             235     1                   if ( ierr < 0 ) then
             236     1                      write(ADM_LOG_FID,*) '*** NUMFILTERPARAM is not specified. use default.'
             237     1                   elseif( ierr > 0 ) then
             238     1                      write(*,          *) 'xxx Not appropriate names in namelist NUMFILTERPARAM. STOP.'
             239     1                      write(ADM_LOG_FID,*) 'xxx Not appropriate names in namelist NUMFILTERPARAM. STOP.'
             240     1                      call ADM_proc_stop
             241     1                   endif
             242                         write(ADM_LOG_FID,NUMFILTERPARAM)
             243                     
             244                         global_area = 4.D0 * PI * ERADIUS * ERADIUS
             245                         global_grid = 10.D0 * 4.D0**ADM_GLEVEL
             246                         AREA_ave = global_area / global_grid
             247                     
             248                     
             249                     
             250                         call numfilter_rayleigh_damping_setup( alpha_r, & ! [IN]
             251                                                                ZD       ) ! [IN]
             252                     
             253                         call numfilter_hdiffusion_setup( hdiff_type,      & ! [IN]
             254                                                          dep_hgrid,       & ! [IN]
             255                                                          smooth_1var,     & ! [IN]
             256                                                          lap_order_hdiff, & ! [IN]
             257                                                          gamma_h,         & ! [IN]
             258                                                          tau_h,           & ! [IN]
             259                                                          hdiff_type_lap1, & ! [IN]
             260                                                          gamma_h_lap1,    & ! [IN]
             261                                                          tau_h_lap1,      & ! [IN]
             262                                                          ZD_hdiff_lap1    ) ! [IN]
             263                     
             264                         call numfilter_vdiffusion_setup( gamma_v ) ! [IN]
             265                     
             266                         call numfilter_divdamp_setup( divdamp_type,      & ! [IN]
             267                                                       dep_hgrid,         & ! [IN]
             268                                                       smooth_1var,       & ! [IN]
             269                                                       lap_order_divdamp, & ! [IN]
             270                                                       alpha_d,           & ! [IN]
             271                                                       tau_d,             & ! [IN]
             272                                                       alpha_dv           ) ! [IN]
             273                     
             274                         call numfilter_divdamp_2d_setup( divdamp_2d_type,      & ! [IN]
             275                                                          dep_hgrid,            & ! [IN]
             276                                                          lap_order_divdamp_2d, & ! [IN]
             277                                                          alpha_d_2d,           & ! [IN]
             278                                                          tau_d_2d,             & ! [IN]
             279                                                          ZD_d_2d               ) ! [IN]
             280                     
             281                         allocate( Kh_deep_factor       (ADM_kall) )
             282                         allocate( Kh_deep_factor_h     (ADM_kall) )
             283                         allocate( Kh_lap1_deep_factor  (ADM_kall) )
             284                         allocate( Kh_lap1_deep_factor_h(ADM_kall) )
             285                         allocate( divdamp_deep_factor  (ADM_kall) )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2000
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             286        pp    v          Kh_deep_factor       (:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2000
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             287        pp    v          Kh_deep_factor_h     (:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2000
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             288        pp    v          Kh_lap1_deep_factor  (:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2000
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             289        pp    v          Kh_lap1_deep_factor_h(:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2000
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             290        pp    v          divdamp_deep_factor  (:) = 0.D0
             291                     
             292     1                   if ( deep_effect ) then
             293     1                      write(ADM_LOG_FID,*) 'xxx this feature is tentatively suspended. stop.'
             294     1                      call ADM_proc_stop
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 15
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             295     2  pp   4v             do k = 1, ADM_kall
             296     2   p   4v                Kh_deep_factor       (k) = ( (GRD_gz (k)+ERADIUS) / ERADIUS )**(2*lap_order_hdiff)
             297     2   p   4v                Kh_deep_factor_h     (k) = ( (GRD_gzh(k)+ERADIUS) / ERADIUS )**(2*lap_order_hdiff)
             298     2   p   4v                Kh_lap1_deep_factor  (k) = ( (GRD_gz (k)+ERADIUS) / ERADIUS )**2
             299     2   p   4v                Kh_lap1_deep_factor_h(k) = ( (GRD_gzh(k)+ERADIUS) / ERADIUS )**2
             300     2   p   4v                divdamp_deep_factor  (k) = ( (GRD_gz (k)+ERADIUS) / ERADIUS )**(2*lap_order_divdamp)
             301     2   p   4v             enddo
             302     1                   endif
             303                     
             304                         return
             305                       end subroutine numfilter_setup
             306                     
             307                       !-----------------------------------------------------------------------------
             308                       !> setup coefficient for rayleigh damping
             309                       subroutine numfilter_rayleigh_damping_setup( &
             310                            alpha, &
             311                            zlimit )
             312                         use mod_adm, only: &
             313                            ADM_kall,    &
             314                            ADM_kmin,    &
             315                            ADM_kmax
             316                         use mod_cnst, only: &
             317                            EPS => CNST_EPS_ZERO
             318                         use mod_grd, only: &
             319                            GRD_htop, &
             320                            GRD_gz,   &
             321                            GRD_gzh
             322                         implicit none
             323                     
             324                         real(8), intent(in) :: alpha  ! coefficient for rayleigh damping
             325                         real(8), intent(in) :: zlimit ! lower limit of rayleigh damping [m]
             326                     
             327                         real(8) :: fact(ADM_kall)
             328                     
             329                         integer :: k
             330                         !---------------------------------------------------------------------------
             331                     
             332                         if ( alpha > 0.D0 ) NUMFILTER_DOrayleigh = .true.
             333                     
             334                         allocate( rayleigh_coef  (ADM_kall) )
             335                         allocate( rayleigh_coef_h(ADM_kall) )
             336                     
             337                         call height_factor( ADM_kall, GRD_gz(:), GRD_htop, zlimit, fact(:) )
             338                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             339        pp   8v          rayleigh_coef(:) = alpha * fact(:)
             340                     
             341                         call height_factor( ADM_kall, GRD_gzh(:), GRD_htop, zlimit, fact(:) )
             342                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             343        pp   8v          rayleigh_coef_h(:) = alpha * fact(:)
             344                     
             345                         write(ADM_LOG_FID,*)
             346                         write(ADM_LOG_FID,*) '-----   Rayleigh damping   -----'
             347                     
             348     1                   if ( NUMFILTER_DOrayleigh ) then
             349     2                      if ( debug ) then
             350     2                         write(ADM_LOG_FID,*) '    z[m]      ray.coef   e-time(2DX)'
             351     2                         k = ADM_kmax + 1
             352     2                         write(ADM_LOG_FID,'(1x,F8.2,3E14.6)') GRD_gzh(k), rayleigh_coef_h(k), 1.D0/( rayleigh_coef_h(k)+EPS )
             353     3   s    s                do k = ADM_kmax, ADM_kmin, -1
             354     3   m    m                   write(ADM_LOG_FID,'(1x,F8.2,3E14.6)') GRD_gz (k), rayleigh_coef  (k), 1.D0/( rayleigh_coef  (k)+EPS )
             355     3   m    m                   write(ADM_LOG_FID,'(1x,F8.2,3E14.6)') GRD_gzh(k), rayleigh_coef_h(k), 1.D0/( rayleigh_coef_h(k)+EPS )
             356     3   p    v                enddo
             357     2                      else
             358     2                         write(ADM_LOG_FID,*) '=> used.'
             359     2                      endif
             360     1                   else
             361     1                      write(ADM_LOG_FID,*) '=> not used.'
             362     1                   endif
             363                     
             364                         return
             365                       end subroutine numfilter_rayleigh_damping_setup
             366                     
             367                       !-----------------------------------------------------------------------------
             368                       !> setup coefficient for horizontal numerical diffusion
             369                       subroutine numfilter_hdiffusion_setup( &
             370                            hdiff_type,      &
             371                            dep_hgrid,       &
             372                            smooth_1var,     &
             373                            lap_order,       &
             374                            gamma,           &
             375                            tau,             &
             376                            hdiff_type_lap1, &
             377                            gamma_lap1,      &
             378                            tau_lap1,        &
             379                            zlimit_lap1      )
             380                         use mod_adm, only: &
             381                            ADM_prc_me,  &
             382                            ADM_prc_pl,  &
             383                            ADM_lall,    &
             384                            ADM_lall_pl, &
             385                            ADM_gall,    &
             386                            ADM_gall_pl, &
             387                            ADM_kall,    &
             388                            ADM_kmin,    &
             389                            ADM_kmax
             390                         use mod_cnst, only: &
             391                            PI  => CNST_PI,       &
             392                            EPS => CNST_EPS_ZERO
             393                         use mod_grd, only: &
             394                            GRD_htop, &
             395                            GRD_gz
             396                         use mod_gmtr, only: &
             397                            GMTR_area,    &
             398                            GMTR_area_pl
             399                         use mod_time, only: &
             400                            TIME_DTL
             401                         use mod_gtl, only: &
             402                            GTL_max_k, &
             403                            GTL_min_k
             404                         implicit none
             405                     
             406                         character(len=*), intent(in) :: hdiff_type      ! type of horizontal diffusion
             407                         logical,          intent(in) :: dep_hgrid       ! depend on each horizontal grid?
             408                         logical,          intent(in) :: smooth_1var     ! apply smoothing to coef?
             409                         integer,          intent(in) :: lap_order       ! laplacian order
             410                         real(8),          intent(in) :: gamma           ! coefficient    for horizontal diffusion
             411                         real(8),          intent(in) :: tau             ! e-folding time for horizontal diffusion
             412                         character(len=*), intent(in) :: hdiff_type_lap1 ! type of horizontal diffusion (lap1)
             413                         real(8),          intent(in) :: gamma_lap1      ! coefficient    for horizontal diffusion (lap1)
             414                         real(8),          intent(in) :: tau_lap1        ! e-folding time for horizontal diffusion (lap1)
             415                         real(8),          intent(in) :: zlimit_lap1     ! lower limit of horizontal diffusion (lap1) [m]
             416                     
             417                         real(8) :: fact(ADM_kall)
             418                     
             419                         real(8) :: e_fold_time   (ADM_gall,   ADM_kall,ADM_lall   )
             420                         real(8) :: e_fold_time_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             421                         real(8) :: coef_max, coef_min
             422                         real(8) :: eft_max,  eft_min
             423                     
             424                         integer :: k, l
             425                         !---------------------------------------------------------------------------
             426                     
             427                         allocate( Kh_coef   (ADM_gall,   ADM_kall,ADM_lall   ) )
             428                         allocate( Kh_coef_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl) )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             429        pp    v          Kh_coef   (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             430        pp    v          Kh_coef_pl(:,:,:) = 0.D0
             431                     
             432     1                   if ( hdiff_type == "DIRECT" ) then
             433     1                      if( gamma > 0.D0 ) NUMFILTER_DOhorizontaldiff = .true.
             434     1               
             435     1                      ! gamma is an absolute value.
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             436     1  pp    v             Kh_coef   (:,:,:) = gamma
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             437     1  pp    v             Kh_coef_pl(:,:,:) = gamma
             438     1               
             439     1                   elseif( hdiff_type == "NONDIM_COEF" ) then
             440     1                      if( gamma > 0.D0 ) NUMFILTER_DOhorizontaldiff = .true.
             441     1               
             442     1                      ! gamma is a non-dimensional number.
             443     2                      if ( dep_hgrid ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             444     3  pp                     do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             445     4  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             446     4   p   8v                   Kh_coef(:,k,l) = gamma / TIME_DTL * GMTR_area(:,l)**lap_order
             447     4   p                     enddo
             448     3   p                     enddo
             449     2               
             450     3                         if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             451     4  pp                        do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             452     5  pp                        do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             453     5   p   8v                      Kh_coef_pl(:,k,l) = gamma / TIME_DTL * GMTR_area_pl(:,l)**lap_order
             454     5   p                        enddo
             455     4   p                        enddo
             456     3                         endif
             457     2                      else
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             458     2  pp    v                Kh_coef   (:,:,:) = gamma / TIME_DTL * AREA_ave**lap_order
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             459     2  pp    v                Kh_coef_pl(:,:,:) = gamma / TIME_DTL * AREA_ave**lap_order
             460     2                      endif
             461     1               
             462     1                   elseif( hdiff_type == "E_FOLD_TIME" ) then
             463     1                      if( tau > 0.D0 ) NUMFILTER_DOhorizontaldiff = .true.
             464     1               
             465     1                      ! tau is e-folding time for 2*dx waves.
             466     2                      if ( dep_hgrid ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             467     3  pp                     do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             468     4  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             469     4   p   6v                   Kh_coef(:,k,l) = ( sqrt(GMTR_area(:,l))/PI )**(2*lap_order) / ( tau+EPS )
             470     4   p                     enddo
             471     3   p                     enddo
             472     2               
             473     3                         if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             474     4  pp                        do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             475     5  pp                        do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             476     5   p   6v                      Kh_coef_pl(:,k,l) = ( sqrt(GMTR_area_pl(:,l))/PI )**(2*lap_order) / ( tau+EPS )
             477     5   p                        enddo
             478     4   p                        enddo
             479     3                         endif
             480     2                      else
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             481     2  pp    v                Kh_coef   (:,:,:) = ( sqrt(AREA_ave)/PI )**(2*lap_order) / ( tau+EPS )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             482     2  pp    v                Kh_coef_pl(:,:,:) = ( sqrt(AREA_ave)/PI )**(2*lap_order) / ( tau+EPS )
             483     2                      endif
             484     1               
             485     1                   elseif( hdiff_type  == "NONLINEAR1" ) then
             486     1                      NUMFILTER_DOhorizontaldiff = .true.
             487     1                      hdiff_nonlinear            = .true.
             488     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             489     1  pp    v             Kh_coef   (:,:,:) = -999.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             490     1  pp    v             Kh_coef_pl(:,:,:) = -999.D0
             491     1                   endif
             492                     
             493     1                   if (       hdiff_type /= "DIRECT"     &
             494     1                        .AND. hdiff_type /= "NONLINEAR1" ) then
             495     1               
             496     2                      if ( smooth_1var ) then ! iga 20120721 (add if)
             497     2                         call numfilter_smooth_1var( Kh_coef(:,:,:), Kh_coef_pl(:,:,:) )
             498     2                      endif
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             499     1  pp   8v             Kh_coef(:,:,:) = max( Kh_coef(:,:,:), Kh_coef_minlim )
             500     1               
             501     1                   endif
             502                     
             503                         write(ADM_LOG_FID,*)
             504                         write(ADM_LOG_FID,*) '-----   Horizontal numerical diffusion   -----'
             505     1                   if ( NUMFILTER_DOhorizontaldiff ) then
             506     2                      if ( .NOT. hdiff_nonlinear ) then
             507     3                         if ( debug ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             508     4  pp                        do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             509     5  pp                        do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             510     5   p   4v                      e_fold_time(:,k,l) = ( sqrt(GMTR_area(:,l))/PI )**(2*lap_order) &
             511     5                                                  / ( Kh_coef(:,k,l)+EPS )
             512     5   p                        enddo
             513     4   p                        enddo
             514     3               
             515     4                            if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             516     5  pp                           do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             517     6  pp                           do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             518     6   p   4v                         e_fold_time_pl(:,k,l) = ( sqrt(GMTR_area_pl(:,l))/PI )**(2*lap_order) &
             519     6                                                        / ( Kh_coef_pl(:,k,l)+EPS )
             520     6   p                           enddo
             521     5   p                           enddo
             522     4                            endif
             523     3               
             524     3                            write(ADM_LOG_FID,*) '    z[m]      max coef      min coef  max eft(2DX)  min eft(2DX)'
             525     4                            do k = ADM_kmax, ADM_kmin, -1
             526     4                               eft_max  = GTL_max_k( e_fold_time, e_fold_time_pl, k )
             527     4                               eft_min  = GTL_min_k( e_fold_time, e_fold_time_pl, k )
             528     4                               coef_max = GTL_max_k( Kh_coef, Kh_coef_pl, k )
             529     4                               coef_min = GTL_min_k( Kh_coef, Kh_coef_pl, k )
             530     4                               write(ADM_LOG_FID,'(1x,F8.2,4E14.6)') GRD_gz(k), coef_min, coef_max, eft_max, eft_min
             531     4                            enddo
             532     3                         else
             533     3                            write(ADM_LOG_FID,*) '=> Nonlinear filter is used.'
             534     3                         endif
             535     2                      else
             536     2                         write(ADM_LOG_FID,*) '=> used.'
             537     2                      endif
             538     1                   else
             539     1                      write(ADM_LOG_FID,*) '=> not used.'
             540     1                   endif
             541                     
             542                     
             543                     
             544                         allocate( Kh_coef_lap1   (ADM_gall,   ADM_kall,ADM_lall   ) )
             545                         allocate( Kh_coef_lap1_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl) )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             546        pp    v          Kh_coef_lap1    = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             547        pp    v          Kh_coef_lap1_pl = 0.D0
             548                     
             549     1                   if ( hdiff_type_lap1 == "DIRECT" ) then
             550     1                      if( gamma_lap1 > 0.D0 ) NUMFILTER_DOhorizontaldiff_lap1 = .true.
             551     1               
             552     1                      ! gamma is an absolute value.
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             553     1  pp    v             Kh_coef_lap1   (:,:,:) = gamma_lap1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             554     1  pp    v             Kh_coef_lap1_pl(:,:,:) = gamma_lap1
             555     1               
             556     1                   elseif( hdiff_type_lap1 == "NONDIM_COEF" ) then
             557     1                      if( gamma_lap1 > 0.D0 ) NUMFILTER_DOhorizontaldiff_lap1 = .true.
             558     1               
             559     1                      ! gamma is a non-dimensional number.
             560     2                      if ( dep_hgrid ) then
             561     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             562     3  pp                     do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 6
                                   <<< Loop-information  End >>>
             563     4  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             564     4   p   8v                   Kh_coef_lap1(:,k,l) = gamma_lap1 / TIME_DTL * GMTR_area(:,l)
             565     4   p                     enddo
             566     3   p                     enddo
             567     2               
             568     3                         if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             569     4  pp                        do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 6
                                   <<< Loop-information  End >>>
             570     5  pp                        do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             571     5   p   8v                      Kh_coef_lap1_pl(:,k,l) = gamma_lap1 / TIME_DTL * GMTR_area_pl(:,l)
             572     5   p                        enddo
             573     4   p                        enddo
             574     3                         endif
             575     2               
             576     2                      else
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             577     2  pp    v                Kh_coef_lap1   (:,:,:) = gamma_lap1 / TIME_DTL * AREA_ave
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             578     2  pp    v                Kh_coef_lap1_pl(:,:,:) = gamma_lap1 / TIME_DTL * AREA_ave
             579     2                      endif
             580     1               
             581     1                   elseif( hdiff_type_lap1 == "E_FOLD_TIME" ) then
             582     1                      if( tau_lap1 > 0.D0 ) NUMFILTER_DOhorizontaldiff_lap1 = .true.
             583     1               
             584     1                      ! tau is e-folding time for 2*dx waves.
             585     2                      if ( dep_hgrid ) then
             586     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             587     3  pp                     do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             588     4  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             589     4   p   6v                   Kh_coef_lap1(:,k,l) = ( sqrt(GMTR_area(:,l))/PI )**2 / ( tau_lap1+EPS )
             590     4   p                     enddo
             591     3   p                     enddo
             592     2               
             593     3                         if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             594     4  pp                        do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             595     5  pp                        do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             596     5   p   6v                      Kh_coef_lap1_pl(:,k,l) = ( sqrt(GMTR_area_pl(:,l))/PI )**2 / ( tau_lap1+EPS )
             597     5   p                        enddo
             598     4   p                        enddo
             599     3                         endif
             600     2               
             601     2                      else
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             602     2  pp    v                Kh_coef_lap1   (:,:,:) = ( sqrt(AREA_ave)/PI )**2 / ( tau_lap1+EPS )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             603     2  pp    v                Kh_coef_lap1_pl(:,:,:) = ( sqrt(AREA_ave)/PI )**2 / ( tau_lap1+EPS )
             604     2                      endif
             605     1               
             606     1                   endif
             607                     
             608                         call height_factor( ADM_kall, GRD_gz(:), GRD_htop, zlimit_lap1, fact(:) )
             609                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             610     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<< Loop-information  End >>>
             611     2  pp               do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             612     2   p   8v             Kh_coef_lap1(:,k,l) = Kh_coef_lap1(:,k,l) * fact(k)
             613     2   p               enddo
             614     1   p               enddo
             615                     
             616     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             617     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<< Loop-information  End >>>
             618     3  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             619     3   p   8v                Kh_coef_lap1_pl(:,k,l) = Kh_coef_lap1_pl(:,k,l) * fact(k)
             620     3   p                  enddo
             621     2   p                  enddo
             622     1                   endif
             623                     
             624                         write(ADM_LOG_FID,*)
             625                         write(ADM_LOG_FID,*) '-----   Horizontal numerical diffusion (1st order laplacian)   -----'
             626     1                   if ( NUMFILTER_DOhorizontaldiff_lap1 ) then
             627     2                      if ( debug ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             628     3  pp                     do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             629     4  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             630     4   p   4v                   e_fold_time(:,k,l) = ( sqrt(GMTR_area(:,l))/PI )**2 / ( Kh_coef_lap1(:,k,l)+EPS )
             631     4   p                     enddo
             632     3   p                     enddo
             633     2               
             634     3                         if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             635     4  pp                        do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             636     5  pp                        do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             637     5   p   4v                      e_fold_time_pl(:,k,l) = ( sqrt(GMTR_area_pl(:,l))/PI )**2 / ( Kh_coef_lap1_pl(:,k,l)+EPS )
             638     5   p                        enddo
             639     4   p                        enddo
             640     3                         endif
             641     2               
             642     2                         write(ADM_LOG_FID,*) '    z[m]      max coef      min coef  max eft(2DX)  min eft(2DX)'
             643     3                         do k = ADM_kmax, ADM_kmin, -1
             644     3                            eft_max  = GTL_max_k( e_fold_time,  e_fold_time_pl,  k )
             645     3                            eft_min  = GTL_min_k( e_fold_time,  e_fold_time_pl,  k )
             646     3                            coef_max = GTL_max_k( Kh_coef_lap1, Kh_coef_lap1_pl, k )
             647     3                            coef_min = GTL_min_k( Kh_coef_lap1, Kh_coef_lap1_pl, k )
             648     3                            write(ADM_LOG_FID,'(1x,F8.2,4E14.6)') GRD_gz(k), coef_min, coef_max, eft_max, eft_min
             649     3                         enddo
             650     2                      else
             651     2                         write(ADM_LOG_FID,*) '=> used.'
             652     2                      endif
             653     1                   else
             654     1                      write(ADM_LOG_FID,*) '=> not used.'
             655     1                   endif
             656                     
             657                         return
             658                       end subroutine numfilter_hdiffusion_setup
             659                     
             660                       !-----------------------------------------------------------------------------
             661                       !> setup coefficient for vertical numerical diffusion
             662                       subroutine numfilter_vdiffusion_setup( &
             663                            gamma )
             664                         use mod_adm, only: &
             665                            ADM_kall, &
             666                            ADM_kmin, &
             667                            ADM_kmax
             668                         use mod_cnst, only: &
             669                            PI  => CNST_PI,       &
             670                            EPS => CNST_EPS_ZERO
             671                         use mod_grd, only: &
             672                            GRD_gz,   &
             673                            GRD_gzh,  &
             674                            GRD_dgz,  &
             675                            GRD_dgzh
             676                         use mod_time, only: &
             677                            TIME_DTL
             678                         implicit none
             679                     
             680                         real(8), intent(in) :: gamma ! coefficient for vertical diffusion
             681                     
             682                         integer :: k
             683                         !---------------------------------------------------------------------------
             684                     
             685                         if ( gamma > 0.D0 ) NUMFILTER_DOverticaldiff = .true.
             686                     
             687                         allocate( Kv_coef  (ADM_kall) )
             688                         allocate( Kv_coef_h(ADM_kall) )
             689                     
             690                         ! 6th order vertical numerical diffusion
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1067
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             691        pp   8v          Kv_coef  (:) = gamma * GRD_dgz (:)**6 / TIME_DTL
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1067
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             692        pp   8v          Kv_coef_h(:) = gamma * GRD_dgzh(:)**6 / TIME_DTL
             693                     
             694                         write(ADM_LOG_FID,*)
             695                         write(ADM_LOG_FID,*) '-----   Vertical numerical diffusion   -----'
             696     1                   if ( NUMFILTER_DOverticaldiff ) then
             697     2                      if ( debug ) then
             698     2                         write(ADM_LOG_FID,*) '    z[m]          coef   e-time(2DX)'
             699     2                         k = ADM_kmax + 1
             700     2                         write(ADM_LOG_FID,'(1x,F8.2,3E14.6)') GRD_gzh(k), Kv_coef_h(k), (GRD_dgzh(k)/PI)**6 / ( Kv_coef_h(k)+EPS )
             701     3   s    s                do k = ADM_kmax, ADM_kmin, -1
             702     3   m    m                   write(ADM_LOG_FID,'(1x,F8.2,3E14.6)') GRD_gzh(k), Kv_coef_h(k), (GRD_dgzh(k)/PI)**6 / ( Kv_coef_h(k)+EPS )
             703     3   m    m                   write(ADM_LOG_FID,'(1x,F8.2,3E14.6)') GRD_gz (k), Kv_coef  (k), (GRD_dgz (k)/PI)**6 / ( Kv_coef  (k)+EPS )
             704     3   p    v                enddo
             705     2                      else
             706     2                         write(ADM_LOG_FID,*) '=> used.'
             707     2                      endif
             708     1                   else
             709     1                      write(ADM_LOG_FID,*) '=> not used.'
             710     1                   endif
             711                     
             712                         return
             713                       end subroutine numfilter_vdiffusion_setup
             714                     
             715                       !-----------------------------------------------------------------------------
             716                       !> setup coefficient for 3D divergence damping
             717                       subroutine numfilter_divdamp_setup( &
             718                            divdamp_type, &
             719                            dep_hgrid,    &
             720                            smooth_1var,  &
             721                            lap_order,    &
             722                            alpha,        &
             723                            tau,          &
             724                            alpha_v       )
             725                         use mod_adm, only: &
             726                            ADM_prc_me,  &
             727                            ADM_prc_pl,  &
             728                            ADM_lall,    &
             729                            ADM_lall_pl, &
             730                            ADM_gall,    &
             731                            ADM_gall_pl, &
             732                            ADM_kall,    &
             733                            ADM_kmin,    &
             734                            ADM_kmax
             735                         use mod_cnst, only: &
             736                            PI    => CNST_PI,       &
             737                            EPS   => CNST_EPS_ZERO, &
             738                            RAIR  => CNST_RAIR,     &
             739                            GAMMA => CNST_GAMMA
             740                         use mod_grd, only: &
             741                            GRD_htop, &
             742                            GRD_gz
             743                         use mod_gmtr, only: &
             744                            GMTR_area,    &
             745                            GMTR_area_pl
             746                         use mod_time, only: &
             747                            TIME_DTS
             748                         use mod_gtl, only: &
             749                            GTL_max_k, &
             750                            GTL_min_k
             751                         implicit none
             752                     
             753                         character(len=*), intent(in) :: divdamp_type ! type of divergence damping
             754                         logical,          intent(in) :: dep_hgrid    ! depend on each horizontal grid?
             755                         logical,          intent(in) :: smooth_1var  ! apply smoothing to coef?
             756                         integer,          intent(in) :: lap_order    ! laplacian order
             757                         real(8),          intent(in) :: alpha        ! coefficient    for divergence damping
             758                         real(8),          intent(in) :: tau          ! e-folding time for divergence damping
             759                         real(8),          intent(in) :: alpha_v      ! coefficient    for divergence damping
             760                     
             761                         real(8) :: e_fold_time   (ADM_gall,   ADM_kall,ADM_lall   )
             762                         real(8) :: e_fold_time_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             763                     
             764                         real(8) :: coef
             765                         real(8) :: coef_max, coef_min
             766                         real(8) :: eft_max,  eft_min
             767                     
             768                         integer :: k, l
             769                         !---------------------------------------------------------------------------
             770                     
             771                         allocate( divdamp_coef   (ADM_gall,   ADM_kall,ADM_lall   ) )
             772                         allocate( divdamp_coef_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl) )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             773        pp    v          divdamp_coef    = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             774        pp    v          divdamp_coef_pl = 0.D0
             775                     
             776     1                   if ( divdamp_type == "DIRECT") then
             777     1                      if( alpha > 0.D0 ) NUMFILTER_DOdivdamp = .true.
             778     1               
             779     1                      ! alpha_d is an absolute value.
             780     1                      coef = alpha
             781     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             782     1  pp    v             divdamp_coef   (:,:,:) = coef
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             783     1  pp    v             divdamp_coef_pl(:,:,:) = coef
             784     1               
             785     1                   elseif( divdamp_type == "NONDIM_COEF" ) then
             786     1                      if( alpha > 0.D0 ) NUMFILTER_DOdivdamp = .true.
             787     1               
             788     1                      ! alpha_d is a non-dimensional number.
             789     1                      ! alpha_d * (c_s)^p * dt^{2p-1}
             790     1                      coef = alpha * ( GAMMA * RAIR * 273.D0 )**lap_order * TIME_DTS**(2*lap_order-1)
             791     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             792     1  pp    v             divdamp_coef   (:,:,:) = coef
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             793     1  pp    v             divdamp_coef_pl(:,:,:) = coef
             794     1               
             795     1                   elseif( divdamp_type == "E_FOLD_TIME" ) then
             796     1                      if( tau > 0.D0 ) NUMFILTER_DOdivdamp = .true.
             797     1               
             798     1                      ! tau_d is e-folding time for 2*dx.
             799     2                      if ( dep_hgrid ) then
             800     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             801     3  pp                     do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             802     4  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             803     4   p   6v                   divdamp_coef(:,k,l) = ( sqrt(GMTR_area(:,l))/PI )**(2*lap_order) / ( tau+EPS )
             804     4   p                     enddo
             805     3   p                     enddo
             806     3                         if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             807     4  pp                        do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             808     5  pp                        do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             809     5   p   6v                      divdamp_coef_pl(:,k,l) = ( sqrt(GMTR_area_pl(:,l))/PI )**(2*lap_order) / ( tau+EPS )
             810     5   p                        enddo
             811     4   p                        enddo
             812     3                         endif
             813     2               
             814     2                      else
             815     2               
             816     2                         coef = ( sqrt(AREA_ave)/PI )**(2*lap_order) / ( tau+EPS )
             817     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             818     2  pp    v                divdamp_coef   (:,:,:) = coef
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             819     2  pp    v                divdamp_coef_pl(:,:,:) = coef
             820     2               
             821     2                      endif
             822     1                   endif
             823                     
             824     1                   if ( divdamp_type /= "DIRECT" ) then
             825     2                      if ( smooth_1var ) then ! iga 20120721 (add if)
             826     2                         call numfilter_smooth_1var( divdamp_coef(:,:,:), divdamp_coef_pl(:,:,:) )
             827     2                      endif
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             828     1  pp   8v             divdamp_coef(:,:,:) = max( divdamp_coef(:,:,:), Kh_coef_minlim )
             829     1                   endif
             830                     
             831                         write(ADM_LOG_FID,*)
             832                         write(ADM_LOG_FID,*) '-----   3D divergence damping   -----'
             833     1                   if ( NUMFILTER_DOdivdamp ) then
             834     2                      if ( debug ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             835     3  pp                     do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             836     4  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             837     4   p   4v                   e_fold_time(:,k,l) = ( sqrt(GMTR_area(:,l))/PI )**(2*lap_order) &
             838     4                                               / ( divdamp_coef(:,k,l)+EPS )
             839     4   p                     enddo
             840     3   p                     enddo
             841     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             842     2  pp    v                e_fold_time_pl(:,:,:) = 0.D0
             843     2               
             844     3                         if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             845     4  pp                        do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             846     5  pp                        do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             847     5   p   4v                      e_fold_time_pl(:,k,l) = ( sqrt(GMTR_area_pl(:,l))/PI )**(2*lap_order) &
             848     5                                                     / ( divdamp_coef_pl(:,k,l)+EPS )
             849     5   p                        enddo
             850     4   p                        enddo
             851     3                         endif
             852     2               
             853     2                         write(ADM_LOG_FID,*) '    z[m]      max coef      min coef  max eft(2DX)  min eft(2DX)'
             854     3                         do k = ADM_kmax, ADM_kmin, -1
             855     3                            eft_max  = GTL_max_k( e_fold_time,  e_fold_time_pl,  k )
             856     3                            eft_min  = GTL_min_k( e_fold_time,  e_fold_time_pl,  k )
             857     3                            coef_max = GTL_max_k( divdamp_coef, divdamp_coef_pl, k )
             858     3                            coef_min = GTL_min_k( divdamp_coef, divdamp_coef_pl, k )
             859     3                            write(ADM_LOG_FID,'(1x,F8.2,4E14.6)') GRD_gz(k), coef_min, coef_max, eft_max, eft_min
             860     3                         enddo
             861     2                      else
             862     2                         write(ADM_LOG_FID,*) '=> used.'
             863     2                      endif
             864     1                   else
             865     1                      write(ADM_LOG_FID,*) '=> not used.'
             866     1                   endif
             867                     
             868                         if( alpha_v > 0.D0 ) NUMFILTER_DOdivdamp_v = .true.
             869                     
             870                         divdamp_coef_v = -alpha_v * GAMMA * RAIR * 273.D0 * TIME_DTS
             871                     
             872                         return
             873                       end subroutine numfilter_divdamp_setup
             874                     
             875                       !-----------------------------------------------------------------------------
             876                       !> setup coefficient for vertical numerical diffusion
             877                       subroutine numfilter_divdamp_2d_setup( &
             878                            divdamp_type, &
             879                            dep_hgrid,    &
             880                            lap_order,    &
             881                            alpha,        &
             882                            tau,          &
             883                            zlimit        )
             884                         use mod_adm, only: &
             885                            ADM_prc_me,  &
             886                            ADM_prc_pl,  &
             887                            ADM_lall,    &
             888                            ADM_lall_pl, &
             889                            ADM_gall,    &
             890                            ADM_gall_pl, &
             891                            ADM_kall,    &
             892                            ADM_kmin,    &
             893                            ADM_kmax
             894                         use mod_cnst, only: &
             895                            PI    => CNST_PI,       &
             896                            EPS   => CNST_EPS_ZERO, &
             897                            RAIR  => CNST_RAIR,     &
             898                            GAMMA => CNST_GAMMA
             899                         use mod_grd, only: &
             900                            GRD_htop, &
             901                            GRD_gz
             902                         use mod_gmtr, only: &
             903                            GMTR_area,    &
             904                            GMTR_area_pl
             905                         use mod_time, only: &
             906                            TIME_DTS
             907                         use mod_gtl, only: &
             908                            GTL_max_k, &
             909                            GTL_min_k
             910                         implicit none
             911                     
             912                         character(len=*), intent(in) :: divdamp_type ! type of divergence damping
             913                         logical,          intent(in) :: dep_hgrid    ! depend on each horizontal grid?
             914                         integer,          intent(in) :: lap_order    ! laplacian order
             915                         real(8),          intent(in) :: alpha        ! coefficient    for divergence damping
             916                         real(8),          intent(in) :: tau          ! e-folding time for divergence damping
             917                         real(8),          intent(in) :: zlimit       ! lower limit of divergence damping [m]
             918                     
             919                         real(8) :: fact(ADM_kall)
             920                     
             921                         real(8) :: e_fold_time   (ADM_gall,   ADM_kall,ADM_lall   )
             922                         real(8) :: e_fold_time_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             923                     
             924                         real(8) :: coef
             925                         real(8) :: coef_max, coef_min
             926                         real(8) :: eft_max,  eft_min
             927                     
             928                         integer :: k, l
             929                         !---------------------------------------------------------------------------
             930                     
             931                         allocate( divdamp_2d_coef   (ADM_gall,   ADM_kall,ADM_lall   ) )
             932                         allocate( divdamp_2d_coef_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl) )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             933        pp    v          divdamp_2d_coef    = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             934        pp    v          divdamp_2d_coef_pl = 0.D0
             935                     
             936     1                   if ( divdamp_type == "DIRECT" ) then
             937     1                      if( alpha > 0.D0 ) NUMFILTER_DOdivdamp_2d = .true.
             938     1               
             939     1                      ! alpha is the absolute value.
             940     1                      coef = alpha
             941     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             942     1  pp    v             divdamp_2d_coef   (:,:,:) = coef
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             943     1  pp    v             divdamp_2d_coef_pl(:,:,:) = coef
             944     1               
             945     1                   elseif( divdamp_type == "NONDIM_COEF" ) then
             946     1                      if( alpha > 0.D0 ) NUMFILTER_DOdivdamp_2d = .true.
             947     1               
             948     1                      ! alpha is the non-dimensional number.
             949     1                      ! alpha * (c_s)^p * dt^{2p-1}
             950     1                      coef = alpha * ( GAMMA * RAIR * 273.D0 )**lap_order * TIME_DTS**(2*lap_order-1)
             951     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             952     1  pp    v             divdamp_2d_coef   (:,:,:) = coef
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             953     1  pp    v             divdamp_2d_coef_pl(:,:,:) = coef
             954     1               
             955     1                   elseif( divdamp_type == "E_FOLD_TIME" ) then
             956     1                      if( tau > 0.D0 ) NUMFILTER_DOdivdamp_2d = .true.
             957     1               
             958     1                      ! tau is e-folding time for 2*dx.
             959     2                      if ( dep_hgrid ) then
             960     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             961     3  pp                     do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             962     4  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             963     4   p   6v                   divdamp_2d_coef(:,k,l) = ( sqrt(GMTR_area(:,l))/PI )**(2*lap_order) / ( tau+EPS )
             964     4   p                     enddo
             965     3   p                     enddo
             966     3                         if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             967     4  pp                        do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             968     5  pp                        do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             969     5   p   6v                      divdamp_2d_coef_pl(:,k,l) = ( sqrt(GMTR_area_pl(:,l))/PI )**(2*lap_order) / ( tau+EPS )
             970     5   p                        enddo
             971     4   p                        enddo
             972     3                         endif
             973     2               
             974     2                      else
             975     2               
             976     2                         coef = ( sqrt(AREA_ave)/PI )**(2*lap_order) / ( tau+EPS )
             977     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             978     2  pp    v                divdamp_2d_coef   (:,:,:) = coef
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             979     2  pp    v                divdamp_2d_coef_pl(:,:,:) = coef
             980     2               
             981     2                      endif
             982     1                   endif
             983                     
             984                         call height_factor( ADM_kall, GRD_gz(:), GRD_htop, zlimit, fact(:) )
             985                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             986     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<< Loop-information  End >>>
             987     2  pp               do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             988     2   p   8v             divdamp_2d_coef(:,k,l) = divdamp_2d_coef(:,k,l) * fact(k)
             989     2   p               enddo
             990     1   p               enddo
             991                     
             992     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             993     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<< Loop-information  End >>>
             994     3  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             995     3   p   8v                divdamp_2d_coef_pl(:,k,l) = divdamp_2d_coef_pl(:,k,l) * fact(k)
             996     3   p                  enddo
             997     2   p                  enddo
             998     1                   endif
             999                     
            1000                         write(ADM_LOG_FID,*)
            1001                         write(ADM_LOG_FID,*) '-----   2D divergence damping   -----'
            1002     1                   if ( NUMFILTER_DOdivdamp_2d ) then
            1003     2                      if ( debug ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1004     3  pp                     do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1005     4  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1006     4   p   4v                   e_fold_time(:,k,l) = ( sqrt(GMTR_area(:,l))/PI )**(2*lap_order_divdamp) &
            1007     4                                               / ( divdamp_2d_coef(:,k,l)+EPS )
            1008     4   p                     enddo
            1009     3   p                     enddo
            1010     2               
            1011     3                         if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1012     4  pp                        do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1013     5  pp                        do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1014     5   p   4v                      e_fold_time_pl(:,k,l) = ( sqrt(GMTR_area_pl(:,l))/PI )**(2*lap_order_divdamp) &
            1015     5                                                     / ( divdamp_2d_coef_pl(:,k,l)+EPS )
            1016     5   p                        enddo
            1017     4   p                        enddo
            1018     3                         else
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1019     3  pp    v                   e_fold_time_pl(:,:,:) = 0.D0
            1020     3                         endif
            1021     2               
            1022     2                         write(ADM_LOG_FID,*) '    z[m]      max coef      min coef  max eft(2DX)  min eft(2DX)'
            1023     3                         do k = ADM_kmax, ADM_kmin, -1
            1024     3                            eft_max  = GTL_max_k( e_fold_time,  e_fold_time_pl,  k )
            1025     3                            eft_min  = GTL_min_k( e_fold_time,  e_fold_time_pl,  k )
            1026     3                            coef_max = GTL_max_k( divdamp_coef, divdamp_coef_pl, k )
            1027     3                            coef_min = GTL_min_k( divdamp_coef, divdamp_coef_pl, k )
            1028     3                            write(ADM_LOG_FID,'(1x,F8.2,4E14.6)') GRD_gz(k), coef_min, coef_max, eft_max, eft_min
            1029     3                         enddo
            1030     2                      else
            1031     2                         write(ADM_LOG_FID,*) '=> used.'
            1032     2                      endif
            1033     1                   else
            1034     1                      write(ADM_LOG_FID,*) '=> not used.'
            1035     1                   endif
            1036                     
            1037                         return
            1038                       end subroutine numfilter_divdamp_2d_setup
            1039                     
            1040                       !-----------------------------------------------------------------------------
            1041                       !> Rayleigh damping
            1042                       subroutine numfilter_rayleigh_damping( &
            1043                            rho,     rho_pl,     &
            1044                            vx,      vx_pl,      &
            1045                            vy,      vy_pl,      &
            1046                            vz,      vz_pl,      &
            1047                            w,       w_pl,       &
            1048                            frhogvx, frhogvx_pl, &
            1049                            frhogvy, frhogvy_pl, &
            1050                            frhogvz, frhogvz_pl, &
            1051                            frhogw,  frhogw_pl   )
            1052                         use mod_adm, only: &
            1053                            ADM_prc_me,  &
            1054                            ADM_prc_pl,  &
            1055                            ADM_lall_pl, &
            1056                            ADM_lall,    &
            1057                            ADM_gall_pl, &
            1058                            ADM_gall,    &
            1059                            ADM_kall,    &
            1060                            ADM_kmin,    &
            1061                            ADM_kmax
            1062                         use mod_grd, only: &
            1063                            GRD_afac,  &
            1064                            GRD_bfac
            1065                         use mod_vmtr, only: &
            1066                            VMTR_GSGAM2,     &
            1067                            VMTR_GSGAM2_pl,  &
            1068                            VMTR_GSGAM2H,    &
            1069                            VMTR_GSGAM2H_pl
            1070                         implicit none
            1071                     
            1072                         real(8), intent(in)    :: rho       (ADM_gall,   ADM_kall,ADM_lall   )
            1073                         real(8), intent(in)    :: rho_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1074                         real(8), intent(in)    :: vx        (ADM_gall,   ADM_kall,ADM_lall   )
            1075                         real(8), intent(in)    :: vx_pl     (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1076                         real(8), intent(in)    :: vy        (ADM_gall,   ADM_kall,ADM_lall   )
            1077                         real(8), intent(in)    :: vy_pl     (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1078                         real(8), intent(in)    :: vz        (ADM_gall,   ADM_kall,ADM_lall   )
            1079                         real(8), intent(in)    :: vz_pl     (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1080                         real(8), intent(in)    :: w         (ADM_gall,   ADM_kall,ADM_lall   )
            1081                         real(8), intent(in)    :: w_pl      (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1082                         real(8), intent(inout) :: frhogvx   (ADM_gall,   ADM_kall,ADM_lall   )
            1083                         real(8), intent(inout) :: frhogvx_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1084                         real(8), intent(inout) :: frhogvy   (ADM_gall,   ADM_kall,ADM_lall   )
            1085                         real(8), intent(inout) :: frhogvy_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1086                         real(8), intent(inout) :: frhogvz   (ADM_gall,   ADM_kall,ADM_lall   )
            1087                         real(8), intent(inout) :: frhogvz_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1088                         real(8), intent(inout) :: frhogw    (ADM_gall,   ADM_kall,ADM_lall   )
            1089                         real(8), intent(inout) :: frhogw_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1090                     
            1091                         real(8) :: coef
            1092                     
            1093                         integer :: g, k, l
            1094                         !---------------------------------------------------------------------------
            1095                     
            1096                         if( .NOT. NUMFILTER_DOrayleigh ) return
            1097                     
            1098                         call DEBUG_rapstart('++++numfilter_rayleigh_damping')
            1099                     
            1100     1                   if ( .NOT. rayleigh_damp_only_w ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1101     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 8
                                   <<<      rayleigh_coef: 8
                                   <<< Loop-information  End >>>
            1102     3  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 151
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1103     4  pp   4v             do g = 1, ADM_gall
            1104     4   p   4v                coef = rayleigh_coef(k) * rho(g,k,l) * VMTR_GSGAM2(g,k,l)
            1105     4               
            1106     4   p   4v                frhogvx(g,k,l) = frhogvx(g,k,l) - coef * vx(g,k,l)
            1107     4   p   4v                frhogvy(g,k,l) = frhogvy(g,k,l) - coef * vy(g,k,l)
            1108     4   p   4v                frhogvz(g,k,l) = frhogvz(g,k,l) - coef * vz(g,k,l)
            1109     4   p   4v             enddo
            1110     3   p                  enddo
            1111     2   p                  enddo
            1112     1               
            1113     2                      if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1114     3  pp                     do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 8
                                   <<<      rayleigh_coef: 8
                                   <<< Loop-information  End >>>
            1115     4  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 151
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1116     5  pp   4v                do g = 1, ADM_gall_pl
            1117     5   p   4v                   coef = rayleigh_coef(k) * rho_pl(g,k,l) * VMTR_GSGAM2_pl(g,k,l)
            1118     5               
            1119     5   p   4v                   frhogvx_pl(g,k,l) = frhogvx_pl(g,k,l) - coef * vx_pl(g,k,l)
            1120     5   p   4v                   frhogvy_pl(g,k,l) = frhogvy_pl(g,k,l) - coef * vy_pl(g,k,l)
            1121     5   p   4v                   frhogvz_pl(g,k,l) = frhogvz_pl(g,k,l) - coef * vz_pl(g,k,l)
            1122     5   p   4v                enddo
            1123     4   p                     enddo
            1124     3   p                     enddo
            1125     2                      endif
            1126     1                   endif
            1127                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1128     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 24
                                   <<<      rayleigh_coef_h: 8, GRD_afac: 8
                                   <<<      GRD_bfac: 8
                                   <<< Loop-information  End >>>
            1129     2  pp               do k = ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 143
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1130     3  pp   6v          do g = 1, ADM_gall
            1131     3   p   6v             frhogw(g,k,l) = frhogw(g,k,l) - rayleigh_coef_h(k) * w(g,k,l) * VMTR_GSGAM2H(g,k,l) &
            1132     3                                                                         * 0.5D0 * ( GRD_afac(k) * rho(g,k  ,l) &
            1133     3                                                                                   + GRD_bfac(k) * rho(g,k-1,l) )
            1134     3   p   6v          enddo
            1135     2   p               enddo
            1136     1   p               enddo
            1137                     
            1138     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1139     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 24
                                   <<<      rayleigh_coef_h: 8, GRD_afac: 8
                                   <<<      GRD_bfac: 8
                                   <<< Loop-information  End >>>
            1140     3  pp                  do k = ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 143
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1141     4  pp   6v             do g = 1, ADM_gall_pl
            1142     4   p   6v                frhogw_pl(g,k,l) = frhogw_pl(g,k,l) - rayleigh_coef_h(k) * w_pl(g,k,l) * VMTR_GSGAM2H_pl(g,k,l) &
            1143     4                                                                                  * 0.5D0 * ( GRD_afac(k) * rho_pl(g,k  ,l) &
            1144     4                                                                                            + GRD_bfac(k) * rho_pl(g,k-1,l) )
            1145     4   p   6v             enddo
            1146     3   p                  enddo
            1147     2   p                  enddo
            1148     1                   endif
            1149                     
            1150                         call DEBUG_rapend('++++numfilter_rayleigh_damping')
            1151                     
            1152                         return
            1153                       end subroutine numfilter_rayleigh_damping
            1154                     
            1155                       !-----------------------------------------------------------------------------
            1156                       !> horizontal numerical diffusion
            1157                       subroutine numfilter_hdiffusion( &
            1158                            rho,       rho_pl,       &
            1159                            vx,        vx_pl,        &
            1160                            vy,        vy_pl,        &
            1161                            vz,        vz_pl,        &
            1162                            w,         w_pl,         &
            1163                            temd,      temd_pl,      &
            1164                            q,         q_pl,         &
            1165                            frhog,     frhog_pl,     &
            1166                            frhogvx,   frhogvx_pl,   &
            1167                            frhogvy,   frhogvy_pl,   &
            1168                            frhogvz,   frhogvz_pl,   &
            1169                            frhogw,    frhogw_pl,    &
            1170                            frhoge,    frhoge_pl,    &
            1171                            frhogetot, frhogetot_pl, &
            1172                            frhogq,    frhogq_pl     )
            1173                         use mod_adm, only: &
            1174                            ADM_prc_me,  &
            1175                            ADM_prc_pl,  &
            1176                            ADM_gall,    &
            1177                            ADM_gall_pl, &
            1178                            ADM_kall,    &
            1179                            ADM_kmin,    &
            1180                            ADM_kmax,    &
            1181                            ADM_lall,    &
            1182                            ADM_lall_pl
            1183                         use mod_cnst, only: &
            1184                            CNST_CV, &
            1185                            CNST_PI
            1186                         use mod_comm, only: &
            1187                            COMM_data_transfer
            1188                         use mod_time, only: &
            1189                            TIME_DTL
            1190                         use mod_grd, only: &
            1191                            GRD_htop, &
            1192                            GRD_afac, &
            1193                            GRD_bfac, &
            1194                            GRD_gz,   &
            1195                            GRD_gzh
            1196                         use mod_vmtr, only: &
            1197                            VMTR_GSGAM2,    &
            1198                            VMTR_GSGAM2_pl, &
            1199                            VMTR_GSGAM2H,   &
            1200                            VMTR_GSGAM2H_pl
            1201                         use mod_runconf, only: &
            1202                            TRC_VMAX,    &
            1203                            TRC_ADV_TYPE
            1204                         use mod_oprt, only: &
            1205                            OPRT_horizontalize_vec, &
            1206                            OPRT_laplacian,         &
            1207                            OPRT_diffusion
            1208                         use mod_bsstate, only: &
            1209                            rho_bs,   &
            1210                            rho_bs_pl
            1211                         implicit none
            1212                     
            1213                         real(8), intent(in)    :: rho         (ADM_gall,   ADM_kall,ADM_lall   )
            1214                         real(8), intent(in)    :: rho_pl      (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1215                         real(8), intent(in)    :: vx          (ADM_gall,   ADM_kall,ADM_lall   )
            1216                         real(8), intent(in)    :: vx_pl       (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1217                         real(8), intent(in)    :: vy          (ADM_gall,   ADM_kall,ADM_lall   )
            1218                         real(8), intent(in)    :: vy_pl       (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1219                         real(8), intent(in)    :: vz          (ADM_gall,   ADM_kall,ADM_lall   )
            1220                         real(8), intent(in)    :: vz_pl       (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1221                         real(8), intent(in)    :: w           (ADM_gall,   ADM_kall,ADM_lall   )
            1222                         real(8), intent(in)    :: w_pl        (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1223                         real(8), intent(in)    :: temd        (ADM_gall,   ADM_kall,ADM_lall   )
            1224                         real(8), intent(in)    :: temd_pl     (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1225                         real(8), intent(in)    :: q           (ADM_gall,   ADM_kall,ADM_lall   ,TRC_VMAX)
            1226                         real(8), intent(in)    :: q_pl        (ADM_gall_pl,ADM_kall,ADM_lall_pl,TRC_VMAX)
            1227                         real(8), intent(inout) :: frhog       (ADM_gall,   ADM_kall,ADM_lall   )
            1228                         real(8), intent(inout) :: frhog_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1229                         real(8), intent(inout) :: frhogvx     (ADM_gall,   ADM_kall,ADM_lall   )
            1230                         real(8), intent(inout) :: frhogvx_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1231                         real(8), intent(inout) :: frhogvy     (ADM_gall,   ADM_kall,ADM_lall   )
            1232                         real(8), intent(inout) :: frhogvy_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1233                         real(8), intent(inout) :: frhogvz     (ADM_gall,   ADM_kall,ADM_lall   )
            1234                         real(8), intent(inout) :: frhogvz_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1235                         real(8), intent(inout) :: frhogw      (ADM_gall,   ADM_kall,ADM_lall   )
            1236                         real(8), intent(inout) :: frhogw_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1237                         real(8), intent(inout) :: frhoge      (ADM_gall,   ADM_kall,ADM_lall   )
            1238                         real(8), intent(inout) :: frhoge_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1239                         real(8), intent(inout) :: frhogetot   (ADM_gall,   ADM_kall,ADM_lall   )
            1240                         real(8), intent(inout) :: frhogetot_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1241                         real(8), intent(inout) :: frhogq      (ADM_gall,   ADM_kall,ADM_lall   ,TRC_VMAX)
            1242                         real(8), intent(inout) :: frhogq_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl,TRC_VMAX)
            1243                     
            1244                         real(8) :: KH_coef_h        (ADM_gall,   ADM_kall,ADM_lall   )
            1245                         real(8) :: KH_coef_h_pl     (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1246                         real(8) :: KH_coef_lap1_h   (ADM_gall,   ADM_kall,ADM_lall   )
            1247                         real(8) :: KH_coef_lap1_h_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1248                     
            1249                         real(8) :: vtmp        (ADM_gall,   ADM_kall,ADM_lall   ,6)
            1250                         real(8) :: vtmp_pl     (ADM_gall_pl,ADM_kall,ADM_lall_pl,6)
            1251                         real(8) :: vtmp2       (ADM_gall,   ADM_kall,ADM_lall   ,6)
            1252                         real(8) :: vtmp2_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl,6)
            1253                     
            1254                         real(8) :: qtmp        (ADM_gall,   ADM_kall,ADM_lall   ,TRC_VMAX)
            1255                         real(8) :: qtmp_pl     (ADM_gall_pl,ADM_kall,ADM_lall_pl,TRC_VMAX)
            1256                         real(8) :: qtmp2       (ADM_gall,   ADM_kall,ADM_lall   ,TRC_VMAX)
            1257                         real(8) :: qtmp2_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl,TRC_VMAX)
            1258                     
            1259                         real(8) :: vtmp_lap1   (ADM_gall,   ADM_kall,ADM_lall   ,6)
            1260                         real(8) :: vtmp_lap1_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl,6)
            1261                         real(8) :: qtmp_lap1   (ADM_gall,   ADM_kall,ADM_lall   ,TRC_VMAX)
            1262                         real(8) :: qtmp_lap1_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl,TRC_VMAX)
            1263                     
            1264                         real(8) :: wk       (ADM_gall,   ADM_kall,ADM_lall   )
            1265                         real(8) :: wk_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1266                         real(8) :: rhog     (ADM_gall,   ADM_kall,ADM_lall   )
            1267                         real(8) :: rhog_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1268                         real(8) :: rhog_h   (ADM_gall,   ADM_kall,ADM_lall   )
            1269                         real(8) :: rhog_h_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1270                     
            1271                         real(8), parameter :: cfact = 2.D0
            1272                         real(8), parameter :: T0    = 300.D0
            1273                     
            1274                         real(8) :: fact  (ADM_kall)
            1275                         real(8) :: kh_max(ADM_kall)
            1276                         real(8) :: d2T_dx2, coef
            1277                     
            1278                         integer :: g, k, l, nq, p
            1279                         !---------------------------------------------------------------------------
            1280                     
            1281                         call DEBUG_rapstart('++++numfilter_hdiffusion')
            1282                     
            1283                     
            1284     1                   if ( hdiff_nonlinear ) then
            1285     1                      call height_factor( ADM_kall, GRD_gz(:), GRD_htop, ZD_hdiff_nl, fact(:) )
            1286     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1067
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1287     1  pp   8v             kh_max(:) = ( 1.D0 - fact(:) ) * Kh_coef_maxlim &
            1288     1                                + (        fact(:) ) * Kh_coef_minlim
            1289     1                   endif
            1290                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1291        pp   8v          rhog   (:,:,:) = rho   (:,:,:) * VMTR_GSGAM2   (:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1292        pp   8v          rhog_pl(:,:,:) = rho_pl(:,:,:) * VMTR_GSGAM2_pl(:,:,:)
            1293                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1294        pp    v          rhog_h(:,ADM_kmin,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1295     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 16
                                   <<<      GRD_afac: 8, GRD_bfac: 8
                                   <<< Loop-information  End >>>
            1296     2  pp               do k = ADM_kmin+1, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 176
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1297     3  pp   6v          do g = 1, ADM_gall
            1298     3   p   6v             rhog_h(g,k,l) = 0.5D0 * ( GRD_afac(k) * rho(g,k,  l) &
            1299     3                                              + GRD_bfac(k) * rho(g,k-1,l) ) * VMTR_GSGAM2H(g,k,l)
            1300     3   p   6v          enddo
            1301     2   p               enddo
            1302     1   p               enddo
            1303                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1304        pp    v          rhog_h_pl(:,ADM_kmin,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1305     1  pp               do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 16
                                   <<<      GRD_afac: 8, GRD_bfac: 8
                                   <<< Loop-information  End >>>
            1306     2  pp               do k = ADM_kmin+1, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 176
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1307     3  pp   6v          do g = 1, ADM_gall_pl
            1308     3   p   6v             rhog_h_pl(g,k,l) = 0.5D0 * ( GRD_afac(k) * rho_pl(g,k,  l) &
            1309     3                                                 + GRD_bfac(k) * rho_pl(g,k-1,l) ) * VMTR_GSGAM2H_pl(g,k,l)
            1310     3   p   6v          enddo
            1311     2   p               enddo
            1312     1   p               enddo
            1313                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1314        pp   4v          vtmp   (:,:,:,1) = vx     (:,:,:)
            1315         p   4v          vtmp   (:,:,:,2) = vy     (:,:,:)
            1316         p   4v          vtmp   (:,:,:,3) = vz     (:,:,:)
            1317         p   4v          vtmp   (:,:,:,4) = w      (:,:,:)
            1318         p   4v          vtmp   (:,:,:,5) = temd   (:,:,:)
            1319         p   4v          vtmp   (:,:,:,6) = rho    (:,:,:) - rho_bs   (:,:,:)
            1320                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1321        pp   4v          vtmp_pl(:,:,:,1) = vx_pl  (:,:,:)
            1322         p   4v          vtmp_pl(:,:,:,2) = vy_pl  (:,:,:)
            1323         p   4v          vtmp_pl(:,:,:,3) = vz_pl  (:,:,:)
            1324         p   4v          vtmp_pl(:,:,:,4) = w_pl   (:,:,:)
            1325         p   4v          vtmp_pl(:,:,:,5) = temd_pl(:,:,:)
            1326         p   4v          vtmp_pl(:,:,:,6) = rho_pl (:,:,:) - rho_bs_pl(:,:,:)
            1327                     
            1328                         ! copy beforehand
            1329     1                   if ( NUMFILTER_DOhorizontaldiff_lap1 ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1330     1  pp   8v             vtmp_lap1   (:,:,:,:) = vtmp   (:,:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1331     1  pp   8v             vtmp_lap1_pl(:,:,:,:) = vtmp_pl(:,:,:,:)
            1332     1                   endif
            1333                     
            1334                         ! high order laplacian
            1335     1                   do p = 1, lap_order_hdiff
            1336     1                      ! for momentum
            1337     1                      call OPRT_laplacian( vtmp2(:,:,:,1), vtmp2_pl(:,:,:,1), & !--- [OUT]
            1338     1                                           vtmp (:,:,:,1), vtmp_pl (:,:,:,1)  ) !--- [IN]
            1339     1               
            1340     1                      call OPRT_laplacian( vtmp2(:,:,:,2), vtmp2_pl(:,:,:,2), & !--- [OUT]
            1341     1                                           vtmp (:,:,:,2), vtmp_pl (:,:,:,2)  ) !--- [IN]
            1342     1               
            1343     1                      call OPRT_laplacian( vtmp2(:,:,:,3), vtmp2_pl(:,:,:,3), & !--- [OUT]
            1344     1                                           vtmp (:,:,:,3), vtmp_pl (:,:,:,3)  ) !--- [IN]
            1345     1               
            1346     1                      call OPRT_laplacian( vtmp2(:,:,:,4), vtmp2_pl(:,:,:,4), & !--- [OUT]
            1347     1                                           vtmp (:,:,:,4), vtmp_pl (:,:,:,4)  ) !--- [IN]
            1348     1               
            1349     1                      ! for scalar
            1350     2                      if ( p == lap_order_hdiff ) then
            1351     2               
            1352     3                         if ( hdiff_nonlinear ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1353     4  pp                        do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 8
                                   <<<      kh_max: 8
                                   <<< Loop-information  End >>>
            1354     5  pp                           do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 189
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1355     6  pp   6v                      do g = 1, ADM_gall
            1356     6   p   6v                         d2T_dx2 = abs(vtmp(g,k,l,5)) / T0 * AREA_ave
            1357     6   p   6v                         coef    = cfact * ( AREA_ave * AREA_ave ) / TIME_DTL * d2T_dx2
            1358     6               
            1359     6   p   6v                         KH_coef(g,k,l) = max( min( coef, Kh_max(k) ), Kh_coef_minlim )
            1360     6   p   6v                      enddo
            1361     5   p                           enddo
            1362     4   p                        enddo
            1363     3               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1364     4  pp                        do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 8
                                   <<<      kh_max: 8
                                   <<< Loop-information  End >>>
            1365     5  pp                           do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 189
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1366     6  pp   6v                      do g = 1, ADM_gall_pl
            1367     6   p   6v                         d2T_dx2 = abs(vtmp_pl(g,k,l,5)) / T0 * AREA_ave
            1368     6   p   6v                         coef    = cfact * ( AREA_ave * AREA_ave ) / TIME_DTL * d2T_dx2
            1369     6               
            1370     6   p   6v                         KH_coef_pl(g,k,l) = max( min( coef, Kh_max(k) ), Kh_coef_minlim )
            1371     6   p   6v                      enddo
            1372     5   p                           enddo
            1373     4   p                        enddo
            1374     3               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1375     4  pp                        do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<< Loop-information  End >>>
            1376     5  pp                           do k = ADM_kmin+1, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1377     5   p   8v                         KH_coef_h(:,k,l) = 0.5D0 * ( KH_coef(:,k,l) + KH_coef(:,k-1,l) )
            1378     5   p                           enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1778
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1379     4  pp    v                      KH_coef_h(:,ADM_kmin,l) = 0.D0
            1380     4   p                        enddo
            1381     3               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1382     4  pp                        do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<< Loop-information  End >>>
            1383     5  pp                           do k = ADM_kmin+1, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1384     5   p   8v                         KH_coef_h_pl(:,k,l) = 0.5D0 * ( KH_coef_pl(:,k,l) + KH_coef_pl(:,k-1,l) )
            1385     5   p                           enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1778
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1386     4  pp    v                      KH_coef_h_pl(:,ADM_kmin,l) = 0.D0
            1387     4   p                        enddo
            1388     3                         else
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1389     3  pp   8v                   KH_coef_h   (:,:,:) = KH_coef   (:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1390     3  pp   8v                   KH_coef_h_pl(:,:,:) = KH_coef_pl(:,:,:)
            1391     3                         endif ! nonlinear1
            1392     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1393     2  pp   8v                wk   (:,:,:) = rhog   (:,:,:) * CNST_CV * KH_coef   (:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1394     2  pp   8v                wk_pl(:,:,:) = rhog_pl(:,:,:) * CNST_CV * KH_coef_pl(:,:,:)
            1395     2               
            1396     2                         call OPRT_diffusion( vtmp2(:,:,:,5), vtmp2_pl(:,:,:,5), &
            1397     2                                              vtmp (:,:,:,5), vtmp_pl (:,:,:,5), &
            1398     2                                              wk   (:,:,:)  , wk_pl   (:,:,:)    )
            1399     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1400     2  pp   8v                wk   (:,:,:) = rhog   (:,:,:) * hdiff_fact_rho * KH_coef   (:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1401     2  pp   8v                wk_pl(:,:,:) = rhog_pl(:,:,:) * hdiff_fact_rho * KH_coef_pl(:,:,:)
            1402     2               
            1403     2                         call OPRT_diffusion( vtmp2(:,:,:,6), vtmp2_pl(:,:,:,6), &
            1404     2                                              vtmp (:,:,:,6), vtmp_pl (:,:,:,6), &
            1405     2                                              wk   (:,:,:)  , wk_pl   (:,:,:)    )
            1406     2                      else
            1407     2                         call OPRT_laplacian( vtmp2(:,:,:,5), vtmp2_pl(:,:,:,5), & !--- [OUT]
            1408     2                                              vtmp (:,:,:,5), vtmp_pl (:,:,:,5)  ) !--- [IN]
            1409     2               
            1410     2                         call OPRT_laplacian( vtmp2(:,:,:,6), vtmp2_pl(:,:,:,6), & !--- [OUT]
            1411     2                                              vtmp (:,:,:,6), vtmp_pl (:,:,:,6)  ) !--- [IN]
            1412     2                      endif
            1413     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1414     1  pp   8v             vtmp   (:,:,:,:) = -vtmp2   (:,:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1415     1  pp   8v             vtmp_pl(:,:,:,:) = -vtmp2_pl(:,:,:,:)
            1416     1               
            1417     1                      call COMM_data_transfer( vtmp, vtmp_pl )
            1418     1               
            1419     1                   enddo ! laplacian order loop
            1420                     
            1421                         !--- 1st order laplacian filter
            1422     1                   if ( NUMFILTER_DOhorizontaldiff_lap1 ) then
            1423     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1424     1  pp   8v             KH_coef_lap1_h   (:,:,:) = KH_coef_lap1   (:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1425     1  pp   8v             KH_coef_lap1_h_pl(:,:,:) = KH_coef_lap1_pl(:,:,:)
            1426     1               
            1427     1                      call OPRT_laplacian( vtmp2    (:,:,:,1), vtmp2_pl    (:,:,:,1), &
            1428     1                                           vtmp_lap1(:,:,:,1), vtmp_lap1_pl(:,:,:,1)  )
            1429     1               
            1430     1                      call OPRT_laplacian( vtmp2    (:,:,:,2), vtmp2_pl    (:,:,:,2), &
            1431     1                                           vtmp_lap1(:,:,:,2), vtmp_lap1_pl(:,:,:,2)  )
            1432     1               
            1433     1                      call OPRT_laplacian( vtmp2    (:,:,:,3), vtmp2_pl    (:,:,:,3), &
            1434     1                                           vtmp_lap1(:,:,:,3), vtmp_lap1_pl(:,:,:,3)  )
            1435     1               
            1436     1                      call OPRT_laplacian( vtmp2    (:,:,:,4), vtmp2_pl    (:,:,:,4), &
            1437     1                                           vtmp_lap1(:,:,:,4), vtmp_lap1_pl(:,:,:,4)  )
            1438     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1439     1  pp   8v             wk   (:,:,:) = rhog   (:,:,:) * CNST_CV * KH_coef_lap1   (:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1440     1  pp   8v             wk_pl(:,:,:) = rhog_pl(:,:,:) * CNST_CV * KH_coef_lap1_pl(:,:,:)
            1441     1               
            1442     1                      call OPRT_diffusion( vtmp2    (:,:,:,5), vtmp2_pl    (:,:,:,5), &
            1443     1                                           vtmp_lap1(:,:,:,5), vtmp_lap1_pl(:,:,:,5), &
            1444     1                                           wk       (:,:,:),   wk_pl       (:,:,:)    )
            1445     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1446     1  pp   8v             wk   (:,:,:) = rhog   (:,:,:) * hdiff_fact_rho * KH_coef_lap1   (:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1447     1  pp   8v             wk_pl(:,:,:) = rhog_pl(:,:,:) * hdiff_fact_rho * KH_coef_lap1_pl(:,:,:)
            1448     1               
            1449     1                      call OPRT_diffusion( vtmp2    (:,:,:,6), vtmp2_pl    (:,:,:,6), &
            1450     1                                           vtmp_lap1(:,:,:,6), vtmp_lap1_pl(:,:,:,6), &
            1451     1                                           wk       (:,:,:),   wk_pl       (:,:,:)    )
            1452     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1453     1  pp   8v             vtmp_lap1   (:,:,:,:) = -vtmp2   (:,:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1454     1  pp   8v             vtmp_lap1_pl(:,:,:,:) = -vtmp2_pl(:,:,:,:)
            1455     1               
            1456     1                      call COMM_data_transfer( vtmp_lap1, vtmp_lap1_pl )
            1457     1                   else
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1458     1  pp    v             KH_coef_lap1_h   (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1459     1  pp    v             KH_coef_lap1_h_pl(:,:,:) = 0.D0
            1460     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1461     1  pp    v             vtmp_lap1   (:,:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1462     1  pp    v             vtmp_lap1_pl(:,:,:,:) = 0.D0
            1463     1                   endif
            1464                     
            1465                         !--- Update tendency
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1466     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1467     2  pp               do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1468     2   p   6v             frhogvx  (:,k,l) = frhogvx  (:,k,l) - ( vtmp     (:,k,l,1) * KH_coef     (:,k,l) &
            1469     2                                                            + vtmp_lap1(:,k,l,1) * KH_coef_lap1(:,k,l) &
            1470     2                                                            ) * rhog(:,k,l)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 314
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1471     2  pp   4v             frhogvy  (:,k,l) = frhogvy  (:,k,l) - ( vtmp     (:,k,l,2) * KH_coef     (:,k,l) &
            1472     2                                                            + vtmp_lap1(:,k,l,2) * KH_coef_lap1(:,k,l) &
            1473     2                                                            ) * rhog(:,k,l)
            1474     2   p   4v             frhogvz  (:,k,l) = frhogvz  (:,k,l) - ( vtmp     (:,k,l,3) * KH_coef     (:,k,l) &
            1475     2                                                            + vtmp_lap1(:,k,l,3) * KH_coef_lap1(:,k,l) &
            1476     2                                                            ) * rhog(:,k,l)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 500
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1477     2  pp   6v             frhogw   (:,k,l) = frhogw   (:,k,l) - ( vtmp     (:,k,l,4) * KH_coef_h     (:,k,l) &
            1478     2                                                            + vtmp_lap1(:,k,l,4) * KH_coef_lap1_h(:,k,l) &
            1479     2                                                            ) * rhog_h(:,k,l)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 800
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1480     2  pp   8v             frhoge   (:,k,l) = frhoge   (:,k,l) - ( vtmp(:,k,l,5) + vtmp_lap1(:,k,l,5) )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 471
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1481     2  pp   6v             frhogetot(:,k,l) = frhogetot(:,k,l) - ( vtmp(:,k,l,5) + vtmp_lap1(:,k,l,5) )
            1482     2   p   6v             frhog    (:,k,l) = frhog    (:,k,l) - ( vtmp(:,k,l,6) + vtmp_lap1(:,k,l,6) )
            1483     2   p               enddo
            1484     1   p               enddo
            1485                     
            1486     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1487     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1488     3  pp                  do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1489     3   p   6v                frhogvx_pl  (:,k,l) = frhogvx_pl  (:,k,l) - ( vtmp_pl     (:,k,l,1) * KH_coef_pl     (:,k,l) &
            1490     3                                                                     + vtmp_lap1_pl(:,k,l,1) * KH_coef_lap1_pl(:,k,l) &
            1491     3                                                                     ) * rhog_pl(:,k,l)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 314
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1492     3  pp   4v                frhogvy_pl  (:,k,l) = frhogvy_pl  (:,k,l) - ( vtmp_pl     (:,k,l,2) * KH_coef_pl     (:,k,l) &
            1493     3                                                                     + vtmp_lap1_pl(:,k,l,2) * KH_coef_lap1_pl(:,k,l) &
            1494     3                                                                     ) * rhog_pl(:,k,l)
            1495     3   p   4v                frhogvz_pl  (:,k,l) = frhogvz_pl  (:,k,l) - ( vtmp_pl     (:,k,l,3) * KH_coef_pl     (:,k,l) &
            1496     3                                                                     + vtmp_lap1_pl(:,k,l,3) * KH_coef_lap1_pl(:,k,l) &
            1497     3                                                                     ) * rhog_pl(:,k,l)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 500
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1498     3  pp   6v                frhogw_pl   (:,k,l) = frhogw_pl   (:,k,l) - ( vtmp_pl     (:,k,l,4) * KH_coef_h_pl     (:,k,l) &
            1499     3                                                                     + vtmp_lap1_pl(:,k,l,4) * KH_coef_lap1_h_pl(:,k,l) &
            1500     3                                                                     ) * rhog_h_pl(:,k,l)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 800
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1501     3  pp   8v                frhoge_pl   (:,k,l) = frhoge_pl   (:,k,l) - ( vtmp_pl(:,k,l,5) + vtmp_lap1_pl(:,k,l,5) )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 471
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1502     3  pp   6v                frhogetot_pl(:,k,l) = frhogetot_pl(:,k,l) - ( vtmp_pl(:,k,l,5) + vtmp_lap1_pl(:,k,l,5) )
            1503     3   p   6v                frhog_pl    (:,k,l) = frhog_pl    (:,k,l) - ( vtmp_pl(:,k,l,6) + vtmp_lap1_pl(:,k,l,6) )
            1504     3   p                  enddo
            1505     2   p                  enddo
            1506     1                   endif
            1507                     
            1508                         call OPRT_horizontalize_vec( frhogvx(:,:,:), frhogvx_pl(:,:,:), & !--- [INOUT]
            1509                                                      frhogvy(:,:,:), frhogvy_pl(:,:,:), & !--- [INOUT]
            1510                                                      frhogvz(:,:,:), frhogvz_pl(:,:,:)  ) !--- [INOUT]
            1511                     
            1512                         !---------------------------------------------------------------------------
            1513                         ! For tracer
            1514                         !---------------------------------------------------------------------------
            1515                         ! 08/04/12 [Mod] T.Mitsui, hyper diffusion is needless for tracer if MIURA2004
            1516                         !                          because that is upwind-type advection(already diffusive)
            1517     1                   if ( TRC_ADV_TYPE /= 'MIURA2004' ) then
            1518     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1519     1  pp   8v             qtmp   (:,:,:,:) = q   (:,:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1520     1  pp   8v             qtmp_pl(:,:,:,:) = q_pl(:,:,:,:)
            1521     1               
            1522     1                      ! copy beforehand
            1523     2                      if ( NUMFILTER_DOhorizontaldiff_lap1 ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1524     2  pp   8v                qtmp_lap1   (:,:,:,:) = qtmp   (:,:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1525     2  pp   8v                qtmp_lap1_pl(:,:,:,:) = qtmp_pl(:,:,:,:)
            1526     2                      endif
            1527     1               
            1528     1                      ! high order laplacian filter
            1529     2                      do p = 1, lap_order_hdiff
            1530     2               
            1531     3                         if ( p == lap_order_hdiff ) then
            1532     3               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1533     3  pp   8v                   wk   (:,:,:) = rhog   (:,:,:) * hdiff_fact_q * KH_coef   (:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1534     3  pp   8v                   wk_pl(:,:,:) = rhog_pl(:,:,:) * hdiff_fact_q * KH_coef_pl(:,:,:)
            1535     3               
            1536     4   s    s                   do nq = 1, TRC_VMAX
            1537     4   s    s                      call OPRT_diffusion( qtmp2(:,:,:,nq), qtmp2_pl(:,:,:,nq), &
            1538     4                                                    qtmp (:,:,:,nq), qtmp_pl (:,:,:,nq), &
            1539     4                                                    wk   (:,:,:),    wk_pl   (:,:,:)     )
            1540     4   s    s                   enddo
            1541     3                         else
            1542     4   s    s                   do nq = 1, TRC_VMAX
            1543     4   s    s                      call OPRT_laplacian( qtmp2(:,:,:,nq), qtmp2_pl(:,:,:,nq), & !--- [OUT]
            1544     4                                                    qtmp (:,:,:,nq), qtmp_pl (:,:,:,nq)  ) !--- [IN
            1545     4   s    s                   enddo
            1546     3                         endif
            1547     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1548     2  pp   8v                qtmp   (:,:,:,:) = -qtmp2   (:,:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1549     2  pp   8v                qtmp_pl(:,:,:,:) = -qtmp2_pl(:,:,:,:)
            1550     2               
            1551     2                         call COMM_data_transfer( qtmp, qtmp_pl )
            1552     2               
            1553     2                      enddo ! laplacian order loop
            1554     1               
            1555     1                      !--- 1st order laplacian filter
            1556     2                      if ( NUMFILTER_DOhorizontaldiff_lap1 ) then
            1557     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1558     2  pp   8v                wk   (:,:,:) = rhog   (:,:,:) * hdiff_fact_q * KH_coef_lap1   (:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1559     2  pp   8v                wk_pl(:,:,:) = rhog_pl(:,:,:) * hdiff_fact_q * KH_coef_lap1_pl(:,:,:)
            1560     2               
            1561     3   s    s                do nq = 1, TRC_VMAX
            1562     3   s    s                   call OPRT_diffusion( qtmp2    (:,:,:,nq), qtmp2_pl    (:,:,:,nq), &
            1563     3                                                 qtmp_lap1(:,:,:,nq), qtmp_lap1_pl(:,:,:,nq), &
            1564     3                                                 wk       (:,:,:),    wk_pl       (:,:,:)     )
            1565     3   s    s                enddo
            1566     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1567     2  pp   8v                qtmp_lap1   (:,:,:,:) = -qtmp2   (:,:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1568     2  pp   8v                qtmp_lap1_pl(:,:,:,:) = -qtmp2_pl(:,:,:,:)
            1569     2               
            1570     2                         call COMM_data_transfer( qtmp_lap1(:,:,:,:), qtmp_lap1_pl(:,:,:,:) )
            1571     2                      else
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1572     2  pp    v                qtmp_lap1   (:,:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1573     2  pp    v                qtmp_lap1_pl(:,:,:,:) = 0.D0
            1574     2                      endif
            1575     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1576     2  pp                  do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1577     3  pp                  do l  = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<< Loop-information  End >>>
            1578     4  pp                  do k  = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1579     4   p   8v                frhogq(:,k,l,nq) = frhogq(:,k,l,nq) - ( qtmp(:,k,l,nq) + qtmp_lap1(:,k,l,nq) )
            1580     4   p                  enddo
            1581     3   p                  enddo
            1582     2   p                  enddo
            1583     1               
            1584     2                      if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1585     3  pp                     do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1586     4  pp                     do l  = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<< Loop-information  End >>>
            1587     5  pp                     do k  = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1588     5   p   8v                   frhogq_pl(:,k,l,nq) = frhogq_pl(:,k,l,nq) - ( qtmp_pl(:,k,l,nq) + qtmp_lap1_pl(:,k,l,nq) )
            1589     5   p                     enddo
            1590     4   p                     enddo
            1591     3   p                     enddo
            1592     2                      endif
            1593     1               
            1594     1                   endif ! apply filter to tracer?
            1595                     
            1596                         call DEBUG_rapend('++++numfilter_hdiffusion')
            1597                     
            1598                         return
            1599                       end subroutine numfilter_hdiffusion
            1600                     
            1601                       !-----------------------------------------------------------------------------
            1602                       !> vertical numerical diffusion
            1603                       subroutine numfilter_vdiffusion( &
            1604                            rho,       rho_pl,       &
            1605                            vx,        vx_pl,        &
            1606                            vy,        vy_pl,        &
            1607                            vz,        vz_pl,        &
            1608                            w,         w_pl,         &
            1609                            tem,       tem_pl,       &
            1610                            q,         q_pl,         &
            1611                            frhog,     frhog_pl,     &
            1612                            frhogvx,   frhogvx_pl,   &
            1613                            frhogvy,   frhogvy_pl,   &
            1614                            frhogvz,   frhogvz_pl,   &
            1615                            frhogw,    frhogw_pl,    &
            1616                            frhoge,    frhoge_pl,    &
            1617                            frhogetot, frhogetot_pl, &
            1618                            frhogq,    frhogq_pl     )
            1619                         use mod_adm, only: &
            1620                            ADM_gall,    &
            1621                            ADM_kall,    &
            1622                            ADM_lall,    &
            1623                            ADM_gall_pl, &
            1624                            ADM_lall_pl, &
            1625                            ADM_prc_me,  &
            1626                            ADM_prc_pl,  &
            1627                            ADM_kmin,    &
            1628                            ADM_kmax
            1629                         use mod_cnst, only: &
            1630                            CNST_CV
            1631                         use mod_grd, only: &
            1632                            GRD_rdgz,  &
            1633                            GRD_rdgzh, &
            1634                            GRD_afac,  &
            1635                            GRD_bfac
            1636                         use mod_oprt, only: &
            1637                            OPRT_horizontalize_vec
            1638                         use mod_vmtr, only: &
            1639                            VMTR_GSGAM2,     &
            1640                            VMTR_GSGAM2_pl,  &
            1641                            VMTR_GSGAM2H,    &
            1642                            VMTR_GSGAM2H_pl
            1643                         use mod_runconf, only: &
            1644                            TRC_VMAX
            1645                         implicit none
            1646                     
            1647                         real(8), intent(in)    :: rho         (ADM_gall   ,ADM_kall,ADM_lall   )
            1648                         real(8), intent(in)    :: rho_pl      (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1649                         real(8), intent(in)    :: vx          (ADM_gall   ,ADM_kall,ADM_lall   )
            1650                         real(8), intent(in)    :: vx_pl       (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1651                         real(8), intent(in)    :: vy          (ADM_gall   ,ADM_kall,ADM_lall   )
            1652                         real(8), intent(in)    :: vy_pl       (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1653                         real(8), intent(in)    :: vz          (ADM_gall   ,ADM_kall,ADM_lall   )
            1654                         real(8), intent(in)    :: vz_pl       (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1655                         real(8), intent(in)    :: w           (ADM_gall   ,ADM_kall,ADM_lall   )
            1656                         real(8), intent(in)    :: w_pl        (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1657                         real(8), intent(in)    :: tem         (ADM_gall   ,ADM_kall,ADM_lall   )
            1658                         real(8), intent(in)    :: tem_pl      (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1659                         real(8), intent(in)    :: q           (ADM_gall   ,ADM_kall,ADM_lall   ,TRC_VMAX)
            1660                         real(8), intent(in)    :: q_pl        (ADM_gall_pl,ADM_kall,ADM_lall_pl,TRC_VMAX)
            1661                         real(8), intent(inout) :: frhog       (ADM_gall   ,ADM_kall,ADM_lall   )
            1662                         real(8), intent(inout) :: frhog_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1663                         real(8), intent(inout) :: frhogvx     (ADM_gall   ,ADM_kall,ADM_lall   )
            1664                         real(8), intent(inout) :: frhogvx_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1665                         real(8), intent(inout) :: frhogvy     (ADM_gall   ,ADM_kall,ADM_lall   )
            1666                         real(8), intent(inout) :: frhogvy_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1667                         real(8), intent(inout) :: frhogvz     (ADM_gall   ,ADM_kall,ADM_lall   )
            1668                         real(8), intent(inout) :: frhogvz_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1669                         real(8), intent(inout) :: frhogw      (ADM_gall   ,ADM_kall,ADM_lall   )
            1670                         real(8), intent(inout) :: frhogw_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1671                         real(8), intent(inout) :: frhoge      (ADM_gall   ,ADM_kall,ADM_lall   )
            1672                         real(8), intent(inout) :: frhoge_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1673                         real(8), intent(inout) :: frhogetot   (ADM_gall   ,ADM_kall,ADM_lall   )
            1674                         real(8), intent(inout) :: frhogetot_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1675                         real(8), intent(inout) :: frhogq      (ADM_gall   ,ADM_kall,ADM_lall   ,TRC_VMAX)
            1676                         real(8), intent(inout) :: frhogq_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl,TRC_VMAX)
            1677                     
            1678                         integer, parameter :: vmax  = 6
            1679                         integer, parameter :: I_RHO = 1
            1680                         integer, parameter :: I_VX  = 2
            1681                         integer, parameter :: I_VY  = 3
            1682                         integer, parameter :: I_VZ  = 4
            1683                         integer, parameter :: I_W   = 5
            1684                         integer, parameter :: I_TEM = 6
            1685                     
            1686                         real(8) :: rhog_h   (ADM_gall   ,ADM_kall,ADM_lall   )
            1687                         real(8) :: rhog_h_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1688                     
            1689                         real(8) :: flux    (ADM_gall   ,ADM_kall,ADM_lall   ,vmax+TRC_VMAX)
            1690                         real(8) :: flux_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl,vmax+TRC_VMAX)
            1691                         real(8) :: vtmp0   (ADM_gall   ,ADM_kall,ADM_lall   ,vmax+TRC_VMAX)
            1692                         real(8) :: vtmp0_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl,vmax+TRC_VMAX)
            1693                         real(8) :: vtmp2   (ADM_gall   ,ADM_kall,ADM_lall   ,vmax+TRC_VMAX)
            1694                         real(8) :: vtmp2_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl,vmax+TRC_VMAX)
            1695                     
            1696                         real(8) :: coef
            1697                     
            1698                         integer :: k, l, nq, p
            1699                         !---------------------------------------------------------------------------
            1700                     
            1701                         if( .NOT. NUMFILTER_DOverticaldiff ) return
            1702                     
            1703                         call DEBUG_rapstart('++++numfilter_vdiffusion')
            1704                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1705     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 3
                                   <<< Loop-information  End >>>
            1706     2  pp                  do k = ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1707     2   p   6v                rhog_h(:,k,l) = 0.5D0 * ( GRD_afac(k) * VMTR_GSGAM2(:,k,  l) * rho(:,k,  l) &
            1708     2                                                 + GRD_bfac(k) * VMTR_GSGAM2(:,k-1,l) * rho(:,k-1,l) )
            1709     2   p                  enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1710     1  pp   8v             rhog_h(:,ADM_kmin-1,l) = rhog_h(:,ADM_kmin,l)
            1711     1   p               enddo
            1712                     
            1713     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1714     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 3
                                   <<< Loop-information  End >>>
            1715     3  pp                     do k = ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1716     3   p   6v                   rhog_h_pl(:,k,l) = 0.5D0 * ( GRD_afac(k) * VMTR_GSGAM2_pl(:,k,  l) * rho_pl(:,k  ,l) &
            1717     3                                                       + GRD_bfac(k) * VMTR_GSGAM2_pl(:,k-1,l) * rho_pl(:,k-1,l) )
            1718     3   p                     enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1719     2  pp   8v                rhog_h_pl(:,ADM_kmin-1,l) = rhog_h_pl(:,ADM_kmin,l)
            1720     2   p                  enddo
            1721     1                   endif
            1722                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1723        pp   6v          vtmp0(:,:,:,I_RHO) = rho(:,:,:)
            1724         p   6v          vtmp0(:,:,:,I_VX ) = vx (:,:,:)
            1725         p   6v          vtmp0(:,:,:,I_VY ) = vy (:,:,:)
            1726         p   6v          vtmp0(:,:,:,I_VZ ) = vz (:,:,:)
            1727         p   6v          vtmp0(:,:,:,I_TEM) = tem(:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1728     1  pp               do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1729     1  pp   8v             vtmp0(:,:,:,vmax+nq) = rho(:,:,:) * q(:,:,:,nq)
            1730     1   p               enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1731        pp   8v          vtmp0(:,:,:,I_W) = w(:,:,:)
            1732                     
            1733                         !--- bottom boundary
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1734        pp   8v          vtmp0(:,ADM_kmin-1,:,I_RHO) = 3.D0 * vtmp0(:,ADM_kmin  ,:,I_RHO) &
            1735                                                     - 3.D0 * vtmp0(:,ADM_kmin+1,:,I_RHO) &
            1736                                                     + 1.D0 * vtmp0(:,ADM_kmin+2,:,I_RHO)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1737        pp   8v          vtmp0(:,ADM_kmin-1,:,I_VX ) = vtmp0(:,ADM_kmin,:,I_VX)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1738        pp   8v          vtmp0(:,ADM_kmin-1,:,I_VY ) = vtmp0(:,ADM_kmin,:,I_VY)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 3
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1739        pp   6v          vtmp0(:,ADM_kmin-1,:,I_VZ ) = vtmp0(:,ADM_kmin,:,I_VZ)
            1740         p   6v          vtmp0(:,ADM_kmin-1,:,I_TEM) = 3.D0 * vtmp0(:,ADM_kmin  ,:,I_TEM) &
            1741                                                     - 3.D0 * vtmp0(:,ADM_kmin+1,:,I_TEM) &
            1742                                                     + 1.D0 * vtmp0(:,ADM_kmin+2,:,I_TEM)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1743     1  pp               do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1744     1  pp   8v             vtmp0(:,ADM_kmin-1,:,vmax+nq) = 3.D0 * vtmp0(:,ADM_kmin  ,:,vmax+nq) &
            1745     1                                                    - 3.D0 * vtmp0(:,ADM_kmin+1,:,vmax+nq) &
            1746     1                                                    + 1.D0 * vtmp0(:,ADM_kmin+2,:,vmax+nq)
            1747     1   p               enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1748        pp    v          vtmp0(:,ADM_kmin  ,:,I_W  ) = 0.D0
            1749                     
            1750                         !--- top boundary
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1751        pp   8v          vtmp0(:,ADM_kmax+1,:,I_RHO) = 3.D0 * vtmp0(:,ADM_kmax  ,:,I_RHO) &
            1752                                                     - 3.D0 * vtmp0(:,ADM_kmax-1,:,I_RHO) &
            1753                                                     + 1.D0 * vtmp0(:,ADM_kmax-2,:,I_RHO)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1754        pp   8v          vtmp0(:,ADM_kmax+1,:,I_VX ) = vtmp0(:,ADM_kmax,:,I_VX)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1755        pp   8v          vtmp0(:,ADM_kmax+1,:,I_VY ) = vtmp0(:,ADM_kmax,:,I_VY)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 3
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1756        pp   6v          vtmp0(:,ADM_kmax+1,:,I_VZ ) = vtmp0(:,ADM_kmax,:,I_VZ)
            1757         p   6v          vtmp0(:,ADM_kmax+1,:,I_TEM) = 3.D0 * vtmp0(:,ADM_kmax  ,:,I_TEM) &
            1758                                                     - 3.D0 * vtmp0(:,ADM_kmax-1,:,I_TEM) &
            1759                                                     + 1.D0 * vtmp0(:,ADM_kmax-2,:,I_TEM)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1760     1  pp               do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1761     1  pp   8v             vtmp0(:,ADM_kmax+1,:,nq+vmax) = 3.D0 * vtmp0(:,ADM_kmax  ,:,nq+vmax) &
            1762     1                                                    - 3.D0 * vtmp0(:,ADM_kmax-1,:,nq+vmax) &
            1763     1                                                    + 1.D0 * vtmp0(:,ADM_kmax-2,:,nq+vmax)
            1764     1   p               enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1765        pp    v          vtmp0(:,ADM_kmax+1,:,I_W  ) = 0.D0
            1766                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1767     1  pp               do l = 1, ADM_lall
            1768     2   p                  do p = 1, 2
            1769     3   p                     do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 206
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1770     3  pp   2v                   vtmp2(:,k,l,I_RHO) = ( ( vtmp0(:,k+1,l,I_RHO) - vtmp0(:,k  ,l,I_RHO) ) * GRD_rdgzh(k+1) &
            1771     3                                                 - ( vtmp0(:,k  ,l,I_RHO) - vtmp0(:,k-1,l,I_RHO) ) * GRD_rdgzh(k)   &
            1772     3                                                 ) * GRD_rdgz(k)
            1773     3   p   2v                   vtmp2(:,k,l,I_VX ) = ( ( vtmp0(:,k+1,l,I_VX ) - vtmp0(:,k  ,l,I_VX ) ) * GRD_rdgzh(k+1) &
            1774     3                                                 - ( vtmp0(:,k  ,l,I_VX ) - vtmp0(:,k-1,l,I_VX ) ) * GRD_rdgzh(k)   &
            1775     3                                                 ) * GRD_rdgz(k)
            1776     3   p   2v                   vtmp2(:,k,l,I_VY ) = ( ( vtmp0(:,k+1,l,I_VY ) - vtmp0(:,k  ,l,I_VY ) ) * GRD_rdgzh(k+1) &
            1777     3                                                 - ( vtmp0(:,k  ,l,I_VY ) - vtmp0(:,k-1,l,I_VY ) ) * GRD_rdgzh(k)   &
            1778     3                                                 ) * GRD_rdgz(k)
            1779     3   p   2v                   vtmp2(:,k,l,I_VZ ) = ( ( vtmp0(:,k+1,l,I_VZ ) - vtmp0(:,k  ,l,I_VZ ) ) * GRD_rdgzh(k+1) &
            1780     3                                                 - ( vtmp0(:,k  ,l,I_VZ ) - vtmp0(:,k-1,l,I_VZ ) ) * GRD_rdgzh(k)   &
            1781     3                                                 ) * GRD_rdgz(k)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 667
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1782     3  pp   6v                   vtmp2(:,k,l,I_TEM) = ( ( vtmp0(:,k+1,l,I_TEM) - vtmp0(:,k  ,l,I_TEM) ) * GRD_rdgzh(k+1) &
            1783     3                                                 - ( vtmp0(:,k  ,l,I_TEM) - vtmp0(:,k-1,l,I_TEM) ) * GRD_rdgzh(k)   &
            1784     3                                                 ) * GRD_rdgz(k)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<< Loop-information  End >>>
            1785     4  pp                        do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1786     4   p   6v                      vtmp2(:,k,l,nq+vmax) = ( ( vtmp0(:,k+1,l,nq+vmax) - vtmp0(:,k  ,l,nq+vmax) ) * GRD_rdgzh(k+1) &
            1787     4                                                      - ( vtmp0(:,k  ,l,nq+vmax) - vtmp0(:,k-1,l,nq+vmax) ) * GRD_rdgzh(k)   &
            1788     4                                                      )  * GRD_rdgz(k)
            1789     4   p                        enddo
            1790     3   p                     enddo
            1791     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<< Loop-information  End >>>
            1792     3  pp                     do k = ADM_kmin+1, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1793     3   p   6v                   vtmp2(:,k,l,I_W) = ( ( vtmp0(:,k+1,l,I_W) - vtmp0(:,k  ,l,I_W) ) * GRD_rdgz(k)   &
            1794     3                                               - ( vtmp0(:,k  ,l,I_W) - vtmp0(:,k-1,l,I_W) ) * GRD_rdgz(k-1) &
            1795     3                                               ) * GRD_rdgzh(k)
            1796     3   p                     enddo
            1797     2               
            1798     3   p                     if ( p == 1 ) then
            1799     3                            !--- bottom boundary
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 942
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1800     3  pp   8v                   vtmp2(:,ADM_kmin-1,l,I_RHO) = vtmp2(:,ADM_kmin,l,I_RHO) * 2.D0 - vtmp2(:,ADM_kmin+1,l,I_RHO)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1801     3  pp   8v                   vtmp2(:,ADM_kmin-1,l,I_VX ) = vtmp2(:,ADM_kmin,l,I_VX )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1802     3  pp   8v                   vtmp2(:,ADM_kmin-1,l,I_VY ) = vtmp2(:,ADM_kmin,l,I_VY )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 696
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1803     3  pp   8v                   vtmp2(:,ADM_kmin-1,l,I_VZ ) = vtmp2(:,ADM_kmin,l,I_VZ )
            1804     3   p   8v                   vtmp2(:,ADM_kmin-1,l,I_TEM) = vtmp2(:,ADM_kmin,l,I_TEM) * 2.D0 - vtmp2(:,ADM_kmin+1,l,I_TEM)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<< Loop-information  End >>>
            1805     4  pp                        do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1806     4   p   8v                      vtmp2(:,ADM_kmin-1,l,nq+vmax) = 2.D0 * vtmp2(:,ADM_kmin,l,nq+vmax) - vtmp2(:,ADM_kmin+1,l,nq+vmax)
            1807     4   p                        enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1808     3  pp   8v                   vtmp2(:,ADM_kmin,l,I_W) = vtmp2(:,ADM_kmin+1,l,I_W)
            1809     3               
            1810     3                            !--- top boundary
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 942
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1811     3  pp   8v                   vtmp2(:,ADM_kmax+1,l,I_RHO) = vtmp2(:,ADM_kmax,l,I_RHO) * 2.D0 - vtmp2(:,ADM_kmax-1,l,I_RHO)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1812     3  pp   8v                   vtmp2(:,ADM_kmax+1,l,I_VX ) = vtmp2(:,ADM_kmax,l,I_VX )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1813     3  pp   8v                   vtmp2(:,ADM_kmax+1,l,I_VY ) = vtmp2(:,ADM_kmax,l,I_VY )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 696
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1814     3  pp   8v                   vtmp2(:,ADM_kmax+1,l,I_VZ ) = vtmp2(:,ADM_kmax,l,I_VZ )
            1815     3   p   8v                   vtmp2(:,ADM_kmax+1,l,I_TEM) = vtmp2(:,ADM_kmax,l,I_TEM) * 2.D0 - vtmp2(:,ADM_kmax-1,l,I_TEM)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<< Loop-information  End >>>
            1816     4  pp                        do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1817     4   p   8v                      vtmp2(:,ADM_kmax+1,l,nq+vmax) = 2.D0 * vtmp2(:,ADM_kmax,l,nq+vmax) - vtmp2(:,ADM_kmax-1,l,nq+vmax)
            1818     4   p                        enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1819     3  pp   8v                   vtmp2(:,ADM_kmax+1,l,I_W) = vtmp2(:,ADM_kmax,l,I_W)
            1820     3               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1821     3  pp   8v                   vtmp0(:,:,l,:) = vtmp2(:,:,l,:)
            1822     3   p                     elseif( p == 2 ) then
            1823     3                            !--- bottom boundary
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1824     3  pp   8v                   vtmp2(:,ADM_kmin-1,l,I_RHO) = vtmp2(:,ADM_kmin,l,I_RHO)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1825     3  pp   8v                   vtmp2(:,ADM_kmin-1,l,I_VX ) = vtmp2(:,ADM_kmin,l,I_VX )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1826     3  pp   8v                   vtmp2(:,ADM_kmin-1,l,I_VY ) = vtmp2(:,ADM_kmin,l,I_VY )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 889
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1827     3  pp   8v                   vtmp2(:,ADM_kmin-1,l,I_VZ ) = vtmp2(:,ADM_kmin,l,I_VZ )
            1828     3   p   8v                   vtmp2(:,ADM_kmin-1,l,I_TEM) = vtmp2(:,ADM_kmin,l,I_TEM)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<< Loop-information  End >>>
            1829     4  pp                        do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1830     4   p   8v                      vtmp2(:,ADM_kmin-1,l,nq+vmax) = vtmp2(:,ADM_kmin,l,nq+vmax)
            1831     4   p                        enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1832     3  pp   8v                   vtmp2(:,ADM_kmin,l,I_W) = vtmp2(:,ADM_kmin+1,l,I_W)
            1833     3               
            1834     3                            !--- top boundary
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1835     3  pp   8v                   vtmp2(:,ADM_kmax+1,l,I_RHO) = vtmp2(:,ADM_kmax,l,I_RHO)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1836     3  pp   8v                   vtmp2(:,ADM_kmax+1,l,I_VX ) = vtmp2(:,ADM_kmax,l,I_VX )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1837     3  pp   8v                   vtmp2(:,ADM_kmax+1,l,I_VY ) = vtmp2(:,ADM_kmax,l,I_VY )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 889
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1838     3  pp   8v                   vtmp2(:,ADM_kmax+1,l,I_VZ ) = vtmp2(:,ADM_kmax,l,I_VZ )
            1839     3   p   8v                   vtmp2(:,ADM_kmax+1,l,I_TEM) = vtmp2(:,ADM_kmax,l,I_TEM)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<< Loop-information  End >>>
            1840     4  pp                        do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1841     4   p   8v                      vtmp2(:,ADM_kmax+1,l,nq+vmax) = vtmp2(:,ADM_kmax,l,nq+vmax)
            1842     4   p                        enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1843     3  pp   8v                   vtmp2(:,ADM_kmax+1,l,I_W) = vtmp2(:,ADM_kmax,l,I_W)
            1844     3               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1845     3  pp   8v                   vtmp0(:,:,l,:) = vtmp2(:,:,l,:)
            1846     3   p                     endif
            1847     2   p                  enddo
            1848     1               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 4
                                   <<<      flux: 4
                                   <<< Loop-information  End >>>
            1849     2   p                  do k = ADM_kmin, ADM_kmax+1
            1850     2   p                     coef = Kv_coef_h(k) * GRD_rdgzh(k)
            1851     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 226
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 4
                                   <<<      flux: 4
                                   <<< Loop-information  End >>>
            1852     2  pp   4v                flux(:,k,l,I_RHO) = coef * ( vtmp0(:,k,l,I_RHO)-vtmp0(:,k-1,l,I_RHO) ) * VMTR_GSGAM2H(:,k,l)
            1853     2   p   4v                flux(:,k,l,I_VX ) = coef * ( vtmp0(:,k,l,I_VX )-vtmp0(:,k-1,l,I_VX ) ) * rhog_h(:,k,l)
            1854     2   p   4v                flux(:,k,l,I_VY ) = coef * ( vtmp0(:,k,l,I_VY )-vtmp0(:,k-1,l,I_VY ) ) * rhog_h(:,k,l)
            1855     2   p   4v                flux(:,k,l,I_VZ ) = coef * ( vtmp0(:,k,l,I_VZ )-vtmp0(:,k-1,l,I_VZ ) ) * rhog_h(:,k,l)
            1856     2   p   4v                flux(:,k,l,I_TEM) = coef * ( vtmp0(:,k,l,I_TEM)-vtmp0(:,k-1,l,I_TEM) ) * rhog_h(:,k,l) * CNST_CV
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<< Loop-information  End >>>
            1857     3  pp                     do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1858     3   p   8v                   flux(:,k,l,nq+vmax) = coef * ( vtmp0(:,k,l,nq+vmax) - vtmp0(:,k-1,l,nq+vmax) )
            1859     3   p                     enddo
            1860     2   p                  enddo
            1861     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<< Loop-information  End >>>
            1862     2  pp                  do k = ADM_kmin, ADM_kmax
            1863     2   p                     coef = Kv_coef(k) * GRD_rdgz(k)
            1864     2               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1865     2   p   6v                flux(:,k,l,I_W) = ( vtmp0(:,k+1,l,I_W)-vtmp0(:,k,l,I_W) ) * rho(:,k,l) * VMTR_GSGAM2(:,k,l)
            1866     2   p                  enddo
            1867     1               
            1868     1                      !--- update tendency
            1869     2   p                  do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 762
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1870     2  pp   8v                frhog    (:,k,l) = frhog    (:,k,l) + ( flux(:,k+1,l,I_RHO) - flux(:,k,l,I_RHO) ) * GRD_rdgz(k)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 762
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1871     2  pp   8v                frhogvx  (:,k,l) = frhogvx  (:,k,l) + ( flux(:,k+1,l,I_VX ) - flux(:,k,l,I_VX ) ) * GRD_rdgz(k)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 762
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1872     2  pp   8v                frhogvy  (:,k,l) = frhogvy  (:,k,l) + ( flux(:,k+1,l,I_VY ) - flux(:,k,l,I_VY ) ) * GRD_rdgz(k)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 445
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1873     2  pp   6v                frhogvz  (:,k,l) = frhogvz  (:,k,l) + ( flux(:,k+1,l,I_VZ ) - flux(:,k,l,I_VZ ) ) * GRD_rdgz(k)
            1874     2   p   6v                frhoge   (:,k,l) = frhoge   (:,k,l) + ( flux(:,k+1,l,I_TEM) - flux(:,k,l,I_TEM) ) * GRD_rdgz(k)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 762
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1875     2  pp   8v                frhogetot(:,k,l) = frhogetot(:,k,l) + ( flux(:,k+1,l,I_TEM) - flux(:,k,l,I_TEM) ) * GRD_rdgz(k)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<< Loop-information  End >>>
            1876     3  pp                     do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1877     3   p   8v                   frhogq(:,k,l,nq) = frhogq(:,k,l,nq) + ( flux(:,k+1,l,nq+vmax) - flux(:,k,l,nq+vmax) ) * GRD_rdgz(k)
            1878     3   p                     enddo
            1879     2   p                  enddo
            1880     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<< Loop-information  End >>>
            1881     2  pp                  do k = ADM_kmin+1, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1882     2   p   8v                frhogw(:,k,l) = frhogw(:,k,l) + ( flux(:,k,l,I_W) - flux(:,k-1,l,I_W) ) * GRD_rdgzh(k)
            1883     2   p                  enddo
            1884     1   p               enddo
            1885                     
            1886     1                   if ( ADM_prc_me == ADM_prc_pl ) then
            1887     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1888     1  pp   6v             vtmp0_pl(:,:,:,I_RHO) = rho_pl(:,:,:)
            1889     1   p   6v             vtmp0_pl(:,:,:,I_VX ) = vx_pl (:,:,:)
            1890     1   p   6v             vtmp0_pl(:,:,:,I_VY ) = vy_pl (:,:,:)
            1891     1   p   6v             vtmp0_pl(:,:,:,I_VZ ) = vz_pl (:,:,:)
            1892     1   p   6v             vtmp0_pl(:,:,:,I_TEM) = tem_pl(:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1893     2  pp                  do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1894     2  pp   8v                vtmp0_pl(:,:,:,vmax+nq) = rho_pl(:,:,:) * q_pl(:,:,:,nq)
            1895     2   p                  enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1896     1  pp   8v             vtmp0_pl(:,:,:,I_W) = w_pl(:,:,:)
            1897     1               
            1898     1                      !--- bottom boundary
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1899     1  pp   8v             vtmp0_pl(:,ADM_kmin-1,:,I_RHO) = 3.D0 * vtmp0_pl(:,ADM_kmin  ,:,I_RHO) &
            1900     1                                                     - 3.D0 * vtmp0_pl(:,ADM_kmin+1,:,I_RHO) &
            1901     1                                                     + 1.D0 * vtmp0_pl(:,ADM_kmin+2,:,I_RHO)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1902     1  pp   8v             vtmp0_pl(:,ADM_kmin-1,:,I_VX ) = vtmp0_pl(:,ADM_kmin,:,I_VX)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1903     1  pp   8v             vtmp0_pl(:,ADM_kmin-1,:,I_VY ) = vtmp0_pl(:,ADM_kmin,:,I_VY)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 3
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1904     1  pp   6v             vtmp0_pl(:,ADM_kmin-1,:,I_VZ ) = vtmp0_pl(:,ADM_kmin,:,I_VZ)
            1905     1   p   6v             vtmp0_pl(:,ADM_kmin-1,:,I_TEM) = 3.D0 * vtmp0_pl(:,ADM_kmin  ,:,I_TEM) &
            1906     1                                                     - 3.D0 * vtmp0_pl(:,ADM_kmin+1,:,I_TEM) &
            1907     1                                                     + 1.D0 * vtmp0_pl(:,ADM_kmin+2,:,I_TEM)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1908     2  pp                  do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1909     2  pp   8v                vtmp0_pl(:,ADM_kmin-1,:,vmax+nq) = 3.D0 * vtmp0_pl(:,ADM_kmin  ,:,vmax+nq) &
            1910     2                                                          - 3.D0 * vtmp0_pl(:,ADM_kmin+1,:,vmax+nq) &
            1911     2                                                          + 1.D0 * vtmp0_pl(:,ADM_kmin+2,:,vmax+nq)
            1912     2   p                  enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1913     1  pp    v             vtmp0_pl(:,ADM_kmin,:,I_W) = 0.D0
            1914     1               
            1915     1                      !--- top boundary
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1916     1  pp   8v             vtmp0_pl(:,ADM_kmax+1,:,I_RHO) = 3.D0 * vtmp0_pl(:,ADM_kmax  ,:,I_RHO) &
            1917     1                                                     - 3.D0 * vtmp0_pl(:,ADM_kmax-1,:,I_RHO) &
            1918     1                                                     + 1.D0 * vtmp0_pl(:,ADM_kmax-2,:,I_RHO)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1919     1  pp   8v             vtmp0_pl(:,ADM_kmax+1,:,I_VX) = vtmp0_pl(:,ADM_kmax,:,I_VX)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1920     1  pp   8v             vtmp0_pl(:,ADM_kmax+1,:,I_VY) = vtmp0_pl(:,ADM_kmax,:,I_VY)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 3
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1921     1  pp   6v             vtmp0_pl(:,ADM_kmax+1,:,I_VZ) = vtmp0_pl(:,ADM_kmax,:,I_VZ)
            1922     1   p   6v             vtmp0_pl(:,ADM_kmax+1,:,I_TEM) = 3.D0 * vtmp0_pl(:,ADM_kmax  ,:,I_TEM) &
            1923     1                                                     - 3.D0 * vtmp0_pl(:,ADM_kmax-1,:,I_TEM) &
            1924     1                                                     + 1.D0 * vtmp0_pl(:,ADM_kmax-2,:,I_TEM)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1925     2  pp                  do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1926     2  pp   8v                vtmp0_pl(:,ADM_kmax+1,:,nq+vmax) = 3.D0 * vtmp0_pl(:,ADM_kmax  ,:,nq+vmax) &
            1927     2                                                          - 3.D0 * vtmp0_pl(:,ADM_kmax-1,:,nq+vmax) &
            1928     2                                                          + 1.D0 * vtmp0_pl(:,ADM_kmax-2,:,nq+vmax)
            1929     2   p                  enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1930     1  pp    v             vtmp0_pl(:,ADM_kmax+1,:,I_W) = 0.D0
            1931     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1932     2  pp                  do l = 1, ADM_lall
            1933     3   p                     do p = 1, 2
            1934     4   p                        do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 206
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1935     4  pp   2v                      vtmp2_pl(:,k,l,I_RHO) = ( ( vtmp0_pl(:,k+1,l,I_RHO)-vtmp0_pl(:,k,l,I_RHO) ) * GRD_rdgzh(k+1) &
            1936     4                                                       - ( vtmp0_pl(:,k,l,I_RHO)-vtmp0_pl(:,k-1,l,I_RHO) ) * GRD_rdgzh(k) &
            1937     4                                                       ) * GRD_rdgz(k)
            1938     4   p   2v                      vtmp2_pl(:,k,l,I_VX ) = ( ( vtmp0_pl(:,k+1,l,I_VX)-vtmp0_pl(:,k,l,I_VX) ) * GRD_rdgzh(k+1) &
            1939     4                                                       - ( vtmp0_pl(:,k,l,I_VX)-vtmp0_pl(:,k-1,l,I_VX) ) * GRD_rdgzh(k) &
            1940     4                                                       ) * GRD_rdgz(k)
            1941     4   p   2v                      vtmp2_pl(:,k,l,I_VY ) = ( ( vtmp0_pl(:,k+1,l,I_VY)-vtmp0_pl(:,k,l,I_VY) ) * GRD_rdgzh(k+1) &
            1942     4                                                       - ( vtmp0_pl(:,k,l,I_VY)-vtmp0_pl(:,k-1,l,I_VY) ) * GRD_rdgzh(k) &
            1943     4                                                       ) * GRD_rdgz(k)
            1944     4   p   2v                      vtmp2_pl(:,k,l,I_VZ ) = ( ( vtmp0_pl(:,k+1,l,I_VZ)-vtmp0_pl(:,k,l,I_VZ) ) * GRD_rdgzh(k+1) &
            1945     4                                                       - ( vtmp0_pl(:,k,l,I_VZ)-vtmp0_pl(:,k-1,l,I_VZ) ) * GRD_rdgzh(k) &
            1946     4                                                       ) * GRD_rdgz(k)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 667
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1947     4  pp   6v                      vtmp2_pl(:,k,l,I_TEM) = ( ( vtmp0_pl(:,k+1,l,I_TEM)-vtmp0_pl(:,k,l,I_TEM) ) * GRD_rdgzh(k+1) &
            1948     4                                                       - ( vtmp0_pl(:,k,l,I_TEM)-vtmp0_pl(:,k-1,l,I_TEM) ) * GRD_rdgzh(k) &
            1949     4                                                       ) * GRD_rdgz(k)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<< Loop-information  End >>>
            1950     5  pp                           do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1951     5   p   6v                         vtmp2_pl(:,k,l,nq+vmax) = ( ( vtmp0_pl(:,k+1,l,nq+vmax)-vtmp0_pl(:,k,l,nq+vmax) ) * GRD_rdgzh(k+1) &
            1952     5                                                            - ( vtmp0_pl(:,k,l,nq+vmax)-vtmp0_pl(:,k-1,l,nq+vmax) ) * GRD_rdgzh(k) &
            1953     5                                                            )  * GRD_rdgz(k)
            1954     5   p                           enddo
            1955     4   p                        enddo
            1956     3               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<< Loop-information  End >>>
            1957     4  pp                        do k = ADM_kmin+1, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1958     4   p   6v                      vtmp2_pl(:,k,l,I_W) = ( ( vtmp0_pl(:,k+1,l,I_W)-vtmp0_pl(:,k,l,I_W) ) * GRD_rdgz(k) &
            1959     4                                                     - ( vtmp0_pl(:,k,l,I_W)-vtmp0_pl(:,k-1,l,I_W) ) * GRD_rdgz(k-1) &
            1960     4                                                     ) * GRD_rdgzh(k)
            1961     4   p                        enddo
            1962     3               
            1963     4   p                        if(p==1) then
            1964     4                               !--- bottom boundary
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 942
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1965     4  pp   8v                      vtmp2_pl(:,ADM_kmin-1,l,I_RHO)             &
            1966     4                                    = 2.0D0*vtmp2_pl(:,ADM_kmin,l,I_RHO)  &
            1967     4                                    - 1.D0 * vtmp2_pl(:,ADM_kmin+1,l,I_RHO)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1968     4  pp   8v                      vtmp2_pl(:,ADM_kmin-1,l,I_VX) = vtmp2_pl(:,ADM_kmin,l,I_VX)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1969     4  pp   8v                      vtmp2_pl(:,ADM_kmin-1,l,I_VY) = vtmp2_pl(:,ADM_kmin,l,I_VY)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1970     4  pp   8v                      vtmp2_pl(:,ADM_kmin-1,l,I_VZ) = vtmp2_pl(:,ADM_kmin,l,I_VZ)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 696
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1971     4  pp   8v                      vtmp2_pl(:,ADM_kmin-1,l,I_TEM)             &
            1972     4                                    = 2.0D0*vtmp2_pl(:,ADM_kmin,l,I_TEM)  &
            1973     4                                    - 1.D0 * vtmp2_pl(:,ADM_kmin+1,l,I_TEM)
            1974     4   p   8v                      vtmp2_pl(:,ADM_kmin,l,I_W)= vtmp2_pl(:,ADM_kmin+1,l,I_W)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<< Loop-information  End >>>
            1975     5  pp                           do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1976     5   p   8v                         vtmp2_pl(:,ADM_kmin-1,l,nq+vmax)             &
            1977     5                                       = 2.0D0*vtmp2_pl(:,ADM_kmin,l,nq+vmax)  &
            1978     5                                       - 1.D0 * vtmp2_pl(:,ADM_kmin+1,l,nq+vmax)
            1979     5   p                           enddo
            1980     4                               !--- top boundary
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 942
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1981     4  pp   8v                      vtmp2_pl(:,ADM_kmax+1,l,I_RHO)             &
            1982     4                                    = 2.0D0*vtmp2_pl(:,ADM_kmax,l,I_RHO)  &
            1983     4                                    - 1.D0 * vtmp2_pl(:,ADM_kmax-1,l,I_RHO)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1984     4  pp   8v                      vtmp2_pl(:,ADM_kmax+1,l,I_VX) = vtmp2_pl(:,ADM_kmax,l,I_VX)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1985     4  pp   8v                      vtmp2_pl(:,ADM_kmax+1,l,I_VY) = vtmp2_pl(:,ADM_kmax,l,I_VY)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1986     4  pp   8v                      vtmp2_pl(:,ADM_kmax+1,l,I_VZ) = vtmp2_pl(:,ADM_kmax,l,I_VZ)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 696
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1987     4  pp   8v                      vtmp2_pl(:,ADM_kmax+1,l,I_TEM)             &
            1988     4                                    = 2.0D0*vtmp2_pl(:,ADM_kmax,l,I_TEM)  &
            1989     4                                    - 1.D0 * vtmp2_pl(:,ADM_kmax-1,l,I_TEM)
            1990     4   p   8v                      vtmp2_pl(:,ADM_kmax+1,l,I_W) = vtmp2_pl(:,ADM_kmax,l,I_W)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<< Loop-information  End >>>
            1991     5  pp                           do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1992     5   p   8v                         vtmp2_pl(:,ADM_kmax+1,l,nq+vmax)             &
            1993     5                                       = 2.0D0*vtmp2_pl(:,ADM_kmax,l,nq+vmax)  &
            1994     5                                       - 1.D0 * vtmp2_pl(:,ADM_kmax-1,l,nq+vmax)
            1995     5   p                           enddo
            1996     4                               !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1997     4  pp   8v                      vtmp0_pl(:,:,l,:)=vtmp2_pl(:,:,l,:)
            1998     4                               !
            1999     4   p                        else if(p==2) then
            2000     4                               !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2001     4  pp   8v                      vtmp2_pl(:,ADM_kmin-1,l,I_RHO) = vtmp2_pl(:,ADM_kmin,l,I_RHO)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2002     4  pp   8v                      vtmp2_pl(:,ADM_kmin-1,l,I_VX)= vtmp2_pl(:,ADM_kmin,l,I_VX)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2003     4  pp   8v                      vtmp2_pl(:,ADM_kmin-1,l,I_VY)= vtmp2_pl(:,ADM_kmin,l,I_VY)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2004     4  pp   8v                      vtmp2_pl(:,ADM_kmin-1,l,I_VZ)= vtmp2_pl(:,ADM_kmin,l,I_VZ)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 889
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2005     4  pp   8v                      vtmp2_pl(:,ADM_kmin-1,l,I_TEM) = vtmp2_pl(:,ADM_kmin,l,I_TEM)
            2006     4   p   8v                      vtmp2_pl(:,ADM_kmin,l,I_W)= vtmp2_pl(:,ADM_kmin+1,l,I_W)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<< Loop-information  End >>>
            2007     5  pp                           do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2008     5   p   8v                         vtmp2_pl(:,ADM_kmin-1,l,nq+vmax) = vtmp2_pl(:,ADM_kmin,l,nq+vmax)
            2009     5   p                           enddo
            2010     4                               !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2011     4  pp   8v                      vtmp2_pl(:,ADM_kmax+1,l,I_RHO) = vtmp2_pl(:,ADM_kmax,l,I_RHO)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2012     4  pp   8v                      vtmp2_pl(:,ADM_kmax+1,l,I_VX) = vtmp2_pl(:,ADM_kmax,l,I_VX)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2013     4  pp   8v                      vtmp2_pl(:,ADM_kmax+1,l,I_VY) = vtmp2_pl(:,ADM_kmax,l,I_VY)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2014     4  pp   8v                      vtmp2_pl(:,ADM_kmax+1,l,I_VZ) = vtmp2_pl(:,ADM_kmax,l,I_VZ)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 889
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2015     4  pp   8v                      vtmp2_pl(:,ADM_kmax+1,l,I_TEM) = vtmp2_pl(:,ADM_kmax,l,I_TEM)
            2016     4   p   8v                      vtmp2_pl(:,ADM_kmax+1,l,I_W) = vtmp2_pl(:,ADM_kmax,l,I_W)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<< Loop-information  End >>>
            2017     5  pp                           do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2018     5   p   8v                         vtmp2_pl(:,ADM_kmax+1,l,nq+vmax) = vtmp2_pl(:,ADM_kmax,l,nq+vmax)
            2019     5   p                           enddo
            2020     4                               !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2021     4  pp   8v                      vtmp0_pl(:,:,l,:)=vtmp2_pl(:,:,l,:)
            2022     4                               !
            2023     4   p                        end if
            2024     3   p                     enddo
            2025     2                         !
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 4
                                   <<<      flux_pl: 4
                                   <<< Loop-information  End >>>
            2026     3   p                     do k=ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 220
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 4
                                   <<<      flux_pl: 4
                                   <<< Loop-information  End >>>
            2027     3  pp   4v                   flux_pl(:,k,l,I_RHO) = ( vtmp0_pl(:,k,l,I_RHO) - vtmp0_pl(:,k-1,l,I_RHO))&
            2028     3                                 *GRD_rdgzh(k) * VMTR_GSGAM2H_pl(:,k,l)&
            2029     3                                 * Kv_coef_h(k)
            2030     3   p   4v                   flux_pl(:,k,l,I_VX) = (vtmp0_pl(:,k,l,I_VX) - vtmp0_pl(:,k-1,l,I_VX)) &
            2031     3                                 *GRD_rdgzh(k)&
            2032     3                                 *rhog_h_pl(:,k,l) * Kv_coef_h(k)
            2033     3   p   4v                   flux_pl(:,k,l,I_VY) = (vtmp0_pl(:,k,l,I_VY) - vtmp0_pl(:,k-1,l,I_VY)) &
            2034     3                                 *GRD_rdgzh(k)&
            2035     3                                 *rhog_h_pl(:,k,l) * Kv_coef_h(k)
            2036     3   p   4v                   flux_pl(:,k,l,I_VZ) = (vtmp0_pl(:,k,l,I_VZ) - vtmp0_pl(:,k-1,l,I_VZ)) &
            2037     3                                 *GRD_rdgzh(k)&
            2038     3                                 *rhog_h_pl(:,k,l) * Kv_coef_h(k)
            2039     3   p   4v                   flux_pl(:,k,l,I_TEM) = (vtmp0_pl(:,k,l,I_TEM) - vtmp0_pl(:,k-1,l,I_TEM))     &
            2040     3                                 *GRD_rdgzh(k)&
            2041     3                                 *rhog_h_pl(:,k,l) * Kv_coef_h(k) * CNST_CV
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<< Loop-information  End >>>
            2042     4  pp                        do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2043     4   p   8v                      flux_pl(:,k,l,nq+vmax) = ( vtmp0_pl(:,k,l,nq+vmax) - vtmp0_pl(:,k-1,l,nq+vmax))&
            2044     4                                    *GRD_rdgzh(k)&
            2045     4                                    * Kv_coef_h(k)
            2046     4   p                        enddo
            2047     3   p                     enddo
            2048     2                         !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<< Loop-information  End >>>
            2049     3  pp                     do k=ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2050     3   p   6v                   flux_pl(:,k,l,I_W) = (vtmp0_pl(:,k+1,l,I_W) - vtmp0_pl(:,k,l,I_W))    &
            2051     3                                 * GRD_rdgz(k)&
            2052     3                                 *rho_pl(:,k,l) * VMTR_GSGAM2_pl(:,k,l) * Kv_coef(k)
            2053     3   p                     enddo
            2054     2                         !
            2055     2                         !--- update tendency
            2056     3   p                     do k =ADM_kmin,ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 762
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2057     3  pp   8v                   frhog_pl(:,k,l) = frhog_pl(:,k,l) &
            2058     3                                 + (flux_pl(:,k+1,l,I_RHO)-flux_pl(:,k,l,I_RHO))&
            2059     3                                 * GRD_rdgz(k)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 762
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2060     3  pp   8v                   frhogvx_pl(:,k,l) = frhogvx_pl(:,k,l) &
            2061     3                                 + (flux_pl(:,k+1,l,I_VX)-flux_pl(:,k,l,I_VX))&
            2062     3                                 * GRD_rdgz(k)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 762
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2063     3  pp   8v                   frhogvy_pl(:,k,l) = frhogvy_pl(:,k,l) &
            2064     3                                 + (flux_pl(:,k+1,l,I_VY)-flux_pl(:,k,l,I_VY))&
            2065     3                                 * GRD_rdgz(k)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 445
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2066     3  pp   6v                   frhogvz_pl(:,k,l) = frhogvz_pl(:,k,l) &
            2067     3                                 + (flux_pl(:,k+1,l,I_VZ)-flux_pl(:,k,l,I_VZ))&
            2068     3                                 * GRD_rdgz(k)
            2069     3   p   6v                   frhoge_pl(:,k,l) = frhoge_pl(:,k,l) &
            2070     3                                 + (flux_pl(:,k+1,l,I_TEM)-flux_pl(:,k,l,I_TEM))&
            2071     3                                 * GRD_rdgz(k)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 762
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2072     3  pp   8v                   frhogetot_pl(:,k,l) = frhogetot_pl(:,k,l) &
            2073     3                                 + (flux_pl(:,k+1,l,I_TEM)-flux_pl(:,k,l,I_TEM))&
            2074     3                                 * GRD_rdgz(k)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<< Loop-information  End >>>
            2075     4  pp                        do nq = 1, TRC_VMAX
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2076     4   p   8v                      frhogq_pl(:,k,l,nq) = frhogq_pl(:,k,l,nq) &
            2077     4                                    + (flux_pl(:,k+1,l,nq+vmax)-flux_pl(:,k,l,nq+vmax))&
            2078     4                                    * GRD_rdgz(k)
            2079     4   p                        enddo
            2080     3   p                     enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<< Loop-information  End >>>
            2081     3  pp                     do k =ADM_kmin+1,ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2082     3   p   8v                   frhogw_pl(:,k,l) = frhogw_pl(:,k,l) &
            2083     3                                 + (flux_pl(:,k,l,I_W)-flux_pl(:,k-1,l,I_W))&
            2084     3                                 * GRD_rdgzh(k)
            2085     3   p                     enddo
            2086     2   p                  enddo
            2087     1                   end if
            2088                     
            2089                         call OPRT_horizontalize_vec( frhogvx, frhogvx_pl, & !--- [INOUT]
            2090                                                      frhogvy, frhogvy_pl, & !--- [INOUT]
            2091                                                      frhogvz, frhogvz_pl  ) !--- [INOUT]
            2092                     
            2093                         call DEBUG_rapend('++++numfilter_vdiffusion')
            2094                     
            2095                         return
            2096                       end subroutine numfilter_vdiffusion
            2097                     
            2098                       !-----------------------------------------------------------------------------
            2099                       !> 3D divergence damping
            2100                       subroutine numfilter_divdamp( &
            2101                            rhogvx, rhogvx_pl, &
            2102                            rhogvy, rhogvy_pl, &
            2103                            rhogvz, rhogvz_pl, &
            2104                            rhogw,  rhogw_pl,  &
            2105                            gdx,    gdx_pl,    &
            2106                            gdy,    gdy_pl,    &
            2107                            gdz,    gdz_pl,    &
            2108                            gdvz,   gdvz_pl    )
            2109                         use mod_adm, only: &
            2110                            ADM_prc_me,  &
            2111                            ADM_prc_pl,  &
            2112                            ADM_gall,    &
            2113                            ADM_gall_pl, &
            2114                            ADM_kall,    &
            2115                            ADM_kmin,    &
            2116                            ADM_kmax,    &
            2117                            ADM_lall,    &
            2118                            ADM_lall_pl
            2119                         use mod_cnst, only: &
            2120                            CNST_RAIR, &
            2121                            CNST_GAMMA
            2122                         use mod_grd, only:  &
            2123                            GRD_rdgzh
            2124                         use mod_time, only: &
            2125                            TIME_DTS
            2126                         use mod_comm, only: &
            2127                            COMM_data_transfer
            2128                         use mod_oprt, only: &
            2129                            OPRT_horizontalize_vec, &
            2130                            OPRT_divdamp
            2131                         use mod_oprt3d, only: &
            2132                            OPRT3D_divdamp
            2133                         use mod_src, only: &
            2134                            src_flux_convergence, &
            2135                            I_SRC_default
            2136                         implicit none
            2137                     
            2138                         real(8), intent(in)  :: rhogvx   (ADM_gall,   ADM_kall,ADM_lall   ) ! rho*Vx ( gam2 X G^{1/2} )
            2139                         real(8), intent(in)  :: rhogvx_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2140                         real(8), intent(in)  :: rhogvy   (ADM_gall,   ADM_kall,ADM_lall   ) ! rho*Vy ( gam2 X G^{1/2} )
            2141                         real(8), intent(in)  :: rhogvy_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2142                         real(8), intent(in)  :: rhogvz   (ADM_gall,   ADM_kall,ADM_lall   ) ! rho*Vy ( gam2 X G^{1/2} )
            2143                         real(8), intent(in)  :: rhogvz_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2144                         real(8), intent(in)  :: rhogw    (ADM_gall,   ADM_kall,ADM_lall   ) ! rho*w  ( gam2 X G^{1/2} )
            2145                         real(8), intent(in)  :: rhogw_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2146                         real(8), intent(out) :: gdx      (ADM_gall,   ADM_kall,ADM_lall   ) ! (grad div)_x ( gam2 X G^{1/2} )
            2147                         real(8), intent(out) :: gdx_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2148                         real(8), intent(out) :: gdy      (ADM_gall,   ADM_kall,ADM_lall   ) ! (grad div)_x ( gam2 X G^{1/2} )
            2149                         real(8), intent(out) :: gdy_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2150                         real(8), intent(out) :: gdz      (ADM_gall,   ADM_kall,ADM_lall   ) ! (grad div)_x ( gam2 X G^{1/2} )
            2151                         real(8), intent(out) :: gdz_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2152                         real(8), intent(out) :: gdvz     (ADM_gall,   ADM_kall,ADM_lall   ) ! (grad div)_x ( gam2 X G^{1/2} )
            2153                         real(8), intent(out) :: gdvz_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2154                     
            2155                         real(8) :: vtmp    (ADM_gall,   ADM_kall,ADM_lall   ,3)
            2156                         real(8) :: vtmp_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl,3)
            2157                         real(8) :: vtmp2   (ADM_gall,   ADM_kall,ADM_lall   ,3)
            2158                         real(8) :: vtmp2_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl,3)
            2159                     
            2160                         real(8) :: cnv     (ADM_gall,   ADM_kall,ADM_lall   )
            2161                         real(8) :: cnv_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2162                     
            2163                         integer :: k, l, p
            2164                         !---------------------------------------------------------------------------
            2165                     
            2166                         call DEBUG_rapstart('++++numfilter_divdamp')
            2167                     
            2168     1                   if ( .NOT. NUMFILTER_DOdivdamp ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2169     1  pp    v             gdx    (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2170     1  pp    v             gdx_pl (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2171     1  pp    v             gdy    (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2172     1  pp    v             gdy_pl (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2173     1  pp    v             gdz    (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2174     1  pp    v             gdz_pl (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2175     1  pp    v             gdvz   (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2176     1  pp    v             gdvz_pl(:,:,:) = 0.D0
            2177     1                      call DEBUG_rapend('++++numfilter_divdamp')
            2178     1                      return
            2179     1                   endif
            2180                     
            2181                         !--- 3D divergence divdamp
            2182                         call OPRT3D_divdamp( vtmp2(:,:,:,1), vtmp2_pl(:,:,:,1), & !--- [OUT]
            2183                                              vtmp2(:,:,:,2), vtmp2_pl(:,:,:,2), & !--- [OUT]
            2184                                              vtmp2(:,:,:,3), vtmp2_pl(:,:,:,3), & !--- [OUT]
            2185                                              rhogvx(:,:,:),  rhogvx_pl(:,:,:),  & !--- [IN]
            2186                                              rhogvy(:,:,:),  rhogvy_pl(:,:,:),  & !--- [IN]
            2187                                              rhogvz(:,:,:),  rhogvz_pl(:,:,:),  & !--- [IN]
            2188                                              rhogw (:,:,:),  rhogw_pl (:,:,:)   ) !--- [IN]
            2189                     
            2190     1                   if ( lap_order_divdamp > 1 ) then
            2191     2                      do p = 1, lap_order_divdamp-1
            2192     2               
            2193     2                         call COMM_data_transfer( vtmp2, vtmp2_pl )
            2194     2               
            2195     2                         !--- note : sign changes
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2196     2  pp   8v                vtmp   (:,:,:,:) = -vtmp2   (:,:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2197     2  pp   8v                vtmp_pl(:,:,:,:) = -vtmp2_pl(:,:,:,:)
            2198     2               
            2199     2                         !--- 2D dinvergence divdamp
            2200     2                         call OPRT_divdamp( vtmp2(:,:,:,1), vtmp2_pl(:,:,:,1), & !--- [OUT]
            2201     2                                            vtmp2(:,:,:,2), vtmp2_pl(:,:,:,2), & !--- [OUT]
            2202     2                                            vtmp2(:,:,:,3), vtmp2_pl(:,:,:,3), & !--- [OUT]
            2203     2                                            vtmp (:,:,:,1), vtmp_pl (:,:,:,1), & !--- [IN]
            2204     2                                            vtmp (:,:,:,2), vtmp_pl (:,:,:,2), & !--- [IN]
            2205     2                                            vtmp (:,:,:,3), vtmp_pl (:,:,:,3)  ) !--- [IN]
            2206     2                      enddo ! lap_order
            2207     1                   endif
            2208                     
            2209                         !--- X coeffcient
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2210        pp   6v          gdx(:,:,:) = divdamp_coef(:,:,:) * vtmp2(:,:,:,1)
            2211         p   6v          gdy(:,:,:) = divdamp_coef(:,:,:) * vtmp2(:,:,:,2)
            2212         p   6v          gdz(:,:,:) = divdamp_coef(:,:,:) * vtmp2(:,:,:,3)
            2213                     
            2214     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2215     1  pp   6v             gdx_pl(:,:,:) = divdamp_coef_pl(:,:,:) * vtmp2_pl(:,:,:,1)
            2216     1   p   6v             gdy_pl(:,:,:) = divdamp_coef_pl(:,:,:) * vtmp2_pl(:,:,:,2)
            2217     1   p   6v             gdz_pl(:,:,:) = divdamp_coef_pl(:,:,:) * vtmp2_pl(:,:,:,3)
            2218     1                   endif
            2219                     
            2220                         call OPRT_horizontalize_vec( gdx(:,:,:), gdx_pl(:,:,:), & !--- [INOUT]
            2221                                                      gdy(:,:,:), gdy_pl(:,:,:), & !--- [INOUT]
            2222                                                      gdz(:,:,:), gdz_pl(:,:,:)  ) !--- [INOUT]
            2223                     
            2224     1                   if ( NUMFILTER_DOdivdamp_v ) then
            2225     1               
            2226     1                      call src_flux_convergence( rhogvx(:,:,:), rhogvx_pl(:,:,:), & !--- [IN]
            2227     1                                                 rhogvy(:,:,:), rhogvy_pl(:,:,:), & !--- [IN]
            2228     1                                                 rhogvz(:,:,:), rhogvz_pl(:,:,:), & !--- [IN]
            2229     1                                                 rhogw (:,:,:), rhogw_pl (:,:,:), & !--- [IN]
            2230     1                                                 cnv   (:,:,:), cnv_pl   (:,:,:), & !--- [OUT]
            2231     1                                                 I_SRC_default                    ) !--- [IN]
            2232     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2233     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<< Loop-information  End >>>
            2234     3  pp                     do k = ADM_kmin+1, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2235     3   p   8v                   gdvz(:,k,l) = divdamp_coef_v * ( cnv(:,k,l) - cnv(:,k-1,l) ) * GRD_rdgzh(k)
            2236     3   p                     enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1231
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2237     2  pp   8v                gdvz(:,ADM_kmin  ,l) = 0.D0
            2238     2   p   8v                gdvz(:,ADM_kmax+1,l) = 0.D0
            2239     2   p                  enddo
            2240     1               
            2241     2                      if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2242     3  pp                     do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<< Loop-information  End >>>
            2243     4  pp                        do k = ADM_kmin+1, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2244     4   p   8v                      gdvz_pl(:,k,l) = divdamp_coef_v * ( cnv_pl(:,k,l) - cnv_pl(:,k-1,l) ) * GRD_rdgzh(k)
            2245     4   p                        enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1231
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2246     3  pp   8v                   gdvz_pl(:,ADM_kmin  ,l) = 0.D0
            2247     3   p   8v                   gdvz_pl(:,ADM_kmax+1,l) = 0.D0
            2248     3   p                     enddo
            2249     2                      endif
            2250     1                   else
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2251     1  pp    v             gdvz   (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2252     1  pp    v             gdvz_pl(:,:,:) = 0.D0
            2253     1                   endif
            2254                     
            2255                         call DEBUG_rapend('++++numfilter_divdamp')
            2256                     
            2257                         return
            2258                       end subroutine numfilter_divdamp
            2259                     
            2260                       !-----------------------------------------------------------------------------
            2261                       !> 2D dinvergence divdamp
            2262                       subroutine numfilter_divdamp_2d( &
            2263                            rhogvx, rhogvx_pl, &
            2264                            rhogvy, rhogvy_pl, &
            2265                            rhogvz, rhogvz_pl, &
            2266                            gdx,    gdx_pl,    &
            2267                            gdy,    gdy_pl,    &
            2268                            gdz,    gdz_pl     )
            2269                         use mod_adm, only: &
            2270                            ADM_prc_me,  &
            2271                            ADM_prc_pl,  &
            2272                            ADM_gall,    &
            2273                            ADM_gall_pl, &
            2274                            ADM_kall,    &
            2275                            ADM_lall,    &
            2276                            ADM_lall_pl
            2277                         use mod_comm, only: &
            2278                            COMM_data_transfer
            2279                         use mod_oprt, only: &
            2280                            OPRT_horizontalize_vec, &
            2281                            OPRT_divdamp
            2282                         implicit none
            2283                     
            2284                         real(8), intent(in)  :: rhogvx   (ADM_gall,   ADM_kall,ADM_lall   )
            2285                         real(8), intent(in)  :: rhogvx_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2286                         real(8), intent(in)  :: rhogvy   (ADM_gall,   ADM_kall,ADM_lall   )
            2287                         real(8), intent(in)  :: rhogvy_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2288                         real(8), intent(in)  :: rhogvz   (ADM_gall,   ADM_kall,ADM_lall   )
            2289                         real(8), intent(in)  :: rhogvz_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2290                     
            2291                         real(8), intent(out) :: gdx      (ADM_gall,   ADM_kall,ADM_lall   )
            2292                         real(8), intent(out) :: gdx_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2293                         real(8), intent(out) :: gdy      (ADM_gall,   ADM_kall,ADM_lall   )
            2294                         real(8), intent(out) :: gdy_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2295                         real(8), intent(out) :: gdz      (ADM_gall,   ADM_kall,ADM_lall   )
            2296                         real(8), intent(out) :: gdz_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2297                     
            2298                         real(8) :: vtmp    (ADM_gall,   ADM_kall,ADM_lall   ,3)
            2299                         real(8) :: vtmp_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl,3)
            2300                         real(8) :: vtmp2   (ADM_gall,   ADM_kall,ADM_lall   ,3)
            2301                         real(8) :: vtmp2_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl,3)
            2302                     
            2303                         integer :: p
            2304                         !---------------------------------------------------------------------------
            2305                     
            2306                         call DEBUG_rapstart('++++numfilter_divdamp_2d')
            2307                     
            2308     1                   if ( .NOT. NUMFILTER_DOdivdamp_2d ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2309     1  pp    v             gdx   (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2310     1  pp    v             gdx_pl(:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2311     1  pp    v             gdy   (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2312     1  pp    v             gdy_pl(:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2313     1  pp    v             gdz   (:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2314     1  pp    v             gdz_pl(:,:,:) = 0.D0
            2315     1                      call DEBUG_rapend('++++numfilter_divdamp_2d')
            2316     1                      return
            2317     1                   endif
            2318                     
            2319                         !--- 2D dinvergence divdamp
            2320                         call OPRT_divdamp( vtmp2(:,:,:,1), vtmp2_pl(:,:,:,1), & !--- [OUT]
            2321                                            vtmp2(:,:,:,2), vtmp2_pl(:,:,:,2), & !--- [OUT]
            2322                                            vtmp2(:,:,:,3), vtmp2_pl(:,:,:,3), & !--- [OUT]
            2323                                            rhogvx(:,:,:),  rhogvx_pl(:,:,:),  & !--- [IN]
            2324                                            rhogvy(:,:,:),  rhogvy_pl(:,:,:),  & !--- [IN]
            2325                                            rhogvz(:,:,:),  rhogvz_pl(:,:,:)   ) !--- [IN]
            2326                     
            2327     1                   if ( lap_order_divdamp_2d > 1 ) then
            2328     2                      do p = 1, lap_order_divdamp_2d-1
            2329     2               
            2330     2                         call COMM_data_transfer(vtmp2,vtmp2_pl)
            2331     2               
            2332     2                         !--- note : sign changes
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2333     2  pp   8v                vtmp   (:,:,:,:) = -vtmp2   (:,:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2334     2  pp   8v                vtmp_pl(:,:,:,:) = -vtmp2_pl(:,:,:,:)
            2335     2               
            2336     2                         !--- 2D dinvergence divdamp
            2337     2                         call OPRT_divdamp( vtmp2(:,:,:,1), vtmp2_pl(:,:,:,1), & !--- [OUT]
            2338     2                                            vtmp2(:,:,:,2), vtmp2_pl(:,:,:,2), & !--- [OUT]
            2339     2                                            vtmp2(:,:,:,3), vtmp2_pl(:,:,:,3), & !--- [OUT]
            2340     2                                            vtmp (:,:,:,1), vtmp_pl (:,:,:,1), & !--- [IN]
            2341     2                                            vtmp (:,:,:,2), vtmp_pl (:,:,:,2), & !--- [IN]
            2342     2                                            vtmp (:,:,:,3), vtmp_pl (:,:,:,3)  ) !--- [IN]
            2343     2               
            2344     2                      enddo ! lap_order
            2345     1                   endif
            2346                     
            2347                         !--- X coeffcient
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2348        pp   6v          gdx(:,:,:) = divdamp_2d_coef(:,:,:) * vtmp2(:,:,:,1)
            2349         p   6v          gdy(:,:,:) = divdamp_2d_coef(:,:,:) * vtmp2(:,:,:,2)
            2350         p   6v          gdz(:,:,:) = divdamp_2d_coef(:,:,:) * vtmp2(:,:,:,3)
            2351                     
            2352     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2353     1  pp   6v             gdx_pl(:,:,:) = divdamp_2d_coef_pl(:,:,:) * vtmp2_pl(:,:,:,1)
            2354     1   p   6v             gdy_pl(:,:,:) = divdamp_2d_coef_pl(:,:,:) * vtmp2_pl(:,:,:,2)
            2355     1   p   6v             gdz_pl(:,:,:) = divdamp_2d_coef_pl(:,:,:) * vtmp2_pl(:,:,:,3)
            2356     1                   endif
            2357                     
            2358                         call OPRT_horizontalize_vec( gdx(:,:,:), gdx_pl(:,:,:), & !--- [INOUT]
            2359                                                      gdy(:,:,:), gdy_pl(:,:,:), & !--- [INOUT]
            2360                                                      gdz(:,:,:), gdz_pl(:,:,:)  ) !--- [INOUT]
            2361                     
            2362                         call DEBUG_rapend('++++numfilter_divdamp_2d')
            2363                     
            2364                         return
            2365                       end subroutine numfilter_divdamp_2d
            2366                     
            2367                       !-----------------------------------------------------------------------------
            2368                       !> smoothing
            2369                       subroutine numfilter_smooth_1var( &
            2370                            s, s_pl )
            2371                         use mod_adm, only: &
            2372                            ADM_prc_me,     &
            2373                            ADM_prc_pl,     &
            2374                            ADM_lall,       &
            2375                            ADM_lall_pl,    &
            2376                            ADM_gall,       &
            2377                            ADM_gall_pl,    &
            2378                            ADM_kall
            2379                         use mod_comm, only: &
            2380                            COMM_data_transfer
            2381                         use mod_gmtr, only: &
            2382                            GMTR_area,    &
            2383                            GMTR_area_pl
            2384                         use mod_oprt, only: &
            2385                            OPRT_laplacian
            2386                         implicit none
            2387                     
            2388                         real(8), intent(inout) :: s   (ADM_gall   ,ADM_kall,ADM_lall   )
            2389                         real(8), intent(inout) :: s_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            2390                     
            2391                         real(8) :: vtmp    (ADM_gall   ,ADM_kall,ADM_lall   ,1)
            2392                         real(8) :: vtmp_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl,1)
            2393                         real(8) :: vtmp2   (ADM_gall   ,ADM_kall,ADM_lall   ,1)
            2394                         real(8) :: vtmp2_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl,1)
            2395                     
            2396                         real(8), parameter :: ggamma_h = 1.D0 / 16.D0 / 10.D0
            2397                         integer, parameter :: itelim = 80
            2398                     
            2399                         integer :: p, ite
            2400                         integer :: k, l
            2401                         !---------------------------------------------------------------------------
            2402                     
            2403     1                   do ite = 1, itelim
            2404     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2405     1  pp   8v             vtmp(:,:,:,1) = s(:,:,:)
            2406     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2407     1  pp    v             vtmp_pl(:,:,:,:) = 0.D0
            2408     1               
            2409     2                      if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2410     2  pp   8v                vtmp_pl(:,:,:,1) = s_pl(:,:,:)
            2411     2                      endif
            2412     1               
            2413     1                      call COMM_data_transfer( vtmp, vtmp_pl )
            2414     1               
            2415     2                      do p = 1, 2
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2416     2  pp    v                vtmp2   (:,:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            2417     2  pp    v                vtmp2_pl(:,:,:,:) = 0.D0
            2418     2               
            2419     2                         call OPRT_laplacian( vtmp2(:,:,:,1), vtmp2_pl(:,:,:,1), & !--- [OUT]
            2420     2                                              vtmp (:,:,:,1), vtmp_pl (:,:,:,1)  ) !--- [IN]
            2421     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2422     2  pp   8v                vtmp   (:,:,:,:) = -vtmp2   (:,:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2423     2  pp   8v                vtmp_pl(:,:,:,:) = -vtmp2_pl(:,:,:,:)
            2424     2               
            2425     2                         call COMM_data_transfer( vtmp, vtmp_pl )
            2426     2                      enddo
            2427     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2428     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<< Loop-information  End >>>
            2429     3  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2430     3   p   8v                s(:,k,l) = s(:,k,l) - ggamma_h * GMTR_area(:,l)**2 * vtmp(:,k,l,1)
            2431     3   p                  enddo
            2432     2   p                  enddo
            2433     1               
            2434     2                      if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2435     3  pp                     do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<< Loop-information  End >>>
            2436     4  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2437     4   p   8v                   s_pl(:,k,l) = s_pl(:,k,l) - ggamma_h * GMTR_area_pl(:,l)**2 * vtmp_pl(:,k,l,1)
            2438     4   p                     enddo
            2439     3   p                     enddo
            2440     2                      endif
            2441     1                   enddo
            2442                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2443        pp   8v          vtmp   (:,:,:,1) = s   (:,:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2444        pp   8v          vtmp_pl(:,:,:,1) = s_pl(:,:,:)
            2445                     
            2446                         call COMM_data_transfer( vtmp, vtmp_pl )
            2447                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2448        pp   8v          s   (:,:,:) = vtmp   (:,:,:,1)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2449        pp   8v          s_pl(:,:,:) = vtmp_pl(:,:,:,1)
            2450                     
            2451                         return
            2452                       end subroutine numfilter_smooth_1var
            2453                     
            2454                       subroutine height_factor( &
            2455                            kdim,          &
            2456                            z,             &
            2457                            z_top,         &
            2458                            z_bottomlimit, &
            2459                            factor         )
            2460                         use mod_cnst, only: &
            2461                            CNST_PI
            2462                         implicit none
            2463                     
            2464                         integer, intent(in)  :: kdim          ! number of vertical grid
            2465                         real(8), intent(in)  :: z(kdim)       ! height [m]
            2466                         real(8), intent(in)  :: z_top         ! height top [m]
            2467                         real(8), intent(in)  :: z_bottomlimit ! bottom limit of the factor [m]
            2468                         real(8), intent(out) :: factor(kdim)  ! height-dependent factor [0-1]
            2469                     
            2470                         real(8) :: sw
            2471                     
            2472                         integer :: k
            2473                         !---------------------------------------------------------------------------
            2474                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 44
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    MULTI-OPERATION FUNCTION
                                   <<< Loop-information  End >>>
            2475     1  pp   8v          do k = 1, kdim
            2476     1   p   8v             sw = 0.5D0 + sign( 0.5D0, z(k)-z_bottomlimit )
            2477     1               
            2478     1   p   8v             factor(k) = sw * 0.5D0 * ( 1.D0 - cos( CNST_PI * (z(k)-z_bottomlimit) / (z_top-z_bottomlimit)) )
            2479     1   p               enddo
            2480                     
            2481                         return
            2482                       end subroutine
            2483                     
            2484                     end module mod_numfilter
            2485                     !-------------------------------------------------------------------------------

 Diagnostic messages: program name(mod_numfilter)
   jwd8220o-i  "nhm/dynamics/mod_numfilter.f90", line 6: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
  Module subprogram name(numfilter_setup)
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 244: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 246: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 296: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 297: Division is changed to multiplication by reciprocal.
  Module subprogram name(numfilter_hdiffusion_setup)
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 445: Invariant expression within loop is moved outside loop.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 452: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 469: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 469: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 476: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 476: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 510: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 510: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 518: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 518: Invariant expression within loop is moved outside loop.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 563: Invariant expression within loop is moved outside loop.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 570: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 589: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 589: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 596: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 596: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 630: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 630: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 637: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 637: Invariant expression within loop is moved outside loop.
  Module subprogram name(numfilter_vdiffusion_setup)
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 691: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 692: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 702: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 703: Division is changed to multiplication by reciprocal.
  Module subprogram name(numfilter_divdamp_setup)
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 790: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 803: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 803: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 809: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 809: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 837: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 837: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 847: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 847: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 870: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(numfilter_divdamp_2d_setup)
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 950: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 963: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 963: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 969: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 969: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 1006: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 1006: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 1014: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 1014: Invariant expression within loop is moved outside loop.
  Module subprogram name(numfilter_rayleigh_damping)
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1104: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1109: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1117: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1122: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1131: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1134: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1142: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1145: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(numfilter_hdiffusion)
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1298: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1308: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 1354: Invariant expression within loop is moved outside loop.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 1355: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 1356: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1356: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1357: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1359: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 1365: Invariant expression within loop is moved outside loop.
   jwd8201o-i  "nhm/dynamics/mod_numfilter.f90", line 1366: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "nhm/dynamics/mod_numfilter.f90", line 1367: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1367: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1368: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1370: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1480: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1482: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1501: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1503: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1579: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1588: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(numfilter_vdiffusion)
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1734: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1740: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1744: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1751: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1757: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1761: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1773: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1776: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1779: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1782: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1786: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1793: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1852: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1853: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1854: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1855: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1856: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1865: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1899: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1905: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1909: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1916: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1922: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1926: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1938: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1941: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1944: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1947: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1951: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 1958: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 2027: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 2030: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 2033: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 2036: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 2039: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 2043: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 2050: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(numfilter_divdamp)
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 2235: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 2244: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(numfilter_smooth_1var)
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 2430: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 2437: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(height_factor)
   jwd8209o-i  "nhm/dynamics/mod_numfilter.f90", line 2478: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 2485
   Statements : 1455
   Stack(byte): 44640
   Prefetch num: 132

 Total information
   Procedures       : 1
   Total lines      : 2485
   Total statements : 1455
   Total stack(byte): 44640
   Total prefetch num: 132


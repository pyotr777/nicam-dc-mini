
 Fujitsu Fortran Version 1.2.0  Mon Dec 21 16:59:50 2015

 Compilation information
   Current directory : /volume1/home/ra000007/a03106/nicam-dc-mini/src
   Source file       : share/mod_vmtr.f90

 Option information
   Command line options : -Kident_mpi -f2004 -Kfast,parallel,auto,ocl,preex,array_private,noalias=s,mfunc=2 -Kparallel_iteration=8,instance=8,dynamic_iteration -Qi -Qt -X03 -Ncompdisp -Koptmsg=1 -Cpp -Kprefetch_cache_level=all,prefetch_iteration_L2=50 -Ksimd -Ntl_notrt -U_FIPP_ -U_FAPP_ -I../src/include -o mod_vmtr.o -c -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -W0,-zmpa=Yignore-intent -I/opt/FJSVtclang/GM-1.2.0-19/lib64
   Cpp options          : -U_FIPP_ -U_FAPP_ -I../src/include -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -I/opt/FJSVtclang/GM-1.2.0-19/lib64 -D__FUJITSU -Dunix -Dsparc -D__sparc__ -D__unix -D__sparc -D__frt_version=700 -D__HPC_ACE__ -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -Dlinux -otmp -D__sparcv9 -D__sparc_v9__ -D__arch64__
   Effective options    : -fi -g0 -AE -Free -O3 -Qi,p,t -X03
                          -x0
                          -KFLTLD -Kadr44 -Knoalias=s -Kauto -Knoautoobjstack
                          -Knocalleralloc -Kdalign -Keval -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kilfunc
                          -Klargepage -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_if -Kloop_fusion
                          -Kloop_interchange -Kloop_nopart_parallel
                          -Kloop_nopart_simd -Kloop_noversioning -Kns
                          -Kmfunc=2 -Kocl -Komitfp -Koptmsg=1 -Kpreex
                          -Kprefetch_conditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_iteration_L2=50 -Kprefetch_nostrong
                          -Kprefetch_strong_L2 -Knoshortloop -Ksimd=1
                          -Knosimd_region_constant -Knostriping -Kswp
                          -Knotemparraystack -Kunroll -Knouxsimd -KNOXFILL
                          -Knoopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_noordered_reduction -Knothreadsafe
                          -Kparallel -Kparallel_nofp_precision
                          -Karray_private -Kdynamic_iteration -Kreduction
                          -Kregion_extension -Kinstance=8
                          -Kparallel_iteration=8
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Ncompdisp
                          -Nnocopyarg -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nline -Nlst -Nlst=i -Nlst=p -Nlst=t
                          -Nnomallocfree -Nnoobsfun -Nquickdbg=noargchk
                          -Nquickdbg=nosubchk -Nquickdbg=noundef -NRnotrap
                          -Nnorecursive -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 Module "mod_vmtr"
  (inc)(line-no.)(nest)(optimize)
               1                     !-------------------------------------------------------------------------------
               2                     !>
               3                     !! Vertical metrics module
               4                     !!
               5                     !! @par Description
               6                     !!         In this module, the vertical metrics is calculated for the
               7                     !!         non-hydrostatic icoshaedral model.
               8                     !!
               9                     !! @author  H.Tomita
              10                     !!
              11                     !! @par History
              12                     !! @li      2004-02-17 (H.Tomita)  Imported from igdc-4.33
              13                     !! @li      2006-08-11 (        )  Trivial bug fix for VMTR_VOLUME in using shallow water model
              14                     !!
              15                     !<
              16                     module mod_vmtr
              17                       !-----------------------------------------------------------------------------
              18                       !
              19                       !++ Used modules
              20                       !
              21                       !-----------------------------------------------------------------------------
              22                       implicit none
              23                       private
              24                       !-----------------------------------------------------------------------------
              25                       !
              26                       !++ Public procedure
              27                       !
              28                       public :: VMTR_setup
              29                     
              30                       !-----------------------------------------------------------------------------
              31                       !
              32                       !++ Public parameters & variables
              33                       !
              34                     
              35                       ! index for VMTR_C2Wfact
              36                       integer, public, parameter :: I_a_GZXH = 1
              37                       integer, public, parameter :: I_b_GZXH = 2
              38                       integer, public, parameter :: I_a_GZYH = 3
              39                       integer, public, parameter :: I_b_GZYH = 4
              40                       integer, public, parameter :: I_a_GZZH = 5
              41                       integer, public, parameter :: I_b_GZZH = 6
              42                     
              43                       !--- gsqrt X gamma^2 at the interger level
              44                       real(8), public, allocatable, save :: VMTR_GSGAM2   (:,:,:)
              45                       real(8), public, allocatable, save :: VMTR_GSGAM2_pl(:,:,:)
              46                     
              47                       !--- 1/(gsqrt X gamma^2) at the interger level
              48                       real(8), public, allocatable, save :: VMTR_RGSGAM2   (:,:,:)
              49                       real(8), public, allocatable, save :: VMTR_RGSGAM2_pl(:,:,:)
              50                     
              51                       !--- gsqrt X gamma^2 at the half-integer level
              52                       real(8), public, allocatable, save :: VMTR_GSGAM2H   (:,:,:)
              53                       real(8), public, allocatable, save :: VMTR_GSGAM2H_pl(:,:,:)
              54                     
              55                       !--- 1/(gsqrt X gamma^2) at the half-integer level
              56                       real(8), public, allocatable, save :: VMTR_RGSGAM2H   (:,:,:)
              57                       real(8), public, allocatable, save :: VMTR_RGSGAM2H_pl(:,:,:)
              58                     
              59                       !--- vector G^z at the half-integer level
              60                       real(8), public, allocatable, save :: VMTR_GZXH   (:,:,:)
              61                       real(8), public, allocatable, save :: VMTR_GZXH_pl(:,:,:)
              62                       real(8), public, allocatable, save :: VMTR_GZYH   (:,:,:)
              63                       real(8), public, allocatable, save :: VMTR_GZYH_pl(:,:,:)
              64                       real(8), public, allocatable, save :: VMTR_GZZH   (:,:,:)
              65                       real(8), public, allocatable, save :: VMTR_GZZH_pl(:,:,:)
              66                     
              67                       !--- vector G^z at the integer level
              68                       real(8), public, allocatable, save :: VMTR_GZX   (:,:,:)
              69                       real(8), public, allocatable, save :: VMTR_GZX_pl(:,:,:)
              70                       real(8), public, allocatable, save :: VMTR_GZY   (:,:,:)
              71                       real(8), public, allocatable, save :: VMTR_GZY_pl(:,:,:)
              72                       real(8), public, allocatable, save :: VMTR_GZZ   (:,:,:)
              73                       real(8), public, allocatable, save :: VMTR_GZZ_pl(:,:,:)
              74                     
              75                       !--- gsqrt X gamma at the half-integer level
              76                       real(8), public, allocatable, save :: VMTR_GSGAMH   (:,:,:)
              77                       real(8), public, allocatable, save :: VMTR_GSGAMH_pl(:,:,:)
              78                     
              79                       !--- 1/gamma at the integer level
              80                       real(8), public, allocatable, save :: VMTR_RGAM   (:,:,:)
              81                       real(8), public, allocatable, save :: VMTR_RGAM_pl(:,:,:)
              82                     
              83                       !--- 1/gamma at the half-integer level
              84                       real(8), public, allocatable, save :: VMTR_RGAMH   (:,:,:)
              85                       real(8), public, allocatable, save :: VMTR_RGAMH_pl(:,:,:)
              86                     
              87                       !--- 1/gamma^2 at the integer level
              88                       real(8), public, allocatable, save :: VMTR_RGAM2   (:,:,:)
              89                       real(8), public, allocatable, save :: VMTR_RGAM2_pl(:,:,:)
              90                     
              91                       !--- gamma^2 at the half-integer level
              92                       real(8), public, allocatable, save :: VMTR_GAM2H   (:,:,:)
              93                       real(8), public, allocatable, save :: VMTR_GAM2H_pl(:,:,:)
              94                     
              95                       !--- gamma^2 at the integer level
              96                       real(8), public, allocatable, save :: VMTR_GAM2   (:,:,:)
              97                       real(8), public, allocatable, save :: VMTR_GAM2_pl(:,:,:)
              98                     
              99                       !--- 1/gamma^2 at the half-integer level
             100                       real(8), public, allocatable, save :: VMTR_RGAM2H   (:,:,:)
             101                       real(8), public, allocatable, save :: VMTR_RGAM2H_pl(:,:,:)
             102                     
             103                       !--- 1/gsqrt at the half-integer level
             104                       real(8), public, allocatable, save :: VMTR_RGSH   (:,:,:)
             105                       real(8), public, allocatable, save :: VMTR_RGSH_pl(:,:,:)
             106                     
             107                       !--- volume at the integer level
             108                       real(8), public, allocatable, save :: VMTR_VOLUME   (:,:,:)
             109                       real(8), public, allocatable, save :: VMTR_VOLUME_pl(:,:,:)
             110                     
             111                       ! [Add] 20120717 H.Yashiro
             112                       !--- geopotential at the integer level
             113                       real(8), public, allocatable, save :: VMTR_PHI   (:,:,:)
             114                       real(8), public, allocatable, save :: VMTR_PHI_pl(:,:,:)
             115                     
             116                       !--- factor for integer to half integer level
             117                       real(8), public, allocatable, save :: VMTR_C2Wfact   (:,:,:,:)
             118                       real(8), public, allocatable, save :: VMTR_C2Wfact_pl(:,:,:,:)
             119                     
             120                       !-----------------------------------------------------------------------------
             121                       !
             122                       !++ Private procedure
             123                       !
             124                       !-----------------------------------------------------------------------------
             125                       !
             126                       !++ Private parameters & variables
             127                       !
             128                     !  logical, private, save :: deep = .true. [mod] 20120704 H.Yashiro
             129                       logical, private, save :: deep = .false.
             130                     
             131                       !-----------------------------------------------------------------------------
             132                     contains
             133                       !-----------------------------------------------------------------------------
             134                       !>
             135                       !> Setup the vertical metrics
             136                       !>
             137                       subroutine VMTR_setup
             138                         use mod_adm, only: &
             139                            ADM_proc_stop, &
             140                            ADM_LOG_FID,   &
             141                            ADM_CTL_FID,   &
             142                            ADM_prc_me,    &
             143                            ADM_prc_pl,    &
             144                            ADM_gall,      &
             145                            ADM_gall_pl,   &
             146                            ADM_lall,      &
             147                            ADM_lall_pl,   &
             148                            ADM_kall,      &
             149                            ADM_kmin,      &
             150                            ADM_kmax,      &
             151                            ADM_KNONE,     &
             152                            ADM_gmin,      &
             153                            ADM_gall_1d
             154                         use mod_cnst, only: &
             155                            CNST_ERADIUS, &
             156                            CNST_EGRAV
             157                         use mod_comm, only: &
             158                            COMM_data_transfer
             159                         use mod_grd, only: &
             160                            GRD_Z,     &
             161                            GRD_ZH,    &
             162                            GRD_vz,    &
             163                            GRD_vz_pl, &
             164                            GRD_dgz,   &
             165                            GRD_dgzh,  &
             166                            GRD_afac,  &
             167                            GRD_bfac,  &
             168                            GRD_grid_type
             169                         use mod_gmtr, only: &
             170                            GMTR_P_AREA,  &
             171                            GMTR_P_var,   &
             172                            GMTR_P_var_pl
             173                     !    use mod_oprt_plane, only: &
             174                     !       OPRT_PLANE_gradient
             175                         use mod_oprt, only: &
             176                            OPRT_gradient,         &
             177                            OPRT_horizontalize_vec
             178                         implicit none
             179                     
             180                         integer, parameter :: var_max = 6
             181                     
             182                         integer, parameter :: JXH     = 1
             183                         integer, parameter :: JYH     = 2
             184                         integer, parameter :: JZH     = 3
             185                         integer, parameter :: JX      = 4
             186                         integer, parameter :: JY      = 5
             187                         integer, parameter :: JZ      = 6
             188                     
             189                         real(8) :: var   (ADM_gall,   ADM_kall,ADM_lall,   var_max)
             190                         real(8) :: var_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl,var_max)
             191                     
             192                         real(8) :: GSQRT    (ADM_gall,   ADM_kall)
             193                         real(8) :: GSQRT_pl (ADM_gall_pl,ADM_kall)
             194                         real(8) :: GSQRTH   (ADM_gall,   ADM_kall)
             195                         real(8) :: GSQRTH_pl(ADM_gall_pl,ADM_kall)
             196                     
             197                         real(8) :: GAM, GAMH
             198                     
             199                         namelist / VMTRPARAM / &
             200                             deep
             201                     
             202                         integer :: ierr
             203                         integer :: n, k, l
             204                         integer :: i, j, suf
             205                         suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
             206                         !---------------------------------------------------------------------------
             207                     
             208                         !--- read parameters
             209                         write(ADM_LOG_FID,*)
             210                         write(ADM_LOG_FID,*) '+++ Module[vmtr]/Category[common share]'
             211                         rewind(ADM_CTL_FID)
             212                         read(ADM_CTL_FID,nml=VMTRPARAM,iostat=ierr)
             213     1                   if ( ierr < 0 ) then
             214     1                      write(ADM_LOG_FID,*) '*** VMTRPARAM is not specified. use default.'
             215     1                   elseif( ierr > 0 ) then
             216     1                      write(*,          *) 'xxx Not appropriate names in namelist VMTRPARAM. STOP.'
             217     1                      write(ADM_LOG_FID,*) 'xxx Not appropriate names in namelist VMTRPARAM. STOP.'
             218     1                      call ADM_proc_stop
             219     1                   endif
             220                         write(ADM_LOG_FID,VMTRPARAM)
             221                     
             222                         !--- initialization
             223                         allocate( VMTR_GSGAM2     (ADM_gall,   ADM_kall,ADM_lall   ) )
             224                         allocate( VMTR_GSGAM2_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             225                     
             226                         allocate( VMTR_RGSGAM2    (ADM_gall,   ADM_kall,ADM_lall   ) )
             227                         allocate( VMTR_RGSGAM2_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             228                     
             229                         allocate( VMTR_GSGAM2H    (ADM_gall,   ADM_kall,ADM_lall   ) )
             230                         allocate( VMTR_GSGAM2H_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             231                     
             232                         allocate( VMTR_RGSGAM2H   (ADM_gall,   ADM_kall,ADM_lall   ) )
             233                         allocate( VMTR_RGSGAM2H_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             234                     
             235                         allocate( VMTR_GSGAMH     (ADM_gall,   ADM_kall,ADM_lall   ) )
             236                         allocate( VMTR_GSGAMH_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             237                     
             238                         allocate( VMTR_GZXH       (ADM_gall,   ADM_kall,ADM_lall   ) )
             239                         allocate( VMTR_GZXH_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             240                     
             241                         allocate( VMTR_GZYH       (ADM_gall,   ADM_kall,ADM_lall   ) )
             242                         allocate( VMTR_GZYH_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             243                     
             244                         allocate( VMTR_GZZH       (ADM_gall,   ADM_kall,ADM_lall   ) )
             245                         allocate( VMTR_GZZH_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             246                     
             247                         allocate( VMTR_GZX        (ADM_gall,   ADM_kall,ADM_lall   ) )
             248                         allocate( VMTR_GZX_pl     (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             249                     
             250                         allocate( VMTR_GZY        (ADM_gall,   ADM_kall,ADM_lall   ) )
             251                         allocate( VMTR_GZY_pl     (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             252                     
             253                         allocate( VMTR_GZZ        (ADM_gall,   ADM_kall,ADM_lall   ) )
             254                         allocate( VMTR_GZZ_pl     (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             255                     
             256                         allocate( VMTR_RGAM       (ADM_gall,   ADM_kall,ADM_lall   ) )
             257                         allocate( VMTR_RGAM_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             258                     
             259                         allocate( VMTR_RGAMH      (ADM_gall,   ADM_kall,ADM_lall   ) )
             260                         allocate( VMTR_RGAMH_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             261                     
             262                         allocate( VMTR_GAM2       (ADM_gall,   ADM_kall,ADM_lall   ) )
             263                         allocate( VMTR_GAM2_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             264                     
             265                         allocate( VMTR_RGAM2      (ADM_gall,   ADM_kall,ADM_lall   ) )
             266                         allocate( VMTR_RGAM2_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             267                     
             268                         allocate( VMTR_GAM2H      (ADM_gall,   ADM_kall,ADM_lall   ) )
             269                         allocate( VMTR_GAM2H_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             270                     
             271                         allocate( VMTR_RGAM2H     (ADM_gall,   ADM_kall,ADM_lall   ) )
             272                         allocate( VMTR_RGAM2H_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             273                     
             274                         allocate( VMTR_RGSH       (ADM_gall,   ADM_kall,ADM_lall   ) )
             275                         allocate( VMTR_RGSH_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             276                     
             277                         allocate( VMTR_VOLUME     (ADM_gall,   ADM_kall,ADM_lall   ) )
             278                         allocate( VMTR_VOLUME_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             279                     
             280                         allocate( VMTR_PHI        (ADM_gall,   ADM_kall,ADM_lall   ) )
             281                         allocate( VMTR_PHI_pl     (ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             282                     
             283                         allocate( VMTR_C2Wfact   (6,ADM_gall,   ADM_kall,ADM_lall   ) )
             284                         allocate( VMTR_C2Wfact_pl(6,ADM_gall_pl,ADM_kall,ADM_lall_pl) )
             285                     
             286                         !--- if 1 layer model( shallow water model ),
             287     1                   if ( ADM_kall == ADM_KNONE ) then
             288     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             289     1  pp   8v             VMTR_VOLUME   (:,:,:) = GMTR_P_var   (:,:,:,GMTR_P_AREA)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             290     1  pp   8v             VMTR_VOLUME_pl(:,:,:) = GMTR_P_var_pl(:,:,:,GMTR_P_AREA)
             291     1               
             292     1                      return
             293     1                   endif
             294                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             295        pp    v          var   (:,:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             296        pp    v          var_pl(:,:,:,:) = 0.D0
             297                     
             298     1                   if ( trim(GRD_grid_type) == 'ON_PLANE' ) then
             299     1               !       --- calculation of Jxh, Jyh, and Jzh
             300     1               !       call OPRT_PLANE_gradient( var   (:,:,:,JXH),   & !--- [OUT]
             301     1               !                                 var   (:,:,:,JYH),   & !--- [OUT]
             302     1               !                                 GRD_vz(:,:,:,GRD_ZH) ) !--- [IN]
             303     1               !       --- calculation of Jx, Jy, and Jz
             304     1               !       call OPRT_PLANE_gradient( var   (:,:,:,JX),   & !--- [OUT]
             305     1               !                                 var   (:,:,:,JY),   & !--- [OUT]
             306     1               !                                 GRD_vz(:,:,:,GRD_Z) ) !--- [IN]
             307     1                   else
             308     1                      !--- calculation of Jxh, Jyh, and Jzh
             309     1                      call OPRT_gradient( var(:,:,:,JXH),       var_pl(:,:,:,JXH),      & !--- [OUT]
             310     1                                          var(:,:,:,JYH),       var_pl(:,:,:,JYH),      & !--- [OUT]
             311     1                                          var(:,:,:,JZH),       var_pl(:,:,:,JZH),      & !--- [OUT]
             312     1                                          GRD_vz(:,:,:,GRD_ZH), GRD_vz_pl(:,:,:,GRD_ZH) ) !--- [IN]
             313     1               
             314     1                      call OPRT_horizontalize_vec( var(:,:,:,JXH), var_pl(:,:,:,JXH), & !--- [INOUT]
             315     1                                                   var(:,:,:,JYH), var_pl(:,:,:,JYH), & !--- [INOUT]
             316     1                                                   var(:,:,:,JZH), var_pl(:,:,:,JZH)  ) !--- [INOUT]
             317     1                      !--- calculation of Jx, Jy, and Jz
             318     1                      call OPRT_gradient( var(:,:,:,JX),       var_pl(:,:,:,JX),      & !--- [OUT]
             319     1                                          var(:,:,:,JY),       var_pl(:,:,:,JY),      & !--- [OUT]
             320     1                                          var(:,:,:,JZ),       var_pl(:,:,:,JZ),      & !--- [OUT]
             321     1                                          GRD_vz(:,:,:,GRD_Z), GRD_vz_pl(:,:,:,GRD_Z) ) !--- [IN]
             322     1               
             323     1                      call OPRT_horizontalize_vec( var(:,:,:,JX), var_pl(:,:,:,JX), & !--- [INOUT]
             324     1                                                   var(:,:,:,JY), var_pl(:,:,:,JY), & !--- [INOUT]
             325     1                                                   var(:,:,:,JZ), var_pl(:,:,:,JZ)  ) !--- [INOUT]
             326     1                   endif
             327                     
             328                         !--- fill HALO
             329                         call COMM_data_transfer( var, var_pl )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             330        pp   6s          var(suf(1,ADM_gall_1d),:,:,:) = var(suf(ADM_gmin,ADM_gmin),:,:,:)
             331         p   6s          var(suf(ADM_gall_1d,1),:,:,:) = var(suf(ADM_gmin,ADM_gmin),:,:,:)
             332                     
             333     1                   do l = 1, ADM_lall
             334     1               
             335     1                      !--- calculation of G^{1/2} at integer points
             336     1                      !---   G^{1/2} = dz/dgz
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 4
                                   <<<      GRD_dgz: 4
                                   <<< Loop-information  End >>>
             337     2  pp                  do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 174
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             338     3  pp   8v             do n = 1, ADM_gall
             339     3   p   8v                GSQRT(n,k) = ( GRD_vz(n,k+1,l,GRD_ZH) - GRD_vz(n,k,l,GRD_ZH) ) / GRD_dgz(k)
             340     3   p   8v             enddo
             341     2   p                  enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 800
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             342     2  pp   8v             do n = 1, ADM_gall
             343     2   p   8v                GSQRT(n,ADM_kmin-1) = GSQRT(n,ADM_kmin)
             344     2   p   8v                GSQRT(n,ADM_kmax+1) = GSQRT(n,ADM_kmax)
             345     2   p   8v             enddo
             346     1               
             347     1                      !--- calculation of G^{1/2} at half points
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 4
                                   <<<      GRD_dgzh: 4
                                   <<< Loop-information  End >>>
             348     2  pp                  do k = ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 174
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             349     3  pp   8v             do n = 1, ADM_gall
             350     3   p   8v                GSQRTH(n,k) = ( GRD_vz(n,k,l,GRD_Z) - GRD_vz(n,k-1,l,GRD_Z) ) / GRD_dgzh(k)
             351     3   p   8v             enddo
             352     2   p                  enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1231
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             353     2  pp   8v             do n = 1, ADM_gall
             354     2   p   8v                GSQRTH(n,ADM_kmin-1) = GSQRTH(n,ADM_kmin)
             355     2   p   8v             enddo
             356     1               
             357     2                      if ( deep ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             358     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 29
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             359     4  pp    v                do n = 1, ADM_gall
             360     4                            !--- calculation gamma at integer/half points
             361     4   p    v                   GAM  = 1.D0 + GRD_vz(n,k,l,GRD_Z)  / CNST_ERADIUS
             362     4   p    v                   GAMH = 1.D0 + GRD_vz(n,k,l,GRD_ZH) / CNST_ERADIUS
             363     4               
             364     4   p    v                   VMTR_GSGAMH  (n,k,l) = GSQRTH(n,k) * GAMH
             365     4               
             366     4   p    v                   VMTR_GAM2    (n,k,l) = GAM  * GAM
             367     4   p    v                   VMTR_GAM2H   (n,k,l) = GAMH * GAMH
             368     4               
             369     4   p    v                   VMTR_GSGAM2  (n,k,l) = GSQRT (n,k) * GAM  * GAM
             370     4   p    v                   VMTR_GSGAM2H (n,k,l) = GSQRTH(n,k) * GAMH * GAMH
             371     4               
             372     4   p    v                   VMTR_RGSH    (n,k,l) = 1.D0 / GSQRTH(n,k)
             373     4   p    v                   VMTR_RGAM    (n,k,l) = 1.D0 / GAM
             374     4   p    v                   VMTR_RGAMH   (n,k,l) = 1.D0 / GAMH
             375     4   p    v                   VMTR_RGAM2   (n,k,l) = 1.D0 / VMTR_GAM2   (n,k,l)
             376     4   p    v                   VMTR_RGAM2H  (n,k,l) = 1.D0 / VMTR_GAM2H  (n,k,l)
             377     4   p    v                   VMTR_RGSGAM2 (n,k,l) = 1.D0 / VMTR_GSGAM2 (n,k,l)
             378     4   p    v                   VMTR_RGSGAM2H(n,k,l) = 1.D0 / VMTR_GSGAM2H(n,k,l)
             379     4   p    v                enddo
             380     3   p                     enddo
             381     2                      else
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             382     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 39
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             383     4  pp   2v                do n = 1, ADM_gall
             384     4                            ! GAM  = 1.D0
             385     4                            ! GAMH = 1.D0
             386     4               
             387     4   p   2v                   VMTR_GSGAMH  (n,k,l) = GSQRTH(n,k)
             388     4               
             389     4   p   2v                   VMTR_GAM2    (n,k,l) = 1.D0
             390     4   p   2v                   VMTR_GAM2H   (n,k,l) = 1.D0
             391     4               
             392     4   p   2v                   VMTR_GSGAM2  (n,k,l) = GSQRT (n,k)
             393     4   p   2v                   VMTR_GSGAM2H (n,k,l) = GSQRTH(n,k)
             394     4               
             395     4   p   2v                   VMTR_RGSH    (n,k,l) = 1.D0 / GSQRTH(n,k)
             396     4   p   2v                   VMTR_RGAM    (n,k,l) = 1.D0
             397     4   p   2v                   VMTR_RGAMH   (n,k,l) = 1.D0
             398     4   p   2v                   VMTR_RGAM2   (n,k,l) = 1.D0
             399     4   p   2v                   VMTR_RGAM2H  (n,k,l) = 1.D0
             400     4   p   2v                   VMTR_RGSGAM2 (n,k,l) = 1.D0 / GSQRT (n,k)
             401     4   p   2v                   VMTR_RGSGAM2H(n,k,l) = 1.D0 / GSQRTH(n,k)
             402     4   p   2v                enddo
             403     3   p                     enddo
             404     2                      endif
             405     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 112
                                   <<<      var: 36, VMTR_GZYH: 36, VMTR_GZXH: 36
                                   <<<      GRD_dgz: 4
                                   <<< Loop-information  End >>>
             406     2  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 32
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 18
                                   <<<      var: 6, VMTR_GZYH: 6, VMTR_GZXH: 6
                                   <<< Loop-information  End >>>
             407     3  pp   2v             do n = 1, ADM_gall
             408     3                         !--- calculation of GZ at half points
             409     3                         !---    GZX = - JX / G^{1/2}
             410     3                         !---    GZY = - JY / G^{1/2}
             411     3                         !---    GZZ = - JZ / G^{1/2}
             412     3   p   2v                VMTR_GZXH(n,k,l) = -var(n,k,l,JXH) / GSQRTH(n,k)
             413     3   p   2v                VMTR_GZYH(n,k,l) = -var(n,k,l,JYH) / GSQRTH(n,k)
             414     3   p   2v                VMTR_GZZH(n,k,l) = -var(n,k,l,JZH) / GSQRTH(n,k)
             415     3                         !--- calculation of GZ at full points
             416     3   p   2v                VMTR_GZX (n,k,l) = -var(n,k,l,JX)  / GSQRT (n,k)
             417     3   p   2v                VMTR_GZY (n,k,l) = -var(n,k,l,JY)  / GSQRT (n,k)
             418     3   p   2v                VMTR_GZZ (n,k,l) = -var(n,k,l,JZ)  / GSQRT (n,k)
             419     3               
             420     3                         !--- calculation of volume
             421     3   p   2v                VMTR_VOLUME(n,k,l) = GMTR_P_var(n,ADM_KNONE,l,GMTR_P_AREA) &
             422     3                                            * VMTR_GSGAM2(n,k,l)                    &
             423     3                                            * GRD_dgz(k)
             424     3               
             425     3                         !--- calculation of geopotential
             426     3   p   2v                VMTR_PHI(n,k,l) = GRD_vz(n,k,l,GRD_Z) * CNST_EGRAV
             427     3   p   2v             enddo
             428     2   p                  enddo
             429     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 4
                                   <<<      GRD_afac: 2, GRD_bfac: 2
                                   <<< Loop-information  End >>>
             430     2  pp                  do k = ADM_kmin, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 52
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             431     3  pp   2v             do n = 1, ADM_gall
             432     3                         !--- calculation of factor for integer to half integer level with Gz
             433     3   p   2v                VMTR_C2Wfact(I_a_GZXH,n,k,l) = 0.5D0 * GRD_afac(k) / VMTR_GSGAM2(n,k  ,l) * VMTR_GSGAM2H(n,k,l) &
             434     3                                                      * VMTR_GZXH(n,k,l)
             435     3   p   2v                VMTR_C2Wfact(I_b_GZXH,n,k,l) = 0.5D0 * GRD_bfac(k) / VMTR_GSGAM2(n,k-1,l) * VMTR_GSGAM2H(n,k,l) &
             436     3                                                      * VMTR_GZXH(n,k,l)
             437     3   p   2v                VMTR_C2Wfact(I_a_GZYH,n,k,l) = 0.5D0 * GRD_afac(k) / VMTR_GSGAM2(n,k  ,l) * VMTR_GSGAM2H(n,k,l) &
             438     3                                                      * VMTR_GZYH(n,k,l)
             439     3   p   2v                VMTR_C2Wfact(I_b_GZYH,n,k,l) = 0.5D0 * GRD_bfac(k) / VMTR_GSGAM2(n,k-1,l) * VMTR_GSGAM2H(n,k,l) &
             440     3                                                      * VMTR_GZYH(n,k,l)
             441     3   p   2v                VMTR_C2Wfact(I_a_GZZH,n,k,l) = 0.5D0 * GRD_afac(k) / VMTR_GSGAM2(n,k  ,l) * VMTR_GSGAM2H(n,k,l) &
             442     3                                                      * VMTR_GZZH(n,k,l)
             443     3   p   2v                VMTR_C2Wfact(I_b_GZZH,n,k,l) = 0.5D0 * GRD_bfac(k) / VMTR_GSGAM2(n,k-1,l) * VMTR_GSGAM2H(n,k,l) &
             444     3                                                      * VMTR_GZZH(n,k,l)
             445     3   p   2v             enddo
             446     2   p                  enddo
             447     1                   enddo
             448                     
             449     1                   if ( ADM_prc_me == ADM_prc_pl ) then
             450     2                      do l = 1, ADM_lall_pl
             451     2               
             452     2                      !--- calculation of G^{1/2} at integer points
             453     2                      !---   G^{1/2} = dz/dgz
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 4
                                   <<<      GRD_dgz: 4
                                   <<< Loop-information  End >>>
             454     3  pp                  do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 174
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             455     4  pp   8v             do n = 1, ADM_gall_pl
             456     4   p   8v                GSQRT_pl(n,k) = ( GRD_vz_pl(n,k+1,l,GRD_ZH) - GRD_vz_pl(n,k,l,GRD_ZH) ) / GRD_dgz(k)
             457     4   p   8v             enddo
             458     3   p                  enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 800
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             459     3  pp   8v             do n = 1, ADM_gall_pl
             460     3   p   8v                GSQRT_pl(n,ADM_kmin-1) = GSQRT_pl(n,ADM_kmin)
             461     3   p   8v                GSQRT_pl(n,ADM_kmax+1) = GSQRT_pl(n,ADM_kmax)
             462     3   p   8v             enddo
             463     2               
             464     2                      !--- calculation of G^{1/2} at half points
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 4
                                   <<<      GRD_dgzh: 4
                                   <<< Loop-information  End >>>
             465     3  pp                  do k = ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 174
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             466     4  pp   8v             do n = 1, ADM_gall_pl
             467     4   p   8v                GSQRTH_pl(n,k) = ( GRD_vz_pl(n,k,l,GRD_Z) - GRD_vz_pl(n,k-1,l,GRD_Z) ) / GRD_dgzh(k)
             468     4   p   8v             enddo
             469     3   p                  enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1231
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             470     3  pp   8v             do n = 1, ADM_gall_pl
             471     3   p   8v                GSQRTH_pl(n,ADM_kmin-1) = GSQRTH_pl(n,ADM_kmin)
             472     3   p   8v             enddo
             473     2               
             474     3                      if ( deep ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 60
                                   <<<      VMTR_RGAM_pl: 60
                                   <<< Loop-information  End >>>
             475     4  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 29
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 6
                                   <<<      VMTR_RGAM_pl: 6
                                   <<< Loop-information  End >>>
             476     5  pp    v                do n = 1, ADM_gall_pl
             477     5                            !--- calculation gamma at integer/half points
             478     5   p    v                   GAM  = 1.D0 + GRD_vz_pl(n,k,l,GRD_Z)  / CNST_ERADIUS
             479     5   p    v                   GAMH = 1.D0 + GRD_vz_pl(n,k,l,GRD_ZH) / CNST_ERADIUS
             480     5               
             481     5   p    v                   VMTR_GSGAMH_pl  (n,k,l) = GSQRTH(n,k) * GAMH
             482     5               
             483     5   p    v                   VMTR_GAM2_pl    (n,k,l) = GAM  * GAM
             484     5   p    v                   VMTR_GAM2H_pl   (n,k,l) = GAMH * GAMH
             485     5               
             486     5   p    v                   VMTR_GSGAM2_pl  (n,k,l) = GSQRT_pl (n,k) * GAM  * GAM
             487     5   p    v                   VMTR_GSGAM2H_pl (n,k,l) = GSQRTH_pl(n,k) * GAMH * GAMH
             488     5               
             489     5   p    v                   VMTR_RGSH_pl    (n,k,l) = 1.D0 / GSQRTH_pl(n,k)
             490     5   p    v                   VMTR_RGAM_pl    (n,k,l) = 1.D0 / GAM
             491     5   p    v                   VMTR_RGAMH_pl   (n,k,l) = 1.D0 / GAMH
             492     5   p    v                   VMTR_RGAM2_pl   (n,k,l) = 1.D0 / VMTR_GAM2_pl (n,k,l)
             493     5   p    v                   VMTR_RGAM2H_pl  (n,k,l) = 1.D0 / VMTR_GAM2H_pl(n,k,l)
             494     5   p    v                   VMTR_RGSGAM2_pl (n,k,l) = 1.D0 / VMTR_GSGAM2_pl (n,k,l)
             495     5   p    v                   VMTR_RGSGAM2H_pl(n,k,l) = 1.D0 / VMTR_GSGAM2H_pl(n,k,l)
             496     5   p    v                enddo
             497     4   p                     enddo
             498     3                      else
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             499     4  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 39
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             500     5  pp   2v                do n = 1, ADM_gall_pl
             501     5                            ! GAM  = 1.D0
             502     5                            ! GAMH = 1.D0
             503     5               
             504     5   p   2v                   VMTR_GSGAMH_pl  (n,k,l) = GSQRTH_pl(n,k)
             505     5               
             506     5   p   2v                   VMTR_GAM2_pl    (n,k,l) = 1.D0
             507     5   p   2v                   VMTR_GAM2H_pl   (n,k,l) = 1.D0
             508     5               
             509     5   p   2v                   VMTR_GSGAM2_pl  (n,k,l) = GSQRT_pl (n,k)
             510     5   p   2v                   VMTR_GSGAM2H_pl (n,k,l) = GSQRTH_pl(n,k)
             511     5               
             512     5   p   2v                   VMTR_RGSH_pl    (n,k,l) = 1.D0 / GSQRTH_pl(n,k)
             513     5   p   2v                   VMTR_RGAM_pl    (n,k,l) = 1.D0
             514     5   p   2v                   VMTR_RGAMH_pl   (n,k,l) = 1.D0
             515     5   p   2v                   VMTR_RGAM2_pl   (n,k,l) = 1.D0
             516     5   p   2v                   VMTR_RGAM2H_pl  (n,k,l) = 1.D0
             517     5   p   2v                   VMTR_RGSGAM2_pl (n,k,l) = 1.D0 / GSQRT_pl (n,k)
             518     5   p   2v                   VMTR_RGSGAM2H_pl(n,k,l) = 1.D0 / GSQRTH_pl(n,k)
             519     5   p   2v                enddo
             520     4   p                     enddo
             521     3                      endif
             522     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 112
                                   <<<      var_pl: 36, VMTR_GZYH_pl: 36
                                   <<<      VMTR_GZXH_pl: 36, GRD_dgz: 4
                                   <<< Loop-information  End >>>
             523     3  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 32
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 18
                                   <<<      var_pl: 6, VMTR_GZYH_pl: 6
                                   <<<      VMTR_GZXH_pl: 6
                                   <<< Loop-information  End >>>
             524     4  pp   2v             do n = 1, ADM_gall_pl
             525     4                         !--- calculation of GZ at half points
             526     4                         !---    GZX = - JX / G^{1/2}
             527     4                         !---    GZY = - JY / G^{1/2}
             528     4                         !---    GZZ = - JZ / G^{1/2}
             529     4   p   2v                VMTR_GZXH_pl(n,k,l) = -var_pl(n,k,l,JXH) / GSQRTH_pl(n,k)
             530     4   p   2v                VMTR_GZYH_pl(n,k,l) = -var_pl(n,k,l,JYH) / GSQRTH_pl(n,k)
             531     4   p   2v                VMTR_GZZH_pl(n,k,l) = -var_pl(n,k,l,JZH) / GSQRTH_pl(n,k)
             532     4                         !--- calculation of GZ at full points
             533     4   p   2v                VMTR_GZX_pl (n,k,l) = -var_pl(n,k,l,JX)  / GSQRT_pl (n,k)
             534     4   p   2v                VMTR_GZY_pl (n,k,l) = -var_pl(n,k,l,JY)  / GSQRT_pl (n,k)
             535     4   p   2v                VMTR_GZZ_pl (n,k,l) = -var_pl(n,k,l,JZ)  / GSQRT_pl (n,k)
             536     4               
             537     4                         !--- calculation of volume
             538     4   p   2v                VMTR_VOLUME_pl(n,k,l) = GMTR_P_var_pl(n,ADM_KNONE,l,GMTR_P_AREA) &
             539     4                                               * VMTR_GSGAM2_pl(n,k,l)                    &
             540     4                                               * GRD_dgz(k)
             541     4               
             542     4                         !--- calculation of geopotential
             543     4   p   2v                VMTR_PHI_pl(n,k,l) = GRD_vz_pl(n,k,l,GRD_Z) * CNST_EGRAV
             544     4   p   2v             enddo
             545     3   p                  enddo
             546     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 4
                                   <<<      GRD_afac: 2, GRD_bfac: 2
                                   <<< Loop-information  End >>>
             547     3  pp                  do k = ADM_kmin, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 57
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             548     4  pp   2v             do n = 1, ADM_gall_pl
             549     4   p   2v                VMTR_C2Wfact_pl(I_a_GZXH,n,k,l) = 0.5D0 * GRD_afac(k) &
             550     4                                                         * VMTR_GSGAM2H_pl(n,k,l) / VMTR_GSGAM2_pl(n,k  ,l) * VMTR_GZXH_pl(n,k,l)
             551     4   p   2v                VMTR_C2Wfact_pl(I_b_GZXH,n,k,l) = 0.5D0 * GRD_bfac(k) &
             552     4                                                         * VMTR_GSGAM2H_pl(n,k,l) / VMTR_GSGAM2_pl(n,k-1,l) * VMTR_GZXH_pl(n,k,l)
             553     4   p   2v                VMTR_C2Wfact_pl(I_a_GZYH,n,k,l) = 0.5D0 * GRD_afac(k) &
             554     4                                                         * VMTR_GSGAM2H_pl(n,k,l) / VMTR_GSGAM2_pl(n,k  ,l) * VMTR_GZYH_pl(n,k,l)
             555     4   p   2v                VMTR_C2Wfact_pl(I_b_GZYH,n,k,l) = 0.5D0 * GRD_bfac(k) &
             556     4                                                         * VMTR_GSGAM2H_pl(n,k,l) / VMTR_GSGAM2_pl(n,k-1,l) * VMTR_GZYH_pl(n,k,l)
             557     4   p   2v                VMTR_C2Wfact_pl(I_a_GZZH,n,k,l) = 0.5D0 * GRD_afac(k) &
             558     4                                                         * VMTR_GSGAM2H_pl(n,k,l) / VMTR_GSGAM2_pl(n,k  ,l) * VMTR_GZZH_pl(n,k,l)
             559     4   p   2v                VMTR_C2Wfact_pl(I_b_GZZH,n,k,l) = 0.5D0 * GRD_bfac(k) &
             560     4                                                         * VMTR_GSGAM2H_pl(n,k,l) / VMTR_GSGAM2_pl(n,k-1,l) * VMTR_GZZH_pl(n,k,l)
             561     4   p   2v             enddo
             562     3   p                  enddo
             563     2               
             564     2                      enddo
             565     1                   endif
             566                     
             567                         return
             568                       end subroutine VMTR_setup
             569                     
             570                     end module mod_vmtr
             571                     !-------------------------------------------------------------------------------

 Diagnostic messages: program name(mod_vmtr)
   jwd8220o-i  "share/mod_vmtr.f90", line 16: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
  Module subprogram name(VMTR_setup)
   jwd8206o-i  "share/mod_vmtr.f90", line 339: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "share/mod_vmtr.f90", line 350: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "share/mod_vmtr.f90", line 359: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "share/mod_vmtr.f90", line 361: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "share/mod_vmtr.f90", line 362: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_vmtr.f90", line 369: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_vmtr.f90", line 412: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "share/mod_vmtr.f90", line 413: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "share/mod_vmtr.f90", line 414: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "share/mod_vmtr.f90", line 416: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "share/mod_vmtr.f90", line 417: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "share/mod_vmtr.f90", line 418: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_vmtr.f90", line 421: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "share/mod_vmtr.f90", line 421: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "share/mod_vmtr.f90", line 433: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_vmtr.f90", line 433: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_vmtr.f90", line 435: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_vmtr.f90", line 435: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_vmtr.f90", line 437: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_vmtr.f90", line 439: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_vmtr.f90", line 439: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_vmtr.f90", line 441: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_vmtr.f90", line 441: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "share/mod_vmtr.f90", line 456: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "share/mod_vmtr.f90", line 467: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "share/mod_vmtr.f90", line 476: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "share/mod_vmtr.f90", line 478: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "share/mod_vmtr.f90", line 479: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_vmtr.f90", line 486: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_vmtr.f90", line 529: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "share/mod_vmtr.f90", line 530: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "share/mod_vmtr.f90", line 531: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "share/mod_vmtr.f90", line 533: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "share/mod_vmtr.f90", line 534: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "share/mod_vmtr.f90", line 535: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_vmtr.f90", line 538: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "share/mod_vmtr.f90", line 538: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "share/mod_vmtr.f90", line 549: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "share/mod_vmtr.f90", line 551: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_vmtr.f90", line 551: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_vmtr.f90", line 553: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_vmtr.f90", line 553: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_vmtr.f90", line 555: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_vmtr.f90", line 555: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "share/mod_vmtr.f90", line 557: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "share/mod_vmtr.f90", line 557: Division is changed to multiplication by reciprocal.

 Procedure information
   Lines      : 571
   Statements : 313
   Stack(byte): 5920
   Prefetch num: 442

 Total information
   Procedures       : 1
   Total lines      : 571
   Total statements : 313
   Total stack(byte): 5920
   Total prefetch num: 442


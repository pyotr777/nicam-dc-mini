
 Fujitsu Fortran Version 1.2.0  Mon Dec 21 17:17:30 2015

 Compilation information
   Current directory : /volume1/home/ra000007/a03106/nicam-dc-mini/src
   Source file       : nhm/share/mod_history_vars.f90

 Option information
   Command line options : -Kident_mpi -f2004 -Kfast,parallel,auto,ocl,preex,array_private,noalias=s,mfunc=2 -Kparallel_iteration=8,instance=8,dynamic_iteration -Qi -Qt -X03 -Ncompdisp -Koptmsg=1 -Cpp -Kprefetch_cache_level=all,prefetch_iteration_L2=50 -Ksimd -Ntl_notrt -U_FIPP_ -U_FAPP_ -I../src/include -o mod_history_vars.o -c -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -W0,-zmpa=Yignore-intent -I/opt/FJSVtclang/GM-1.2.0-19/lib64
   Cpp options          : -U_FIPP_ -U_FAPP_ -I../src/include -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -I/opt/FJSVtclang/GM-1.2.0-19/lib64 -D__FUJITSU -Dunix -Dsparc -D__sparc__ -D__unix -D__sparc -D__frt_version=700 -D__HPC_ACE__ -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -Dlinux -otmp -D__sparcv9 -D__sparc_v9__ -D__arch64__
   Effective options    : -fi -g0 -AE -Free -O3 -Qi,p,t -X03
                          -x0
                          -KFLTLD -Kadr44 -Knoalias=s -Kauto -Knoautoobjstack
                          -Knocalleralloc -Kdalign -Keval -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kilfunc
                          -Klargepage -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_if -Kloop_fusion
                          -Kloop_interchange -Kloop_nopart_parallel
                          -Kloop_nopart_simd -Kloop_noversioning -Kns
                          -Kmfunc=2 -Kocl -Komitfp -Koptmsg=1 -Kpreex
                          -Kprefetch_conditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_iteration_L2=50 -Kprefetch_nostrong
                          -Kprefetch_strong_L2 -Knoshortloop -Ksimd=1
                          -Knosimd_region_constant -Knostriping -Kswp
                          -Knotemparraystack -Kunroll -Knouxsimd -KNOXFILL
                          -Knoopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_noordered_reduction -Knothreadsafe
                          -Kparallel -Kparallel_nofp_precision
                          -Karray_private -Kdynamic_iteration -Kreduction
                          -Kregion_extension -Kinstance=8
                          -Kparallel_iteration=8
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Ncompdisp
                          -Nnocopyarg -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nline -Nlst -Nlst=i -Nlst=p -Nlst=t
                          -Nnomallocfree -Nnoobsfun -Nquickdbg=noargchk
                          -Nquickdbg=nosubchk -Nquickdbg=noundef -NRnotrap
                          -Nnorecursive -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 Module "mod_history_vars"
  (inc)(line-no.)(nest)(optimize)
               1                     !-------------------------------------------------------------------------------
               2                     !>
               3                     !! History history variables
               4                     !!
               5                     !! @par Description
               6                     !!         This module prepares diagnostic/prognostic variavles for histroy output
               7                     !!
               8                     !! @author W.Yanase, S.Iga, H.Tomita, Y.Niwa
               9                     !!
              10                     !! @par History
              11                     !! @li      2007-06-27   Y.Niwa  : Imported from mod_history_vars_cfmip
              12                     !! @li      2007-07-31   K.Suzuki: add SPRINTARS variables
              13                     !! @li      2007-08-06   Y.Niwa  : bug fix  'th' => 'ml_th' 'rh' => 'ml_rh'
              14                     !! @li      2007-08-06   K.Suzuki: move SPRINTARS variables from mod_postphystep
              15                     !! @li      2007-08-20   W.Yanase: debug in "call getr1_in_mat"
              16                     !! @li      2007-11-22   T.Mitsui: Effective Radius is calculated in rd_driver => mp_driver
              17                     !!                                 and some variables are moved from aerovar
              18                     !! @li      2007-11-30   T.Mitsui: del double use(trivial)
              19                     !! @li      2007-12-05   T.Mitsui: add radiative flux categolized as ISCCP-D series
              20                     !! @li      2008-02-19   T.Mitsui: Add output for slice-cloud normalized by cot
              21                     !!                                 and trivial fix for output option
              22                     !! @li      2008-03-06   H.Tomita: add mp_wsm3_wcdiag.
              23                     !! @li      2008-05-24   T.Mitsui: add nc, nr, ni, ns, ng for 2moment option
              24                     !! @li      2008-06-13   T.Mitsui: change adiabat_diag => adiabat_diag2
              25                     !!                                 and add arguments (positive only cape, and all cin)
              26                     !! @li      2008-07-30   W.Yanase: add sl_u10m, sl_v10m, sl_tauu, sl_tauv
              27                     !! @li      2009-01-23   H.Tomita: add ml_omg, ml_hgt
              28                     !! @li      2009-04-14   H.Tomita: bugfix : zero clear of lwpqc,lwpqr.
              29                     !! @li      2009-04-14   T.Mitsui: sl_nc,r,i,s,g and sl_tauc,r,i,s,g
              30                     !!                                 sl_qi, sl_qg
              31                     !! @li      2009-07-10   H.Tomita: 1. The energy conservation terms are added.
              32                     !!                                 2. Some tag names were changed to avoid the confusion.
              33                     !!                                   'sl_swi' -> 'sl_swd_sfc'
              34                     !!                                   'sl_sswr' -> 'sl_swu_sfc'
              35                     !!                                   'sl_slwd' -> 'sl_lwd_sfc'
              36                     !!                                   'sl_slwu' -> 'sl_lwu_sfc'
              37                     !!                                   'sl_slh' ->  'sl_lh_sfc'
              38                     !!                                   'sl_ssh' ->  'sl_sh_sfc'
              39                     !!                                   'sl_sw_toai' ->  'sl_swd_toa'
              40                     !!                                   'sl_sw_toar' ->  'sl_swu_toa'
              41                     !!                                   'sl_lw_toa' ->  'sl_lwu_toa'
              42                     !! @li      2009-07-13   S.Iga   : Bug fix 'sl_lw_toa' ->  'sl_lwu_toa'
              43                     !! @li      2010-06-19   A.T.Noda: Allow to use a convection parameterization
              44                     !!                                 with an advanced microphysics schemes, such as G98, NSW?,
              45                     !! @li      2010-08-20   C.Kodama: land model output is filled with undef values over the ocean.
              46                     !! @li      2012-11-05 (H.Yashiro)  NICAM milestone project (Phase I:cleanup of shared module)
              47                     !!
              48                     !<
              49                     module mod_history_vars
              50                       !-----------------------------------------------------------------------------
              51                       !
              52                       !++ Used modules
              53                       !
              54                       use mod_adm, only: &
              55                          ADM_LOG_FID,  &
              56                          ADM_MAXFNAME, &
              57                          ADM_NSYS
              58                       !-----------------------------------------------------------------------------
              59                       implicit none
              60                       private
              61                       !-----------------------------------------------------------------------------
              62                       !
              63                       !++ Public procedure
              64                       !
              65                       public :: history_vars_setup
              66                       public :: history_vars
              67                     
              68                       !-----------------------------------------------------------------------------
              69                       !
              70                       !++ Public parameters & variables
              71                       !
              72                       !-----------------------------------------------------------------------------
              73                       !
              74                       !++ Private procedure
              75                       !
              76                       !-----------------------------------------------------------------------------
              77                       !
              78                       !++ Private parameters & variables
              79                       !
              80                       logical, private, save :: out_ucos_vcos = .false.
              81                       logical, private, save :: out_omg       = .false.
              82                       logical, private, save :: out_hgt       = .false.
              83                       logical, private, save :: out_th        = .false.
              84                       logical, private, save :: out_rh        = .false.
              85                     
              86                       logical, private, save :: out_cld_frac  = .false.
              87                       logical, private, save :: out_cldw      = .false.
              88                       logical, private, save :: out_qr        = .false.
              89                       logical, private, save :: out_qs        = .false.
              90                       logical, private, save :: out_qi        = .false.
              91                       logical, private, save :: out_qg        = .false.
              92                       logical, private, save :: out_cldi      = .false.
              93                       logical, private, save :: out_slh       = .false.
              94                       logical, private, save :: out_tau_uv    = .false.
              95                       logical, private, save :: out_10m_uv    = .false.
              96                       logical, private, save :: out_vap_atm   = .false.
              97                       logical, private, save :: out_tem_atm   = .false.
              98                       logical, private, save :: out_albedo    = .false.
              99                       logical, private, save :: out_slp       = .false.
             100                       logical, private, save :: out_850hPa    = .false.
             101                       logical, private, save :: out_cape_cin  = .false.
             102                     
             103                       !-----------------------------------------------------------------------------
             104                     contains
             105                       !-----------------------------------------------------------------------------
             106                       subroutine history_vars_setup
             107                         use mod_history, only: &
             108                            HIST_req_nmax, &
             109                            item_save
             110                         implicit none
             111                     
             112                         integer :: n
             113                         !---------------------------------------------------------------------------
             114                     
             115     1                   do n = 1, HIST_req_nmax
             116     1                      if(      item_save(n) == 'ml_ucos'            &
             117     1                          .OR. item_save(n) == 'ml_vcos'            ) out_ucos_vcos = .true.
             118     1                      if(      item_save(n) == 'ml_omg'             ) out_omg       = .true.
             119     1                      if(      item_save(n) == 'ml_hgt'             ) out_hgt       = .true.
             120     1                      if(      item_save(n) == 'ml_th'              ) out_th        = .true.
             121     1                      if(      item_save(n) == 'ml_rh'              ) out_rh        = .true.
             122     1               
             123     1                      if(      item_save(n) == 'sl_cld_frac'        ) out_cld_frac  = .true.
             124     1                      if(      item_save(n) == 'sl_cldw'            ) out_cldw      = .true.
             125     1                      if(      item_save(n) == 'sl_cldi'            ) out_cldi      = .true.
             126     1                      if(      item_save(n) == 'sl_qr'              ) out_qr        = .true.
             127     1                      if(      item_save(n) == 'sl_qs'              ) out_qs        = .true.
             128     1                      if(      item_save(n) == 'sl_qi'              ) out_qi        = .true.
             129     1                      if(      item_save(n) == 'sl_qg'              ) out_qg        = .true.
             130     1               
             131     1                      if(      item_save(n) == 'sl_albedo'          ) out_albedo    = .true.
             132     1               
             133     1                      if(      item_save(n) == 'sl_tauu'            &
             134     1                          .OR. item_save(n) == 'sl_tauv'            &
             135     1                          .OR. item_save(n) == 'sl_tauucos'         &
             136     1                          .OR. item_save(n) == 'sl_tauvcos'         ) out_tau_uv    = .true.
             137     1               
             138     1                      if(      item_save(n) == 'sl_u10m'            &
             139     1                          .OR. item_save(n) == 'sl_v10m'            &
             140     1                          .OR. item_save(n) == 'sl_ucos10m'         &
             141     1                          .OR. item_save(n) == 'sl_vcos10m'         ) out_10m_uv    = .true.
             142     1               
             143     1                      if(      item_save(n) == 'sl_u850'            &
             144     1                          .OR. item_save(n) == 'sl_v850'            &
             145     1                          .OR. item_save(n) == 'sl_w850'            &
             146     1                          .OR. item_save(n) == 'sl_t850'            ) out_850hPa    = .true.
             147     1               
             148     1                      if(      item_save(n) == 'sl_slh'             ) out_slh       = .true.
             149     1                      if(      item_save(n) == 'sl_vap_atm'         ) out_vap_atm   = .true.
             150     1                      if(      item_save(n) == 'sl_tem_atm'         ) out_tem_atm   = .true.
             151     1                      if(      item_save(n) == 'sl_slp'             ) out_slp       = .true.
             152     1                      if(      item_save(n) == 'sl_cape'            &
             153     1                          .OR. item_save(n) == 'sl_cin'             ) out_cape_cin  = .true.
             154     1                   enddo
             155                     
             156                         return
             157                       end subroutine history_vars_setup
             158                     
             159                       !----------------------------------------------------------------------
             160                       subroutine history_vars
             161                         use mod_adm, only: &
             162                            ADM_gall,    &
             163                            ADM_gall_pl, &
             164                            ADM_kall,    &
             165                            ADM_lall,    &
             166                            ADM_lall_pl, &
             167                            ADM_KNONE,   &
             168                            ADM_kmin,    &
             169                            ADM_kmax
             170                         use mod_cnst, only: &
             171                            CNST_EGRAV,     &
             172                            CNST_RAIR,      &
             173                            CNST_RVAP,      &
             174                            CNST_TMELT,     &
             175                            CNST_EPS_ZERO,  &
             176                            CNST_UNDEF,     &
             177                            CNST_DWATR
             178                         use mod_gmtr, only :        &
             179                              GMTR_area,             &
             180                              GMTR_area_pl,          &
             181                              GMTR_P_var,            &
             182                              GMTR_P_var_pl,         &
             183                              GMTR_P_IX,             &
             184                              GMTR_P_IY,             &
             185                              GMTR_P_IZ,             &
             186                              GMTR_P_JX,             &
             187                              GMTR_P_JY,             &
             188                              GMTR_P_JZ,             &
             189                              GMTR_P_LAT
             190                         use mod_gtl, only :         &
             191                              GTL_output_var2,       &
             192                              GTL_output_var2_da,    &
             193                              GTL_generate_uv,       &
             194                              GTL_clip_region_1layer , &  ! [add] 2010.08.20 C.Kodama
             195                            GTL_max, &
             196                            GTL_min
             197                         use mod_vmtr, only :        &
             198                              VMTR_GSGAM2,           &
             199                              VMTR_GSGAM2_pl,        &
             200                              VMTR_GSGAM2H,          &
             201                              VMTR_GSGAM2H_pl,       &
             202                              VMTR_VOLUME,           &
             203                              VMTR_VOLUME_pl
             204                         use mod_prgvar, only :     &
             205                              prgvar_get_withdiag
             206                         use mod_sfcvar, only :    &
             207                              sfcvar_get,          &
             208                              sfcvar_get1,         &
             209                              sfcvar_get2,         &
             210                              I_ALBEDO_SFC,        &
             211                              I_PRECIP_TOT,        &
             212                              I_PRECIP_CP,         &
             213                              I_EVAP_SFC,          &
             214                              I_PRE_SFC,           &
             215                              I_TEM_SFC,           &
             216                              I_SH_FLUX_SFC,       &
             217                              I_LH_FLUX_SFC,       &
             218                              I_SFCRAD_ENERGY,     &
             219                              I_TOARAD_ENERGY,     &
             220                              I_EVAP_ENERGY,       &
             221                              I_PRECIP_ENERGY,     &
             222                              I_TAUX_SFC,          &
             223                              I_TAUY_SFC,          &
             224                              I_TAUZ_SFC,          &
             225                              I_RFLUXS_SD,        &
             226                              I_RFLUXS_SU,        &
             227                              I_RFLUXS_LD,        &
             228                              I_RFLUXS_LU,        &
             229                              I_RFLUX_TOA_SD,     &
             230                              I_RFLUX_TOA_SU,     &
             231                              I_RFLUX_TOA_LD,     &
             232                              I_RFLUX_TOA_LU,     &
             233                              I_RFLUX_TOA_SD_C,   &
             234                              I_RFLUX_TOA_SU_C,   &
             235                              I_RFLUX_TOA_LD_C,   &
             236                              I_RFLUX_TOA_LU_C,   &
             237                              I_CUMFRC,           &
             238                              I_VX10,             &
             239                              I_VY10,             &
             240                              I_VZ10,             &
             241                              I_T2,               &
             242                              I_Q2,               &
             243                              INDEX_SEA
             244                         use mod_runconf, only : &
             245                              LHV,LHS,           &
             246                              RAIN_TYPE,         &
             247                              CP_TYPE,           & ! 10/06/10 A.T.Noda
             248                              NQW_MAX,           &
             249                              TRC_VMAX,          &
             250                              TRC_name,          &
             251                              MP_TYPE,           & ! 07/05/08 H.tomita
             252                              AE_TYPE,           & ! 07/07/30 K.Suzuki
             253                              opt_2moment_water, & ! 08/05/24 T.Mitsui
             254                              opt_incloud_aerosol,& ! 12/02/01 T.Seiki
             255                              I_NC, I_NR, I_NI,  & ! 08/05/24 T.Mitsui
             256                              I_NS, I_NG,        & ! 08/05/24 T.Mitsui
             257                              NNW_STR, NNW_END,  & ! 08/05/24 T.Mitsui
             258                              I_QV,              &
             259                              I_QC,              &
             260                              I_QR,              &
             261                              I_QI,              &
             262                              I_QS,              &
             263                              I_QG,              &
             264                              I_QH,              &
             265                              NQW_STR,NQW_END,   &
             266                              opt_carb_on, opt_dust_on, &! 12/02/01 T.Seiki
             267                              opt_salt_on, opt_sulf_on, &! 12/02/01 T.Seiki
             268                              NQDU_STR, NQDU_END,&       ! 12/02/01 T.Seiki
             269                              NQDUIN_STR, NQDUIN_END, &  ! 12/02/01 T.Seiki
             270                              NQCB_STR, NQCB_END, &      ! 12/02/01 T.Seiki
             271                              NQCBIN_STR, NQCBIN_END, &  ! 12/02/01 T.Seiki
             272                              NQSU_SO4,          &       ! 12/02/01 T.Seiki
             273                              NQSU_SO2,          &       ! 12/02/01 T.Seiki
             274                              NQSU_DMS,          &       ! 12/02/01 T.Seiki
             275                              NQSO4IN,           &       ! 12/02/01 T.Seiki
             276                              NQSA_STR, NQSA_END, &      ! 12/02/01 T.Seiki
             277                              NQSAIN_STR, NQSAIN_END, &  ! 12/02/01 T.Seiki
             278                              NRDIR,             &
             279                              NRBND,             &
             280                              NRBND_VIS,         &
             281                              NRBND_NIR,         &
             282                              NRBND_IR,          &
             283                              NRDIR_DIRECT,      &
             284                              NRDIR_DIFFUSE,     &
             285                              NCRF,              &
             286                              RAD_TYPE,          &  ! 07/12/05 T.Mitsui
             287                              NTAU_ISCCP,        &  ! 07/12/05 T.Mitsui
             288                              NPRES_ISCCP,       &  ! 07/12/05 T.Mitsui
             289                              LAND_TYPE,         &  ! Y.Niwa add 070627
             290                              OCEAN_TYPE            ! Y.Niwa add 070627
             291                         use mod_bsstate, only : &
             292                              phi, phi_pl
             293                         use mod_cnvvar, only :  &
             294                              cnvvar_p2d
             295                         use mod_thrmdyn, only : &
             296                              thrmdyn_th
             297                         use mod_bndcnd, only : &
             298                              bndcnd_thermo
             299                         use mod_diagvar, only : &
             300                              diagvar_get,       &
             301                              I_GDCFRC,          &
             302                              I_CUMCLW,          &
             303                              I_UNCCN                 ! 08/02/19 T.Mitsui
             304                         use mod_grd, only:          &
             305                              grd_zsfc,              &
             306                              grd_zs,                &
             307                              grd_zs_pl,             &
             308                              GRD_vz,                &
             309                              GRD_Z,                 &
             310                              GRD_VEGINDX              ! [add] 2010.08.20 C.Kodama
             311                         use mod_history, only : &
             312                            history_in
             313                         implicit none
             314                     
             315                         real(8) :: rhog     (ADM_gall,   ADM_kall,ADM_lall   )
             316                         real(8) :: rhog_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             317                         real(8) :: rhogvx   (ADM_gall,   ADM_kall,ADM_lall   )
             318                         real(8) :: rhogvx_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             319                         real(8) :: rhogvy   (ADM_gall,   ADM_kall,ADM_lall   )
             320                         real(8) :: rhogvy_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             321                         real(8) :: rhogvz   (ADM_gall,   ADM_kall,ADM_lall   )
             322                         real(8) :: rhogvz_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             323                         real(8) :: rhogw    (ADM_gall,   ADM_kall,ADM_lall   )
             324                         real(8) :: rhogw_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             325                         real(8) :: rhoge    (ADM_gall,   ADM_kall,ADM_lall   )
             326                         real(8) :: rhoge_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             327                         real(8) :: rhogq    (ADM_gall,   ADM_kall,ADM_lall   ,TRC_vmax)
             328                         real(8) :: rhogq_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl,TRC_vmax)
             329                         real(8) :: rho      (ADM_gall,   ADM_kall,ADM_lall   )
             330                         real(8) :: rho_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             331                         real(8) :: pre      (ADM_gall,   ADM_kall,ADM_lall   )
             332                         real(8) :: pre_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             333                         real(8) :: tem      (ADM_gall,   ADM_kall,ADM_lall   )
             334                         real(8) :: tem_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             335                         real(8) :: vx       (ADM_gall,   ADM_kall,ADM_lall   )
             336                         real(8) :: vx_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             337                         real(8) :: vy       (ADM_gall,   ADM_kall,ADM_lall   )
             338                         real(8) :: vy_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             339                         real(8) :: vz       (ADM_gall,   ADM_kall,ADM_lall   )
             340                         real(8) :: vz_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             341                         real(8) :: w        (ADM_gall,   ADM_kall,ADM_lall   )
             342                         real(8) :: w_pl     (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             343                         real(8) :: q        (ADM_gall,   ADM_kall,ADM_lall,   TRC_vmax)
             344                         real(8) :: q_pl     (ADM_gall_pl,ADM_kall,ADM_lall_pl,TRC_vmax)
             345                     
             346                         real(8) :: u   (ADM_gall,ADM_kall,ADM_lall)
             347                         real(8) :: v   (ADM_gall,ADM_kall,ADM_lall)
             348                         real(8) :: ucos(ADM_gall,ADM_kall,ADM_lall)
             349                         real(8) :: vcos(ADM_gall,ADM_kall,ADM_lall)
             350                         real(8) :: wc  (ADM_gall,ADM_kall,ADM_lall)
             351                         real(8) :: omg (ADM_gall,ADM_kall,ADM_lall)
             352                         real(8) :: hgt (ADM_gall,ADM_kall,ADM_lall)
             353                         real(8) :: th  (ADM_gall,ADM_kall,ADM_lall)
             354                     !    real(8) :: rh  (ADM_gall,ADM_kall,ADM_lall)
             355                     
             356                         real(8) :: q_clw     (ADM_gall,ADM_kall,ADM_lall)
             357                         real(8) :: q_cli     (ADM_gall,ADM_kall,ADM_lall)
             358                         real(8) :: qtot      (ADM_gall,ADM_kall,ADM_lall)
             359                         real(8) :: cloud_frac(ADM_gall,ADM_kall,ADM_lall)
             360                     
             361                         real(8) :: rfluxs_sd(ADM_gall,ADM_KNONE,ADM_lall)
             362                         real(8) :: rfluxs_su(ADM_gall,ADM_KNONE,ADM_lall)
             363                         real(8) :: rfluxs_ld(ADM_gall,ADM_KNONE,ADM_lall)
             364                         real(8) :: rfluxs_lu(ADM_gall,ADM_KNONE,ADM_lall)
             365                     
             366                         real(8) :: rflux_toa_sd(ADM_gall,ADM_KNONE,ADM_lall)
             367                         real(8) :: rflux_toa_su(ADM_gall,ADM_KNONE,ADM_lall)
             368                         real(8) :: rflux_toa_ld(ADM_gall,ADM_KNONE,ADM_lall)
             369                         real(8) :: rflux_toa_lu(ADM_gall,ADM_KNONE,ADM_lall)
             370                         real(8) :: rflux_toa_su_c(ADM_gall,ADM_KNONE,ADM_lall)
             371                         real(8) :: rflux_toa_lu_c(ADM_gall,ADM_KNONE,ADM_lall)
             372                     
             373                         real(8) :: precip(ADM_gall,ADM_KNONE,ADM_lall)
             374                     
             375                         real(8) :: sh_flux_sfc(ADM_gall,ADM_KNONE,ADM_lall)
             376                         real(8) :: lh_flux_sfc(ADM_gall,ADM_KNONE,ADM_lall)
             377                         real(8) :: sfcrad(ADM_gall,ADM_KNONE,ADM_lall)
             378                         real(8) :: toarad(ADM_gall,ADM_KNONE,ADM_lall)
             379                         real(8) :: precip_energy(ADM_gall,ADM_KNONE,ADM_lall)
             380                         real(8) :: evap_energy(ADM_gall,ADM_KNONE,ADM_lall)
             381                         real(8) :: taux(ADM_gall,ADM_KNONE,ADM_lall)
             382                         real(8) :: tauy(ADM_gall,ADM_KNONE,ADM_lall)
             383                         real(8) :: tauz(ADM_gall,ADM_KNONE,ADM_lall)
             384                         real(8) :: evap(ADM_gall,ADM_KNONE,ADM_lall)
             385                         real(8) :: rho_sfc(ADM_gall,ADM_KNONE,ADM_lall)
             386                         real(8) :: pre_sfc(ADM_gall,ADM_KNONE,ADM_lall)
             387                         real(8) :: tem_sfc(ADM_gall,ADM_KNONE,ADM_lall)
             388                         real(8) :: vx10m(ADM_gall,ADM_KNONE,ADM_lall)
             389                         real(8) :: vy10m(ADM_gall,ADM_KNONE,ADM_lall)
             390                         real(8) :: vz10m(ADM_gall,ADM_KNONE,ADM_lall)
             391                         real(8) :: t2m(ADM_gall,ADM_KNONE,ADM_lall)
             392                         real(8) :: q2m(ADM_gall,ADM_KNONE,ADM_lall)
             393                         real(8) :: u_850(ADM_gall,ADM_KNONE,ADM_lall)   ! [add] 20130705 R.Yoshida
             394                         real(8) :: v_850(ADM_gall,ADM_KNONE,ADM_lall)
             395                         real(8) :: w_850(ADM_gall,ADM_KNONE,ADM_lall)
             396                         real(8) :: t_850(ADM_gall,ADM_KNONE,ADM_lall)
             397                     
             398                         real(8) :: albedo_sfc(ADM_gall,ADM_KNONE,ADM_lall,1:NRDIR,1:NRBND)
             399                         real(8) :: slp(ADM_gall,ADM_KNONE,ADM_lall)
             400                         real(8) :: albedo_sfc_pl(ADM_gall_pl,ADM_KNONE,ADM_lall_pl,1:NRDIR,1:NRBND) ! 05/11/13 S.Iga
             401                     
             402                         integer, parameter :: cot_binmax=11
             403                     
             404                         real(8) :: dummy2D   (ADM_gall,   ADM_KNONE,ADM_lall   )
             405                         real(8) :: dummy2D_pl(ADM_gall_pl,ADM_KNONE,ADM_lall_pl)
             406                         real(8) :: dummy3D1_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             407                         real(8) :: dummy3D2_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             408                         real(8) :: dummy3D3_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             409                         real(8) :: dummy3D4_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             410                         real(8) :: dummy3D5_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             411                         real(8) :: rw(ADM_gall,ADM_lall)
             412                     
             413                         integer :: k, l, nq, K0
             414                         !---------------------------------------------------------------------------
             415                     
             416                         K0 = ADM_KNONE
             417                     
             418                         !--- get variables
             419                         call prgvar_get_withdiag( rhog,   rhog_pl,   & ! [OUT]
             420                                                   rhogvx, rhogvx_pl, & ! [OUT]
             421                                                   rhogvy, rhogvy_pl, & ! [OUT]
             422                                                   rhogvz, rhogvz_pl, & ! [OUT]
             423                                                   rhogw,  rhogw_pl,  & ! [OUT]
             424                                                   rhoge,  rhoge_pl,  & ! [OUT]
             425                                                   rhogq,  rhogq_pl,  & ! [OUT]
             426                                                   rho,    rho_pl,    & ! [OUT]
             427                                                   pre,    pre_pl,    & ! [OUT]
             428                                                   tem,    tem_pl,    & ! [OUT]
             429                                                   vx,     vx_pl,     & ! [OUT]
             430                                                   vy,     vy_pl,     & ! [OUT]
             431                                                   vz,     vz_pl,     & ! [OUT]
             432                                                   w,      w_pl,      & ! [OUT]
             433                                                   q,      q_pl       ) ! [OUT]
             434                     
             435     1       6           do l = 1, ADM_lall
             436     1       6              call bndcnd_thermo( ADM_gall,   & ! [IN]
             437     1                                          tem(:,:,l), & ! [INOUT]
             438     1                                          rho(:,:,l), & ! [INOUT]
             439     1                                          pre(:,:,l), & ! [INOUT]
             440     1                                          phi(:,:,l)  ) ! [IN]
             441     1       6           enddo
             442                     
             443                         !--- density, temperature & pressure
             444     1   s    s          do l = 1, ADM_lall
             445     1   s    s             call history_in( 'ml_rho',  rho(:,:,l) )
             446     1   s    s             call history_in( 'ml_tem',  tem(:,:,l) )
             447     1   s    s             call history_in( 'ml_pres', pre(:,:,l) )
             448     1   s    s          enddo
             449                     
             450                         !--- wind on cartesian
             451     1   s    s          do l = 1, ADM_lall
             452     1   s    s             call history_in( 'vx', vx(:,:,l) )
             453     1   s    s             call history_in( 'vy', vy(:,:,l) )
             454     1   s    s             call history_in( 'vz', vz(:,:,l) )
             455     1   s    s          enddo
             456                     
             457                         !--- zonal and meridonal wind
             458                         call GTL_generate_uv( u,  dummy3D1_pl, & ! [OUT]
             459                                               v,  dummy3D2_pl, & ! [OUT]
             460                                               vx, dummy3D3_pl, & ! [IN]
             461                                               vy, dummy3D4_pl, & ! [IN]
             462                                               vz, dummy3D5_pl, & ! [IN]
             463                                               icos = 0         ) ! [IN]
             464                     
             465     1   s    s          do l = 1, ADM_lall
             466     1   s    s             call history_in( 'ml_u', u(:,:,l) )
             467     1   s    s             call history_in( 'ml_v', v(:,:,l) )
             468     1   s    s          enddo
             469                     
             470                         !--- vertical wind (at cell center)
             471     1                   do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<< Loop-information  End >>>
             472     2  pp                  do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             473     2   p   8v                wc(:,k,l) = 0.5D0 * ( w(:,k,l) + w(:,k+1,l) )
             474     2   p                  enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1231
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             475     1  pp   8v             wc(:,ADM_kmin-1,l) = 0.D0
             476     1   p   8v             wc(:,ADM_kmax+1,l) = 0.D0
             477     1               
             478     1                      call history_in( 'ml_w', wc(:,:,l) )
             479     1                   enddo
             480                     
             481                         !--- zonal and meridonal wind with cos(phi)
             482     1                   if (out_ucos_vcos) then
             483     1                      call GTL_generate_uv( ucos, dummy3D1_pl, & ! [OUT]
             484     1                                            vcos, dummy3D2_pl, & ! [OUT]
             485     1                                            vx,   dummy3D3_pl, & ! [IN]
             486     1                                            vy,   dummy3D4_pl, & ! [IN]
             487     1                                            vz,   dummy3D5_pl, & ! [IN]
             488     1                                            icos = 1           ) ! [IN]
             489     1               
             490     2   s    s             do l = 1, ADM_lall
             491     2   s    s                call history_in( 'ml_ucos', ucos(:,:,l) )
             492     2   s    s                call history_in( 'ml_vcos', vcos(:,:,l) )
             493     2   s    s             enddo
             494     1                   endif
             495                     
             496                         !--- omega
             497     1                   if (out_omg) then
             498     2                      do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             499     2  pp   8v                omg(:,:,l) = -CNST_EGRAV * rho(:,:,l) * wc(:,:,l)
             500     2               
             501     2                         call history_in( 'ml_omg', omg(:,:,l) )
             502     2                      enddo
             503     1                   endif
             504                     
             505                         !--- geopotential height
             506                         ! [NOTE] H.Tomita Hydrostatic assumption
             507     1                   if (out_hgt) then
             508     2                      do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             509     2  pp   8v                hgt(:,:,l) = GRD_vz(:,:,l,GRD_Z)
             510     2               
             511     2                         call history_in( 'ml_hgt', hgt(:,:,l) )
             512     2                      enddo
             513     1                   endif
             514                     
             515                         !--- potential temperature
             516     1                   if (out_th) then
             517     2   s    s             do l = 1, ADM_lall
             518     2   s    s                call thrmdyn_th( ADM_gall,   & ! [IN]
             519     2                                          th (:,:,l), & ! [OUT]
             520     2                                          tem(:,:,l), & ! [IN]
             521     2                                          pre(:,:,l)  ) ! [IN]
             522     2               
             523     2   s    s                call history_in( 'ml_th', th(:,:,l) )
             524     2   s    s             enddo
             525     1                   endif
             526                     
             527                         !--- relative humidity
             528                     !    if (out_rh) then
             529                     !       call moist_relative_humidity( rh(:,:,l),    & ! [OUT]
             530                     !                                     rho(:,:,l),   & ! [IN]
             531                     !                                     tem(:,:,l),   & ! [IN]
             532                     !                                     q(:,:,l,I_QV) ) ! [IN]
             533                     !
             534                     !       call history_in( 'ml_rh', rh(:,:,l) )
             535                     !    endif
             536                     
             537                         !--- tracers
             538     1                   do nq = 1, TRC_vmax
             539     2                   do l  = 1, ADM_lall
             540     2                      call history_in( 'ml_'//TRC_name(nq), q(:,:,l,nq) )
             541     2                   enddo
             542     1                   enddo
             543                     
             544                         !--- hydrometeors
             545     1                   do l  = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             546     1  pp   8v             q_clw(:,:,l) = 0.D0
             547     1   p   8v             q_cli(:,:,l) = 0.D0
             548     2                      do nq = NQW_STR, NQW_END
             549     3                         if ( nq == I_QC ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             550     3  pp   8v                   q_clw(:,:,l) = q_clw(:,:,l) + q(:,:,l,nq)
             551     3                         elseif( nq == I_QR ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             552     3  pp   8v                   q_clw(:,:,l) = q_clw(:,:,l) + q(:,:,l,nq)
             553     3                         elseif( nq == I_QI ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             554     3  pp   8v                   q_cli(:,:,l) = q_cli(:,:,l) + q(:,:,l,nq)
             555     3                         elseif( nq == I_QS ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             556     3  pp   8v                   q_cli(:,:,l) = q_cli(:,:,l) + q(:,:,l,nq)
             557     3                         elseif( nq == I_QG ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             558     3  pp   8v                   q_cli(:,:,l) = q_cli(:,:,l) + q(:,:,l,nq)
             559     3                         endif
             560     2                      enddo
             561     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 5
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             562     1  pp   8v             qtot(:,:,l) = q_clw(:,:,l) + q_cli(:,:,l)
             563     1               
             564     1                      call history_in( 'ml_qtot', qtot(:,:,l) )
             565     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             566     1  pp    v             cloud_frac(:,:,l) = 0.0D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 48
                                   <<<      cloud_frac: 48
                                   <<< Loop-information  End >>>
             567     1  pp   8s             where( qtot(:,:,l) >= 0.005D-3 ) !--- tompkins & craig
             568     1   p   8s                cloud_frac(:,:,l) = 1.D0
             569     1                      end where
             570     1               
             571     2                      if (out_cldw) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1778
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             572     2  pp    v                dummy2D(:,K0,l) = 0.D0
             573     3   s                     do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 485
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             574     3  pp   4v                   dummy2D(:,K0,l) = dummy2D(:,K0,l) &
             575     3                                            + rho(:,k,l) * q_clw(:,k,l) * VMTR_VOLUME(:,k,l) / GMTR_area(:,l)
             576     3   p                     enddo
             577     2               
             578     2                         call history_in( 'sl_cldw', dummy2D(:,:,l) )
             579     2                      endif
             580     1               
             581     2                      if (out_cldi) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1778
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             582     2  pp    v                dummy2D(:,K0,l) = 0.D0
             583     3   s                     do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 485
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             584     3  pp   4v                   dummy2D(:,K0,l) = dummy2D(:,K0,l) &
             585     3                                            + rho(:,k,l) * q_cli(:,k,l) * VMTR_VOLUME(:,k,l) / GMTR_area(:,l)
             586     3   p                     enddo
             587     2               
             588     2                         call history_in( 'sl_cldi', dummy2D(:,:,l) )
             589     2                      endif
             590     1                   enddo
             591                     
             592                         !--- mass budget term
             593                         call sfcvar_get( precip, dummy2D_pl, vid = I_PRECIP_TOT )
             594                         call sfcvar_get( evap,   dummy2D_pl, vid = I_EVAP_SFC   )
             595     1   s    s          do l = 1, ADM_lall
             596     1   s    s             call history_in( 'sl_tppn', precip(:,:,l) )
             597     1   s    s             call history_in( 'sl_evap', evap  (:,:,l) )
             598     1   s    s          enddo
             599                     
             600                         !--- energy budget term
             601                         call sfcvar_get( sfcrad,        dummy2D_pl, vid = I_SFCRAD_ENERGY )
             602                         call sfcvar_get( toarad,        dummy2D_pl, vid = I_TOARAD_ENERGY )
             603                         call sfcvar_get( evap_energy,   dummy2D_pl, vid = I_EVAP_ENERGY   )
             604                         call sfcvar_get( precip_energy, dummy2D_pl, vid = I_PRECIP_ENERGY )
             605                         call sfcvar_get( sh_flux_sfc,   dummy2D_pl, vid = I_SH_FLUX_SFC   )
             606                         call sfcvar_get( lh_flux_sfc,   dummy2D_pl, vid = I_LH_FLUX_SFC   )
             607     1   s    s          do l = 1, ADM_lall
             608     1   s    s             call history_in( 'sl_rad_toa',     toarad       (:,:,l) )
             609     1   s    s             call history_in( 'sl_rad_sfc',     sfcrad       (:,:,l) )
             610     1   s    s             call history_in( 'sl_evap_energy', evap_energy  (:,:,l) )
             611     1   s    s             call history_in( 'sl_tppn_energy', precip_energy(:,:,l) )
             612     1   s    s             call history_in( 'sl_sh_sfc',      sh_flux_sfc  (:,:,l) )
             613     1   s    s             call history_in( 'sl_lh_sfc',      lh_flux_sfc  (:,:,l) )
             614     1   s    s          enddo
             615                     
             616                         !--- surface
             617                         call sfcvar_get( tem_sfc, dummy2D_pl, vid = I_TEM_SFC  )
             618                         call sfcvar_get( t2m,     dummy2D_pl, vid = I_T2       )
             619                         call sfcvar_get( q2m,     dummy2D_pl, vid = I_Q2       )
             620                         call sfcvar_get( taux,    dummy2D_pl, vid = I_TAUX_SFC )
             621                         call sfcvar_get( tauy,    dummy2D_pl, vid = I_TAUY_SFC )
             622                         call sfcvar_get( tauz,    dummy2D_pl, vid = I_TAUZ_SFC )
             623                         call sfcvar_get( vx10m,   dummy2D_pl, vid = I_VX10     )
             624                         call sfcvar_get( vy10m,   dummy2D_pl, vid = I_VY10     )
             625                         call sfcvar_get( vz10m,   dummy2D_pl, vid = I_VZ10     )
             626                     
             627                         call sfcvar_get2( albedo_sfc, albedo_sfc_pl, I_ALBEDO_SFC, NRDIR, NRBND )
             628                     
             629     1                   do l = 1, ADM_lall
             630     1                      call sv_pre_sfc( ADM_gall,                 & ! [IN]
             631     1                                       rho    (:,:,l),           & ! [IN]
             632     1                                       pre    (:,:,l),           & ! [IN]
             633     1                                       GRD_vz (:,:,l,GRD_Z),     & ! [IN]
             634     1                                       GRD_zs (:,K0,l,GRD_ZSFC), & ! [IN]
             635     1                                       rho_sfc(:,K0,l),          & ! [OUT]
             636     1                                       pre_sfc(:,K0,l)           ) ! [OUT]
             637     1               
             638     1                      call history_in( 'sl_ps',      pre_sfc(:,:,l) )
             639     1                      call history_in( 'sl_tem_sfc', tem_sfc(:,:,l) )
             640     1                      call history_in( 'sl_t2m',     t2m    (:,:,l) )
             641     1                      call history_in( 'sl_q2m',     q2m    (:,:,l) )
             642     1               
             643     1                      call history_in( 'sl_albedo_sfc', albedo_sfc(:,:,l,NRDIR_DIRECT,NRBND_VIS) )
             644     1                   enddo
             645                     
             646     1                   if (out_slp) then
             647     2                      do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 42
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    MULTI-OPERATION FUNCTION
                                   <<< Loop-information  End >>>
             648     2  pp   8v                slp(:,K0,l) = pre_sfc(:,K0,l) &
             649     2                                     * exp( CNST_EGRAV * GRD_zs(:,K0,l,GRD_ZSFC) &
             650     2                                     / ( CNST_RAIR * ( t2m(:,K0,l) + 0.5D0 * 0.005D0 * ( GRD_zs(:,K0,l,GRD_ZSFC) + 2.D0 ) ) ) )
             651     2               
             652     2                         call history_in( 'sl_slp', slp(:,:,l) )
             653     2                      enddo
             654     1                   endif
             655                     
             656     1                   if (out_850hPa) then   ! [add] 20130705 R.Yoshida
             657     2   s    s             do l = 1, ADM_lall
             658     2   s    s                call sv_plev_uvwt( ADM_gall,        & ! [IN]
             659     2                                            pre    (:,:,l),  & ! [IN]
             660     2                                            u      (:,:,l),  & ! [IN]
             661     2                                            v      (:,:,l),  & ! [IN]
             662     2                                            w      (:,:,l),  & ! [IN]
             663     2                                            tem    (:,:,l),  & ! [IN]
             664     2                                            85000.d0,        & ! [IN]
             665     2                                            u_850  (:,K0,l), & ! [OUT]
             666     2                                            v_850  (:,K0,l), & ! [OUT]
             667     2                                            w_850  (:,K0,l), & ! [OUT]
             668     2                                            t_850  (:,K0,l)  ) ! [OUT]
             669     2               
             670     2   s    s                call history_in( 'sl_u850', u_850(:,:,l) )
             671     2   s    s                call history_in( 'sl_v850', v_850(:,:,l) )
             672     2   s    s                call history_in( 'sl_w850', w_850(:,:,l) )
             673     2   s    s                call history_in( 'sl_t850', t_850(:,:,l) )
             674     2   s    s             enddo
             675     1                   endif
             676                     
             677     1                   if (out_tau_uv) then
             678     2                      do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 485
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             679     2  pp   6v                dummy2D(:,K0,l) = taux(:,K0,l) * GMTR_P_var(:,K0,l,GMTR_P_IX) &
             680     2                                         + tauy(:,K0,l) * GMTR_P_var(:,K0,l,GMTR_P_IY) &
             681     2                                         + tauz(:,K0,l) * GMTR_P_var(:,K0,l,GMTR_P_IZ)
             682     2               
             683     2                         call history_in( 'sl_tauu', dummy2D(:,:,l) )
             684     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 44
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             685     2  pp   4v                dummy2D(:,K0,l) = dummy2D(:,K0,l) * cos( GMTR_P_var(:,K0,l,GMTR_P_LAT) )
             686     2               
             687     2                         call history_in( 'sl_tauucos', dummy2D(:,:,l) )
             688     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 485
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             689     2  pp   6v                dummy2D(:,K0,l) = taux(:,K0,l) * GMTR_P_var(:,K0,l,GMTR_P_JX) &
             690     2                                         + tauy(:,K0,l) * GMTR_P_var(:,K0,l,GMTR_P_JY) &
             691     2                                         + tauz(:,K0,l) * GMTR_P_var(:,K0,l,GMTR_P_JZ)
             692     2               
             693     2                         call history_in( 'sl_tauv', dummy2D(:,:,l) )
             694     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 44
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             695     2  pp   4v                dummy2D(:,K0,l) = dummy2D(:,K0,l) * cos( GMTR_P_var(:,K0,l,GMTR_P_LAT) )
             696     2               
             697     2                         call history_in( 'sl_tauvcos', dummy2D(:,:,l) )
             698     2                      enddo
             699     1                   endif
             700                     
             701     1                   if (out_10m_uv) then
             702     2                      do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 485
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             703     2  pp   6v                dummy2D(:,K0,l) = vx10m(:,K0,l) * GMTR_P_var(:,K0,l,GMTR_P_IX) &
             704     2                                         + vy10m(:,K0,l) * GMTR_P_var(:,K0,l,GMTR_P_IY) &
             705     2                                         + vz10m(:,K0,l) * GMTR_P_var(:,K0,l,GMTR_P_IZ)
             706     2               
             707     2                         call history_in( 'sl_u10m', dummy2D(:,:,l) )
             708     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 44
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             709     2  pp   4v                dummy2D(:,K0,l) = dummy2D(:,K0,l) * cos( GMTR_P_var(:,K0,l,GMTR_P_LAT) )
             710     2               
             711     2                         call history_in( 'sl_ucos10m', dummy2D(:,:,l) )
             712     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 485
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             713     2  pp   6v                dummy2D(:,K0,l) = vx10m(:,K0,l) * GMTR_P_var(:,K0,l,GMTR_P_JX) &
             714     2                                         + vy10m(:,K0,l) * GMTR_P_var(:,K0,l,GMTR_P_JY) &
             715     2                                         + vz10m(:,K0,l) * GMTR_P_var(:,K0,l,GMTR_P_JZ)
             716     2               
             717     2                         call history_in( 'sl_v10m', dummy2D(:,:,l) )
             718     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 44
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             719     2  pp   4v                dummy2D(:,K0,l) = dummy2D(:,K0,l) * cos( GMTR_P_var(:,K0,l,GMTR_P_LAT) )
             720     2               
             721     2                         call history_in( 'sl_vcos10m', dummy2D(:,:,l) )
             722     2                      enddo
             723     1                   endif
             724                     
             725     1                   if (out_vap_atm) then
             726     2                      do l = 1, ADM_lall
             727     3   s                     do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 471
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             728     3  pp   4v                   dummy2D(:,K0,l) = dummy2D(:,K0,l) &
             729     3                                            + rho(:,k,l) * q(:,k,l,I_QV) * VMTR_VOLUME(:,k,l) / GMTR_area(:,l)
             730     3   p                     enddo
             731     2               
             732     2                         call history_in( 'sl_vap_atm', dummy2D(:,:,l) )
             733     2                      enddo
             734     1                   endif
             735                     
             736     1                   if (out_tem_atm) then
             737     2                      do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1778
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             738     2  pp    v                dummy2D(:,K0,l) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 9
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             739     2  pp    v                rw(:,:)         = 0.D0
             740     3   s                     do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 458
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             741     3  pp   6v                   dummy2D(:,K0,l) = dummy2D(:,K0,l) + rho(:,k,l) * tem(:,k,l) * VMTR_VOLUME(:,k,l)
             742     3   p   6v                   rw     (:,l)    = rw     (:,l)    + rho(:,k,l)              * VMTR_VOLUME(:,k,l)
             743     3   p                     enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 572
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             744     2  pp   6v                dummy2D(:,K0,l) = dummy2D(:,K0,l) / rw(:,l)
             745     2               
             746     2                         call history_in( 'sl_tem_atm', dummy2D(:,:,l) )
             747     2                      enddo
             748     1                   endif
             749                     
             750                         !--- radiation flux
             751                         call sfcvar_get( rfluxs_sd,      dummy2D_pl, vid = I_RFLUXS_SD      )
             752                         call sfcvar_get( rfluxs_su,      dummy2D_pl, vid = I_RFLUXS_SU      )
             753                         call sfcvar_get( rfluxs_ld,      dummy2D_pl, vid = I_RFLUXS_LD      )
             754                         call sfcvar_get( rfluxs_lu,      dummy2D_pl, vid = I_RFLUXS_LU      )
             755                         call sfcvar_get( rflux_toa_sd,   dummy2D_pl, vid = I_RFLUX_TOA_SD   )
             756                         call sfcvar_get( rflux_toa_su,   dummy2D_pl, vid = I_RFLUX_TOA_SU   )
             757                         call sfcvar_get( rflux_toa_ld,   dummy2D_pl, vid = I_RFLUX_TOA_LD   )
             758                         call sfcvar_get( rflux_toa_lu,   dummy2D_pl, vid = I_RFLUX_TOA_LU   )
             759                         call sfcvar_get( rflux_toa_su_c, dummy2D_pl, vid = I_RFLUX_TOA_SU_C )
             760                         call sfcvar_get( rflux_toa_lu_c, dummy2D_pl, vid = I_RFLUX_TOA_LU_C )
             761     1                   do l = 1, ADM_lall
             762     1                      call history_in( 'sl_swd_sfc',   rfluxs_sd     (:,:,l) )
             763     1                      call history_in( 'sl_swu_sfc',   rfluxs_su     (:,:,l) )
             764     1                      call history_in( 'sl_lwd_sfc',   rfluxs_ld     (:,:,l) )
             765     1                      call history_in( 'sl_lwu_sfc',   rfluxs_lu     (:,:,l) )
             766     1                      call history_in( 'sl_swd_toa',   rflux_toa_sd  (:,:,l) )
             767     1                      call history_in( 'sl_swu_toa',   rflux_toa_su  (:,:,l) )
             768     1                      call history_in( 'sl_lwu_toa',   rflux_toa_lu  (:,:,l) )
             769     1                      call history_in( 'sl_lwd_toa',   rflux_toa_ld  (:,:,l) )
             770     1                      call history_in( 'sl_lwu_toa_c', rflux_toa_lu_c(:,:,l) )
             771     1                      call history_in( 'sl_swu_toa_c', rflux_toa_su_c(:,:,l) )
             772     1               
             773     2                      if (out_albedo) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 373
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             774     2  pp   4v                dummy2D(:,K0,l) = min( rflux_toa_su(:,K0,l) / max( rflux_toa_sd(:,K0,l), CNST_EPS_ZERO ), 1.D0 )
             775     2                         call history_in( 'sl_albedo', dummy2D(:,:,l) )
             776     2                      endif
             777     1                   enddo
             778                     
             779                         return
             780                       end subroutine history_vars
             781                     
             782                       subroutine sv_pre_sfc( &
             783                            ijdim,   &
             784                            rho,     &
             785                            pre,     &
             786                            z,       &
             787                            z_srf,   &
             788                            rho_srf, &
             789                            pre_srf  )
             790                         use mod_adm, only :  &
             791                            kdim => ADM_kall,    &
             792                            kmin => ADM_kmin
             793                         use mod_cnst, only :  &
             794                            CNST_EGRAV
             795                         implicit none
             796                     
             797                         integer, intent(in)  :: ijdim
             798                         real(8), intent(in)  :: rho    (ijdim,kdim)
             799                         real(8), intent(in)  :: pre    (ijdim,kdim)
             800                         real(8), intent(in)  :: z      (ijdim,kdim)
             801                         real(8), intent(in)  :: z_srf  (ijdim)
             802                         real(8), intent(out) :: rho_srf(ijdim)
             803                         real(8), intent(out) :: pre_srf(ijdim)
             804                     
             805                         integer :: ij
             806                         !---------------------------------------------------------------------------
             807                     
             808                         !--- surface density ( extrapolation )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 373
                                   <<<  [OPTIMIZATION]
                                   <<<    FUSED(lines: 809,815)
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             809     1  pp   4v          do ij = 1, ijdim
             810     1   p   4v             rho_srf(ij) = rho(ij,kmin) &
             811     1                                  - ( rho(ij,kmin+1)-rho(ij,kmin) ) * ( z(ij,kmin)-z_srf(ij) ) / ( z(ij,kmin+1)-z(ij,kmin) )
             812     1   p   4v          enddo
             813                     
             814                         !--- surface pressure ( hydrostatic balance )
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    FUSED
                                   <<< Loop-information  End >>>
             815     1                   do ij = 1, ijdim
             816     1                      pre_srf(ij) = pre(ij,kmin) + 0.5D0 * ( rho_srf(ij)+rho(ij,kmin) ) * CNST_EGRAV * ( z(ij,kmin)-z_srf(ij) )
             817     1                   enddo
             818                     
             819                         return
             820                       end subroutine sv_pre_sfc
             821                     
             822                       !-----------------------------------------------------------------------------
             823                       ! [add] 20130705 R.Yoshida
             824                       subroutine sv_plev_uvwt( &
             825                            ijdim, &
             826                            pre,   &
             827                            u_z,   &
             828                            v_z,   &
             829                            w_z,   &
             830                            t_z,   &
             831                            plev,  &
             832                            u_p,   &
             833                            v_p,   &
             834                            w_p,   &
             835                            t_p    )
             836                         use mod_adm, only: &
             837                            kdim => ADM_kall, &
             838                            kmin => ADM_kmin
             839                         implicit none
             840                     
             841                         integer, intent(in)  :: ijdim
             842                         real(8), intent(in)  :: pre(ijdim,kdim)
             843                         real(8), intent(in)  :: u_z(ijdim,kdim)
             844                         real(8), intent(in)  :: v_z(ijdim,kdim)
             845                         real(8), intent(in)  :: w_z(ijdim,kdim)
             846                         real(8), intent(in)  :: t_z(ijdim,kdim)
             847                         real(8), intent(in)  :: plev
             848                         real(8), intent(out) :: u_p(ijdim)
             849                         real(8), intent(out) :: v_p(ijdim)
             850                         real(8), intent(out) :: w_p(ijdim)
             851                         real(8), intent(out) :: t_p(ijdim)
             852                     
             853                         integer :: kl(ijdim)
             854                         integer :: ku(ijdim)
             855                     
             856                         real(8) :: wght_l, wght_u
             857                     
             858                         integer :: ij, k
             859                         !---------------------------------------------------------------------------
             860                     
             861                         ! search z-level
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 4
                                   <<<      ku: 2, kl: 2
                                   <<< Loop-information  End >>>
             862     1                   do ij = 1, ijdim
             863     2       8              do k = kmin, kdim
             864     2       8                 if( pre(ij,k) < plev ) exit
             865     2       8              enddo
             866     1                      if( k >= kdim ) stop "internal error! [sv_uvwp_850/mod_history_vars]"
             867     1               
             868     1                      ku(ij) = k
             869     1                      kl(ij) = k - 1
             870     1                   enddo
             871                     
             872                         ! interpolate
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 21
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             873     1  pp    v          do ij = 1, ijdim
             874     1   p    v             wght_l = ( log(plev)           - log(pre(ij,ku(ij))) ) &
             875     1                             / ( log(pre(ij,kl(ij))) - log(pre(ij,ku(ij))) )
             876     1               
             877     1   p    v             wght_u = ( log(pre(ij,kl(ij))) - log(plev)           ) &
             878     1                             / ( log(pre(ij,kl(ij))) - log(pre(ij,ku(ij))) )
             879     1               
             880     1   p    v             u_p(ij) = wght_l * u_z(ij,kl(ij)) + wght_u * u_z(ij,ku(ij))
             881     1   p    v             v_p(ij) = wght_l * v_z(ij,kl(ij)) + wght_u * v_z(ij,ku(ij))
             882     1   p    v             w_p(ij) = wght_l * w_z(ij,kl(ij)) + wght_u * w_z(ij,ku(ij))
             883     1   p    v             t_p(ij) = wght_l * t_z(ij,kl(ij)) + wght_u * t_z(ij,ku(ij))
             884     1   p    v          enddo
             885                     
             886                         return
             887                       end subroutine sv_plev_uvwt
             888                     
             889                     end module mod_history_vars
             890                     !-------------------------------------------------------------------------------

 Diagnostic messages: program name(mod_history_vars)
   jwd8220o-i  "nhm/share/mod_history_vars.f90", line 49: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
  Module subprogram name(history_vars)
   jwd8209o-i  "nhm/share/mod_history_vars.f90", line 499: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_history_vars.f90", line 574: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_history_vars.f90", line 584: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_history_vars.f90", line 648: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_history_vars.f90", line 679: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_history_vars.f90", line 689: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_history_vars.f90", line 703: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_history_vars.f90", line 713: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_history_vars.f90", line 728: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_history_vars.f90", line 742: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(sv_pre_sfc)
   jwd8209o-i  "nhm/share/mod_history_vars.f90", line 810: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_history_vars.f90", line 812: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_history_vars.f90", line 816: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(sv_plev_uvwt)
   jwd8206o-i  "nhm/share/mod_history_vars.f90", line 874: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "nhm/share/mod_history_vars.f90", line 877: Division is changed to multiplication by reciprocal.

 Procedure information
   Lines      : 890
   Statements : 439
   Stack(byte): 8208
   Prefetch num: 52

 Total information
   Procedures       : 1
   Total lines      : 890
   Total statements : 439
   Total stack(byte): 8208
   Total prefetch num: 52


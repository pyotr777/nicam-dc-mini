
 Fujitsu Fortran Version 1.2.0  Mon Dec 21 17:16:46 2015

 Compilation information
   Current directory : /volume1/home/ra000007/a03106/nicam-dc-mini/src
   Source file       : nhm/share/mod_diagvar.f90

 Option information
   Command line options : -Kident_mpi -f2004 -Kfast,parallel,auto,ocl,preex,array_private,noalias=s,mfunc=2 -Kparallel_iteration=8,instance=8,dynamic_iteration -Qi -Qt -X03 -Ncompdisp -Koptmsg=1 -Cpp -Kprefetch_cache_level=all,prefetch_iteration_L2=50 -Ksimd -Ntl_notrt -U_FIPP_ -U_FAPP_ -I../src/include -o mod_diagvar.o -c -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -W0,-zmpa=Yignore-intent -I/opt/FJSVtclang/GM-1.2.0-19/lib64
   Cpp options          : -U_FIPP_ -U_FAPP_ -I../src/include -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -I/opt/FJSVtclang/GM-1.2.0-19/lib64 -D__FUJITSU -Dunix -Dsparc -D__sparc__ -D__unix -D__sparc -D__frt_version=700 -D__HPC_ACE__ -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -Dlinux -otmp -D__sparcv9 -D__sparc_v9__ -D__arch64__
   Effective options    : -fi -g0 -AE -Free -O3 -Qi,p,t -X03
                          -x0
                          -KFLTLD -Kadr44 -Knoalias=s -Kauto -Knoautoobjstack
                          -Knocalleralloc -Kdalign -Keval -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kilfunc
                          -Klargepage -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_if -Kloop_fusion
                          -Kloop_interchange -Kloop_nopart_parallel
                          -Kloop_nopart_simd -Kloop_noversioning -Kns
                          -Kmfunc=2 -Kocl -Komitfp -Koptmsg=1 -Kpreex
                          -Kprefetch_conditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_iteration_L2=50 -Kprefetch_nostrong
                          -Kprefetch_strong_L2 -Knoshortloop -Ksimd=1
                          -Knosimd_region_constant -Knostriping -Kswp
                          -Knotemparraystack -Kunroll -Knouxsimd -KNOXFILL
                          -Knoopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_noordered_reduction -Knothreadsafe
                          -Kparallel -Kparallel_nofp_precision
                          -Karray_private -Kdynamic_iteration -Kreduction
                          -Kregion_extension -Kinstance=8
                          -Kparallel_iteration=8
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Ncompdisp
                          -Nnocopyarg -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nline -Nlst -Nlst=i -Nlst=p -Nlst=t
                          -Nnomallocfree -Nnoobsfun -Nquickdbg=noargchk
                          -Nquickdbg=nosubchk -Nquickdbg=noundef -NRnotrap
                          -Nnorecursive -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 Module "mod_diagvar"
  (inc)(line-no.)(nest)(optimize)
               1                     !-------------------------------------------------------------------------------
               2                     !
               3                     !+  Module for diagnosys
               4                     !
               5                     !-------------------------------------------------------------------------------
               6                     module mod_diagvar
               7                       !-----------------------------------------------------------------------------
               8                       !
               9                       !++ Description:
              10                       !       This module provides diagnosys
              11                       !       in non-hydrostatic model.
              12                       !
              13                       !
              14                       !++ Current Corresponding Author : M.Satoh
              15                       !
              16                       !++ History:
              17                       !      Version   Date       Comment
              18                       !      -----------------------------------------------------------------------
              19                       !      0.00      04-11-02   NICAM nicam_start041102.tgz
              20                       !      0.01      04-12-07   M.Satoh: add diagvar_checkvalues
              21                       !                05-11-15   M.Satoh: diagvar_comm
              22                       !                07-07-17   A.T.Noda:
              23                       !                           1. Add I_QKEd, I_TSQd, I_QSQd, I_COVd, I_CFRACP
              24                       !                              I_QCLWB, I_QCLIWB for turbulent module.
              25                       !                           2. Add diagvar_timeinfo
              26                       !                07-07-23   K.Suzuki: Add I_DFE for use in SPRINTARS
              27                       !                07-11-06   T.Mitsui: Save memory and add flag_diagset(debug for SPRINTARS)
              28                       !                07-12-05   T.Mitsui: add UNCCN for restart and diag_cname(order cname)
              29                       !                08-03-10   T.Mitsui: add output of intermediate restart file
              30                       !                08-05-30   T.Mitsui: call diagvar_comm in diagvar_restart_output
              31                       !                09-01-28   A.T.Noda: Implement mynn
              32                       !                09-08-18   T.Mitsui: clear up intent(in) for -debug option @ SR11000
              33                       !                10-04-26   M.Satoh: add diagvar1,
              34                       !                                    diagvar_get_in_1layer,
              35                       !                                    diagvar_set_in_1layer
              36                       !                                    diagvar_get_in_1layer_region,
              37                       !                                    diagvar_set_in_1layer_region
              38                       !                10-05-05   M.Satoh: add
              39                       !                                    diagvar_get_in_region,
              40                       !                                    diagvar_set_in_region
              41                       !                10-06-19   A.T.Noda:
              42                       !                             1. Allow to use a convection parameterization
              43                       !                                with advanced microphysics schemes (G98, NSW?, ...)
              44                       !                             2. bug fix in call of diagvar_timeinfo
              45                       !                10-08-03   T.Mitsui: fix for gfortran
              46                       !                11-05-07   Y.Yamada: Implementation of ES tuning cord by NEC.
              47                       !                             Modified line: (2011/03/02 NEC)
              48                       !                11-08-16   M.Satoh: bug fix for TDK: conv => tendency
              49                       !                11-08-16   M.Satoh: implementation for Chikira scheme:
              50                       !                                    introduce diagvarn for n-layers diagnostic variables
              51                       !                11-08-16b  M.Satoh : update TIEDKE, cp_driver
              52                       !                11-08-17   M.Satoh : bug fix
              53                       !                11-08-30   A.Noda  : bug fix
              54                       !                11-09-03   H.Yashiro : New I/O
              55                       !                11-11-02   H.Yashiro : bug fix
              56                       !                11-11-25   Y.Yamada : bug fix
              57                       !                12-03-09   S.Iga: tuned (phase4-1)
              58                       !                12-03-28   T.Seiki  : bug fix (doesn't affect at this moment)
              59                       !                12-06-07   T.Seiki  : trivial modification for multi-job run
              60                       !      -----------------------------------------------------------------------
              61                       !
              62                       !-----------------------------------------------------------------------------
              63                       !
              64                       !++ Used modules
              65                       !
              66                       use mod_adm, only : &
              67                            ADM_MAXFNAME,  &
              68                            ADM_LOG_FID,       &
              69                            ADM_CTL_FID,       &
              70                            ADM_GALL_PL,       &
              71                            ADM_LALL_PL,       &
              72                            ADM_prc_me,        &
              73                            ADM_prc_pl,        &
              74                            ADM_kall,          &
              75                            ADM_KNONE,         &
              76                            ADM_gall,          &
              77                            ADM_gmin,          &
              78                            ADM_gmax,          &
              79                            ADM_lall,          &
              80                            ADM_gall_1d,       &
              81                            ADM_IopJop_nmax,   &
              82                            ADM_IopJop,        &
              83                            ADM_GIoJo,         &
              84                            ADM_rgnid_npl_mng, &
              85                            ADM_rgnid_spl_mng, &
              86                            ADM_prc_tab,       &
              87                            ADM_prc_npl,       &
              88                            ADM_prc_spl,       &
              89                            ADM_GSLF_PL,       &
              90                            ADM_NPL,           &
              91                            ADM_SPL,           &
              92                            ADM_COMM_RUN_WORLD,&
              93                            ADM_rgn2prc,       &
              94                            ADM_proc_stop,     &
              95                            ADM_NSYS
              96                       use mod_comm, only : &
              97                            COMM_data_transfer
              98                     
              99                       implicit none
             100                     
             101                       logical, private,save ::  flag_diagset           ! [Add] 07.11.06 T.Mitsui
             102                       !
             103                       integer, public, save ::  DIAG_VMAX
             104                       integer, private      ::  I_STA
             105                       integer, private      ::  I_END
             106                     
             107                       ! [Add] 10.04.26 M.Satoh
             108                       integer, public, save ::  DIAG_VMAX_1LAYER
             109                       integer, private      ::  I_STA_1LAYER ! 2010.5.5 M.Satoh [add]
             110                       integer, private      ::  I_END_1LAYER
             111                     
             112                       ! [Add] 11.07.25 M.Satoh
             113                       integer, public, save ::  DIAG_VMAX_NLAYER
             114                       integer, private      ::  I_STA_NLAYER
             115                       integer, private      ::  I_END_NLAYER
             116                       integer, public, save ::  DIAG_KTOT_NLAYER
             117                     
             118                       ! only for CP_TYPE == CLOUD_PARAM
             119                       ! 07/12/05 [Mod] T.Mitsui
             120                     !!$  integer, private,save ::  I_CLOUD_PARAM_VMAX ! 11/08/16b M.Satoh [del]
             121                       integer, public, save ::  I_CUMCLW       = -999
             122                       integer, public, save ::  I_GDCLW        = -999
             123                       integer, public, save ::  I_GDCFRC       = -999
             124                       integer, public, save ::  I_CBMFX        = -999
             125                       integer, public, save ::  I_RHOGQV_CONV  = -999
             126                       integer, public, save ::  I_QV_DYN_TEND  = -999 ! 11/08/16 M.Satoh
             127                       integer, public, save ::  I_QV_TB_TEND  = -999  ! 11/08/16 M.Satoh
             128                     !!$  integer, public, save ::  I_RHOGQV_CONV_TB = -999 ! 10/05/06 M.Satoh
             129                       integer, public, save ::  I_EVAP_SFC     = -999 ! 10/05/22 M.Satoh
             130                       integer, public, save ::  I_SH_FLUX_SFC  = -999 ! 2011/08/16b M.Satoh
             131                       ! 11/08/16 M.Satoh
             132                       !   I_CBMFX_CHIKIRA is specific to Chikira scheme,
             133                       !   while I_CBMFX is generic for any cumulus parameterization.
             134                       !   The variable for I_CBMFX_CHIKIRA has NCTP layers,
             135                       !   while the variable for I_CBMFX has ADM_kall layers.
             136                       integer, public, save ::  I_CBMFX_CHIKIRA = -999 ! 11/08/16 M.Satoh
             137                       ! only for TB_TYPE == MY2MOIST
             138                       ! 07/12/05 [Mod] T.Mitsui
             139                     !!$  integer, private, parameter :: I_MY2MOIST_VMAX = 7
             140                     ! integer, private,save ::  I_MY2MOIST_VMAX
             141                       integer, private,save ::  I_TURB_VMAX
             142                       integer, public, save ::  I_QKEd         = -999
             143                       integer, public, save ::  I_TSQd         = -999
             144                       integer, public, save ::  I_QSQd         = -999
             145                       integer, public, save ::  I_COVd         = -999
             146                       integer, public, save ::  I_CFRACP       = -999
             147                       integer, public, save ::  I_QCLWB        = -999
             148                       integer, public, save ::  I_QCLIB        = -999
             149                       ! only for AE_TYPE == SPRINTARS
             150                       ! 07/12/05 [Mod] T.Mitsui
             151                     !!$  integer, private, parameter :: I_SPRINTARS_VMAX = 1
             152                       integer, private,save ::  I_SPRINTARS_VMAX
             153                       integer, public, save ::  I_DFE          = -999
             154                       ! 07/12/05 [Add] T.Mitsui
             155                       ! for Cloudmicrophysics
             156                       integer, private,save ::  I_MP_VMAX
             157                       integer, public, save ::  I_UNCCN        = -999
             158                     
             159                       ! 10/04/26 [Add] M.Satoh
             160                       ! for roughness_seq_yqw
             161                     !!$  integer, private,save ::  I_ROUGHNESS_SEA_MAX    ! 10/05/05 [add] M.Satoh; 11/08/16 M.Satoh [del]
             162                       integer, public, save ::  I_ROUGHNESS_SEA = -999 ! 10/04/26 [add] M.Satoh
             163                       !
             164                       real(8), public, allocatable, save :: diagvar(:,:,:,:)
             165                       real(8), public, allocatable, save :: diagvar_pl(:,:,:,:)
             166                     
             167                       real(8), public, allocatable, save :: diagvar1(:,:,:,:) ! 10/04/26 [add] M.Satoh
             168                       real(8), public, allocatable, save :: diagvar1_pl(:,:,:,:) ! 10/04/26 [add] M.Satoh
             169                       real(8), public, allocatable, save :: diagvarn(:,:,:,:) ! 11/08/16 [add] M.Satoh
             170                       real(8), public, allocatable, save :: diagvarn_pl(:,:,:,:) ! 11/08/16 [add] M.Satoh
             171                       !
             172                       integer, private, parameter :: DIAG_VMAX_DEF = 256 ! 2010/05/05 M.Satoh [add]
             173                       character(len=ADM_NSYS), public, save :: &
             174                            diag_cname(DIAG_VMAX_DEF)             ! 07/12/05 [Add] T.Mitsui
             175                       character(len=ADM_NSYS), public, save :: &
             176                            diag_cname_1layer(DIAG_VMAX_DEF)      ! 10/04/29 [Add] M.Satoh
             177                       character(len=ADM_NSYS), public, save :: &
             178                            diag_cname_nlayer(DIAG_VMAX_DEF)      ! 11/08/16 [Add] M.Satoh
             179                       integer, public, save :: &
             180                            diag_knum_nlayer(DIAG_VMAX_DEF)       ! 11/08/16 [Add] M.Satoh
             181                       integer, public, save :: &
             182                            diag_ksta_nlayer(DIAG_VMAX_DEF)       ! 11/08/16 [Add] M.Satoh
             183                       integer, public, save :: &
             184                            diag_kend_nlayer(DIAG_VMAX_DEF)       ! 11/08/16 [Add] M.Satoh
             185                       !
             186                       public :: diagvar_setup
             187                       public :: diagvar_get
             188                       public :: diagvar_set
             189                       public :: diagvar_get_in
             190                       public :: diagvar_set_in
             191                       public :: diagvar_get_in_region ! 2010.5.5 M.Satoh
             192                       public :: diagvar_set_in_region ! 2010.5.5 M.Satoh
             193                       public :: diagvar_get_in_1layer ! 2010.4.26 M.Satoh
             194                       public :: diagvar_set_in_1layer ! 2010.4.26 M.Satoh
             195                       public :: diagvar_get_in_1layer_region ! 2010.5.5 M.Satoh
             196                       public :: diagvar_set_in_1layer_region ! 2010.5.5 M.Satoh
             197                       public :: diagvar_get_in_1layer_k ! 2011/03/02 NEC
             198                       public :: diagvar_get_in_nlayer_region ! 2011.8.16 M.Satoh
             199                       public :: diagvar_set_in_nlayer_region ! 2011.8.16 M.Satoh
             200                       public :: diagvar_comm
             201                       public :: diagvar_checkvalues
             202                       public :: diagvar_restart_output
             203                     
             204                       character(LEN=ADM_MAXFNAME), private, save :: output_basename = '' ! [add] H.Yashiro 20120512
             205                       ! [Add] 2012/06/07 T.Seiki, for multi-job system with LEGACY formatted data
             206                       character(ADM_MAXFNAME), private, save  :: output_basename_CBMFX = ''
             207                       character(ADM_MAXFNAME), private, save  :: output_basename_MP    = ''
             208                       character(ADM_MAXFNAME), private, save  :: output_basename_QV_TB_TEND = ''
             209                       character(ADM_MAXFNAME), private, save  :: output_basename_EVAP_SFC = ''
             210                       character(ADM_MAXFNAME), private, save  :: output_basename_SH_FLUX_SFC = ''
             211                       character(ADM_MAXFNAME), private, save  :: output_basename_ROUGHNESS_SEA = ''
             212                       character(ADM_MAXFNAME), private, save  :: output_basename_CBMFX_CHIKIRA = ''
             213                     
             214                       character(ADM_MAXFNAME), private, save  :: CBMFX_fname = 'NONE'
             215                       character(ADM_MAXFNAME), private, save  :: TB_fname    = 'NONE' ! 07/07/05 A.T.Noda
             216                       character(ADM_MAXFNAME), private, save  :: MP_fname    = 'NONE' ! 07/12/05  T.Mitsui
             217                       character(ADM_MAXFNAME), private, save  :: QV_TB_TEND_fname = 'NONE' ! 11/08/16 M.Satoh
             218                     !!$  character(ADM_MAXFNAME), private, save  :: RHOGQV_CONV_TB_fname = 'NONE' ! 10/05/06  M.Satoh
             219                       character(ADM_MAXFNAME), private, save  :: EVAP_SFC_fname = 'NONE' ! 10/05/22  M.Satoh
             220                       character(ADM_MAXFNAME), private, save  :: SH_FLUX_SFC_fname = 'NONE' ! 11/08/16b  M.Satoh
             221                       character(ADM_MAXFNAME), private, save  :: ROUGHNESS_SEA_fname = 'NONE' ! 10/04/28 M.Satoh
             222                       character(ADM_MAXFNAME), private, save  :: CBMFX_CHIKIRA_fname = 'NONE' ! 11/08/16 M.Satoh
             223                     
             224                       logical, private, save :: input_direct_access = .false.
             225                       logical, private, save :: output_direct_access = .false.
             226                     
             227                       character(LEN=ADM_MAXFNAME), private, save :: input_io_mode  = 'LEGACY' ! [add] H.Yashiro 20110819
             228                       character(LEN=ADM_MAXFNAME), private, save :: output_io_mode = 'LEGACY' ! [add] H.Yashiro 20110819
             229                       character(LEN=ADM_MAXFNAME), private, save :: restart_layername = ''    ! [add] H.Yashiro 20110826
             230                     
             231                       integer :: NCTP = 14 !! No. of cloud types for CHIKIRA scheme: 11/08/16 M.Satoh
             232                       !-----------------------------------------------------------------------------
             233                     contains
             234                       !-----------------------------------------------------------------------------
             235                       subroutine diagvar_setup
             236                         !
             237                         use mod_misc, only : &
             238                              MISC_msg_nmerror
             239                         use mod_gtl, only : &
             240                              GTL_input_var2,  &
             241                              GTL_input_var2_da
             242                         use mod_runconf, only : &
             243                              RAIN_TYPE,         &
             244                              TB_TYPE,           &    ! 07/07/05 A.T.Noda
             245                              RAD_CLOUD_TYPE,    &    ! 07/07/05 A.T.Noda
             246                              AE_TYPE,           &    ! 07/11/06 T.Mitsui
             247                              MP_TYPE,           &    ! 07/12/05 T.Mitsui
             248                              CP_TYPE,           &    ! 10/05/05 M.Satoh
             249                              ROUGHNESS_SEA_TYPE      ! 10/04/28 M.Satoh
             250                         use mod_comm, only : &
             251                              comm_var
             252                         use mod_fio, only : & ! [add] H.Yashiro 20110819
             253                              FIO_input
             254                         implicit none
             255                         !
             256                         namelist / DIAGVARPARAM / &
             257                              CBMFX_fname,         &
             258                              TB_fname,            &  ! 07/07/05 A.T.Noda
             259                              MP_fname,            &  ! 07/12/05 T.Mitsui
             260                              QV_TB_TEND_fname,    &  ! 11/08/16 M.Satoh
             261                     !!$         RHOGQV_CONV_TB_fname, & ! 10/05/22 M.Satoh
             262                              EVAP_SFC_fname,      &  ! 10/05/22 M.Satoh
             263                              SH_FLUX_SFC_fname,   &  ! 11/08/16 M.Satoh
             264                              ROUGHNESS_SEA_fname, &  ! 10/04/28 M.Satoh
             265                              CBMFX_CHIKIRA_fname, &  ! 11/08/16 M.Satoh
             266                              input_direct_access, &
             267                              output_direct_access, &
             268                              input_io_mode,       & !--- [add] H.Yashiro 20110819
             269                              output_io_mode,      & !--- [add] H.Yashiro 20110819
             270                              restart_layername,   & !--- [add] H.Yashiro 20110826
             271                              output_basename, &     !--- [add] H.Yashiro 20120512
             272                              output_basename_CBMFX,         & ! [Add] 2012/06/07 T.Seiki
             273                              output_basename_MP,            & ! [Add] 2012/06/07 T.Seiki
             274                              output_basename_QV_TB_TEND,    & ! [Add] 2012/06/07 T.Seiki
             275                              output_basename_EVAP_SFC,      & ! [Add] 2012/06/07 T.Seiki
             276                              output_basename_SH_FLUX_SFC,   & ! [Add] 2012/06/07 T.Seiki
             277                              output_basename_ROUGHNESS_SEA, & ! [Add] 2012/06/07 T.Seiki
             278                              output_basename_CBMFX_CHIKIRA    ! [Add] 2012/06/07 T.Seiki
             279                     
             280                         NAMELIST / NM_CP_CHIKIRA_SETUP / &
             281                              NCTP
             282                         !
             283                         integer :: ierr
             284                         integer :: iv         ! 07/12/05 [Add] T.Mitsui
             285                         integer :: ksta, kend ! 11/07/26 [Add] M.Satoh
             286                         !---------------------------------------------------------------------------
             287                     
             288                         !
             289                         ! [Add] T.Mitsui 07/11/06
             290                         I_STA        = 0
             291                         I_END        = 0
             292                         flag_diagset = .false.
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 78
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             293        pp               diag_cname(:) = ''
             294         p               diag_cname_1layer(:) = '' ! 10/04/29 M.Satoh
             295         p               diag_cname_nlayer(:) = '' ! 11/08/16 M.Satoh
             296         p               diag_knum_nlayer(:) = 0   ! 11/08/16 M.Satoh
             297         p               diag_ksta_nlayer(:) = 0   ! 11/08/16 M.Satoh
             298         p               diag_kend_nlayer(:) = 0   ! 11/08/16 M.Satoh
             299                         ! [Add] 07/12/05 Mitsui
             300     1                   if(  trim(MP_TYPE) /= 'NONE' ) then
             301     1                      flag_diagset  = .true.
             302     1                      I_STA         = I_END + 1
             303     1                      I_UNCCN       = I_STA
             304     1                      I_END         = I_STA
             305     1                      I_MP_VMAX     = I_END - I_STA + 1
             306     1                      diag_cname(I_UNCCN) = 'unccn'
             307     1                   end if
             308     1                   if(  trim(CP_TYPE)/='NONE' ) then ! 10/06/10 A.T.Noda
             309     1                      flag_diagset  = .true.
             310     1                      I_STA         = I_END + 1
             311     1                      I_CUMCLW      = I_STA
             312     1                      I_GDCLW       = I_STA + 1
             313     1                      I_GDCFRC      = I_STA + 2
             314     1                      I_CBMFX       = I_STA + 3
             315     1                      I_END         = I_STA + 3
             316     1                      ![Add] 07/12/05 Mitsui
             317     1                      diag_cname(I_CUMCLW)      = 'cumclw'
             318     1                      diag_cname(I_GDCLW)       = 'gdclw'
             319     1                      diag_cname(I_GDCFRC)      = 'gdcfrc'
             320     1                      diag_cname(I_CBMFX)       = 'cbmfx'
             321     1               
             322     1                      ! 2010/05/11 M.Satoh
             323     2                      if ( trim(CP_TYPE) == 'KUO' ) then
             324     2                         I_RHOGQV_CONV    = I_STA + 4
             325     2                         I_END            = I_STA + 4
             326     2                         diag_cname(I_RHOGQV_CONV) = 'rhogqv_conv'
             327     2                      end if
             328     2                      if ( trim(CP_TYPE) == 'TDK' ) then
             329     2                         ! 2011.08.16 M.Satoh,bug fix: conv => tendency
             330     2                         I_QV_DYN_TEND   = I_STA + 4
             331     2                         I_QV_TB_TEND    = I_STA + 5
             332     2               !!$          I_RHOGQV_CONV    = I_STA + 4
             333     2               !!$          I_RHOGQV_CONV_TB = I_STA + 5
             334     2                         I_END            = I_STA + 5
             335     2                         diag_cname(I_QV_DYN_TEND) = 'qv_dyn_tend'
             336     2                         diag_cname(I_QV_TB_TEND) = 'qv_tb_tend'
             337     2               !!$          diag_cname(I_RHOGQV_CONV) = 'rhogqv_conv'
             338     2               !!$          diag_cname(I_RHOGQV_CONV_TB) = 'rhogqv_conv_tb'
             339     2                      end if
             340     1               
             341     1               !      I_CLOUD_PARAM_VMAX = I_END - I_STA + 1 ! not used ? ! 11/08/16b M.Satoh [del]
             342     1                   end if
             343                     
             344     1                   if(     trim(TB_TYPE)=='MY2MOIST' .or. trim(TB_TYPE)=='MYNN2' &     !==> 09/01/28 A.T.Noda
             345     1                      .or. trim(TB_TYPE)=='MYNN2.5'  .or. trim(TB_TYPE)=='MYNN3' ) then
             346     1                      flag_diagset  = .true.
             347     1                      I_STA = I_END + 1
             348     2                      if( trim(TB_TYPE)=='MY2MOIST' .or. trim(TB_TYPE)=='MYNN2' .or. trim(TB_TYPE)=='MYNN2.5')then
             349     3                        if( trim(TB_TYPE)=='MY2MOIST' .or. trim(TB_TYPE)=='MYNN2' )then
             350     3                          I_END         = I_END + 1
             351     3                          I_QKEd        = I_END
             352     3                          diag_cname(I_QKEd)   = 'qke'
             353     3                        endif
             354     2                        I_END         = I_END + 1
             355     2                        I_TSQd        = I_END
             356     2                        I_END         = I_END + 1
             357     2                        I_QSQd        = I_END
             358     2                        I_END         = I_END + 1
             359     2                        I_COVd        = I_END
             360     2                        ![Add] 07/12/05 Mitsui
             361     2               !        diag_cname(I_QKEd)   = 'qke'
             362     2                        diag_cname(I_TSQd)   = 'tsq'
             363     2                        diag_cname(I_QSQd)   = 'qsq'
             364     2                        diag_cname(I_COVd)   = 'cov'
             365     2                      endif
             366     1                      ![Mod] 07/12/05 Mitsui, for memory saving
             367     2                      if ( trim(RAD_CLOUD_TYPE)=='PARTIAL_CLOUD') then
             368     2               !         I_CFRACP      = I_STA + 4
             369     2               !         I_QCLWB       = I_STA + 5
             370     2               !         I_QCLIB       = I_STA + 6
             371     2               !         I_END         = I_STA + 6
             372     2                         I_END         = I_END + 1
             373     2                         I_CFRACP      = I_END
             374     2                         I_END         = I_END + 1
             375     2                         I_QCLWB       = I_END
             376     2                         I_END         = I_END + 1
             377     2                         I_QCLIB       = I_END
             378     2                         diag_cname(I_CFRACP) = 'cfrac_pdf'
             379     2                         diag_cname(I_QCLWB)  = 'q_clw_before'
             380     2                         diag_cname(I_QCLIB)  = 'q_cli_before'
             381     2                      end if
             382     1                      I_TURB_VMAX      = I_END - I_STA + 1   ! renamed 090128 A.T.Noda
             383     1                   end if                                    !<== 09/01/28 A.T.Noda
             384                     
             385     1                   if(  trim(AE_TYPE) == 'SPRINTARS' ) then
             386     1                      flag_diagset  = .true.
             387     1                      I_STA         = I_END + 1
             388     1                      I_DFE         = I_STA
             389     1                      I_END         = I_STA
             390     1                      I_SPRINTARS_VMAX  = I_END - I_STA + 1
             391     1                      ![Add] 07/12/05 Mitsui
             392     1                      diag_cname(I_DFE) = 'dfe'
             393     1                   end if
             394                         DIAG_VMAX = I_END
             395                     
             396                         ! 2010.04.26 M.Satoh
             397                         I_STA_1LAYER = 0
             398                         I_END_1LAYER = 0
             399     1                   if ( ROUGHNESS_SEA_TYPE == 'YQW' ) then
             400     1                      flag_diagset  = .true.
             401     1                      I_STA_1LAYER = I_END_1LAYER + 1 ! 2010.5.5 M.Satoh [add]
             402     1                      I_END_1LAYER = I_STA_1LAYER     ! 2010.5.5 M.Satoh [mod]
             403     1                      I_ROUGHNESS_SEA = I_END_1LAYER
             404     1               ! 2011/08/16b M.Satoh [del]
             405     1               !       I_ROUGHNESS_SEA_MAX &
             406     1               !            = I_END_1LAYER - I_STA_1LAYER + 1 ! 2010.5.5 M.Satoh [add]
             407     1                      diag_cname_1layer(I_ROUGHNESS_SEA) = 'z0_roughness_sea'
             408     1                   end if
             409     1                   if ( CP_TYPE == 'TDK' ) then ! 2010.5.22 M.Satoh [add]
             410     1                      flag_diagset  = .true.
             411     1                      I_STA_1LAYER  = I_END_1LAYER + 1
             412     1                      I_EVAP_SFC    = I_STA_1LAYER
             413     1                      I_SH_FLUX_SFC = I_STA_1LAYER + 1
             414     1                      I_END_1LAYER  = I_STA_1LAYER + 1
             415     1               !       I_ROUGHNESS_SEA_MAX = I_END_1LAYER - I_STA_1LAYER + 1 ! <=??
             416     1               !       diag_cname_1layer(I_ROUGHNESS_SEA) = 'evap_sfc'
             417     1                      diag_cname_1layer(I_EVAP_SFC) = 'evap_sfc'
             418     1                      diag_cname_1layer(I_SH_FLUX_SFC) = 'sh_flux_sfc'
             419     1                   end if
             420                         DIAG_VMAX_1LAYER = I_END_1LAYER
             421                     
             422                         ! 2011.07.25 M.Satoh
             423                         I_STA_NLAYER = 0
             424                         I_END_NLAYER = 0
             425                     
             426     1                   if ( CP_TYPE == 'CHIKIRA' ) then ! 2011.8.16 M.Satoh [add]
             427     1               
             428     1                      rewind(ADM_CTL_FID)
             429     1                      read(ADM_CTL_FID, NM_CP_CHIKIRA_SETUP,iostat=ierr)
             430     1                      call MISC_msg_nmerror( &
             431     1                           ierr,             & !--- in
             432     1                           ADM_LOG_FID,      & !--- in
             433     1                           'NM_CP_CHIKIRA_SETUP',   & !--- in
             434     1                           'diagvar_setup',  & !--- in
             435     1                           'diagvar'         & !--- in
             436     1                           )
             437     1                      write(ADM_LOG_FID,NM_CP_CHIKIRA_SETUP)
             438     1                      write(ADM_LOG_FID,*) '# CHIKIRA scheme: NCTP=', NCTP
             439     1               
             440     1                      flag_diagset  = .true.
             441     1                      I_STA_NLAYER = I_END_NLAYER + 1
             442     1                      I_END_NLAYER = I_STA_NLAYER
             443     1                      I_CBMFX_CHIKIRA = I_END_NLAYER
             444     1                      diag_cname_nlayer(I_CBMFX_CHIKIRA) = 'cbmfx_chikira'
             445     1                      diag_knum_nlayer(I_CBMFX_CHIKIRA) = NCTP
             446     1                   end if
             447                         DIAG_VMAX_NLAYER = I_END_NLAYER
             448     1                   if ( DIAG_VMAX_NLAYER > 0 ) then
             449     1                      diag_ksta_nlayer(1) = 1
             450     1                      diag_kend_nlayer(1) = diag_knum_nlayer(1)
             451     2                      if ( DIAG_VMAX_NLAYER > 1 ) then
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             452     3   s   8s                do iv=2, DIAG_VMAX_NLAYER
             453     3   s   8s                   diag_ksta_nlayer(iv) = diag_kend_nlayer(iv-1) + 1
             454     3   m   8s                   diag_kend_nlayer(iv) &
             455     3                                 = diag_ksta_nlayer(iv) + diag_knum_nlayer(iv) - 1
             456     3   p   8s                end do
             457     2                      end if
             458     1                      DIAG_KTOT_NLAYER = diag_kend_nlayer(DIAG_VMAX_NLAYER)
             459     1                   end if
             460                     
             461                     
             462                         ! 2010.5.5. M.Satoh
             463     1                   if ( DIAG_VMAX > DIAG_VMAX_DEF ) then
             464     1                      write(ADM_LOG_FID,*) &
             465     1                           "DIAG_VMAX exceeds the default value", DIAG_VMAX, DIAG_VMAX_DEF
             466     1                   end if
             467     1                   if ( DIAG_VMAX_1LAYER > DIAG_VMAX_DEF ) then
             468     1                      write(ADM_LOG_FID,*) &
             469     1                           "DIAG_VMAX_1LAYER exceeds the default value", &
             470     1                           DIAG_VMAX_1LAYER, DIAG_VMAX_DEF
             471     1                   end if
             472     1                   if ( DIAG_VMAX_NLAYER > DIAG_VMAX_DEF ) then ! 11/08/16 M.Satoh
             473     1                      write(ADM_LOG_FID,*) &
             474     1                           "DIAG_VMAX_NLAYER exceeds the default value", &
             475     1                           DIAG_VMAX_NLAYER, DIAG_VMAX_DEF
             476     1                   end if
             477                     
             478                         !
             479                         write(ADM_LOG_FID,'(a  )') 'Msg : Sub[diagvar_setup]/Mod[diagvar]'
             480                         write(ADM_LOG_FID,*      ) "DIAG_VMAX   = ", DIAG_VMAX
             481                         write(ADM_LOG_FID,*      ) "DIAG_VMAX_1LAYER = ", DIAG_VMAX_1LAYER ! 10/04/30 M.Satoh
             482                         write(ADM_LOG_FID,*      ) "DIAG_VMAX_NLAYER = ", DIAG_VMAX_NLAYER ! 11/08/16 M.Satoh
             483                         write(ADM_LOG_FID,*      ) "flag_diagset= ", flag_diagset
             484                         ! [Add] 07/12/05 Mitsui
             485     1   s               do iv=1, DIAG_VMAX
             486     1   m                  write(ADM_LOG_FID,'(a20, i5 )') trim(diag_cname(iv)),iv
             487     1   p               end do
             488                         ! [Add] 10/04/30 M.Satoh
             489     1                   if ( DIAG_VMAX_1LAYER > 0 ) then
             490     2   s                  do iv=1, DIAG_VMAX_1LAYER
             491     2   m                     write(ADM_LOG_FID,'(a20, i5 )') trim(diag_cname_1layer(iv)),iv
             492     2   p                  end do
             493     1                   end if
             494                         ! [Add] 11/08/16 M.Satoh
             495     1                   if ( DIAG_VMAX_NLAYER > 0 ) then
             496     2   s                  do iv=1, DIAG_VMAX_NLAYER
             497     2   m                     write(ADM_LOG_FID,'(a20, i5 )') trim(diag_cname_nlayer(iv)),iv
             498     2   p                  end do
             499     1                   end if
             500                     
             501                         ! -> [mod] H.Yashiro 20111102 change position of config file reading
             502     1                   if( flag_diagset )then
             503     1                      rewind(ADM_CTL_FID)
             504     1                      read(ADM_CTL_FID, DIAGVARPARAM,iostat=ierr)
             505     1                      call MISC_msg_nmerror( &
             506     1                           ierr,             & !--- in
             507     1                           ADM_LOG_FID,      & !--- in
             508     1                           'DIAGVARPARAM',   & !--- in
             509     1                           'diagvar_setup',  & !--- in
             510     1                           'diagvar'         & !--- in
             511     1                           )
             512     1                      write(ADM_LOG_FID,DIAGVARPARAM)
             513     1                   endif
             514                     
             515                         ! -> [add] H.Yashiro 20110819
             516     1                   if ( input_io_mode == 'ADVANCED' ) then
             517     1                      write(ADM_LOG_FID,*) '*** io_mode for restart,input : ',trim(input_io_mode)
             518     1                      input_direct_access = .true.
             519     1                   elseif( input_io_mode == 'LEGACY' ) then
             520     1                      write(ADM_LOG_FID,*) '*** io_mode for restart,input : ',trim(input_io_mode)
             521     1                   else
             522     1                      write(ADM_LOG_FID,*) 'xxx Invalid input_io_mode!',trim(input_io_mode)
             523     1                      call ADM_proc_stop
             524     1                   endif
             525     1                   if ( output_io_mode == 'ADVANCED' ) then
             526     1                      write(ADM_LOG_FID,*) '*** io_mode for restart,output: ',trim(output_io_mode)
             527     1                      output_direct_access = .true.
             528     1                   elseif( output_io_mode == 'LEGACY' ) then
             529     1                      write(ADM_LOG_FID,*) '*** io_mode for restart,output: ',trim(output_io_mode)
             530     1                   else
             531     1                      write(ADM_LOG_FID,*) 'xxx Invalid output_io_mode!',trim(output_io_mode)
             532     1                      call ADM_proc_stop
             533     1                   endif
             534                         ! <- [add] H.Yashiro 20110819
             535                     
             536                         ! [Mod] T.Mitsui 07/11/06, bug fix for SPRINTARS
             537     1                   if( flag_diagset )then
             538     1                      ! -> [mod] H.Yashiro 20111102 change position of config file reading
             539     1               
             540     1                      allocate(diagvar(     &
             541     1                           ADM_gall,        &
             542     1                           ADM_kall,        &
             543     1                           ADM_lall,        &
             544     1                           DIAG_VMAX       &
             545     1                           ))
             546     1                      allocate(diagvar_pl(   &
             547     1                           ADM_GALL_PL,     &
             548     1                           ADM_kall,        &
             549     1                           ADM_LALL_PL,     &
             550     1                           DIAG_VMAX       &
             551     1                           ))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             552     1  pp    v             diagvar = 0.0D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             553     1  pp    v             diagvar_pl = 0.0D0
             554     1               
             555     1                      ! [Add] 10/04/26 M.Satoh
             556     2                      if ( DIAG_VMAX_1LAYER > 0 ) then
             557     2                         allocate(diagvar1(    &
             558     2                              ADM_gall,        &
             559     2                              ADM_KNONE,       &
             560     2                              ADM_lall,        &
             561     2                              DIAG_VMAX_1LAYER &
             562     2                              ))
             563     2                         allocate(diagvar1_pl( &
             564     2                              ADM_GALL_PL,     &
             565     2                              ADM_KNONE,       &
             566     2                              ADM_LALL_PL,     &
             567     2                              DIAG_VMAX_1LAYER &
             568     2                              ))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             569     2  pp    v                diagvar1 = -999.0D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             570     2  pp    v                diagvar1_pl = -999.0D0
             571     2                      end if
             572     1               
             573     1                      ! [Add] 11/08/16 M.Satoh
             574     2                      if ( DIAG_VMAX_NLAYER > 0 ) then
             575     2                         allocate(diagvarn(    &
             576     2                              ADM_gall,        &
             577     2                              DIAG_KTOT_NLAYER, &
             578     2                              ADM_lall,        &
             579     2                              1                &
             580     2                              ))
             581     2                         allocate(diagvarn_pl( &
             582     2                              ADM_GALL_PL,     &
             583     2                              DIAG_KTOT_NLAYER, &
             584     2                              ADM_LALL_PL,     &
             585     2                              1                &
             586     2                              ))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             587     2  pp    v                diagvarn(:,:,:,:) = -999.0D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             588     2  pp    v                diagvarn_pl(:,:,:,:) = -999.0D0
             589     2                      end if
             590     1               
             591     1                      ! [Add] 07/12/05 Mitsui
             592     2                      if(trim(MP_TYPE) /= 'NONE') then
             593     3                         if(trim(MP_fname)=='NONE') then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             594     3  pp    v                   diagvar(:,:,:,I_UNCCN)     = 100.d6 ! 100 [/cm3]
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             595     3  pp    v                   diagvar_pl (:,:,:,I_UNCCN) = 100.d6 ! 100 [/cm3]
             596     3                         else
             597     3                            ! -> [add] H.Yashiro 20110826
             598     4                            if ( input_io_mode == 'ADVANCED' ) then
             599     4               
             600     4                               call FIO_input( diagvar(:,:,:,I_UNCCN),MP_fname,'UNCCN', &
             601     4                                               restart_layername,1,ADM_kall,1           )
             602     4               
             603     4                            elseif( input_io_mode == 'LEGACY' ) then
             604     4                            ! <- [add] H.Yashiro 20110826
             605     4               
             606     5                               if(input_direct_access) then
             607     5                                  call GTL_input_var2_da( trim(MP_fname),    &
             608     5                                       diagvar(:,:,:,I_UNCCN), 1, ADM_kall,  &
             609     5                                       recnum=1, input_size=8 )
             610     5                               else
             611     5                                  call GTL_input_var2( trim(MP_fname),                    &
             612     5                                       diagvar(:,:,:,I_UNCCN), diagvar_pl(:,:,:,I_UNCCN), &
             613     5                                      1, ADM_kall )
             614     5                               endif !--- direct/sequencial
             615     4               
             616     4                            endif !--- io_mode
             617     3                         endif
             618     2                      endif
             619     1               
             620     2                      if( trim(CP_TYPE)=='AS'.or.trim(CP_TYPE)=='PAS' ) then ! 10/06/10 A.T.Noda
             621     3                         if(CBMFX_fname=='NONE') then
             622     3                            !--- nothing
             623     3                         else
             624     3                            ! -> [add] H.Yashiro 20110826
             625     4                            if ( input_io_mode == 'ADVANCED' ) then
             626     4               
             627     4                               call FIO_input( diagvar(:,:,:,I_CBMFX),CBMFX_fname,'CBMFX', &
             628     4                                               restart_layername,1,ADM_kall,1           )
             629     4               
             630     4                            elseif( input_io_mode == 'LEGACY' ) then
             631     4                            ! <- [add] H.Yashiro 20110826
             632     4               
             633     5                               if(input_direct_access) then
             634     5                                  call GTL_input_var2_da( trim(CBMFX_fname), &
             635     5                                       diagvar(:,:,:,I_CBMFX), 1, ADM_kall,  &
             636     5                                       recnum=1, input_size=8 )
             637     5                               else
             638     5                                  call GTL_input_var2( trim(CBMFX_fname),                 &
             639     5                                       diagvar(:,:,:,I_CBMFX), diagvar_pl(:,:,:,I_CBMFX), &
             640     5                                       1, ADM_kall )
             641     5                               endif !--- direct/sequencial
             642     4               
             643     4                            endif !--- io_mode
             644     3                         end if
             645     2                      end if
             646     1               
             647     1                      ! 2011/08/16 M.Satoh
             648     2                      if ( trim(CP_TYPE) == 'CHIKIRA' ) then
             649     3                         if(CBMFX_CHIKIRA_fname=='NONE') then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             650     3  pp    v                   diagvarn(:,ksta:kend,:,1) = 0.d0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             651     3  pp    v                   diagvarn_pl(:,ksta:kend,:,1) = 0.d0
             652     3                         else
             653     3                            ksta = diag_ksta_nlayer(I_CBMFX_CHIKIRA)
             654     3                            kend = diag_kend_nlayer(I_CBMFX_CHIKIRA)
             655     3                            ! 11/08/17 M.Satoh bug fix: ksta-kend+1 => kend-ksta+1
             656     3               
             657     3                            ! -> [add] H.Yashiro 20110826
             658     4                            if ( input_io_mode == 'ADVANCED' ) then
             659     4               
             660     4                               call FIO_input( diagvarn(:,ksta:kend,:,1),CBMFX_CHIKIRA_fname, &
             661     4                                               'CBMFX_CHIKIRA',                               &
             662     4                                               'GCCKR',1,ADM_kall,1                           )
             663     4               
             664     4                            elseif( input_io_mode == 'LEGACY' ) then
             665     4                            ! <- [add] H.Yashiro 20110826
             666     4               
             667     5                               if(input_direct_access) then
             668     5                                  call GTL_input_var2_da( trim(CBMFX_CHIKIRA_fname), &
             669     5                                       diagvarn(:,ksta:kend,:,1), 1, kend-ksta+1,  &
             670     5                                       recnum=1, input_size=8 )
             671     5                               else
             672     5                                  call GTL_input_var2( trim(CBMFX_CHIKIRA_fname), &
             673     5                                       diagvarn(:,ksta:kend,:,1), &
             674     5                                       diagvarn_pl(:,ksta:kend,:,1), &
             675     5                                       1, kend-ksta+1 )
             676     5                               endif !--- direct/sequencial
             677     4               
             678     4                            endif !--- io_mode
             679     3                         end if
             680     2                      end if
             681     1               
             682     1                      ! 2010/05/11 M.Satoh
             683     1                      ! 2011/08/16 M.Satoh, change names
             684     2                      if ( trim(CP_TYPE) == 'TDK' ) then
             685     3                         if(QV_TB_TEND_fname=='NONE') then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             686     3  pp    v                   diagvar(:,:,:,I_QV_TB_TEND) = 0.d0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             687     3  pp    v                   diagvar_pl(:,:,:,I_QV_TB_TEND) = 0.d0 ! 11/08/16 M.Satoh
             688     3                         else
             689     3                            ! -> [add] H.Yashiro 20110826
             690     4                            if ( input_io_mode == 'ADVANCED' ) then
             691     4               
             692     4                               call FIO_input( diagvar(:,:,:,I_QV_TB_TEND),QV_TB_TEND_fname, &
             693     4                                               'QV_TB_TEND',                                 &
             694     4                                               restart_layername,1,ADM_kall,1                )
             695     4               
             696     4                            elseif( input_io_mode == 'LEGACY' ) then
             697     4                            ! <- [add] H.Yashiro 20110826
             698     4               
             699     5                               if(input_direct_access) then
             700     5                                  call GTL_input_var2_da( trim(QV_TB_TEND_fname), &
             701     5                                       diagvar(:,:,:,I_QV_TB_TEND), 1, ADM_kall,  &
             702     5                                       recnum=1, input_size=8 )
             703     5                               else
             704     5                                  call GTL_input_var2( trim(QV_TB_TEND_fname),    &
             705     5                                       diagvar(:,:,:,I_QV_TB_TEND), &
             706     5                                       diagvar_pl(:,:,:,I_QV_TB_TEND), &
             707     5                                       1, ADM_kall )
             708     5                               endif !--- direct/sequencial
             709     4               
             710     4                            endif !--- io_mode
             711     3                         end if
             712     2                         ! 2010.5.22 M.Satoh
             713     3                         if( EVAP_SFC_fname == 'NONE' ) then
             714     3                            ! set initial value of evap_sfc
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             715     3  pp    v                   diagvar1(:,:,:,I_EVAP_SFC) = 0.0d0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             716     3  pp    v                   diagvar1_pl(:,:,:,I_EVAP_SFC) = 0.0d0 ! 11/08/16 M.Satoh
             717     3                         else
             718     3                            ! -> [add] H.Yashiro 20110826
             719     4                            if ( input_io_mode == 'ADVANCED' ) then
             720     4               
             721     4                               call FIO_input( diagvar(:,:,:,I_EVAP_SFC),EVAP_SFC_fname, &
             722     4                                               'EVAP_SFC', 'ZSSFC1',1,1,1                )
             723     4               
             724     4                            elseif( input_io_mode == 'LEGACY' ) then
             725     4                            ! <- [add] H.Yashiro 20110826
             726     4               
             727     5                               if(input_direct_access) then
             728     5                                  call GTL_input_var2_da( trim(EVAP_SFC_fname), &
             729     5                                       diagvar1(:,:,:,I_EVAP_SFC), 1, ADM_KNONE,  &
             730     5                                       recnum=1, input_size=8 )
             731     5                               else
             732     5                                  call GTL_input_var2( trim(EVAP_SFC_fname), &
             733     5                                       diagvar1(:,:,:,I_EVAP_SFC), &
             734     5                                       diagvar1_pl(:,:,:,I_EVAP_SFC), &
             735     5                                       1, ADM_KNONE )
             736     5                               endif !--- direct/sequencial
             737     4               
             738     4                            endif !--- io_mode
             739     3               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             740     3       8v                   write(ADM_LOG_FID,*) 'restart in: evap_sfc', &
             741     3                                 maxval(diagvar1(:,:,:,I_EVAP_SFC)), &
             742     3                                 minval(diagvar1(:,:,:,I_EVAP_SFC))
             743     3                         end if
             744     2               
             745     2                         ! 2011/08/16b M.Satoh
             746     3                         if( SH_FLUX_SFC_fname == 'NONE' ) then
             747     3                            ! set initial value of sh_flux_sfc
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             748     3  pp    v                   diagvar1(:,:,:,I_SH_FLUX_SFC) = 0.0d0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             749     3  pp    v                   diagvar1_pl(:,:,:,I_SH_FLUX_SFC) = 0.0d0
             750     3                         else
             751     3                            ! -> [add] H.Yashiro 20110826
             752     4                            if ( input_io_mode == 'ADVANCED' ) then
             753     4               
             754     4                               call FIO_input( diagvar(:,:,:,I_SH_FLUX_SFC),SH_FLUX_SFC_fname, &
             755     4                                               'SH_FLUX_SFC','ZSSFC1',1,1,1                    )
             756     4               
             757     4                            elseif( input_io_mode == 'LEGACY' ) then
             758     4                            ! <- [add] H.Yashiro 20110826
             759     4               
             760     5                               if(input_direct_access) then
             761     5                                  call GTL_input_var2_da( trim(SH_FLUX_SFC_fname), &
             762     5                                       diagvar1(:,:,:,I_SH_FLUX_SFC), 1, ADM_KNONE,  &
             763     5                                       recnum=1, input_size=8 )
             764     5                               else
             765     5                                  call GTL_input_var2( trim(SH_FLUX_SFC_fname), &
             766     5                                       diagvar1(:,:,:,I_SH_FLUX_SFC), &
             767     5                                       diagvar1_pl(:,:,:,I_SH_FLUX_SFC), &
             768     5                                       1, ADM_KNONE )
             769     5                               endif !--- direct/sequencial
             770     4               
             771     4                            endif !--- io_mode
             772     3               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             773     3       8v                   write(ADM_LOG_FID,*) 'restart in: sh_sfc', &
             774     3                                 maxval(diagvar1(:,:,:,I_SH_FLUX_SFC)), &
             775     3                                 minval(diagvar1(:,:,:,I_SH_FLUX_SFC))
             776     3                         end if
             777     2               
             778     2                      end if
             779     1               
             780     1                      ! -> [add&mod] H.Yashiro 20110826
             781     1                      !==> 09/01/28 A.T.Noda
             782     2                      if(TB_fname=='NONE') then
             783     2                         !--- nothing
             784     2                      else
             785     3                         if (      trim(TB_TYPE)=='MY2MOIST' &
             786     3                              .or. trim(TB_TYPE)=='MYNN2'    &
             787     3                              .or. trim(TB_TYPE)=='MYNN2.5'  &
             788     3                              .or. trim(TB_TYPE)=='MYNN3'    ) then
             789     3                            !
             790     4                            if (      trim(TB_TYPE)=='MY2MOIST' &
             791     4                                 .or. trim(TB_TYPE)=='MYNN2'    &
             792     4                                 .or. trim(TB_TYPE)=='MYNN2.5'  ) then
             793     4                               !
             794     5                               if (      trim(TB_TYPE)=='MY2MOIST' &
             795     5                                    .or. trim(TB_TYPE)=='MYNN2'    ) then
             796     5                                  !
             797     6                                  if ( input_io_mode == 'ADVANCED' ) then
             798     6                                     !
             799     6                                     call FIO_input( diagvar(:,:,:,I_QKEd),TB_fname,       &
             800     6                                                     'qked',restart_layername,1,ADM_kall,1 )
             801     6               
             802     6                                  elseif( input_io_mode == 'LEGACY' ) then
             803     6                                     !
             804     7                                     if (input_direct_access) then
             805     7                                        call GTL_input_var2_da( trim(TB_fname), &
             806     7                                             diagvar(:,:,:,I_QKEd), 1, ADM_kall,  &
             807     7                                             recnum=1, input_size=8 )
             808     7                                     else
             809     7                                        call GTL_input_var2( trim(TB_fname),                  &
             810     7                                             diagvar(:,:,:,I_QKEd), diagvar_pl(:,:,:,I_QKEd), &
             811     7                                             1, ADM_kall )
             812     7                                     endif !--- direct/sequencial
             813     6               
             814     6                                  endif  !--- io_mode
             815     5               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             816     5       8v                         write(ADM_LOG_FID,*) 'restart in: qked', &
             817     5                                       maxval(diagvar(:,:,:,I_QKEd)), minval(diagvar(:,:,:,I_QKEd))
             818     5                               endif !--- MY2M, MYNN2
             819     4               
             820     4                               !
             821     5                               if ( input_io_mode == 'ADVANCED' ) then
             822     5                                  !
             823     5                                  call FIO_input( diagvar(:,:,:,I_TSQd),TB_fname,       &
             824     5                                                  'tsqd',restart_layername,1,ADM_kall,1 )
             825     5                                  call FIO_input( diagvar(:,:,:,I_QSQd),TB_fname,       &
             826     5                                                  'qsqd',restart_layername,1,ADM_kall,1 )
             827     5                                  call FIO_input( diagvar(:,:,:,I_COVd),TB_fname,       &
             828     5                                                  'covd',restart_layername,1,ADM_kall,1 )
             829     5               
             830     5                               elseif( input_io_mode == 'LEGACY' ) then
             831     5                                  !
             832     6                                  if (input_direct_access) then
             833     6                                     call GTL_input_var2_da( trim(TB_fname), &
             834     6                                          diagvar(:,:,:,I_TSQd), 1, ADM_kall,  &
             835     6                                          recnum=2, input_size=8 )
             836     6                                     call GTL_input_var2_da( trim(TB_fname), &
             837     6                                          diagvar(:,:,:,I_QSQd), 1, ADM_kall,  &
             838     6                                          recnum=3, input_size=8 )
             839     6                                     call GTL_input_var2_da( trim(TB_fname), &
             840     6                                          diagvar(:,:,:,I_COVd), 1, ADM_kall,  &
             841     6                                          recnum=4, input_size=8 )
             842     6                                  else
             843     6                                     call GTL_input_var2( trim(TB_fname),                  &
             844     6                                          diagvar(:,:,:,I_TSQd), diagvar_pl(:,:,:,I_TSQd), &
             845     6                                          1, ADM_kall )
             846     6                                     call GTL_input_var2( trim(TB_fname),                  &
             847     6                                          diagvar(:,:,:,I_QSQd), diagvar_pl(:,:,:,I_QSQd), &
             848     6                                          1, ADM_kall )
             849     6                                     call GTL_input_var2( trim(TB_fname),                  &
             850     6                                          diagvar(:,:,:,I_COVd), diagvar_pl(:,:,:,I_COVd), &
             851     6                                          1, ADM_kall )
             852     6                                  endif !--- direct/sequencial
             853     5               
             854     5                               endif  !--- io_mode
             855     4               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             856     4       8v                      write(ADM_LOG_FID,*) 'restart in: tsqd', &
             857     4                                    maxval(diagvar(:,:,:,I_TSQd)), minval(diagvar(:,:,:,I_TSQd))
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             858     4       8v                      write(ADM_LOG_FID,*) 'restart in: qsqd', &
             859     4                                    maxval(diagvar(:,:,:,I_QSQd)), minval(diagvar(:,:,:,I_QSQd))
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             860     4       8v                      write(ADM_LOG_FID,*) 'restart in: covd', &
             861     4                                    maxval(diagvar(:,:,:,I_COVd)), minval(diagvar(:,:,:,I_COVd))
             862     4                            endif !--- MY2M, MYNN2, MYNN2.5
             863     3               
             864     4                            if ( RAD_CLOUD_TYPE=='PARTIAL_CLOUD' )then
             865     4                               !
             866     5                               if ( input_io_mode == 'ADVANCED' ) then
             867     5                                  !
             868     5                                  call FIO_input( diagvar(:,:,:,I_QCLWB),TB_fname,              &
             869     5                                                  'q_clw_before',restart_layername,1,ADM_kall,1 )
             870     5                                  call FIO_input( diagvar(:,:,:,I_QCLIB),TB_fname,              &
             871     5                                                  'q_cli_before',restart_layername,1,ADM_kall,1 )
             872     5                                  call FIO_input( diagvar(:,:,:,I_CFRACP),TB_fname,          &
             873     5                                                  'cfrac_pdf',restart_layername,1,ADM_kall,1 )
             874     5               
             875     5                               elseif( input_io_mode == 'LEGACY' ) then
             876     5                                  !
             877     6                                  if (input_direct_access) then
             878     6                                  call GTL_input_var2_da( trim(TB_fname), &
             879     6                                       diagvar(:,:,:,I_QCLWB ), 1, ADM_kall,  &
             880     6                                       recnum=5, input_size=8 )
             881     6                                  call GTL_input_var2_da( trim(TB_fname), &
             882     6                                       diagvar(:,:,:,I_QCLIB ), 1, ADM_kall,  &
             883     6                                       recnum=6, input_size=8 )
             884     6                                  call GTL_input_var2_da( trim(TB_fname), &
             885     6                                       diagvar(:,:,:,I_CFRACP ), 1, ADM_kall,  &
             886     6                                       recnum=7, input_size=8 )
             887     6                                  else
             888     6                                  call GTL_input_var2( trim(TB_fname),                  &
             889     6                                       diagvar(:,:,:,I_QCLWB), diagvar_pl(:,:,:,I_QCLWB), &
             890     6                                       1, ADM_kall )
             891     6                                  call GTL_input_var2( trim(TB_fname),                  &
             892     6                                       diagvar(:,:,:,I_QCLIB), diagvar_pl(:,:,:,I_QCLIB), &
             893     6                                       1, ADM_kall )
             894     6                                  call GTL_input_var2( trim(TB_fname),                  &
             895     6                                       diagvar(:,:,:,I_CFRACP), diagvar_pl(:,:,:,I_CFRACP), &
             896     6                                       1, ADM_kall )
             897     6                                  endif !--- direct/sequencial
             898     5               
             899     5                               endif  !--- io_mode
             900     4               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             901     4       8v                      write(ADM_LOG_FID,*) 'restart in: q_clw_before', &
             902     4                                    maxval(diagvar(:,:,:,I_QCLWB)), minval(diagvar(:,:,:,I_QCLWB))
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             903     4       8v                      write(ADM_LOG_FID,*) 'restart in: q_cli_before', &
             904     4                                    maxval(diagvar(:,:,:,I_QCLIB)), minval(diagvar(:,:,:,I_QCLIB))
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             905     4       8v                      write(ADM_LOG_FID,*) 'restart in: cfrac_pdf', &
             906     4                                    maxval(diagvar(:,:,:,I_CFRACP)), minval(diagvar(:,:,:,I_CFRACP))
             907     4                            endif !--- PARTIAL_CLOUD
             908     3               
             909     3                         endif !--- MY2M, MYNN2, MYNN2.5
             910     2                      endif
             911     1                      !<=== 09/01/28 A.T.Noda
             912     1                      ! <- [add&mod] H.Yashiro 20110826
             913     1               
             914     1                      ! 10/04/28 M.Satoh
             915     2                      if( ROUGHNESS_SEA_TYPE == 'YQW' ) then
             916     3                         if( ROUGHNESS_SEA_fname == 'NONE' ) then
             917     3                            ! set initial value in roughness_sea_init
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             918     3  pp    v                   diagvar1(:,:,:,I_ROUGHNESS_SEA) = -999.0d0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             919     3  pp    v                   diagvar1_pl(:,:,:,I_ROUGHNESS_SEA) = -999.0d0 ! 11/08/16 M.Satoh
             920     3                         else
             921     3                            ! -> [add] H.Yashiro 20110826
             922     4                            if ( input_io_mode == 'ADVANCED' ) then
             923     4                               ! -> [mod] Y.Yamada 20111125
             924     4                               !                call FIO_input( diagvar(:,:,:,I_ROUGHNESS_SEA),ROUGHNESS_SEA_fname, &
             925     4                               !                                'ROUGHNESS_SEA','ZSSFC1',1,1,1                      )
             926     4                               call FIO_input( diagvar1(:,:,:,I_ROUGHNESS_SEA),ROUGHNESS_SEA_fname, &
             927     4                                    'ROUGHNESS_SEA','ZSSFC1',1,1,1                      )
             928     4                               ! <- [mod] Y.Yamada 20111125
             929     4                            elseif( input_io_mode == 'LEGACY' ) then
             930     4                            ! <- [add] H.Yashiro 20110826
             931     4               
             932     5                               if(input_direct_access) then
             933     5                                  call GTL_input_var2_da( trim(ROUGHNESS_SEA_fname), &
             934     5                                       diagvar1(:,:,:,I_ROUGHNESS_SEA), 1, ADM_KNONE,  &
             935     5                                       recnum=1, input_size=8 )
             936     5                               else
             937     5                                  call GTL_input_var2( trim(ROUGHNESS_SEA_fname), &
             938     5                                       diagvar1(:,:,:,I_ROUGHNESS_SEA), &
             939     5                                       diagvar1_pl(:,:,:,I_ROUGHNESS_SEA), &
             940     5                                       1, ADM_KNONE )
             941     5                               endif !--- direct/sequencial
             942     4               
             943     4                            endif !--- io_mode
             944     3               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             945     3       8v                   write(ADM_LOG_FID,*) 'restart in: z0_roughness_sea', &
             946     3                                 maxval(diagvar1(:,:,:,I_ROUGHNESS_SEA)), &
             947     3                                 minval(diagvar1(:,:,:,I_ROUGHNESS_SEA))
             948     3                         end if
             949     2                      end if
             950     1                      ! <= 10/04/28 M.Satoh
             951     1               
             952     1                      ! [Add] T.Mitsui 07/11/06, call at once
             953     2                      if(input_direct_access) then
             954     2                         call comm_var(            &
             955     2                              diagvar,diagvar_pl,  &
             956     2                              ADM_kall,            &
             957     2                              DIAG_VMAX,           &
             958     2                              comm_type = 2,       &
             959     2                              NSval_fix=.true.     &
             960     2                              )
             961     3                         if ( DIAG_VMAX_1LAYER > 0 ) then ! [add] 2010.4.28 M.Satoh
             962     3                            call comm_var(            &
             963     3                                 diagvar1,diagvar1_pl,&
             964     3                                 ADM_KNONE,           &
             965     3                                 DIAG_VMAX_1LAYER,    &
             966     3                                 comm_type = 2,       &
             967     3                                 NSval_fix=.true.     &
             968     3                                 )
             969     3                         end if
             970     3                         if ( DIAG_VMAX_NLAYER > 0 ) then ! [add] 2011.8.16 M.Satoh
             971     3                            call comm_var(            &
             972     3                                 diagvarn,diagvarn_pl,&
             973     3                                 DIAG_KTOT_NLAYER,    &
             974     3                                 1,                   &
             975     3                                 comm_type = 2,       &
             976     3                                 NSval_fix=.true.     &
             977     3                                 )
             978     3                         end if
             979     2                      end if
             980     1               
             981     1                   endif ! flag_diagset
             982                     
             983                        return
             984                       end subroutine diagvar_setup
             985                     
             986                       !-----------------------------------------------------------------------------
             987                       subroutine diagvar_get(   &
             988                          dv, dv_pl,          &  !--- OUT : surface variable
             989                          vid                 &  !--- IN  : variable ID
             990                          )
             991                       !------
             992                       !------ get prognostic variables from diag[num].
             993                       !------
             994                       implicit none
             995                       real(8), intent(out) :: dv(ADM_gall,ADM_kall,ADM_lall)
             996                       real(8), intent(out) :: dv_pl(ADM_GALL_PL,ADM_kall,ADM_LALL_PL)
             997                       integer:: ij,k,l
             998                       integer, intent(in)  :: vid
             999                       ! [Add] 07/11/06 T.Mitsui for check
            1000     1                 if(.not. flag_diagset .or. vid == -999 )then
            1001     1                    write(ADM_LOG_FID,*) "*** Error, DIAGVAR has not been setup."
            1002     1                    write(ADM_LOG_FID,*) "    Check [sub: diagvar_setup] "
            1003     1                    call ADM_proc_stop
            1004     1                 end if
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1005     1  pp             do l=1,ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1006     2  pp                do k=1,ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 229
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1007     3  pp   8v              do ij=1,ADM_gall
            1008     3   p   8v                 dv(ij,k,l) = diagvar(ij,k,l,vid)
            1009     3   p   8v              enddo
            1010     2   p                enddo
            1011     1   p             enddo
            1012                     
            1013                     
            1014     1                 if(ADM_prc_me==ADM_prc_pl) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1015     1  pp   8v           dv_pl(1:ADM_gall_pl,:,:)   = diagvar_pl(1:ADM_gall_pl,:,:,vid)
            1016     1                 end if
            1017                       !
            1018                       return
            1019                       !
            1020                       end subroutine diagvar_get
            1021                     
            1022                       !-----------------------------------------------------------------------------
            1023                       subroutine diagvar_set(   &
            1024                          dv, dv_pl,          &  !--- IN : surface variable
            1025                          vid                 &  !--- IN : variable ID
            1026                          )
            1027                         !------
            1028                         !------ set diagnostic variables
            1029                         !------ and COMMUNICATION.
            1030                         !------
            1031                         implicit none
            1032                         real(8), intent(in) :: dv(ADM_gall,ADM_kall,ADM_lall)
            1033                         real(8), intent(in) :: dv_pl(ADM_GALL_PL,ADM_kall,ADM_LALL_PL)
            1034                         integer, intent(in) :: vid
            1035                         !
            1036                         integer :: i,j,suf,ij,k,l
            1037                         suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
            1038                     
            1039                         ! [Add] 07/11/06 T.Mitsui for check
            1040     1                   if(.not. flag_diagset .or. vid == -999 )then
            1041     1                      write(ADM_LOG_FID,*) "*** Error, DIAGVAR has not been setup."
            1042     1                      write(ADM_LOG_FID,*) "    Check [sub: diagvar_setup] "
            1043     1                      call ADM_proc_stop
            1044     1                   end if
            1045                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1046     1  pp             do l=1,ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1047     2  pp                do k=1,ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 229
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1048     3  pp   8v              do ij=1,ADM_gall
            1049     3   p   8v                 diagvar(ij,k,l,vid)   = dv(ij,k,l)
            1050     3   p   8v              enddo
            1051     2   p                enddo
            1052     1   p             enddo
            1053                     
            1054     1                   if(ADM_prc_me==ADM_prc_pl) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1055     1  pp   8v             diagvar_pl(1:ADM_gall_pl,:,:,vid)   = dv_pl(1:ADM_gall_pl,:,:)
            1056     1                   end if
            1057                         !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 3
                                   <<< Loop-information  End >>>
            1058        pp   6s          diagvar(suf(ADM_gall_1d,1),:,:,vid) = diagvar(suf(ADM_gmax+1,ADM_gmin),:,:,vid)
            1059         p   6s          diagvar(suf(1,ADM_gall_1d),:,:,vid) = diagvar(suf(ADM_gmin,ADM_gmax+1),:,:,vid)
            1060                         !
            1061                         return
            1062                         !
            1063                       end subroutine diagvar_set
            1064                     
            1065                       !-----------------------------------------------------------------------------
            1066                       subroutine diagvar_get_in(&
            1067                            sv,                 &  !--- OUT : surface variable
            1068                            vid                 &  !--- IN : variable ID
            1069                            )
            1070                         !------
            1071                         !------ get diagnostic variables
            1072                         !------
            1073                         implicit none
            1074                         real(8), intent(out) :: sv(ADM_IopJop_nmax,ADM_kall,ADM_lall)
            1075                         integer, intent(in) :: vid
            1076                         !
            1077                         integer :: l,n,nn,k
            1078                         !
            1079                         ! [Add] 07/11/06 T.Mitsui for check
            1080     1                   if(.not. flag_diagset .or. vid == -999 )then
            1081     1                      write(ADM_LOG_FID,*) "*** Error, DIAGVAR has not been setup."
            1082     1                      write(ADM_LOG_FID,*) "    Check [sub: diagvar_setup] "
            1083     1                      call ADM_proc_stop
            1084     1                   end if
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1085     1  pp               do l=1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1086     2  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 173
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1087     3  pp   4v                do n=1, ADM_IopJop_nmax
            1088     3   p   4v                   nn = ADM_IopJop(n,ADM_GIoJo)
            1089     3   p   4v                   sv(n,k,l)  = diagvar(nn,k,l,vid)
            1090     3   p   4v                end do
            1091     2   p                  end do
            1092     1   p               end do
            1093                         !
            1094                         return
            1095                         !
            1096                       end subroutine diagvar_get_in
            1097                     
            1098                       !-----------------------------------------------------------------------------
            1099                       subroutine diagvar_set_in( &
            1100                            sv,                  &  !--- IN : surface variable
            1101                            vid                  &  !--- IN : variable ID
            1102                            )
            1103                         !------
            1104                         !------ set prognostic variables to diag[num]
            1105                         !------ and COMMUNICATION.
            1106                         !------
            1107                         implicit none
            1108                         real(8), intent(in) :: sv(ADM_IopJop_nmax,ADM_kall,ADM_lall)
            1109                         integer, intent(in) :: vid
            1110                         !
            1111                         integer :: l,n,nn,k
            1112                         !
            1113                         integer :: i,j,suf
            1114                         suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
            1115                         !
            1116                         ! [Add] 07/11/06 T.Mitsui for check
            1117     1                   if(.not. flag_diagset .or. vid == -999 )then
            1118     1                      write(ADM_LOG_FID,*) "*** Error, DIAGVAR has not been setup."
            1119     1                      write(ADM_LOG_FID,*) "    Check [sub: diagvar_setup] "
            1120     1                      call ADM_proc_stop
            1121     1                   end if
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1122     1  pp               do l=1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1123     2  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1124     3   p   4v                do n=1, ADM_IopJop_nmax
            1125     3   p   4v                   nn = ADM_IopJop(n,ADM_GIoJo)
            1126     3   p   4v                   diagvar(nn,k,l,vid) = sv(n,k,l)
            1127     3   p   4v                end do
            1128     2   p                  end do
            1129     1   p               end do
            1130                         !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 3
                                   <<< Loop-information  End >>>
            1131        pp   6s          diagvar(suf(ADM_gall_1d,1),:,:,vid) = diagvar(suf(ADM_gmax+1,ADM_gmin),:,:,vid)
            1132         p   6s          diagvar(suf(1,ADM_gall_1d),:,:,vid) = diagvar(suf(ADM_gmin,ADM_gmax+1),:,:,vid)
            1133                         !
            1134                       end subroutine diagvar_set_in
            1135                     
            1136                       !-----------------------------------------------------------------------------
            1137                       ! 2010.5.5 M.Satoh [add]
            1138                       subroutine diagvar_get_in_region (&
            1139                            sv,                 &  !--- OUT : surface variable
            1140                            vid,                &  !--- IN : variable ID
            1141                            l_region            &  !--- IN
            1142                            )
            1143                         !------
            1144                         !------ get diagnostic variables
            1145                         !------
            1146                         implicit none
            1147                         real(8), intent(out) :: sv(ADM_IopJop_nmax,ADM_kall)
            1148                         integer, intent(in) :: vid
            1149                         integer, intent(in) :: l_region
            1150                         !
            1151                         integer :: l,n,nn,k
            1152                         !
            1153     1                   if(.not. flag_diagset .or. vid == -999 )then
            1154     1                      write(ADM_LOG_FID,*) "*** Error, DIAGVAR has not been setup."
            1155     1                      write(ADM_LOG_FID,*) "    Check [sub: diagvar_setup] "
            1156     1                      call ADM_proc_stop
            1157     1                   end if
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1158     1  pp               do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 173
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1159     2  pp   4v             do n=1, ADM_IopJop_nmax
            1160     2   p   4v                nn = ADM_IopJop(n,ADM_GIoJo)
            1161     2   p   4v                sv(n,k)  = diagvar(nn,k,l_region,vid)
            1162     2   p   4v             end do
            1163     1   p               end do
            1164                         !
            1165                         return
            1166                         !
            1167                       end subroutine diagvar_get_in_region
            1168                     
            1169                       !-----------------------------------------------------------------------------
            1170                       ! 2010.5.5 M.Satoh [add]
            1171                       subroutine diagvar_set_in_region ( &
            1172                            sv,                  &  !--- IN : surface variable
            1173                            vid,                 &  !--- IN : variable ID
            1174                            l_region             &  !--- IN
            1175                            )
            1176                         !------
            1177                         !------ set prognostic variables to diag[num]
            1178                         !------ and COMMUNICATION.
            1179                         !------
            1180                         implicit none
            1181                         real(8), intent(in) :: sv(ADM_IopJop_nmax,ADM_kall)
            1182                         integer, intent(in) :: vid
            1183                         integer, intent(in) :: l_region
            1184                         !
            1185                         integer :: l,n,nn,k
            1186                         !
            1187                         integer :: i,j,suf
            1188                         suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
            1189                         !
            1190     1                   if(.not. flag_diagset .or. vid == -999 )then
            1191     1                      write(ADM_LOG_FID,*) "*** Error, DIAGVAR has not been setup."
            1192     1                      write(ADM_LOG_FID,*) "    Check [sub: diagvar_setup] "
            1193     1                      call ADM_proc_stop
            1194     1                   end if
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1195     1  pp               do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1196     2   p   4v             do n=1, ADM_IopJop_nmax
            1197     2   p   4v                nn = ADM_IopJop(n,ADM_GIoJo)
            1198     2                         ![fix] 12/03/28 T.Seiki
            1199     2               !!$       diagvar(nn,k,l,vid) = sv(n,k)
            1200     2   p   4v                diagvar(nn,k,l_region,vid) = sv(n,k)
            1201     2   p   4v             end do
            1202     1   p               end do
            1203                         !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 667
                                   <<< Loop-information  End >>>
            1204        pp   6s          diagvar(suf(ADM_gall_1d,1),:,l_region,vid) &
            1205                              = diagvar(suf(ADM_gmax+1,ADM_gmin),:,l_region,vid)
            1206         p   6s          diagvar(suf(1,ADM_gall_1d),:,l_region,vid) &
            1207                              = diagvar(suf(ADM_gmin,ADM_gmax+1),:,l_region,vid)
            1208                         !
            1209                       end subroutine diagvar_set_in_region
            1210                     
            1211                       !-----------------------------------------------------------------------------
            1212                       ! 2010.4.26 M.Satoh
            1213                       subroutine diagvar_get_in_1layer ( &
            1214                            sv,                 &  !--- OUT : surface variable
            1215                            vid                 &  !--- IN : variable ID
            1216                            )
            1217                         !------
            1218                         !------ get diagnostic variables
            1219                         !------
            1220                         implicit none
            1221                         real(8), intent(out) :: sv(ADM_IopJop_nmax,ADM_lall)
            1222                         integer, intent(in) :: vid
            1223                         !
            1224                         integer :: l,n,nn
            1225                         !
            1226     1                   if(.not. flag_diagset .or. vid == -999 )then
            1227     1                      write(ADM_LOG_FID,*) "*** Error, DIAGVAR has not been setup."
            1228     1                      write(ADM_LOG_FID,*) "    Check [sub: diagvar_setup] "
            1229     1                      call ADM_proc_stop
            1230     1                   end if
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1231     1  pp               do l=1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 187
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1232     2  pp   4v             do n=1, ADM_IopJop_nmax
            1233     2   p   4v                nn = ADM_IopJop(n,ADM_GIoJo)
            1234     2   p   4v                sv(n,l)  = diagvar1(nn,ADM_KNONE,l,vid)
            1235     2   p   4v             end do
            1236     1   p               end do
            1237                         !
            1238                         return
            1239                         !
            1240                       end subroutine diagvar_get_in_1layer
            1241                     
            1242                       !-----------------------------------------------------------------------------
            1243                       ! 2011/03/02 NEC
            1244                       subroutine diagvar_get_in_1layer_k ( &
            1245                            sv,                 &  !--- OUT : surface variable
            1246                            ksize ,             &  !--- IN :
            1247                            k ,                 &  !--- IN :
            1248                            vid                 &  !--- IN : variable ID
            1249                            )
            1250                         !------
            1251                         !------ get diagnostic variables
            1252                         !------
            1253                         implicit none
            1254                         integer, intent(in) :: ksize,k
            1255                         real(8), intent(out) :: sv(ADM_IopJop_nmax,ksize,ADM_lall)
            1256                         integer, intent(in) :: vid
            1257                         !
            1258                         integer :: l,n,nn
            1259                         !
            1260     1                   if(.not. flag_diagset .or. vid == -999 )then
            1261     1                      write(ADM_LOG_FID,*) "*** Error, DIAGVAR has not been setup."
            1262     1                      write(ADM_LOG_FID,*) "    Check [sub: diagvar_setup] "
            1263     1                      call ADM_proc_stop
            1264     1                   end if
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1265     1  pp               do l=1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 174
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1266     2  pp   4v             do n=1, ADM_IopJop_nmax
            1267     2   p   4v                nn = ADM_IopJop(n,ADM_GIoJo)
            1268     2   p   4v                sv(n,k,l)  = diagvar1(nn,ADM_KNONE,l,vid)
            1269     2   p   4v             end do
            1270     1   p               end do
            1271                         !
            1272                         return
            1273                         !
            1274                       end subroutine diagvar_get_in_1layer_k
            1275                     
            1276                       !-----------------------------------------------------------------------------
            1277                       subroutine diagvar_set_in_1layer ( &
            1278                            sv,                  &  !--- IN : surface variable
            1279                            vid                  &  !--- IN : variable ID
            1280                            )
            1281                         !------
            1282                         !------ set prognostic variables to diag[num]
            1283                         !------ and COMMUNICATION.
            1284                         !------
            1285                         implicit none
            1286                         real(8), intent(in) :: sv(ADM_IopJop_nmax,ADM_lall)
            1287                         integer, intent(in) :: vid
            1288                         !
            1289                         integer :: l,n,nn
            1290                         !
            1291                         integer :: i,j,suf
            1292                         suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
            1293                         !
            1294     1                   if(.not. flag_diagset .or. vid == -999 )then
            1295     1                      write(ADM_LOG_FID,*) "*** Error, DIAGVAR has not been setup."
            1296     1                      write(ADM_LOG_FID,*) "    Check [sub: diagvar_setup] "
            1297     1                      call ADM_proc_stop
            1298     1                   end if
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1299     1  pp               do l=1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1300     2   p   4v             do n=1, ADM_IopJop_nmax
            1301     2   p   4v                nn = ADM_IopJop(n,ADM_GIoJo)
            1302     2   p   4v                diagvar1(nn,ADM_KNONE,l,vid) = sv(n,l)
            1303     2   p   4v             end do
            1304     1   p               end do
            1305                         !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 3
                                   <<< Loop-information  End >>>
            1306        pp   6s          diagvar1(suf(ADM_gall_1d,1),:,:,vid) &
            1307                              = diagvar1(suf(ADM_gmax+1,ADM_gmin),:,:,vid)
            1308         p   6s          diagvar1(suf(1,ADM_gall_1d),:,:,vid) &
            1309                              = diagvar1(suf(ADM_gmin,ADM_gmax+1),:,:,vid)
            1310                         !
            1311                       end subroutine diagvar_set_in_1layer
            1312                     
            1313                       !-----------------------------------------------------------------------------
            1314                       subroutine diagvar_get_in_1layer_region ( &
            1315                            sv,                 &  !--- OUT : surface variable
            1316                            vid,                &  !--- IN : variable ID
            1317                            l_region            &  !--- IN
            1318                            )
            1319                         !------
            1320                         !------ get diagnostic variables
            1321                         !------
            1322                         implicit none
            1323                         real(8), intent(out) :: sv(ADM_IopJop_nmax)
            1324                         integer, intent(in) :: vid
            1325                         integer, intent(in) :: l_region
            1326                         !
            1327                         integer :: n,nn
            1328                         !
            1329     1                   if(.not. flag_diagset .or. vid == -999 )then
            1330     1                      write(ADM_LOG_FID,*) "*** Error, DIAGVAR has not been setup."
            1331     1                      write(ADM_LOG_FID,*) "    Check [sub: diagvar_setup] "
            1332     1                      call ADM_proc_stop
            1333     1                   end if
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 696
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1334     1  pp   4v          do n=1, ADM_IopJop_nmax
            1335     1   p   4v             nn = ADM_IopJop(n,ADM_GIoJo)
            1336     1   p   4v             sv(n)  = diagvar1(nn,ADM_KNONE,l_region,vid)
            1337     1   p   4v          end do
            1338                         !
            1339                         return
            1340                         !
            1341                       end subroutine diagvar_get_in_1layer_region
            1342                     
            1343                       !-----------------------------------------------------------------------------
            1344                       subroutine diagvar_set_in_1layer_region ( &
            1345                            sv,                  &  !--- IN : surface variable
            1346                            vid,                 &  !--- IN : variable ID
            1347                            l_region             &  !--- IN
            1348                            )
            1349                         !------
            1350                         !------ set prognostic variables to diag[num]
            1351                         !------ and COMMUNICATION.
            1352                         !------
            1353                         implicit none
            1354                         real(8), intent(in) :: sv(ADM_IopJop_nmax)
            1355                         integer, intent(in) :: vid
            1356                         integer, intent(in) :: l_region
            1357                         !
            1358                         integer :: n,nn
            1359                         !
            1360                         integer :: i,j,suf
            1361                         suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
            1362                         !
            1363     1                   if(.not. flag_diagset .or. vid == -999 )then
            1364     1                      write(ADM_LOG_FID,*) "*** Error, DIAGVAR has not been setup."
            1365     1                      write(ADM_LOG_FID,*) "    Check [sub: diagvar_setup] "
            1366     1                      call ADM_proc_stop
            1367     1                   end if
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1368     1   s   4v          do n=1, ADM_IopJop_nmax
            1369     1   p   4v             nn = ADM_IopJop(n,ADM_GIoJo)
            1370     1   m   4v             diagvar1(nn,ADM_KNONE,l_region,vid) = sv(n)
            1371     1   p   4v          end do
            1372                         !
            1373                     !!$    diagvar1(suf(ADM_gall_1d,1),:,:,vid) &
            1374                     !!$         = diagvar1(suf(ADM_gmax+1,ADM_gmin),:,:,vid)
            1375                     !!$    diagvar1(suf(1,ADM_gall_1d),:,:,vid) &
            1376                     !!$         = diagvar1(suf(ADM_gmin,ADM_gmax+1),:,:,vid)
            1377                         ! 2010.5.5. M. Satoh [mod]
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 667
                                   <<< Loop-information  End >>>
            1378        pp   6s          diagvar1(suf(ADM_gall_1d,1),:,l_region,vid) &
            1379                              = diagvar1(suf(ADM_gmax+1,ADM_gmin),:,l_region,vid)
            1380         p   6s          diagvar1(suf(1,ADM_gall_1d),:,l_region,vid) &
            1381                              = diagvar1(suf(ADM_gmin,ADM_gmax+1),:,l_region,vid)
            1382                         !
            1383                       end subroutine diagvar_set_in_1layer_region
            1384                     
            1385                       !-----------------------------------------------------------------------------
            1386                       ! 2011.8.16 M.Satoh [add]
            1387                       subroutine diagvar_get_in_nlayer_region (&
            1388                            sv,                 &  !--- OUT : variable
            1389                            vid,                &  !--- IN : variable ID
            1390                            knum,               &  !--- IN : number of layers
            1391                            l_region            )  !--- IN
            1392                         implicit none
            1393                     
            1394                         integer, intent(in) :: knum
            1395                         real(8), intent(out) :: sv(ADM_IopJop_nmax,knum)
            1396                         integer, intent(in) :: vid
            1397                         integer, intent(in) :: l_region
            1398                         !
            1399                         integer :: l,n,nn,k
            1400                         integer :: ksta
            1401                         !
            1402     1                   if(.not. flag_diagset .or. vid == -999 )then
            1403     1                      write(ADM_LOG_FID,*) "*** Error, DIAGVAR has not been setup."
            1404     1                      write(ADM_LOG_FID,*) "    Check [sub: diagvar_setup] "
            1405     1                      call ADM_proc_stop
            1406     1                   end if
            1407     1                   if ( DIAG_VMAX_NLAYER >= vid &
            1408     1                        .and. diag_knum_nlayer(vid) == knum ) then
            1409     1                      ksta = diag_ksta_nlayer(vid)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1410     2  pp                  do k = 1, knum
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 176
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1411     3  pp   4v                do n=1, ADM_IopJop_nmax
            1412     3   p   4v                   nn = ADM_IopJop(n,ADM_GIoJo)
            1413     3   p   4v                   sv(n,k)  = diagvarn(nn,ksta+k-1,l_region,1)
            1414     3   p   4v                end do
            1415     2   p                  end do
            1416     1                   else
            1417     1                      write(ADM_LOG_FID,*) "*** Error, DIAGVAR illegal diag_vmax_nlayer", &
            1418     1                           DIAG_VMAX_NLAYER
            1419     1                      write(ADM_LOG_FID,*) "    Check [sub: diagvar_setup] "
            1420     1                      call ADM_proc_stop
            1421     1                   end if
            1422                     
            1423                         return
            1424                         !
            1425                       end subroutine diagvar_get_in_nlayer_region
            1426                     
            1427                       !-----------------------------------------------------------------------------
            1428                       ! 2011.8.16 M.Satoh [add]
            1429                       subroutine diagvar_set_in_nlayer_region ( &
            1430                            sv,                  &  !--- IN : variable
            1431                            vid,                 &  !--- IN : variable ID
            1432                            knum,                &  !--- IN : number of layers
            1433                            l_region             &  !--- IN
            1434                            )
            1435                         !------
            1436                         !------ set prognostic variables to diag[num]
            1437                         !------ and COMMUNICATION.
            1438                         !------
            1439                         implicit none
            1440                         real(8), intent(in) :: sv(ADM_IopJop_nmax,ADM_kall)
            1441                         integer, intent(in) :: vid
            1442                         integer, intent(in) :: knum
            1443                         integer, intent(in) :: l_region
            1444                         !
            1445                         integer :: l,n,nn,k
            1446                         integer :: ksta, kend
            1447                         !
            1448                         integer :: i,j,suf
            1449                         suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
            1450                         !
            1451     1                   if(.not. flag_diagset .or. vid == -999 )then
            1452     1                      write(ADM_LOG_FID,*) "*** Error, DIAGVAR has not been setup."
            1453     1                      write(ADM_LOG_FID,*) "    Check [sub: diagvar_setup] "
            1454     1                      call ADM_proc_stop
            1455     1                   end if
            1456     1                   if ( DIAG_VMAX_NLAYER >= vid &
            1457     1                        .and. diag_knum_nlayer(vid) == knum ) then
            1458     1                      ksta = diag_ksta_nlayer(vid)
            1459     1                      kend = diag_kend_nlayer(vid)
            1460     1               !      do k = 1, ADM_kall  ! 110830 A.Noda
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1461     2  pp                  do k = 1, knum
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1462     3   p   4v                do n=1, ADM_IopJop_nmax
            1463     3   p   4v                   nn = ADM_IopJop(n,ADM_GIoJo)
            1464     3   p   4v                   diagvarn(nn,ksta+k-1,l_region,1) = sv(n,k)
            1465     3   p   4v                end do
            1466     2   p                  end do
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 667
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1467     1  pp   6s             diagvarn(suf(ADM_gall_1d,1),ksta:kend,l_region,1) &
            1468     1                           = diagvar(suf(ADM_gmax+1,ADM_gmin),ksta:kend,l_region,1)
            1469     1   p   6s             diagvarn(suf(1,ADM_gall_1d),ksta:kend,l_region,1) &
            1470     1                           = diagvar(suf(ADM_gmin,ADM_gmax+1),ksta:kend,l_region,1)
            1471     1                   else
            1472     1                      write(ADM_LOG_FID,*) "*** Error, DIAGVAR illegal diag_vmax_nlayer", &
            1473     1                           DIAG_VMAX_NLAYER
            1474     1                      write(ADM_LOG_FID,*) "    Check [sub: diagvar_setup] "
            1475     1                      call ADM_proc_stop
            1476     1                   end if
            1477                     
            1478                         !
            1479                       end subroutine diagvar_set_in_nlayer_region
            1480                     
            1481                       !-----------------------------------------------------------------------------
            1482                       subroutine diagvar_comm( &
            1483                            comm_type          & !--- IN : communication type
            1484                            )
            1485                         !
            1486                         !--- comm_type : 1 ( region -> pole )
            1487                         !---           : 2 ( region -> pole -> regular communication )
            1488                         !---           : 3 ( regular communication only )
            1489                         use mod_adm, only :     &
            1490                              ADM_LOG_FID,       &
            1491                              ADM_KNONE,         &
            1492                              ADM_lall,          &
            1493                              ADM_proc_stop,     &
            1494                              ADM_comm_run_world
            1495                         use mod_comm, only :    &
            1496                              comm_var
            1497                         !
            1498                         implicit none
            1499                         integer, intent(in) :: comm_type
            1500                     
            1501                         integer :: ierr
            1502                     
            1503                     !!$    !
            1504                     !!$    integer :: ireq,istat(MPI_STATUS_SIZE),ierr
            1505                     !!$    integer :: l
            1506                     !!$    !
            1507                     !!$    real(8) :: v_npl(ADM_kall,DIAG_VMAX)
            1508                     !!$    real(8) :: v_spl(ADM_kall,DIAG_VMAX)
            1509                     !!$    !
            1510                     !!$    integer :: rgnid
            1511                     !!$    !
            1512                     !!$    integer :: i,j,suf
            1513                     !!$    suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
            1514                     !!$    !
            1515                         ! [Add] 07/11/06 T.Mitsui for check
            1516     1                   if(.not. flag_diagset )then
            1517     1                      write(ADM_LOG_FID,*) "*** Error, DIAGVAR has not been setup."
            1518     1                      write(ADM_LOG_FID,*) "    Check [sub: diagvar_setup] "
            1519     1                      call ADM_proc_stop
            1520     1                   end if
            1521                     
            1522                     
            1523                     
            1524                     
            1525                     
            1526                     
            1527                     
            1528                     
            1529                     
            1530                     
            1531                     
            1532                     
            1533                     
            1534                     
            1535                     
            1536                         call comm_var(  &
            1537                              diagvar,   & !--- INOUT : variables
            1538                              diagvar_pl,& !--- INOUT : variables at poles
            1539                              adm_kall,  & !--- IN : number of layers
            1540                              DIAG_VMAX, & !--- IN : number of variables
            1541                              comm_type, & !--- IN : communication type
            1542                              NSval_fix=.true.&
            1543                              )
            1544                     
            1545                     
            1546                     
            1547                     
            1548                     
            1549                     
            1550                     
            1551                     
            1552                     
            1553                     
            1554                     
            1555                     
            1556                     
            1557                     
            1558                     
            1559                         ! 2010.4.26 M.Satoh
            1560     1                   if ( DIAG_VMAX_1LAYER > 0 ) then
            1561     1               
            1562     1               
            1563     1               
            1564     1               
            1565     1               
            1566     1               
            1567     1               
            1568     1               
            1569     1               
            1570     1               
            1571     1               
            1572     1               
            1573     1               
            1574     1               
            1575     1               
            1576     1                      call comm_var(  &
            1577     1                           diagvar1,         & !--- INOUT : variables
            1578     1                           diagvar1_pl,      & !--- INOUT : variables at poles
            1579     1                           adm_KNONE,        & !--- IN : number of layers
            1580     1                           DIAG_VMAX_1LAYER, & !--- IN : number of variables
            1581     1                           comm_type,        & !--- IN : communication type
            1582     1                           NSval_fix=.true.  &
            1583     1                           )
            1584     1               
            1585     1               
            1586     1               
            1587     1               
            1588     1               
            1589     1               
            1590     1               
            1591     1               
            1592     1               
            1593     1               
            1594     1               
            1595     1               
            1596     1               
            1597     1               
            1598     1               
            1599     1                   end if
            1600                     
            1601                         ! 2011.8.16 M.Satoh
            1602     1                   if ( DIAG_VMAX_NLAYER > 0 ) then
            1603     1                      call comm_var(  &
            1604     1                           diagvarn,         & !--- INOUT : variables
            1605     1                           diagvarn_pl,      & !--- INOUT : variables at poles
            1606     1                           DIAG_KTOT_NLAYER, & !--- IN : number of layers
            1607     1                           1,                & !--- IN : number of variables
            1608     1                           comm_type,        & !--- IN : communication type
            1609     1                           NSval_fix=.true.  &
            1610     1                           )
            1611     1                   end if
            1612                     
            1613                         return
            1614                     
            1615                       end subroutine diagvar_comm
            1616                     
            1617                       !-----------------------------------------------------------------------------
            1618                       subroutine diagvar_checkvalues ( item, var, vmin, vmax )
            1619                     
            1620                         real(8), intent(in) :: var(:,:)
            1621                         real(8), intent(in) :: vmax
            1622                         real(8), intent(in) :: vmin
            1623                         character(LEN=*), intent(in) :: item
            1624                     
            1625                         real(8) :: varmax
            1626                         real(8) :: varmin
            1627                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1628        pp   8v          varmax = maxval( var )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1629        pp   8v          varmin = minval( var )
            1630                     
            1631                         ! 04/09/07 M.Satoh: bug fix: (varmin > vmin) => (varmin < vmin)
            1632     1                   if ( varmax > vmax .or. varmin < vmin ) then
            1633     1                      write(ADM_LOG_FID,*) &
            1634     1                           '@DIAGVAR_CHECKVALUES: invalid values', &
            1635     1                           item, &
            1636     1                           ' :max=', varmax, &
            1637     1                           ' :min=', varmin, &
            1638     1                           vmax, vmin
            1639     1                   end if
            1640                     
            1641                       end subroutine diagvar_checkvalues
            1642                     
            1643                       !-----------------------------------------------------------------------------
            1644                       subroutine diagvar_restart_output( cdate ) !08/03/10 T.Mitsui [Add] cdate
            1645                         use mod_gtl, only : &
            1646                              GTL_output_var2,&
            1647                              GTL_output_var2_da
            1648                         use mod_adm, only :     &               ! 07/07/05 A.T.Noda
            1649                              ADM_NSYS
            1650                         use mod_runconf, only : &
            1651                              RAIN_TYPE,         &
            1652                              MP_TYPE,           &               ! 07/12/05  T.Mitsui
            1653                              CP_TYPE,           &               ! 10/05/24  M.Satoh
            1654                              AE_TYPE,           &               ! 07/12/05  T.Mitsui
            1655                              TB_TYPE,           &               ! 07/07/05 A.T.Noda
            1656                              RAD_CLOUD_TYPE,    &               ! 07/07/05 A.T.Noda
            1657                              ROUGHNESS_SEA_TYPE                 ! 10/04/28 M.Satoh
            1658                         use mod_fio, only : & ! [add] H.Yashiro 20110819
            1659                              FIO_output, &
            1660                              FIO_HMID,   &
            1661                              FIO_REAL8
            1662                         use mod_time, only : &
            1663                              TIME_CTIME
            1664                         implicit none
            1665                         integer :: ksta, kend
            1666                         !
            1667                         character(len=14), intent(in) :: cdate !08/03/10 T.Mitsui [Add]
            1668                         ! 07/12/05 [Del] T.Mitsui
            1669                     !!$    character(LEN=ADM_NSYS) :: cname(10)    ! 07/07/05 A.T.Noda
            1670                         integer :: iv     ! 07/12/05 [Add] T.Mitsui
            1671                     !!$    ! [Add] work T.Mitsui 10/08/03
            1672                     !!$    character(len=256) :: cwork(256)
            1673                     !!$    character(len=256) :: cwork_1layer(256)
            1674                     
            1675                         ! -> [add] H.Yashiro 20110819
            1676                         character(LEN=ADM_MAXFNAME) :: basename
            1677                         character(LEN=FIO_HMID)     :: desc = 'INITIAL/RESTART DATA of DIAGNOSTIC VARIABLES'
            1678                         ! <- [add] H.Yashiro 20110819
            1679                         !---------------------------------------------------------------------------
            1680                     
            1681                         !
            1682                         ! [Add] 08/05/30 T.Mitsui
            1683                         call diagvar_comm( comm_type=2 )
            1684                     
            1685                     !   if(RAIN_TYPE/='CLOUD_PARAM') return
            1686                     !   if(RAIN_TYPE=='CLOUD_PARAM')then        ! 07/07/05 A.T.Noda
            1687     1                   if(trim(CP_TYPE)=='AS'.or.trim(CP_TYPE)=='PAS')then ! 10/06/10 A.T.Noda
            1688     1               
            1689     1                      ! -> [add] H.Yashiro 20110819
            1690     2                      if ( output_io_mode == 'ADVANCED' ) then
            1691     3                         if ( trim(output_basename) == "" ) then ! [add] H.Yashiro 20120512
            1692     3                            basename='restart_CBMFX'//trim(cdate)
            1693     3                         else
            1694     3                            basename=trim(output_basename)//trim(cdate)
            1695     3                         endif
            1696     2               
            1697     2                         call FIO_output( diagvar(:,:,:,I_CBMFX), basename, desc, '',     &
            1698     2                                          'CBMFX', 'Cloud-base Mass Flux', '', 'kg/m2/s', &
            1699     2                                          FIO_REAL8, restart_layername, 1, ADM_kall,      &
            1700     2                                          1, TIME_CTIME, TIME_CTIME                       )
            1701     2               
            1702     2                      elseif( output_io_mode == 'LEGACY' ) then
            1703     2                      ! <- [add] H.Yashiro 20110819
            1704     2                         ! [Add] 2012/06/07 T.Seiki
            1705     3                         if ( trim(output_basename_CBMFX) == "" ) then
            1706     3                            basename='restart_CBMFX'//trim(cdate)
            1707     3                         else
            1708     3                            basename=trim(output_basename_CBMFX)//trim(cdate)
            1709     3                         endif
            1710     2               
            1711     3                         if (output_direct_access) then
            1712     3                            call GTL_output_var2_da( basename, &
            1713     3                                                     diagvar(:,:,:,I_CBMFX), 1, ADM_kall, &
            1714     3                                                     recnum=1, output_size=8 )
            1715     3                         else
            1716     3                            call GTL_output_var2( basename,        &
            1717     3                                                  diagvar(:,:,:,I_CBMFX), diagvar_pl(:,:,:,I_CBMFX), &
            1718     3                                                  1, ADM_kall )
            1719     3                         endif !--- direct/sequencial
            1720     2               
            1721     2                      endif  !--- io_mode
            1722     1                   endif
            1723                     
            1724                         ! 07/12/05 [Add] T.Mitsui
            1725     1                   if(  (MP_TYPE/='NONE') .and. (AE_TYPE/='NONE') )then
            1726     1               
            1727     1                      ! -> [add] H.Yashiro 20110819
            1728     2                      if ( output_io_mode == 'ADVANCED' ) then
            1729     3                         if ( trim(output_basename) == "" ) then ! [add] H.Yashiro 20120512
            1730     3                            basename='restart_mp'//trim(cdate)
            1731     3                         else
            1732     3                            basename=trim(output_basename)//trim(cdate)
            1733     3                         endif
            1734     2               
            1735     2                         call FIO_output( diagvar(:,:,:,I_UNCCN), basename, desc, '', &
            1736     2                                          'UNCCN', 'CCN Concentration', '', '1/m3',   &
            1737     2                                          FIO_REAL8, restart_layername, 1, ADM_kall,  &
            1738     2                                          1, TIME_CTIME, TIME_CTIME                   )
            1739     2               
            1740     2                      elseif( output_io_mode == 'LEGACY' ) then
            1741     2                      ! <- [add] H.Yashiro 20110819
            1742     2                         ! [Add] 2012/06/07 T.Seiki
            1743     3                         if ( trim(output_basename_MP) == "" ) then
            1744     3                            basename='restart_mp'//trim(cdate)
            1745     3                         else
            1746     3                            basename=trim(output_basename_MP)//trim(cdate)
            1747     3                         endif
            1748     3                         if(output_direct_access) then
            1749     3                            call GTL_output_var2_da( basename, &
            1750     3                                 diagvar(:,:,:,I_UNCCN), 1, ADM_kall, &
            1751     3                                 recnum=1, output_size=8 )
            1752     3                         else
            1753     3                            call GTL_output_var2( basename,           &
            1754     3                                 diagvar(:,:,:,I_UNCCN), diagvar_pl(:,:,:,I_UNCCN),    &
            1755     3                                 1, ADM_kall )
            1756     3                         endif !--- direct/sequencial
            1757     2               
            1758     2                      endif  !--- io_mode
            1759     1                   endif
            1760                     
            1761                         ! 2010.5.24 M.Satoh
            1762     1                   if ( trim(CP_TYPE) == 'TDK' ) then
            1763     1               
            1764     1                      ! -> [add] H.Yashiro 20110819
            1765     2                      if ( output_io_mode == 'ADVANCED' ) then
            1766     3                         if ( trim(output_basename) == "" ) then ! [add] H.Yashiro 20120512
            1767     3                            basename='restart_QV_TB_TEND'//trim(cdate)
            1768     3                         else
            1769     3                            basename=trim(output_basename)//trim(cdate)
            1770     3                         endif
            1771     2               
            1772     2                         call FIO_output( diagvar(:,:,:,I_QV_TB_TEND), basename, desc, '', &
            1773     2                                          'QV_TB_TEND', 'QV_TB_TEND', '', '',              &
            1774     2                                          FIO_REAL8, restart_layername, 1, ADM_kall,       &
            1775     2                                          1, TIME_CTIME, TIME_CTIME                        )
            1776     2               
            1777     3                         if ( trim(output_basename) == "" ) then ! [add] H.Yashiro 20120512
            1778     3                            basename='restart_EVAP_SFC'//trim(cdate)
            1779     3                         else
            1780     3                            basename=trim(output_basename)//trim(cdate)
            1781     3                         endif
            1782     2               
            1783     2                         call FIO_output( diagvar(:,:,:,I_EVAP_SFC), basename, desc, '', &
            1784     2                                          'EVAP_SFC', 'EVAP_SFC', '', '',                &
            1785     2                                          FIO_REAL8, 'ZSSFC1', 1, 1,                     &
            1786     2                                          1, TIME_CTIME, TIME_CTIME                      )
            1787     2               
            1788     3                         if ( trim(output_basename) == "" ) then ! [add] H.Yashiro 20120512
            1789     3                            basename='restart_SH_FLUX_SFC'//trim(cdate)
            1790     3                         else
            1791     3                            basename=trim(output_basename)//trim(cdate)
            1792     3                         endif
            1793     2               
            1794     2                         call FIO_output( diagvar(:,:,:,I_SH_FLUX_SFC), basename, desc, '', &
            1795     2                                          'SH_FLUX_SFC', 'SH_FLUX_SFC', '', '',             &
            1796     2                                          FIO_REAL8, 'ZSSFC1', 1, 1,                        &
            1797     2                                          1, TIME_CTIME, TIME_CTIME                         )
            1798     2               
            1799     2                      elseif( output_io_mode == 'LEGACY' ) then
            1800     2                      ! <- [add] H.Yashiro 20110819
            1801     2                         ! [Add] 2012/06/07 T.Seiki
            1802     3                         if ( trim(output_basename_QV_TB_TEND) == "" ) then
            1803     3                            basename='restart_QV_TB_TEND'//trim(cdate)
            1804     3                         else
            1805     3                            basename=trim(output_basename_QV_TB_TEND)//trim(cdate)
            1806     3                         endif
            1807     2                         ! 2011/08/16 M.Satoh, change names
            1808     3                         if(output_direct_access) then
            1809     3                            call GTL_output_var2_da( basename, &
            1810     3                                 diagvar(:,:,:,I_QV_TB_TEND), 1, ADM_kall,  &
            1811     3                                 recnum=1, output_size=8 )
            1812     3                         else
            1813     3                            call GTL_output_var2( basename, &
            1814     3                                 diagvar(:,:,:,I_QV_TB_TEND), &
            1815     3                                 diagvar_pl(:,:,:,I_QV_TB_TEND), &
            1816     3                                 1, ADM_kall )
            1817     3                         endif !--- direct/sequencial
            1818     2                         ! [Add] 2012/06/07 T.Seiki
            1819     3                         if ( trim(output_basename_EVAP_SFC) == "" ) then
            1820     3                            basename='restart_EVAP_SFC'//trim(cdate)
            1821     3                         else
            1822     3                            basename=trim(output_basename_EVAP_SFC)//trim(cdate)
            1823     3                         endif
            1824     3                         if(output_direct_access) then
            1825     3                            call GTL_output_var2_da( basename, &
            1826     3                                 diagvar1(:,:,:,I_EVAP_SFC), 1, ADM_KNONE,  &
            1827     3                                 recnum=1, output_size=8 )
            1828     3                         else
            1829     3                            call GTL_output_var2( basename, &
            1830     3                                 diagvar1(:,:,:,I_EVAP_SFC), &
            1831     3                                 diagvar1_pl(:,:,:,I_EVAP_SFC), &
            1832     3                                 1, ADM_KNONE )
            1833     3                         endif !--- direct/sequencial
            1834     2                         ! [Add] 2012/06/07 T.Seiki
            1835     3                         if ( trim(output_basename_SH_FLUX_SFC) == "" ) then
            1836     3                            basename='restart_EVAP_SFC'//trim(cdate)
            1837     3                         else
            1838     3                            basename=trim(output_basename_EVAP_SFC)//trim(cdate)
            1839     3                         endif
            1840     2                         ! 2011/08/16b M.Satoh
            1841     3                         if(output_direct_access) then
            1842     3                            call GTL_output_var2_da( basename, &
            1843     3                                 diagvar1(:,:,:,I_SH_FLUX_SFC), 1, ADM_KNONE,  &
            1844     3                                 recnum=1, output_size=8 )
            1845     3                         else
            1846     3                            call GTL_output_var2( basename, &
            1847     3                                 diagvar1(:,:,:,I_SH_FLUX_SFC), &
            1848     3                                 diagvar1_pl(:,:,:,I_SH_FLUX_SFC), &
            1849     3                                 1, ADM_KNONE )
            1850     3                         endif !--- direct/sequencial
            1851     2               
            1852     2                      endif  !--- io_mode
            1853     1                   endif
            1854                     
            1855                     
            1856                         ! 2011.8.16 M.Satoh
            1857     1                   if ( trim(CP_TYPE) == 'CHIKIRA' ) then
            1858     1                      ksta = diag_ksta_nlayer(I_CBMFX_CHIKIRA)
            1859     1                      kend = diag_kend_nlayer(I_CBMFX_CHIKIRA)
            1860     1                      ! 11/08/17 M.Satoh bug fix: ksta-kend+1 => kend-ksta+1
            1861     1               
            1862     1                      ! -> [add] H.Yashiro 20110819
            1863     2                      if ( output_io_mode == 'ADVANCED' ) then
            1864     3                         if ( trim(output_basename) == "" ) then ! [add] H.Yashiro 20120512
            1865     3                            basename='restart_CBMFX_CHIKIRA'//trim(cdate)
            1866     3                         else
            1867     3                            basename=trim(output_basename)//trim(cdate)
            1868     3                         endif
            1869     2               
            1870     2                         call FIO_output( diagvarn(:,ksta:kend,:,1), basename, desc, '',             &
            1871     2                                          'CBMFX_CHIKIRA', 'Cloud-base Mass Flux (Chikira)', '', '', &
            1872     2                                          FIO_REAL8, 'GCCKR', 1, kend-ksta+1,                        &
            1873     2                                          1, TIME_CTIME, TIME_CTIME                                  )
            1874     2               
            1875     2                      elseif( output_io_mode == 'LEGACY' ) then
            1876     2                      ! <- [add] H.Yashiro 20110819
            1877     2                         ! [Add] 2012/06/07 T.Seiki
            1878     3                         if ( trim(output_basename_CBMFX_CHIKIRA) == "" ) then
            1879     3                            basename='restart_CBMFX_CHIKIRA'//trim(cdate)
            1880     3                         else
            1881     3                            basename=trim(output_basename_CBMFX_CHIKIRA)//trim(cdate)
            1882     3                         endif
            1883     2               
            1884     3                         if(output_direct_access) then
            1885     3                            call GTL_output_var2_da( basename, &
            1886     3                                                     diagvarn(:,ksta:kend,:,1), 1, kend-ksta+1,  &
            1887     3                                                     recnum=1, output_size=8 )
            1888     3                         else
            1889     3                            call GTL_output_var2( basename, &
            1890     3                                                  diagvarn(:,ksta:kend,:,1), &
            1891     3                                                  diagvarn_pl(:,ksta:kend,:,1), &
            1892     3                                                  1, kend-ksta+1 )
            1893     3                         endif !--- direct/sequencial
            1894     2               
            1895     2                      endif  !--- io_mode
            1896     1                   endif
            1897                     
            1898                     ! -> [add&mod] H.Yashiro 20110826
            1899                     !==> 09/01/28 A.T.Noda
            1900                     !   if(TB_TYPE=='MY2MOIST')then             ! 07/07/05 A.T.Noda
            1901     1                   if (      trim(TB_TYPE)=='MY2MOIST' &
            1902     1                        .or. trim(TB_TYPE)=='MYNN2'    &
            1903     1                        .or. trim(TB_TYPE)=='MYNN2.5'  &
            1904     1                        .or. trim(TB_TYPE)=='MYNN3'    ) then
            1905     1               
            1906     2                      if ( trim(output_basename) == "" ) then ! [add] H.Yashiro 20120512
            1907     2                         basename='restart_diagvar'//trim(cdate)
            1908     2                      else
            1909     2                         basename=trim(output_basename)//trim(cdate)
            1910     2                      endif
            1911     1                      !
            1912     2                      if (      trim(TB_TYPE)=='MY2MOIST' &
            1913     2                           .or. trim(TB_TYPE)=='MYNN2'    &
            1914     2                           .or. trim(TB_TYPE)=='MYNN2.5'  ) then
            1915     2                         !
            1916     3                         if (      trim(TB_TYPE)=='MY2MOIST' &
            1917     3                              .or. trim(TB_TYPE)=='MYNN2'    ) then
            1918     3                            !
            1919     4                            if ( output_io_mode == 'ADVANCED' ) then
            1920     4                               !
            1921     4                               call FIO_output( diagvar(:,:,:,I_QKEd), basename, desc, '',         &
            1922     4                                                'qked', 'Turbulent Kinetic Energy*2', '', 'J/kg',  &
            1923     4                                                FIO_REAL8, restart_layername, 1, ADM_kall,         &
            1924     4                                                1, TIME_CTIME, TIME_CTIME                          )
            1925     4               
            1926     4                            elseif( output_io_mode == 'LEGACY' ) then
            1927     4                               !
            1928     5                               if (output_direct_access) then
            1929     5                                  call GTL_output_var2_da( basename,                           &
            1930     5                                                           diagvar(:,:,:,I_QKEd), 1, ADM_kall, &
            1931     5                                                           recnum=1, output_size=8             )
            1932     5                               else
            1933     5                                  call GTL_output_var2( basename,                 &
            1934     5                                                        diagvar(:,:,:,I_QKEd),    &
            1935     5                                                        diagvar_pl(:,:,:,I_QKEd), &
            1936     5                                                        1, ADM_kall               )
            1937     5                               endif !--- direct/sequencial
            1938     4               
            1939     4                            endif  !--- io_mode
            1940     3               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1941     3       8v                   write(ADM_LOG_FID,*) 'restart out: qked',           &
            1942     3                                                 maxval(diagvar(:,:,:,I_QKEd)), &
            1943     3                                                 minval(diagvar(:,:,:,I_QKEd))
            1944     3                         endif !--- MY2M, MYNN2
            1945     2               
            1946     2                         !
            1947     3                         if ( output_io_mode == 'ADVANCED' ) then
            1948     3                            !
            1949     3                            call FIO_output( diagvar(:,:,:,I_TSQd), basename, desc, '',         &
            1950     3                                             'tsqd', 'Variance of theta_l', '', 'K2',           &
            1951     3                                             FIO_REAL8, restart_layername, 1, ADM_kall,         &
            1952     3                                             1, TIME_CTIME, TIME_CTIME                          )
            1953     3                            call FIO_output( diagvar(:,:,:,I_QSQd), basename, desc, '',         &
            1954     3                                             'qsqd', 'Variance of Total Water(qw)', '', '',     &
            1955     3                                             FIO_REAL8, restart_layername, 1, ADM_kall,         &
            1956     3                                             1, TIME_CTIME, TIME_CTIME                          )
            1957     3                            call FIO_output( diagvar(:,:,:,I_COVd), basename, desc, '',         &
            1958     3                                             'covd', 'Covarriance of qw and theta_l', '', 'K',  &
            1959     3                                             FIO_REAL8, restart_layername, 1, ADM_kall,         &
            1960     3                                             1, TIME_CTIME, TIME_CTIME                          )
            1961     3               
            1962     3                         elseif( output_io_mode == 'LEGACY' ) then
            1963     3                            !
            1964     4                            if (output_direct_access) then
            1965     4                               call GTL_output_var2_da( basename,                           &
            1966     4                                                        diagvar(:,:,:,I_TSQd), 1, ADM_kall, &
            1967     4                                                        recnum=2, output_size=8             )
            1968     4                               call GTL_output_var2_da( basename,                           &
            1969     4                                                        diagvar(:,:,:,I_QSQd), 1, ADM_kall, &
            1970     4                                                        recnum=3, output_size=8             )
            1971     4                               call GTL_output_var2_da( basename,                           &
            1972     4                                                        diagvar(:,:,:,I_COVd), 1, ADM_kall, &
            1973     4                                                        recnum=4, output_size=8             )
            1974     4                            else
            1975     4                               call GTL_output_var2( basename,                 &
            1976     4                                                     diagvar(:,:,:,I_TSQd),    &
            1977     4                                                     diagvar_pl(:,:,:,I_TSQd), &
            1978     4                                                     1, ADM_kall               )
            1979     4                               call GTL_output_var2( basename,                 &
            1980     4                                                     diagvar(:,:,:,I_QSQd),    &
            1981     4                                                     diagvar_pl(:,:,:,I_QSQd), &
            1982     4                                                     1, ADM_kall               )
            1983     4                               call GTL_output_var2( basename,                 &
            1984     4                                                     diagvar(:,:,:,I_COVd),    &
            1985     4                                                     diagvar_pl(:,:,:,I_COVd), &
            1986     4                                                     1, ADM_kall               )
            1987     4                            endif !--- direct/sequencial
            1988     3               
            1989     3                         endif  !--- io_mode
            1990     2               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1991     2       8v                write(ADM_LOG_FID,*) 'restart out: tsqd',           &
            1992     2                                              maxval(diagvar(:,:,:,I_TSQd)), &
            1993     2                                              minval(diagvar(:,:,:,I_TSQd))
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1994     2       8v                write(ADM_LOG_FID,*) 'restart out: qsqd',           &
            1995     2                                              maxval(diagvar(:,:,:,I_QSQd)), &
            1996     2                                              minval(diagvar(:,:,:,I_QSQd))
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1997     2       8v                write(ADM_LOG_FID,*) 'restart out: covd',           &
            1998     2                                              maxval(diagvar(:,:,:,I_COVd)), &
            1999     2                                              minval(diagvar(:,:,:,I_COVd))
            2000     2                      endif !--- MY2M, MYNN2, MYNN2.5
            2001     1               
            2002     2                      if ( RAD_CLOUD_TYPE=='PARTIAL_CLOUD' )then
            2003     2                         !
            2004     3                         if ( output_io_mode == 'ADVANCED' ) then
            2005     3                            !
            2006     3                            call FIO_output( diagvar(:,:,:,I_QCLWB), basename, desc, '',        &
            2007     3                                             'q_clw_before', 'q_clw_before', '', 'kg/kg',       &
            2008     3                                             FIO_REAL8, restart_layername, 1, ADM_kall,         &
            2009     3                                             1, TIME_CTIME, TIME_CTIME                          )
            2010     3                            call FIO_output( diagvar(:,:,:,I_QCLIB), basename, desc, '',        &
            2011     3                                             'q_cli_before', 'q_cli_before', '', 'kg/kg',       &
            2012     3                                             FIO_REAL8, restart_layername, 1, ADM_kall,         &
            2013     3                                             1, TIME_CTIME, TIME_CTIME                          )
            2014     3                            call FIO_output( diagvar(:,:,:,I_CFRACP), basename, desc, '0-1',    &
            2015     3                                             'cfrac_pdf', 'cfrac_pdf', '', '',                  &
            2016     3                                             FIO_REAL8, restart_layername, 1, ADM_kall,         &
            2017     3                                             1, TIME_CTIME, TIME_CTIME                          )
            2018     3               
            2019     3                         elseif( output_io_mode == 'LEGACY' ) then
            2020     3                            !
            2021     4                            if (output_direct_access) then
            2022     4                               call GTL_output_var2_da( basename,                             &
            2023     4                                                        diagvar(:,:,:,I_QCLWB), 1, ADM_kall,  &
            2024     4                                                        recnum=5, output_size=8               )
            2025     4                               call GTL_output_var2_da( basename,                             &
            2026     4                                                        diagvar(:,:,:,I_QCLIB), 1, ADM_kall,  &
            2027     4                                                        recnum=6, output_size=8               )
            2028     4                               call GTL_output_var2_da( basename,                             &
            2029     4                                                        diagvar(:,:,:,I_CFRACP), 1, ADM_kall, &
            2030     4                                                        recnum=7, output_size=8               )
            2031     4                            else
            2032     4                               call GTL_output_var2( basename,                   &
            2033     4                                                     diagvar(:,:,:,I_QCLWB),     &
            2034     4                                                     diagvar_pl(:,:,:,I_QCLWB),  &
            2035     4                                                     1, ADM_kall                 )
            2036     4                               call GTL_output_var2( basename,                   &
            2037     4                                                     diagvar(:,:,:,I_QCLIB),     &
            2038     4                                                     diagvar_pl(:,:,:,I_QCLIB),  &
            2039     4                                                     1, ADM_kall                 )
            2040     4                               call GTL_output_var2( basename,                   &
            2041     4                                                     diagvar(:,:,:,I_CFRACP),    &
            2042     4                                                     diagvar_pl(:,:,:,I_CFRACP), &
            2043     4                                                     1, ADM_kall                 )
            2044     4                            endif !--- direct/sequencial
            2045     3               
            2046     3                         endif  !--- io_mode
            2047     2               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2048     2       8v                write(ADM_LOG_FID,*) 'restart out: q_clw_before',    &
            2049     2                                              maxval(diagvar(:,:,:,I_QCLWB)), &
            2050     2                                              minval(diagvar(:,:,:,I_QCLWB))
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2051     2       8v                write(ADM_LOG_FID,*) 'restart out: q_cli_before',    &
            2052     2                                              maxval(diagvar(:,:,:,I_QCLIB)), &
            2053     2                                              minval(diagvar(:,:,:,I_QCLIB))
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2054     2       8v                write(ADM_LOG_FID,*) 'restart out: cfrac_pdf',        &
            2055     2                                              maxval(diagvar(:,:,:,I_CFRACP)), &
            2056     2                                              minval(diagvar(:,:,:,I_CFRACP))
            2057     2                      endif !--- PARTIAL_CLOUD
            2058     1               
            2059     1                   endif !--- MY2M, MYNN2, MYNN2.5, MYNN3
            2060                     !<== 09/01/28 A.T.Noda
            2061                     ! <- [add&mod] H.Yashiro 20110826
            2062                     
            2063                         ! 10/04/28 M.Satoh
            2064     1                   if( ROUGHNESS_SEA_TYPE == 'YQW' ) then
            2065     1               
            2066     1                      ! -> [add] H.Yashiro 20110819
            2067     2                      if ( output_io_mode == 'ADVANCED' ) then
            2068     3                         if ( trim(output_basename) == "" ) then ! [add] H.Yashiro 20120512
            2069     3                            basename='restart_ROUGHNESS_SEA'//trim(cdate)
            2070     3                         else
            2071     3                            basename=trim(output_basename)//trim(cdate)
            2072     3                         endif
            2073     2                         ! -> [mod] Y.Yamada 20111125
            2074     2                         !          call FIO_output( diagvar(:,:,:,I_ROUGHNESS_SEA), basename, desc, '', &
            2075     2                         !                           'ROUGHNESS_SEA', 'Sea Roughness Length', '', 'm',   &
            2076     2                         !                           FIO_REAL8, 'ZSSFC1', 1, 1,                          &
            2077     2                         !                           1, TIME_CTIME, TIME_CTIME                           )
            2078     2                         call FIO_output( diagvar1(:,:,:,I_ROUGHNESS_SEA), basename, desc, '', &
            2079     2                              'ROUGHNESS_SEA', 'Sea Roughness Length', '', 'm',   &
            2080     2                                          FIO_REAL8, 'ZSSFC1', 1, 1,                          &
            2081     2                                          1, TIME_CTIME, TIME_CTIME                           )
            2082     2                         ! <- [mod] Y.Yamada 20111125
            2083     2                      elseif( output_io_mode == 'LEGACY' ) then
            2084     2                      ! <- [add] H.Yashiro 20110819
            2085     2                         ! [Add] 2012/06/07 T.Seiki
            2086     3                         if ( trim(output_basename_ROUGHNESS_SEA) == "" ) then
            2087     3                            basename='restart_ROUGHNESS_SEA'//trim(cdate)
            2088     3                         else
            2089     3                            basename=trim(output_basename_ROUGHNESS_SEA)//trim(cdate)
            2090     3                         endif
            2091     2               
            2092     3                         if (output_direct_access) then
            2093     3                            call GTL_output_var2_da( basename, &
            2094     3                                                     diagvar1(:,:,:,I_ROUGHNESS_SEA), 1, ADM_KNONE,    &
            2095     3                                                     recnum=1, output_size=8 )
            2096     3                         else
            2097     3                            call GTL_output_var2( basename,   &
            2098     3                                                  diagvar1(:,:,:,I_ROUGHNESS_SEA), &
            2099     3                                                  diagvar1_pl(:,:,:,I_ROUGHNESS_SEA),    &
            2100     3                                                  1, ADM_KNONE )
            2101     3                         endif !--- direct/sequencial
            2102     2               
            2103     2                      endif  !--- io_mode
            2104     1               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2105     1       8v             write(ADM_LOG_FID,*) 'restart out: z0_roughness_sea', &
            2106     1                                           maxval(diagvar1(:,:,:,I_ROUGHNESS_SEA)), &
            2107     1                                           minval(diagvar1(:,:,:,I_ROUGHNESS_SEA))
            2108     1                   endif
            2109                     
            2110                         ! [mod] 11/08/16 M.Satoh
            2111                         call diagvar_timeinfo ( cdate )
            2112                     
            2113                           ! del below; 11/08/16 M.Satoh
            2114                           !
            2115                           ! 07/12/05 [Add] T.Mitsui
            2116                     !!$ call diagvar_timeinfo(DIAG_VMAX,diag_cname(1:DIAG_VMAX))
            2117                         ! 08/03/10 [Mod] T.Mitsui
            2118                         ! 10/04/28 [Mod] M.Satoh
            2119                     
            2120                         ! 10/06/09 A.T.Noda
            2121                     !    call diagvar_timeinfo ( &
            2122                     !         DIAG_VMAX,         &
            2123                     !         diag_cname(1:DIAG_VMAX)//trim(cdate), &
            2124                     !         DIAG_VMAX_1layer,  &
            2125                     !         diag_cname_1layer(1:DIAG_VMAX_1layer)//trim(cdate) &
            2126                     !         )
            2127                     !!$    ! [fix] 10/08/03 T.Mitsui, bug(?) by gfortran
            2128                     !!$    cwork(:)=""
            2129                     !!$    cwork_1layer(:)=""
            2130                     !!$    cwork_nlayer(:)="" ! 11/08/16 M.Satoh
            2131                     !!$    do iv=1, DIAG_VMAX
            2132                     !!$       cwork(iv)=diag_cname(iv)//trim(cdate)
            2133                     !!$    end do
            2134                     !!$    if( DIAG_VMAX_1layer>0 )then
            2135                     !!$       do iv=1, DIAG_VMAX_1layer
            2136                     !!$          cwork_1layer(iv)=diag_cname_1layer(iv)//trim(cdate)
            2137                     !!$       end do
            2138                     !!$    end do
            2139                     !!$    if( DIAG_VMAX_nlayer>0 )then ! 11/08/16 M.Satoh
            2140                     !!$       do iv=1, DIAG_VMAX_nlayer
            2141                     !!$          cwork_nlayer(iv)=diag_cname_nlayer(iv)//trim(cdate)
            2142                     !!$       end do
            2143                     !!$    end do
            2144                     
            2145                     !!$       call diagvar_timeinfo ( &
            2146                     !!$            DIAG_VMAX,         &
            2147                     !!$            cwork(1:DIAG_VMAX),&
            2148                     !!$            DIAG_VMAX_1layer,  &
            2149                     !!$            cwork_1layer(1:DIAG_VMAX_1layer) &
            2150                     !!$            )
            2151                     !!$    else
            2152                     !!$       call diagvar_timeinfo ( &
            2153                     !!$            DIAG_VMAX,         &
            2154                     !!$            cwork(1:DIAG_VMAX),&
            2155                     !!$            DIAG_VMAX_1layer   &
            2156                     !!$            )
            2157                     !!$    endif
            2158                         !
            2159                       end subroutine diagvar_restart_output
            2160                       !-----------------------------------------------------------------------------
            2161                       ! 11/08/16 [Mod] M.Satoh
            2162                       subroutine diagvar_timeinfo &
            2163                            ( cdate ) !--- IN
            2164                         !
            2165                         use mod_misc, only :        &
            2166                              MISC_get_available_fid
            2167                         use mod_adm, only :         &
            2168                              ADM_NSYS,              &
            2169                              ADM_prc_me,            &
            2170                              ADM_kmin,ADM_kmax,     &
            2171                              ADM_prc_run_master
            2172                         use mod_time, only :        &
            2173                              TIME_DTL, &
            2174                              TIME_LSTEP_MAX
            2175                         use mod_grd, only :         &
            2176                              GRD_gz
            2177                         !
            2178                         implicit none
            2179                         character(len=14), intent(in) :: cdate
            2180                     
            2181                         character(len=ADM_NSYS) :: cname(DIAG_VMAX_DEF)
            2182                         character(len=ADM_NSYS) :: cname_1layer(DIAG_VMAX_DEF)
            2183                         character(len=ADM_NSYS) :: cname_nlayer(DIAG_VMAX_DEF)
            2184                     
            2185                         integer :: num = 1
            2186                         integer :: fid
            2187                         integer :: k
            2188                         integer :: n
            2189                         integer :: iv
            2190                         character(len=3) :: wc       ! [Add] 2012/06/07 T.Seiki
            2191                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 82
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2192        pp               cname(:) = ""
            2193         p               cname_1layer(:) = ""
            2194         p               cname_nlayer(:) = ""
            2195                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1600
                                   <<< Loop-information  End >>>
            2196     1  pp   8           do iv = 1, DIAG_VMAX
            2197     1   p   8              cname(iv) = diag_cname(iv)//trim(cdate)
            2198     1   p   8           end do
            2199     1                   if( DIAG_VMAX_1layer > 0 )then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1600
                                   <<< Loop-information  End >>>
            2200     2  pp   8              do iv = 1, DIAG_VMAX_1layer
            2201     2   p   8                 cname_1layer(iv) = diag_cname_1layer(iv)//trim(cdate)
            2202     2   p   8              end do
            2203     1                   end if
            2204     1                   if( DIAG_VMAX_nlayer > 0 )then ! 11/08/16 M.Satoh
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1600
                                   <<< Loop-information  End >>>
            2205     2  pp   8              do iv = 1, DIAG_VMAX_nlayer
            2206     2   p   8                 cname_nlayer(iv) = diag_cname_nlayer(iv)//trim(cdate)
            2207     2   p   8              end do
            2208     1                   end if
            2209                     
            2210     1                   if(ADM_prc_me == ADM_prc_run_master) then
            2211     1                      !
            2212     1                      fid = MISC_get_available_fid()
            2213     1                         open(fid,file='diagvar.info',form='formatted',status='replace')
            2214     2                      do n = 1, DIAG_VMAX
            2215     2                         write(fid,'(I4,F16.2)') 1, TIME_DTL*TIME_LSTEP_MAX
            2216     2                         write(fid,'(I4)') ADM_kall
            2217     3   s    s                do k=1, ADM_kall
            2218     3   m    m                   write(fid,'(F16.4)') GRD_gz(k)
            2219     3   p    v                end do
            2220     2                         write(fid,'(I4)') num
            2221     2                         write(fid,'(a32)') trim(cname(n))
            2222     2                      end do
            2223     2                      if ( DIAG_VMAX_1layer > 0 ) then
            2224     3   s                     do n = 1, DIAG_VMAX_1layer
            2225     3   m                        write(fid,'(I4,F16.2)') 1, TIME_DTL*TIME_LSTEP_MAX
            2226     3   m                        write(fid,'(I4)') ADM_KNONE
            2227     3   m                        write(fid,'(F16.4)') 0.0
            2228     3   m                        write(fid,'(I4)') num
            2229     3   m                        write(fid,'(a32)') trim(cname_1layer(n))
            2230     3   p                     end do
            2231     2                      end if
            2232     2                      if ( DIAG_VMAX_nlayer > 0 ) then
            2233     3                         do n = 1, DIAG_VMAX_nlayer
            2234     3                            write(fid,'(I4,F16.2)') 1, TIME_DTL*TIME_LSTEP_MAX
            2235     3                            write(fid,'(I4)') diag_knum_nlayer(n)
            2236     4   s    s                   do k=1, diag_knum_nlayer(n)
            2237     4   m    s                      write(fid,'(F16.4)') float(k)
            2238     4   p    s                   end do
            2239     3                            write(fid,'(I4)') num
            2240     3                            write(fid,'(a32)') trim(cname_nlayer(n))
            2241     3                         end do
            2242     2                      end if
            2243     1                      close(fid)
            2244     1                      !
            2245     1                   end if
            2246                         !
            2247                         return
            2248                         !
            2249                       end subroutine diagvar_timeinfo
            2250                     
            2251                     end module mod_diagvar

 Diagnostic messages: program name(mod_diagvar)
   jwd8220o-i  "nhm/share/mod_diagvar.f90", line 6: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
  Module subprogram name(diagvar_get)
   jwd8209o-i  "nhm/share/mod_diagvar.f90", line 1008: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(diagvar_set)
   jwd8209o-i  "nhm/share/mod_diagvar.f90", line 1049: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(diagvar_get_in)
   jwd8201o-i  "nhm/share/mod_diagvar.f90", line 1088: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "nhm/share/mod_diagvar.f90", line 1089: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(diagvar_set_in)
   jwd8209o-i  "nhm/share/mod_diagvar.f90", line 1126: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(diagvar_get_in_region)
   jwd2006i-i  "nhm/share/mod_diagvar.f90", line 1151: 'l' is declared but never referenced.
   jwd8201o-i  "nhm/share/mod_diagvar.f90", line 1160: Invariant expression within loop is moved outside loop.
  Module subprogram name(diagvar_set_in_region)
   jwd2006i-i  "nhm/share/mod_diagvar.f90", line 1185: 'l' is declared but never referenced.
  Module subprogram name(diagvar_get_in_1layer)
   jwd8201o-i  "nhm/share/mod_diagvar.f90", line 1233: Invariant expression within loop is moved outside loop.
  Module subprogram name(diagvar_get_in_1layer_k)
   jwd8201o-i  "nhm/share/mod_diagvar.f90", line 1267: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "nhm/share/mod_diagvar.f90", line 1268: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(diagvar_get_in_nlayer_region)
   jwd2006i-i  "nhm/share/mod_diagvar.f90", line 1399: 'l' is declared but never referenced.
   jwd8201o-i  "nhm/share/mod_diagvar.f90", line 1412: Invariant expression within loop is moved outside loop.
  Module subprogram name(diagvar_set_in_nlayer_region)
   jwd2006i-i  "nhm/share/mod_diagvar.f90", line 1445: 'l' is declared but never referenced.
  Module subprogram name(diagvar_comm)
   jwd2006i-i  "nhm/share/mod_diagvar.f90", line 1501: 'ierr' is declared but never referenced.
  Module subprogram name(diagvar_restart_output)
   jwd2006i-i  "nhm/share/mod_diagvar.f90", line 1670: 'iv' is declared but never referenced.
  Module subprogram name(diagvar_timeinfo)
   jwd2006i-i  "nhm/share/mod_diagvar.f90", line 2190: 'wc' is declared but never referenced.

 Procedure information
   Lines      : 2251
   Statements : 1084
   Stack(byte): 78720
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 2251
   Total statements : 1084
   Total stack(byte): 78720
   Total prefetch num: 0


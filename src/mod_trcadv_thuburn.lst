
 Fujitsu Fortran Version 1.2.0  Mon Dec 21 17:35:15 2015

 Compilation information
   Current directory : /volume1/home/ra000007/a03106/nicam-dc-mini/src
   Source file       : nhm/dynamics/mod_trcadv_thuburn.f90

 Option information
   Command line options : -Kident_mpi -f2004 -Kfast,parallel,auto,ocl,preex,array_private,noalias=s,mfunc=2 -Kparallel_iteration=8,instance=8,dynamic_iteration -Qi -Qt -X03 -Ncompdisp -Koptmsg=1 -Cpp -Kprefetch_cache_level=all,prefetch_iteration_L2=50 -Ksimd -Ntl_notrt -U_FIPP_ -U_FAPP_ -I../src/include -o mod_trcadv_thuburn.o -c -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -W0,-zmpa=Yignore-intent -I/opt/FJSVtclang/GM-1.2.0-19/lib64
   Cpp options          : -U_FIPP_ -U_FAPP_ -I../src/include -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -I/opt/FJSVtclang/GM-1.2.0-19/lib64 -D__FUJITSU -Dunix -Dsparc -D__sparc__ -D__unix -D__sparc -D__frt_version=700 -D__HPC_ACE__ -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -Dlinux -otmp -D__sparcv9 -D__sparc_v9__ -D__arch64__
   Effective options    : -fi -g0 -AE -Free -O3 -Qi,p,t -X03
                          -x0
                          -KFLTLD -Kadr44 -Knoalias=s -Kauto -Knoautoobjstack
                          -Knocalleralloc -Kdalign -Keval -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kilfunc
                          -Klargepage -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_if -Kloop_fusion
                          -Kloop_interchange -Kloop_nopart_parallel
                          -Kloop_nopart_simd -Kloop_noversioning -Kns
                          -Kmfunc=2 -Kocl -Komitfp -Koptmsg=1 -Kpreex
                          -Kprefetch_conditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_iteration_L2=50 -Kprefetch_nostrong
                          -Kprefetch_strong_L2 -Knoshortloop -Ksimd=1
                          -Knosimd_region_constant -Knostriping -Kswp
                          -Knotemparraystack -Kunroll -Knouxsimd -KNOXFILL
                          -Knoopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_noordered_reduction -Knothreadsafe
                          -Kparallel -Kparallel_nofp_precision
                          -Karray_private -Kdynamic_iteration -Kreduction
                          -Kregion_extension -Kinstance=8
                          -Kparallel_iteration=8
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Ncompdisp
                          -Nnocopyarg -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nline -Nlst -Nlst=i -Nlst=p -Nlst=t
                          -Nnomallocfree -Nnoobsfun -Nquickdbg=noargchk
                          -Nquickdbg=nosubchk -Nquickdbg=noundef -NRnotrap
                          -Nnorecursive -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 Module "mod_trcadv_thuburn"
  (inc)(line-no.)(nest)(optimize)
               1                       !-----------------------------------------------------------------------------
               2                       !
               3                       !++ Description:
               4                       !       This module is for limitting values of q at cell walls in advection
               5                       !       calculation.
               6                       !       (Reference: Thuburn, 1996)
               7                       !        These are imported from sub[src_update_tracer/mod_src] and
               8                       !        sub[OPRT_divergence2/mod_oprt].
               9                       !
              10                       !++ Current COrresponding Author: Y.Niwa
              11                       !
              12                       !++ History:
              13                       !      Version   Date      Comment
              14                       !      -----------------------------------------------------------------------
              15                       !      0.00      08-01-24  Imported from mod_src and mod_oprt
              16                       !                11-09-27  T.Seiki: merge optimization for K by M.Terai and RIST
              17                       !                11-11-28  Y.Yamada: Merge Terai-san timer code
              18                       !                                           into the original code.
              19                       !      -----------------------------------------------------------------------
              20                       !
              21                     module mod_trcadv_thuburn
              22                       !-----------------------------------------------------------------------------
              23                       !
              24                       !++ Used modules
              25                       !
              26                       use mod_adm, only: &
              27                          ADM_LOG_FID
              28                       !-----------------------------------------------------------------------------
              29                       implicit none
              30                       private
              31                       !-----------------------------------------------------------------------------
              32                       !
              33                       !++ Public procedure
              34                       !
              35                       public :: src_update_tracer
              36                       public :: advlim_thuburn_v
              37                       public :: OPRT_divergence2_prep
              38                       public :: OPRT_divergence2
              39                     
              40                       !-----------------------------------------------------------------------------
              41                       !
              42                       !++ Public parameters & variables
              43                       !
              44                       !-----------------------------------------------------------------------------
              45                       !
              46                       !++ Private procedures
              47                       !
              48                       !-----------------------------------------------------------------------------
              49                       !
              50                       !++ Private parameters & variables
              51                       !
              52                       ! < for OPRT_divergence2_prep >  ! Y.Niwa add 080130
              53                       real(8), private, allocatable, save :: local_t_var(:,:,:,:,:)
              54                       real(8), private, allocatable, save :: local_t_var_pl(:,:,:,:)
              55                     
              56                       !-----------------------------------------------------------------------------
              57                     contains
              58                       !----------------------------------------------------------------------------------
              59                       ! Y.Niwa add 080124
              60                       ! This routine is revised version of src_update_tracer
              61                       subroutine src_update_tracer( &
              62                            nqmax,                       & !--- IN    : number of tracers
              63                            rhogq,       rhogq_pl,       & !--- INOUT : rhogq   ( gam2 X G^{1/2} )
              64                            rhog_in,     rhog_in_pl,     & !--- IN    : rho(old)( gam2 X G^{1/2} )
              65                            rhog_mean,   rhog_mean_pl,   & !--- IN    : rho     ( gam2 X G^{1/2} )
              66                            rhogvx_mean, rhogvx_mean_pl, & !--- IN    : rho*Vx  ( gam2 X G^{1/2} )
              67                            rhogvy_mean, rhogvy_mean_pl, & !--- IN    : rho*Vy  ( gam2 X G^{1/2} )
              68                            rhogvz_mean, rhogvz_mean_pl, & !--- IN    : rho*Vz  ( gam2 X G^{1/2} )
              69                            rhogw_mean,  rhogw_mean_pl,  & !--- IN    : rho*w   ( gam2 X G^{1/2} )
              70                            frhog,       frhog_pl,       & !--- IN    : hyperviscosity tendency for rhog
              71                            dt,                          & !--- IN    : delta t
              72                            thubern_lim                  ) !--- IN    : switch of thubern limiter
              73                         use mod_adm, only :  &
              74                            ADM_gall,       &
              75                            ADM_gmin,       &
              76                            ADM_gmax,       &
              77                            ADM_kall,       &
              78                            ADM_lall,       &
              79                            ADM_gall_pl,    &
              80                            ADM_lall_pl,    &
              81                            ADM_kmin,       &
              82                            ADM_kmax,       &
              83                            ADM_prc_me,     &
              84                            ADM_prc_pl,     &
              85                            ADM_AI,ADM_AJ,  &
              86                            ADM_GSLF_PL,    &
              87                            ADM_GMIN_PL,    &
              88                            ADM_gmax_pl,    &
              89                            ADM_gall_1d
              90                         use mod_vmtr, only : &
              91                            VMTR_RGSGAM2,   &
              92                            VMTR_RGSGAM2_pl,&
              93                            VMTR_GZXH,      &
              94                            VMTR_GZXH_pl,   &
              95                            VMTR_GZYH,      &
              96                            VMTR_GZYH_pl,   &
              97                            VMTR_GZZH,      &
              98                            VMTR_GZZH_pl,   &
              99                            VMTR_GSGAMH,    &
             100                            VMTR_GSGAMH_pl, &
             101                            VMTR_RGSH,      &
             102                            VMTR_RGSH_pl,   &
             103                            VMTR_RGAM,      &
             104                            VMTR_RGAM_pl
             105                         use mod_grd, only: &
             106                            GRD_afac, &
             107                            GRD_bfac, &
             108                            GRD_XDIR, &
             109                            GRD_ZDIR, &
             110                            GRD_rdgz
             111                         implicit none
             112                     
             113                         integer, intent(in)    :: nqmax
             114                         real(8), intent(inout) :: rhogq         (ADM_gall,   ADM_kall,ADM_lall,   nqmax)
             115                         real(8), intent(inout) :: rhogq_pl      (ADM_gall_pl,ADM_kall,ADM_lall_pl,nqmax)
             116                         real(8), intent(in)    :: rhog_in       (ADM_gall,   ADM_kall,ADM_lall   )
             117                         real(8), intent(in)    :: rhog_in_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             118                         real(8), intent(in)    :: rhog_mean     (ADM_gall,   ADM_kall,ADM_lall   )
             119                         real(8), intent(in)    :: rhog_mean_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             120                         real(8), intent(in)    :: rhogvx_mean   (ADM_gall,   ADM_kall,ADM_lall   )
             121                         real(8), intent(in)    :: rhogvx_mean_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             122                         real(8), intent(in)    :: rhogvy_mean   (ADM_gall,   ADM_kall,ADM_lall   )
             123                         real(8), intent(in)    :: rhogvy_mean_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             124                         real(8), intent(in)    :: rhogvz_mean   (ADM_gall,   ADM_kall,ADM_lall   )
             125                         real(8), intent(in)    :: rhogvz_mean_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             126                         real(8), intent(in)    :: rhogw_mean    (ADM_gall,   ADM_kall,ADM_lall   )
             127                         real(8), intent(in)    :: rhogw_mean_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             128                         real(8), intent(in)    :: frhog         (ADM_gall,   ADM_kall,ADM_lall   )
             129                         real(8), intent(in)    :: frhog_pl      (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             130                     
             131                         real(8), intent(in)    :: dt
             132                     
             133                         logical, intent(in)    :: thubern_lim  ![add] 20130613 R.Yoshida
             134                     
             135                         real(8) :: rhog    (ADM_gall,   ADM_kall,ADM_lall   )
             136                         real(8) :: rhog_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             137                         real(8) :: rrhog   (ADM_gall,   ADM_kall,ADM_lall   )
             138                         real(8) :: rrhog_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             139                     
             140                         real(8) :: q       (ADM_gall,   ADM_kall,ADM_lall   )
             141                         real(8) :: q_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             142                         real(8) :: q_h     (ADM_gall,   ADM_kall,ADM_lall   )
             143                         real(8) :: q_h_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             144                     
             145                         real(8) :: d       (ADM_gall,   ADM_kall,ADM_lall   )
             146                         real(8) :: d_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             147                     
             148                         real(8) :: flx_v   (ADM_gall,   ADM_kall,ADM_lall   )
             149                         real(8) :: flx_v_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             150                         real(8) :: ck      (ADM_gall,   ADM_kall,ADM_lall,   2)
             151                         real(8) :: ck_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl,2)
             152                     
             153                         real(8) :: flx_h   (6,ADM_gall,   ADM_kall,ADM_lall   )
             154                         real(8) :: flx_h_pl(  ADM_gall_pl,ADM_kall,ADM_lall_pl)
             155                         real(8) :: c       (6,ADM_gall,   ADM_kall,ADM_lall   )
             156                         real(8) :: c_pl    (  ADM_gall_pl,ADM_kall,ADM_lall_pl)
             157                     
             158                         real(8) :: vx_r    (ADM_gall,   ADM_kall,ADM_lall   )
             159                         real(8) :: vx_r_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             160                         real(8) :: vy_r    (ADM_gall,   ADM_kall,ADM_lall   )
             161                         real(8) :: vy_r_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             162                         real(8) :: vz_r    (ADM_gall,   ADM_kall,ADM_lall   )
             163                         real(8) :: vz_r_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             164                     
             165                         real(8) :: hdiv    (ADM_gall,   ADM_kall,ADM_lall   )
             166                         real(8) :: hdiv_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             167                         real(8) :: cp      (ADM_gall,   ADM_kall,ADM_lall,   ADM_AI:ADM_AJ,GRD_XDIR:GRD_ZDIR)
             168                         real(8) :: cp_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl,GRD_XDIR:GRD_ZDIR)
             169                     
             170                         real(8), parameter :: b1 = 0.D0
             171                         real(8), parameter :: b2 = 1.D0
             172                         real(8), parameter :: b3 = 1.D0 - (b1+b2)
             173                     
             174                         integer :: nstart, nend
             175                         integer :: g, k, l, n, nq
             176                     
             177                         integer :: suf, i, j
             178                         suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
             179                         !---------------------------------------------------------------------------
             180                     
             181                         !---------------------------------------------------------------------------
             182                         ! Vertical Advection (fractioanl step) : 1st
             183                         !---------------------------------------------------------------------------
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             184     1  pp               do l = 1, ADM_lall
             185     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 552
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             186     2  pp   6v             do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<< Loop-information  End >>>
             187     3   p   6                 do g = 1, ADM_gall
             188     3   p   6v                   rrhog(g,k,l) = 1.D0 / rhog_in(g,k,l)
             189     3   p   6v                   d(g,k,l) = b1 * frhog(g,k,l) * dt * rrhog(g,k,l)
             190     3   p   6v                enddo
             191     2   p    v             enddo
             192     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 16
                                   <<<      GRD_afac: 8, GRD_bfac: 8
                                   <<< Loop-information  End >>>
             193     2  pp                  do k = ADM_kmin+1, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 54
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             194     3  pp   2v             do g = 1, ADM_gall
             195     3   p   2v                   flx_v(g,k,l) = ( ( ( GRD_afac(k) * VMTR_RGSGAM2(g,k  ,l) * rhogvx_mean(g,k  ,l) &
             196     3                                               + GRD_bfac(k) * VMTR_RGSGAM2(g,k-1,l) * rhogvx_mean(g,k-1,l) &
             197     3                                               ) * 0.5D0 * VMTR_GSGAMH(g,k,l) * VMTR_GZXH(g,k,l)            &
             198     3                                             + ( GRD_afac(k) * VMTR_RGSGAM2(g,k  ,l) * rhogvy_mean(g,k  ,l) &
             199     3                                               + GRD_bfac(k) * VMTR_RGSGAM2(g,k-1,l) * rhogvy_mean(g,k-1,l) &
             200     3                                               ) * 0.5D0 * VMTR_GSGAMH(g,k,l) * VMTR_GZYH(g,k,l)            &
             201     3                                             + ( GRD_afac(k) * VMTR_RGSGAM2(g,k  ,l) * rhogvz_mean(g,k  ,l) &
             202     3                                               + GRD_bfac(k) * VMTR_RGSGAM2(g,k-1,l) * rhogvz_mean(g,k-1,l) &
             203     3                                               ) * 0.5D0 * VMTR_GSGAMH(g,k,l) * VMTR_GZZH(g,k,l)            &
             204     3                                             ) + rhogw_mean(g,k,l) * VMTR_RGSH(g,k,l) &
             205     3                                           ) * (0.5D0*dt)
             206     3   p   2v             enddo
             207     2   p                  enddo
             208     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1143
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             209     2  pp   8v             do g = 1, ADM_gall
             210     2   p   8v                flx_v(g,ADM_kmin,  l) = 0.D0
             211     2   p   8v                flx_v(g,ADM_kmax+1,l) = 0.D0
             212     2   p   8v             enddo
             213     1               
             214     1                      !---- Courant numbers at cell boundary
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 8
                                   <<<      GRD_rdgz: 8
                                   <<< Loop-information  End >>>
             215     2  pp                  do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 286
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             216     3  pp   6v                do g = 1, ADM_gall
             217     3   p   6v                   ck(g,k,l,1) = -flx_v(g,k  ,l) * rrhog(g,k,l) * GRD_rdgz(k)
             218     3   p   6v                   ck(g,k,l,2) =  flx_v(g,k+1,l) * rrhog(g,k,l) * GRD_rdgz(k)
             219     3   p   6v                enddo
             220     2   p                  enddo
             221     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 800
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             222     2  pp   8v             do g = 1, ADM_gall
             223     2   p   8v                ck(g,ADM_kmin-1,l,1) = 0.D0
             224     2   p   8v                ck(g,ADM_kmin-1,l,2) = 0.D0
             225     2   p   8v                ck(g,ADM_kmax+1,l,1) = 0.D0
             226     2   p   8v                ck(g,ADM_kmax+1,l,2) = 0.D0
             227     2   p   8v             enddo
             228     1               
             229     1   p               enddo ! l LOOP
             230                     
             231     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             232     2  pp                  do l = 1, ADM_lall_pl
             233     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 552
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             234     3  pp   6v                do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<< Loop-information  End >>>
             235     4   p   6                    do g = 1, ADM_gall_pl
             236     4   p   6v                      rrhog_pl(g,k,l) = 1.D0 / rhog_in_pl(g,k,l)
             237     4   p   6v                      d_pl(g,k,l) = b1 * frhog_pl(g,k,l) * dt * rrhog_pl(g,k,l)
             238     4   p   6v                   enddo
             239     3   p    v                enddo
             240     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 16
                                   <<<      GRD_afac: 8, GRD_bfac: 8
                                   <<< Loop-information  End >>>
             241     3  pp                     do k = ADM_kmin+1, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 54
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             242     4  pp   2v                do g = 1, ADM_gall_pl
             243     4   p   2v                      flx_v_pl(g,k,l) = ( ( ( GRD_afac(k) * VMTR_RGSGAM2_pl(g,k  ,l) * rhogvx_mean_pl(g,k  ,l) &
             244     4                                                     + GRD_bfac(k) * VMTR_RGSGAM2_pl(g,k-1,l) * rhogvx_mean_pl(g,k-1,l) &
             245     4                                                     ) * 0.5D0 * VMTR_GSGAMH_pl(g,k,l) * VMTR_GZXH_pl(g,k,l)            &
             246     4                                                   + ( GRD_afac(k) * VMTR_RGSGAM2_pl(g,k  ,l) * rhogvy_mean_pl(g,k  ,l) &
             247     4                                                     + GRD_bfac(k) * VMTR_RGSGAM2_pl(g,k-1,l) * rhogvy_mean_pl(g,k-1,l) &
             248     4                                                     ) * 0.5D0 * VMTR_GSGAMH_pl(g,k,l) * VMTR_GZYH_pl(g,k,l)            &
             249     4                                                   + ( GRD_afac(k) * VMTR_RGSGAM2_pl(g,k  ,l) * rhogvz_mean_pl(g,k  ,l) &
             250     4                                                     + GRD_bfac(k) * VMTR_RGSGAM2_pl(g,k-1,l) * rhogvz_mean_pl(g,k-1,l) &
             251     4                                                     ) * 0.5D0 * VMTR_GSGAMH_pl(g,k,l) * VMTR_GZZH_pl(g,k,l)            &
             252     4                                                   ) + rhogw_mean_pl(g,k,l) * VMTR_RGSH_pl(g,k,l)                       &
             253     4                                                 ) * (0.5d0*dt)
             254     4   p   2v                enddo
             255     3   p                     enddo
             256     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1143
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             257     3  pp   8v                do g = 1, ADM_gall_pl
             258     3   p   8v                   flx_v_pl(g,ADM_kmin,  l) = 0.D0
             259     3   p   8v                   flx_v_pl(g,ADM_kmax+1,l) = 0.D0
             260     3   p   8v                enddo
             261     2               
             262     2                         !---- Courant numbers at cell boundary
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 8
                                   <<<      GRD_rdgz: 8
                                   <<< Loop-information  End >>>
             263     3  pp                     do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 286
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             264     4  pp   6v                   do g = 1, ADM_gall_pl
             265     4   p   6v                      ck_pl(g,k,l,1) = -flx_v_pl(g,k  ,l) * rrhog_pl(g,k,l) * GRD_rdgz(k)
             266     4   p   6v                      ck_pl(g,k,l,2) =  flx_v_pl(g,k+1,l) * rrhog_pl(g,k,l) * GRD_rdgz(k)
             267     4   p   6v                   enddo
             268     3   p                     enddo
             269     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 800
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             270     3  pp   8v                do g = 1, ADM_gall_pl
             271     3   p   8v                   ck_pl(g,ADM_kmin-1,l,1) = 0.D0
             272     3   p   8v                   ck_pl(g,ADM_kmin-1,l,2) = 0.D0
             273     3   p   8v                   ck_pl(g,ADM_kmax+1,l,1) = 0.D0
             274     3   p   8v                   ck_pl(g,ADM_kmax+1,l,2) = 0.D0
             275     3   p   8v                enddo
             276     2               
             277     2   p                  enddo
             278     1                   endif
             279                     
             280                         !--- basic scheme ( 2nd-order centered difference )
             281     1                   do nq = 1, nqmax
             282     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             283     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             284     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 400
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             285     4  pp   8v                   do g = 1, ADM_gall
             286     4   p   8v                      q(g,k,l) = rhogq(g,k,l,nq) * rrhog(g,k,l)
             287     4   p   8v                   enddo
             288     3   p                     enddo
             289     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 16
                                   <<<      GRD_afac: 8, GRD_bfac: 8
                                   <<< Loop-information  End >>>
             290     3  pp                     do k = ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 272
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             291     4  pp   8v                   do g = 1, ADM_gall
             292     4   p   8v                      q_h(g,k,l) = 0.5D0 * ( GRD_afac(k) * q(g,k,  l) &
             293     4                                                    + GRD_bfac(k) * q(g,k-1,l) )
             294     4   p   8v                   enddo
             295     3   p                     enddo
             296     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1600
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             297     3  pp    v                do g = 1, ADM_gall
             298     3   p    v                   q_h(g,ADM_kmin-1,l) = 0.D0
             299     3   p    v                enddo
             300     2   p                  enddo
             301     1               
             302     1               
             303     2                      if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             304     3  pp                     do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             305     4  pp                        do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 400
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             306     5  pp   8v                      do g = 1, ADM_gall_pl
             307     5   p   8v                         q_pl(g,k,l) = rhogq_pl(g,k,l,nq) * rrhog_pl(g,k,l)
             308     5   p   8v                      enddo
             309     4   p                        enddo
             310     3               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 16
                                   <<<      GRD_afac: 8, GRD_bfac: 8
                                   <<< Loop-information  End >>>
             311     4  pp                        do k = ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 272
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             312     5  pp   8v                      do g = 1, ADM_gall_pl
             313     5   p   8v                         q_h_pl(g,k,l) = 0.5D0 * ( GRD_afac(k) * q_pl(g,k,  l) &
             314     5                                                          + GRD_bfac(k) * q_pl(g,k-1,l) )
             315     5   p   8v                      enddo
             316     4   p                        enddo
             317     3               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1600
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             318     4  pp    v                   do g = 1, ADM_gall_pl
             319     4   p    v                      q_h_pl(g,ADM_kmin-1,l) = 0.D0
             320     4   p    v                   enddo
             321     3   p                     enddo
             322     2                      endif
             323     1               
             324     1                      ! [mod] 20130613 R.Yoshida
             325     1                      if (thubern_lim) call advlim_thuburn_v( q_h, q_h_pl, & !--- [INOUT]
             326     1                                             q,   q_pl,   & !--- [IN]
             327     1                                             ck,  ck_pl,  & !--- [IN]
             328     1                                             d,   d_pl    ) !--- [IN]
             329     1               
             330     1                      !--- update rhogq
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             331     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1143
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             332     3  pp   8v                do g = 1, ADM_gall
             333     3   p   8v                   q_h(g,ADM_kmin  ,l) = 0.D0
             334     3   p   8v                   q_h(g,ADM_kmax+1,l) = 0.D0
             335     3   p   8v                enddo
             336     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 8
                                   <<<      GRD_rdgz: 8
                                   <<< Loop-information  End >>>
             337     3  pp                     do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 243
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             338     4  pp   6v                   do g = 1, ADM_gall
             339     4   p   6v                      rhogq(g,k,l,nq) = rhogq(g,k,l,nq) &
             340     4                                               - ( flx_v(g,k+1,l) * q_h(g,k+1,l) &
             341     4                                                 - flx_v(g,k,  l) * q_h(g,k,  l) ) * GRD_rdgz(k)
             342     4   p   6v                   enddo
             343     3   p                     enddo
             344     2   p                  enddo
             345     1               
             346     2                      if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             347     3  pp                     do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1143
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             348     4  pp   8v                   do g = 1, ADM_gall_pl
             349     4   p   8v                      q_h_pl(g,ADM_kmin  ,l) = 0.D0
             350     4   p   8v                      q_h_pl(g,ADM_kmax+1,l) = 0.D0
             351     4   p   8v                   enddo
             352     3               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 8
                                   <<<      GRD_rdgz: 8
                                   <<< Loop-information  End >>>
             353     4  pp                        do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 243
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             354     5  pp   6v                      do g = 1, ADM_gall_pl
             355     5   p   6v                         rhogq_pl(g,k,l,nq) = rhogq_pl(g,k,l,nq) &
             356     5                                                     - ( flx_v_pl(g,k+1,l) * q_h_pl(g,k+1,l) &
             357     5                                                       - flx_v_pl(g,k,  l) * q_h_pl(g,k,  l) ) * GRD_rdgz(k)
             358     5   p   6v                      enddo
             359     4   p                        enddo
             360     3   p                     enddo
             361     2                      endif
             362     1               
             363     1                   enddo ! tracer q LOOP
             364                     
             365                         !--- update rhog
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             366     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 8
                                   <<<      GRD_rdgz: 8
                                   <<< Loop-information  End >>>
             367     2  pp                  do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 327
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             368     3  pp   8v                do g = 1, ADM_gall
             369     3   p   8v                   rhog(g,k,l) = rhog_in(g,k,l)                                  &
             370     3                                        - ( flx_v(g,k+1,l) - flx_v(g,k,l) ) * GRD_rdgz(k) &
             371     3                                        + b1 * frhog(g,k,l) * dt
             372     3   p   8v                enddo
             373     2   p                  enddo
             374     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 640
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             375     2  pp   6s             do k = ADM_kmin, ADM_kmax
             376     2   p   6s                rhog(suf(ADM_gall_1d,1),k,l) = rhog(suf(ADM_gmax+1,ADM_gmin),k,l)
             377     2   p   6s                rhog(suf(1,ADM_gall_1d),k,l) = rhog(suf(ADM_gmin,ADM_gmax+1),k,l)
             378     2   p   6s             enddo
             379     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 800
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             380     2  pp   8v             do g = 1, ADM_gall
             381     2   p   8v                rhog(g,ADM_kmin-1,l) = rhog_in(g,ADM_kmin,l)
             382     2   p   8v                rhog(g,ADM_kmax+1,l) = rhog_in(g,ADM_kmax,l)
             383     2   p   8v             enddo
             384     1   p               enddo
             385                     
             386     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             387     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 8
                                   <<<      GRD_rdgz: 8
                                   <<< Loop-information  End >>>
             388     3  pp                     do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 327
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             389     4  pp   8v                   do g = 1, ADM_gall_pl
             390     4   p   8v                      rhog_pl(g,k,l) = rhog_in_pl(g,k,l)                                     &
             391     4                                              - ( flx_v_pl(g,k+1,l) - flx_v_pl(g,k,l) ) * GRD_rdgz(k) &
             392     4                                              + b1 * frhog_pl(g,k,l) * dt
             393     4   p   8v                   enddo
             394     3   p                     enddo
             395     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 800
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             396     3  pp   8v                do g = 1, ADM_gall_pl
             397     3   p   8v                   rhog_pl(g,ADM_kmin-1,l) = rhog_in_pl(g,ADM_kmin,l)
             398     3   p   8v                   rhog_pl(g,ADM_kmax+1,l) = rhog_in_pl(g,ADM_kmax,l)
             399     3   p   8v                enddo
             400     2   p                  enddo
             401     1                   endif
             402                     
             403                     
             404                         !---------------------------------------------------------------------------
             405                         ! Horizontal advection by MIURA 2004 scheme
             406                         !---------------------------------------------------------------------------
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             407     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             408     2  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 208
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             409     3  pp   6v                do g = 1, ADM_gall
             410     3   p   6v                   vx_r(g,k,l) = rhogvx_mean(g,k,l) * VMTR_RGAM(g,k,l)
             411     3   p   6v                   vy_r(g,k,l) = rhogvy_mean(g,k,l) * VMTR_RGAM(g,k,l)
             412     3   p   6v                   vz_r(g,k,l) = rhogvz_mean(g,k,l) * VMTR_RGAM(g,k,l)
             413     3   p   6v                enddo
             414     2   p                  enddo
             415     1   p               enddo
             416                     
             417     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             418     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             419     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 208
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             420     4  pp   6v                   do g = 1, ADM_gall_pl
             421     4   p   6v                      vx_r_pl(g,k,l) = rhogvx_mean_pl(g,k,l) * VMTR_RGAM_pl(g,k,l)
             422     4   p   6v                      vy_r_pl(g,k,l) = rhogvy_mean_pl(g,k,l) * VMTR_RGAM_pl(g,k,l)
             423     4   p   6v                      vz_r_pl(g,k,l) = rhogvz_mean_pl(g,k,l) * VMTR_RGAM_pl(g,k,l)
             424     4   p   6v                   enddo
             425     3   p                     enddo
             426     2   p                  enddo
             427     1                   endif
             428                     
             429                         call oprt_divergence2_prep( flx_h,     flx_h_pl,     & !--- [OUT]
             430                                                     cp,        cp_pl,        & !--- [OUT]
             431                                                     vx_r,      vx_r_pl,      & !--- [IN]
             432                                                     vy_r,      vy_r_pl,      & !--- [IN]
             433                                                     vz_r,      vz_r_pl,      & !--- [IN]
             434                                                     rhog_mean, rhog_mean_pl, & !--- [IN]
             435                                                     dt                       ) !--- [IN]
             436                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             437     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             438     2  pp               do k = 1, ADM_kall
             439     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 157
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             440     3  pp    v                do g = 1, ADM_gall
             441     3   p    v                   rrhog(g,k,l) = 1.D0 / rhog(g,k,l)
             442     3   p    v                   d(g,k,l) = b2 * frhog(g,k,l) * dt * rrhog(g,k,l)
             443     3                            !--- Courant number
             444     3   p    v                   c(1,g,k,l) = flx_h(1,g,k,l) * rrhog(g,k,l)
             445     3   p    v                   c(2,g,k,l) = flx_h(2,g,k,l) * rrhog(g,k,l)
             446     3   p    v                   c(3,g,k,l) = flx_h(3,g,k,l) * rrhog(g,k,l)
             447     3   p    v                   c(4,g,k,l) = flx_h(4,g,k,l) * rrhog(g,k,l)
             448     3   p    v                   c(5,g,k,l) = flx_h(5,g,k,l) * rrhog(g,k,l)
             449     3   p    v                   c(6,g,k,l) = flx_h(6,g,k,l) * rrhog(g,k,l)
             450     3   p    v          enddo
             451     2   p               enddo
             452     1   p               enddo
             453                     
             454     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             455     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             456     3  pp                     do k = 1, ADM_kall
             457     3               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             458     4   p   6v                   do g = 1, ADM_gall_pl
             459     4   p   6v                      rrhog_pl(g,k,l) = 1.D0 / rhog_pl(g,k,l)
             460     4   p   6v                   enddo
             461     3               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1143
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             462     4  pp   8v                   do n = ADM_GMIN_PL, ADM_gmax_pl
             463     4   p   8v                      c_pl(n,k,l) = flx_h_pl(n,k,l) * rrhog_pl(ADM_GSLF_PL,k,l)
             464     4   p   8v                   enddo
             465     3               
             466     3   p                        d_pl(ADM_GSLF_PL,k,l) = b2 * frhog_pl(ADM_GSLF_PL,k,l) * dt * rrhog_pl(ADM_GSLF_PL,k,l)
             467     3   p                     enddo
             468     2   p                  enddo
             469     1                   endif
             470                     
             471     1                   do nq = 1, nqmax
             472     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             473     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             474     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 400
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             475     4  pp   8v                   do g = 1, ADM_gall
             476     4   p   8v                      q(g,k,l) = rhogq(g,k,l,nq) * rrhog(g,k,l)
             477     4   p   8v                   enddo
             478     3   p                     enddo
             479     2   p                  enddo
             480     1               
             481     2                      if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             482     3  pp                     do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             483     4  pp                        do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 400
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             484     5  pp   8v                      do g = 1, ADM_gall_pl
             485     5   p   8v                         q_pl(g,k,l) = rhogq_pl(g,k,l,nq) * rrhog_pl(g,k,l)
             486     5   p   8v                      enddo
             487     4   p                        enddo
             488     3   p                     enddo
             489     2                      endif
             490     1               
             491     1               
             492     1                      call oprt_divergence2( hdiv,  hdiv_pl,  & !--- [OUT]
             493     1                                                 q,     q_pl,     & !--- [IN]
             494     1                                                 flx_h, flx_h_pl, & !--- [IN]
             495     1                                                 c,     c_pl,     & !--- [IN]
             496     1                                                 cp,    cp_pl,    & !--- [IN]
             497     1                                                 d,     d_pl,     & !--- [IN]
             498     1                                                 dt               ) !--- [IN]
             499     1               
             500     1                      !--- update rhogq
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             501     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             502     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 373
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             503     4  pp   8v                   do g = 1, ADM_gall
             504     4   p   8v                      rhogq(g,k,l,nq) = rhogq(g,k,l,nq) - hdiv(g,k,l) * dt
             505     4   p   8v                   enddo
             506     3   p                     enddo
             507     2   p                  enddo
             508     1               
             509     2                      if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             510     3  pp                     do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             511     4  pp                        do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 373
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             512     5  pp   8v                      do g = 1, ADM_gall_pl
             513     5   p   8v                         rhogq_pl(g,k,l,nq) = rhogq_pl(g,k,l,nq) - hdiv_pl(g,k,l) * dt
             514     5   p   8v                      enddo
             515     4   p                        enddo
             516     3   p                     enddo
             517     2                      endif
             518     1               
             519     1                   enddo ! tracer q LOOP
             520                     
             521                         !--- update rhog
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             522     1  pp               do l = 1, ADM_lall
             523     1   p                  nstart = suf(ADM_gmin,ADM_gmin)
             524     1   p                  nend   = suf(ADM_gmax,ADM_gmax)
             525     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             526     2  pp               do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 243
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             527     3  pp   2v                do n = nstart, nend
             528     3   p   2v                   rhog(n,k,l)= rhog(n,k,l) - ( flx_h(1,n,k,l) &
             529     3                                                       + flx_h(2,n,k,l) &
             530     3                                                       + flx_h(3,n,k,l) &
             531     3                                                       + flx_h(4,n,k,l) &
             532     3                                                       + flx_h(5,n,k,l) &
             533     3                                                       + flx_h(6,n,k,l) &
             534     3                                                       ) + b2 * frhog(n,k,l) * dt
             535     3   p   2v                enddo
             536     2   p                  enddo
             537     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 640
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             538     2  pp   6s             do k = 1, ADM_kall
             539     2   p   6s             rhog(suf(ADM_gall_1d,1),k,l) = rhog(suf(ADM_gmax+1,ADM_gmin),k,l)
             540     2   p   6s             rhog(suf(1,ADM_gall_1d),k,l) = rhog(suf(ADM_gmin,ADM_gmax+1),k,l)
             541     2   p   6s          enddo
             542     1   p               enddo
             543                     
             544     1                   if ( ADM_prc_me == ADM_prc_pl ) then
             545     1                      n = ADM_GSLF_PL
             546     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             547     2  pp                  do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 314
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             548     3  pp   2v             do k = 1, ADM_kall
             549     3   p   2v                   rhog_pl(n,k,l)= rhog_pl(n,k,l) - ( flx_h_pl(ADM_GMIN_PL  ,k,l) &
             550     3                                                             + flx_h_pl(ADM_GMIN_PL+1,k,l) &
             551     3                                                             + flx_h_pl(ADM_GMIN_PL+2,k,l) &
             552     3                                                             + flx_h_pl(ADM_GMIN_PL+3,k,l) &
             553     3                                                             + flx_h_pl(ADM_GMIN_PL+4,k,l) &
             554     3                                                             ) + b2 * frhog_pl(n,k,l) * dt
             555     3   p   2v             enddo
             556     2   p                  enddo
             557     1                   endif
             558                     
             559                         !---------------------------------------------------------------------------
             560                         ! Vertical Advection (fractioanl step) : 2nd
             561                         !---------------------------------------------------------------------------
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             562     1  pp               do l = 1, ADM_lall
             563     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 3
                                   <<< Loop-information  End >>>
             564     2  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 411
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             565     3  pp   6v                do g = 1, ADM_gall
             566     3   p   6v                   rrhog(g,k,l) = 1.D0 / rhog(g,k,l)
             567     3   p   6v                enddo
             568     2   p                  enddo
             569     1               
             570     1                      !---- Courant numbers at cell boundary
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 8
                                   <<<      GRD_rdgz: 8
                                   <<< Loop-information  End >>>
             571     2  pp                  do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 286
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             572     3  pp   6v                do g = 1, ADM_gall
             573     3   p   6v                   ck(g,k,l,1) = -flx_v(g,k  ,l) * rrhog(g,k,l) * GRD_rdgz(k)
             574     3   p   6v                   ck(g,k,l,2) =  flx_v(g,k+1,l) * rrhog(g,k,l) * GRD_rdgz(k)
             575     3   p   6v                enddo
             576     2   p                  enddo
             577     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 800
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             578     2  pp   8v             do g = 1, ADM_gall
             579     2   p   8v                ck(g,ADM_kmin-1,l,1) = 0.D0
             580     2   p   8v                ck(g,ADM_kmin-1,l,2) = 0.D0
             581     2   p   8v                ck(g,ADM_kmax+1,l,1) = 0.D0
             582     2   p   8v                ck(g,ADM_kmax+1,l,2) = 0.D0
             583     2   p   8v             enddo
             584     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<< Loop-information  End >>>
             585     2  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 696
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             586     3  pp    v                do g = 1, ADM_gall
             587     3   p    v                   d(g,k,l) = b3 * frhog(g,k,l) * dt * rrhog(g,k,l)
             588     3   p    v                enddo
             589     2   p                  enddo
             590     1               
             591     1   p               enddo ! l LOOP
             592                     
             593     1                   if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             594     2  pp                  do l = 1, ADM_lall_pl
             595     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 3
                                   <<< Loop-information  End >>>
             596     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 411
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             597     4  pp   6v                   do g = 1, ADM_gall_pl
             598     4   p   6v                      rrhog_pl(g,k,l) = 1.D0 / rhog_pl(g,k,l)
             599     4   p   6v                   enddo
             600     3   p                     enddo
             601     2               
             602     2                         !---- Courant numbers at cell boundary
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 8
                                   <<<      GRD_rdgz: 8
                                   <<< Loop-information  End >>>
             603     3  pp                     do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 286
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             604     4  pp   6v                   do g = 1, ADM_gall_pl
             605     4   p   6v                      ck_pl(g,k,l,1) = -flx_v_pl(g,k  ,l) * rrhog_pl(g,k,l) * GRD_rdgz(k)
             606     4   p   6v                      ck_pl(g,k,l,2) =  flx_v_pl(g,k+1,l) * rrhog_pl(g,k,l) * GRD_rdgz(k)
             607     4   p   6v                   enddo
             608     3   p                     enddo
             609     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 800
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             610     3  pp   8v                do g = 1, ADM_gall_pl
             611     3   p   8v                   ck_pl(g,ADM_kmin-1,l,1) = 0.D0
             612     3   p   8v                   ck_pl(g,ADM_kmin-1,l,2) = 0.D0
             613     3   p   8v                   ck_pl(g,ADM_kmax+1,l,1) = 0.D0
             614     3   p   8v                   ck_pl(g,ADM_kmax+1,l,2) = 0.D0
             615     3   p   8v                enddo
             616     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<< Loop-information  End >>>
             617     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 696
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             618     4  pp    v                   do g = 1, ADM_gall_pl
             619     4   p    v                      d_pl(g,k,l) = b3 * frhog_pl(g,k,l) * dt * rrhog_pl(g,k,l)
             620     4   p    v                   enddo
             621     3   p                     enddo
             622     2               
             623     2   p                  enddo
             624     1                   endif
             625                     
             626                         !--- basic scheme ( 2nd-order centered difference )
             627     1                   do nq = 1, nqmax
             628     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             629     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             630     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 400
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             631     4  pp   8v                   do g = 1, ADM_gall
             632     4   p   8v                      q(g,k,l) = rhogq(g,k,l,nq) * rrhog(g,k,l)
             633     4   p   8v                   enddo
             634     3   p                     enddo
             635     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 16
                                   <<<      GRD_afac: 8, GRD_bfac: 8
                                   <<< Loop-information  End >>>
             636     3  pp                     do k = ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 272
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             637     4  pp   8v                   do g = 1, ADM_gall
             638     4   p   8v                      q_h(g,k,l) = 0.5D0 * ( GRD_afac(k) * q(g,k,  l) &
             639     4                                                    + GRD_bfac(k) * q(g,k-1,l) )
             640     4   p   8v                   enddo
             641     3   p                     enddo
             642     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1600
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             643     3  pp    v                do g = 1, ADM_gall
             644     3   p    v                   q_h(g,ADM_kmin-1,l) = 0.D0
             645     3   p    v                enddo
             646     2   p                  enddo
             647     1               
             648     1               
             649     2                      if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             650     3  pp                     do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             651     4  pp                        do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 400
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             652     5  pp   8v                      do g = 1, ADM_gall_pl
             653     5   p   8v                         q_pl(g,k,l) = rhogq_pl(g,k,l,nq) * rrhog_pl(g,k,l)
             654     5   p   8v                      enddo
             655     4   p                        enddo
             656     3               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 16
                                   <<<      GRD_afac: 8, GRD_bfac: 8
                                   <<< Loop-information  End >>>
             657     4  pp                        do k = ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 272
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             658     5  pp   8v                      do g = 1, ADM_gall_pl
             659     5   p   8v                         q_h_pl(g,k,l) = 0.5D0 * ( GRD_afac(k) * q_pl(g,k,  l) &
             660     5                                                          + GRD_bfac(k) * q_pl(g,k-1,l) )
             661     5   p   8v                      enddo
             662     4   p                        enddo
             663     3               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1600
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             664     4  pp    v                   do g = 1, ADM_gall_pl
             665     4   p    v                      q_h_pl(g,ADM_kmin-1,l) = 0.D0
             666     4   p    v                   enddo
             667     3   p                     enddo
             668     2                      endif
             669     1               
             670     1                      ! [mod] 20130613 R.Yoshida
             671     1                      if (thubern_lim) call advlim_thuburn_v( q_h, q_h_pl, & !--- [INOUT]
             672     1                                             q,   q_pl,   & !--- [IN]
             673     1                                             ck,  ck_pl,  & !--- [IN]
             674     1                                             d,   d_pl    ) !--- [IN]
             675     1               
             676     1                      !--- update rhogq
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             677     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1143
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             678     3  pp   8v                do g = 1, ADM_gall
             679     3   p   8v                   q_h(g,ADM_kmin  ,l) = 0.D0
             680     3   p   8v                   q_h(g,ADM_kmax+1,l) = 0.D0
             681     3   p   8v                enddo
             682     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 8
                                   <<<      GRD_rdgz: 8
                                   <<< Loop-information  End >>>
             683     3  pp                     do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 243
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             684     4  pp   6v                   do g = 1, ADM_gall
             685     4   p   6v                      rhogq(g,k,l,nq) = rhogq(g,k,l,nq) &
             686     4                                               - ( flx_v(g,k+1,l) * q_h(g,k+1,l) &
             687     4                                                 - flx_v(g,k,  l) * q_h(g,k,  l) ) * GRD_rdgz(k)
             688     4   p   6v                   enddo
             689     3   p                     enddo
             690     2   p                  enddo
             691     1               
             692     2                      if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             693     3  pp                     do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1143
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             694     4  pp   8v                   do g = 1, ADM_gall_pl
             695     4   p   8v                      q_h_pl(g,ADM_kmin  ,l) = 0.D0
             696     4   p   8v                      q_h_pl(g,ADM_kmax+1,l) = 0.D0
             697     4   p   8v                   enddo
             698     3               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 8
                                   <<<      GRD_rdgz: 8
                                   <<< Loop-information  End >>>
             699     4  pp                        do k = ADM_kmin, ADM_kmax
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 243
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             700     5  pp   6v                      do g = 1, ADM_gall_pl
             701     5   p   6v                         rhogq_pl(g,k,l,nq) = rhogq_pl(g,k,l,nq) &
             702     5                                                     - ( flx_v_pl(g,k+1,l) * q_h_pl(g,k+1,l) &
             703     5                                                       - flx_v_pl(g,k,  l) * q_h_pl(g,k,  l) ) * GRD_rdgz(k)
             704     5   p   6v                      enddo
             705     4   p                        enddo
             706     3   p                     enddo
             707     2                      endif
             708     1               
             709     1                   enddo ! tracer q LOOP
             710                     
             711                         return
             712                       end subroutine src_update_tracer
             713                     
             714                       !-----------------------------------------------------------------------------
             715                       subroutine advlim_thuburn_v( &
             716                            q_h, q_h_pl, &
             717                            q,   q_pl,   &
             718                            ck,  ck_pl,  &
             719                            d,   d_pl    )
             720                         use mod_adm, only: &
             721                            ADM_prc_me,  &
             722                            ADM_prc_pl,  &
             723                            ADM_gall,    &
             724                            ADM_gall_pl, &
             725                            ADM_lall,    &
             726                            ADM_lall_pl, &
             727                            ADM_kall,    &
             728                            ADM_kmin,    &
             729                            ADM_kmax
             730                         use mod_cnst, only: &
             731                            CNST_MAX_REAL, &
             732                            CNST_EPS_ZERO
             733                         implicit none
             734                     
             735                         real(8), intent(inout) :: q_h   (ADM_gall,   ADM_kall,ADM_lall   )
             736                         real(8), intent(inout) :: q_h_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
             737                         real(8), intent(in)    :: q     (ADM_gall,   ADM_kall,ADM_lall   )
             738                         real(8), intent(in)    :: q_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             739                         real(8), intent(in)    :: ck    (ADM_gall,   ADM_kall,ADM_lall   ,2)
             740                         real(8), intent(in)    :: ck_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl,2)
             741                         real(8), intent(in)    :: d     (ADM_gall,   ADM_kall,ADM_lall   )
             742                         real(8), intent(in)    :: d_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
             743                     
             744                         real(8) :: qin_min    (ADM_gall,   ADM_kall,2)
             745                         real(8) :: qin_min_pl (ADM_gall_pl,ADM_kall,2)
             746                         real(8) :: qin_max    (ADM_gall,   ADM_kall,2)
             747                         real(8) :: qin_max_pl (ADM_gall_pl,ADM_kall,2)
             748                     
             749                         real(8) :: qout_min   (ADM_gall,   ADM_kall)
             750                         real(8) :: qout_min_pl(ADM_gall_pl,ADM_kall)
             751                         real(8) :: qout_max   (ADM_gall,   ADM_kall)
             752                         real(8) :: qout_max_pl(ADM_gall_pl,ADM_kall)
             753                     
             754                         real(8) :: q_mp1_min
             755                         real(8) :: q_mp1_min_pl
             756                         real(8) :: q_mp1_max
             757                         real(8) :: q_mp1_max_pl
             758                     
             759                         real(8) :: c_in
             760                         real(8) :: c_in_pl
             761                         real(8) :: c_out
             762                         real(8) :: c_out_pl
             763                     
             764                         real(8) :: c_qin_min
             765                         real(8) :: c_qin_min_pl
             766                         real(8) :: c_qin_max
             767                         real(8) :: c_qin_max_pl
             768                     
             769                         real(8) :: mask, mask1, mask2
             770                         real(8) :: tmp
             771                     
             772                         integer :: n, k, l
             773                         !---------------------------------------------------------------------------
             774                     
             775                         !--- inflow & outflow limiter
             776     1                   do l = 1, ADM_lall
             777     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 3
                                   <<< Loop-information  End >>>
             778     2  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 762
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             779     3  pp   8v                do n = 1, ADM_gall
             780     3   p   8v                   qin_min(n,k,1) = CNST_MAX_REAL
             781     3   p   8v                   qin_max(n,k,1) =-CNST_MAX_REAL
             782     3   p   8v                enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1231
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             783     3  pp   8v                do n = 1, ADM_gall
             784     3   p   8v                   qin_min(n,k,2) = CNST_MAX_REAL
             785     3   p   8v                   qin_max(n,k,2) =-CNST_MAX_REAL
             786     3   p   8v                enddo
             787     2   p                  enddo
             788     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             789     2  pp                  do k = ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 165
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 144
                                   <<<      q: 48, qin_min: 48, qin_max: 48
                                   <<< Loop-information  End >>>
             790     3  pp   4s                do n = 1,ADM_gall
             791     4   p   4s                   if ( ck(n,k,l,1) > 0.D0 ) then
             792     4   p   4s                      qin_min(n,k-1,2) = min( q(n,k,l), q(n,k-1,l) )
             793     4   p   4s                      qin_max(n,k-1,2) = max( q(n,k,l), q(n,k-1,l) )
             794     4   p   4s                   else
             795     4   p   4s                      qin_min(n,k,  1) = min( q(n,k,l), q(n,k-1,l) )
             796     4   p   4s                      qin_max(n,k,  1) = max( q(n,k,l), q(n,k-1,l) )
             797     4   p   4s                   endif
             798     3   p   4s                enddo
             799     2   p                  enddo
             800     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 112
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<<    PREFETCH       : 12
                                   <<<      q: 8, d: 4
                                   <<< Loop-information  End >>>
             801     2  pp   2s             do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<< Loop-information  End >>>
             802     3   p   2                 do n = 1, ADM_gall
             803     3               
             804     3   p   2v                   q_mp1_min = min( qin_min(n,k,1), qin_min(n,k,2) )
             805     3   p   2s                   if( q_mp1_min ==  CNST_MAX_REAL ) q_mp1_min = q(n,k,l)
             806     3   p   2v                   q_mp1_min = max( 0.D0, q_mp1_min )
             807     3               
             808     3   p   2v                   q_mp1_max = max( qin_max(n,k,1), qin_max(n,k,2) )
             809     3   p   2s                   if( q_mp1_max == -CNST_MAX_REAL ) q_mp1_max = q(n,k,l)
             810     3               
             811     3   p   2v                   mask1 = 0.5D0 - sign( 0.5D0, ck(n,k,l,1) )
             812     3   p   2v                   mask2 = 0.5D0 - sign( 0.5D0, ck(n,k,l,2) )
             813     3               
             814     3   p   2v                   c_in  = (        mask1 ) * ck(n,k,l,1) &
             815     3                                  + (        mask2 ) * ck(n,k,l,2)
             816     3   p   2v                   c_out = ( 1.D0 - mask1 ) * ck(n,k,l,1) &
             817     3                                  + ( 1.D0 - mask2 ) * ck(n,k,l,2)
             818     3               
             819     3   p   2v                   c_qin_max = ( mask1 ) * ( ck(n,k,l,1) * qin_max(n,k,1) ) &
             820     3                                      + ( mask2 ) * ( ck(n,k,l,2) * qin_max(n,k,2) )
             821     3   p   2v                   c_qin_min = ( mask1 ) * ( ck(n,k,l,1) * qin_min(n,k,1) ) &
             822     3                                      + ( mask2 ) * ( ck(n,k,l,2) * qin_min(n,k,2) )
             823     3               
             824     4   p   2m                   if ( abs(c_out) <= CNST_EPS_ZERO ) then
             825     4   p   2s                      qout_min(n,k) = q(n,k,l)
             826     4   p   2s                      qout_max(n,k) = q(n,k,l)
             827     4   p   2s                   else
             828     4   p   2s                      qout_min(n,k) = ( q(n,k,l)                                  &
             829     4                                                - c_qin_max                                &
             830     4                                                - q_mp1_max * ( 1.D0-c_in-c_out+d(n,k,l) ) &
             831     4                                                ) / c_out
             832     4   p   2s                      qout_max(n,k) = ( q(n,k,l)                                  &
             833     4                                                - c_qin_min                                &
             834     4                                                - q_mp1_min * ( 1.D0-c_in-c_out+d(n,k,l) ) &
             835     4                                                ) / c_out
             836     4   p   2v                   endif
             837     3               
             838     3   p   2v                enddo
             839     2   p   2              enddo
             840     1               
             841     1                      !--- apply limiter
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             842     2  pp                  do k = ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 115
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             843     3  pp   2v                do n = 1, ADM_gall
             844     3   p   2v                   mask = 0.5D0 - sign( 0.5D0, ck(n,k,l,1) )
             845     3               
             846     3   p   2v                   tmp = (        mask ) * min( max( q_h(n,k,l), qin_min(n,k  ,1) ), qin_max(n,k  ,1) ) &
             847     3                                + ( 1.D0 - mask ) * min( max( q_h(n,k,l), qin_min(n,k-1,2) ), qin_max(n,k-1,2) )
             848     3               
             849     3   p   2v                   q_h(n,k,l) = (        mask ) * max( min( tmp, qout_max(n,k-1) ), qout_min(n,k-1) ) &
             850     3                                       + ( 1.D0 - mask ) * max( min( tmp, qout_max(n,k  ) ), qout_min(n,k  ) )
             851     3   p   2v                enddo
             852     2   p                  enddo
             853     1               
             854     1                   enddo
             855                     
             856     1                   if ( ADM_prc_me == ADM_prc_pl ) then
             857     2                      do l = 1, ADM_lall_pl
             858     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 3
                                   <<< Loop-information  End >>>
             859     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 762
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             860     4  pp   8v                   do n = 1, ADM_gall_pl
             861     4   p   8v                      qin_min_pl(n,k,1) =  CNST_MAX_REAL
             862     4   p   8v                      qin_max_pl(n,k,1) = -CNST_MAX_REAL
             863     4   p   8v                   enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1231
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             864     4  pp   8v                   do n = 1, ADM_gall_pl
             865     4   p   8v                      qin_min_pl(n,k,2) =  CNST_MAX_REAL
             866     4   p   8v                      qin_max_pl(n,k,2) = -CNST_MAX_REAL
             867     4   p   8v                   enddo
             868     3   p                     enddo
             869     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             870     3  pp                     do k = ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 165
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 144
                                   <<<      q_pl: 48, qin_min_pl: 48, qin_max_pl: 48
                                   <<< Loop-information  End >>>
             871     4  pp   4s                   do n = 1, ADM_gall_pl
             872     5   p   4s                      if ( ck_pl(n,k,l,1) > 0.D0 ) then
             873     5   p   4s                         qin_min_pl(n,k-1,2) = min( q_pl(n,k,l), q_pl(n,k-1,l) )
             874     5   p   4s                         qin_max_pl(n,k-1,2) = max( q_pl(n,k,l), q_pl(n,k-1,l) )
             875     5   p   4s                      else
             876     5   p   4s                         qin_min_pl(n,k,  1) = min( q_pl(n,k,l), q_pl(n,k-1,l) )
             877     5   p   4s                         qin_max_pl(n,k,  1) = max( q_pl(n,k,l), q_pl(n,k-1,l) )
             878     5   p   4s                      endif
             879     4   p   4s                   enddo
             880     3   p                     enddo
             881     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 112
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<<    PREFETCH       : 12
                                   <<<      q_pl: 8, d_pl: 4
                                   <<< Loop-information  End >>>
             882     3  pp   2s                do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<< Loop-information  End >>>
             883     4   p   2                    do n = 1, ADM_gall_pl
             884     4               
             885     4   p   2v                      q_mp1_min_pl = min( qin_min_pl(n,k,1), qin_min_pl(n,k,2) )
             886     4   p   2s                      if( q_mp1_min_pl ==  CNST_MAX_REAL ) q_mp1_min_pl = q_pl(n,k,l)
             887     4   p   2v                      q_mp1_min_pl = max( 0.D0, q_mp1_min_pl)
             888     4               
             889     4   p   2v                      q_mp1_max_pl = max( qin_max_pl(n,k,1), qin_max_pl(n,k,2) )
             890     4   p   2s                      if( q_mp1_max_pl == -CNST_MAX_REAL ) q_mp1_max_pl = q_pl(n,k,l)
             891     4               
             892     4   p   2v                      mask1 = 0.5D0 - sign( 0.5D0, ck_pl(n,k,l,1) )
             893     4   p   2v                      mask2 = 0.5D0 - sign( 0.5D0, ck_pl(n,k,l,2) )
             894     4               
             895     4   p   2v                      c_in_pl  = (        mask1 ) * ck_pl(n,k,l,1) &
             896     4                                        + (        mask2 ) * ck_pl(n,k,l,2)
             897     4   p   2v                      c_out_pl = ( 1.D0 - mask1 ) * ck_pl(n,k,l,1) &
             898     4                                        + ( 1.D0 - mask2 ) * ck_pl(n,k,l,2)
             899     4               
             900     4   p   2v                      c_qin_max_pl = ( mask1 ) * ( ck_pl(n,k,l,1) * qin_max_pl(n,k,1) ) &
             901     4                                            + ( mask2 ) * ( ck_pl(n,k,l,2) * qin_max_pl(n,k,2) )
             902     4   p   2v                      c_qin_min_pl = ( mask1 ) * ( ck_pl(n,k,l,1) * qin_min_pl(n,k,1) ) &
             903     4                                            + ( mask2 ) * ( ck_pl(n,k,l,2) * qin_min_pl(n,k,2) )
             904     4               
             905     5   p   2m                      if ( abs(c_out_pl) < CNST_EPS_ZERO ) then
             906     5   p   2s                         qout_min_pl(n,k) = q_pl(n,k,l)
             907     5   p   2s                         qout_max_pl(n,k) = q_pl(n,k,l)
             908     5   p   2s                      else
             909     5   p   2s                         qout_min_pl(n,k) = ( q_pl(n,k,l)                                          &
             910     5                                                     - c_qin_max_pl                                         &
             911     5                                                     - q_mp1_max_pl * ( 1.D0-c_in_pl-c_out_pl+d_pl(n,k,l) ) &
             912     5                                                     ) / c_out_pl
             913     5   p   2s                         qout_max_pl(n,k) = ( q_pl(n,k,l)                                          &
             914     5                                                     - c_qin_min_pl                                         &
             915     5                                                     - q_mp1_min_pl * ( 1.D0-c_in_pl-c_out_pl+d_pl(n,k,l) ) &
             916     5                                                     ) / c_out_pl
             917     5   p   2v                      endif
             918     4               
             919     4   p   2v                   enddo
             920     3   p   2                 enddo
             921     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             922     3  pp                     do k = ADM_kmin, ADM_kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 115
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             923     4  pp   2v                   do n = 1, ADM_gall_pl
             924     4   p   2v                      mask = 0.5D0 - sign( 0.5D0, ck_pl(n,k,l,1) )
             925     4               
             926     4   p   2v                      tmp = (        mask ) * min( max( q_h_pl(n,k,l), qin_min_pl(n,k  ,1) ), qin_max_pl(n,k  ,1) ) &
             927     4                                   + ( 1.D0 - mask ) * min( max( q_h_pl(n,k,l), qin_min_pl(n,k-1,2) ), qin_max_pl(n,k-1,2) )
             928     4               
             929     4   p   2v                      q_h_pl(n,k,l) = (        mask ) * max( min( tmp, qout_max_pl(n,k-1) ), qout_min_pl(n,k-1) ) &
             930     4                                             + ( 1.D0 - mask ) * max( min( tmp, qout_max_pl(n,k  ) ), qout_min_pl(n,k  ) )
             931     4   p   2v                   enddo
             932     3   p                     enddo
             933     2               
             934     2                      enddo
             935     1                   endif
             936                     
             937                         return
             938                       end subroutine advlim_thuburn_v
             939                     
             940                       !-----------------------------------------------------------------------------
             941                       subroutine OPRT_divergence2_prep( &
             942                            flx_h,   flx_h_pl,  &
             943                            cp,      cp_pl,     &
             944                            rhovx,  rhovx_pl, &
             945                            rhovy,  rhovy_pl, &
             946                            rhovz,  rhovz_pl, &
             947                            rho,    rho_pl,   &
             948                            dt                  &
             949                            )
             950                         !
             951                         !--- Miura(2004)'s scheme : path1
             952                         !
             953                         use mod_adm, only :   &
             954                              !--- public parameters
             955                              ADM_W,           &
             956                              ADM_prc_pl,      &
             957                              ADM_TI,          &
             958                              ADM_TJ,          &
             959                              ADM_AI,          &
             960                              ADM_AIJ,         &
             961                              ADM_AJ,          &
             962                              ADM_KNONE,       &
             963                              ADM_lall_pl,     &
             964                              ADM_gmin_pl,     &
             965                              ADM_gslf_pl,     &
             966                              ADM_gall_pl,     &
             967                              ADM_gmax_pl,     &
             968                              !--- public variables
             969                              ADM_prc_me,      &
             970                              ADM_prc_tab,     &
             971                              ADM_rgn_vnum,    &
             972                              ADM_gall_1d,     &
             973                              ADM_kall,        &
             974                              ADM_lall,        &
             975                              ADM_kmin,        &
             976                              ADM_kmax,        &
             977                              ADM_gmin,        &
             978                              ADM_gmax,        &
             979                              ADM_gall,        &
             980                              ADM_ImoJmo_nmax, &  ! Y.Niwa add 080130
             981                              ADM_ImoJmo,      &  ! Y.Niwa add 080130
             982                              ADM_GIoJo,       &  ! Y.Niwa add 080130
             983                              ADM_VMISS           ! Y.Niwa add 080130
             984                         use mod_gmtr, only :  &
             985                              !--- public parameters
             986                              GMTR_T_W1,       &
             987                              GMTR_T_W2,       &
             988                              GMTR_T_W3,       &
             989                              GMTR_T_rarea,    &
             990                              GMTR_A_hnx,      &
             991                              GMTR_A_hny,      &
             992                              GMTR_A_hnz,      &
             993                              GMTR_A_tnx,      &
             994                              GMTR_A_tny,      &
             995                              GMTR_A_tnz,      &
             996                              GMTR_A_tn2x,     &
             997                              GMTR_A_tn2y,     &
             998                              GMTR_A_tn2z,     &
             999                              GMTR_P_rarea,    &
            1000                              !--- public variables
            1001                              GMTR_T_var,      &
            1002                              GMTR_T_var_pl,   &
            1003                              GMTR_P_var,      &
            1004                              GMTR_P_var_pl,   &
            1005                              GMTR_A_var,      &
            1006                              GMTR_A_var_pl
            1007                         use mod_grd, only :    &
            1008                              GRD_x, GRD_x_pl,  &
            1009                              GRD_xt, GRD_xt_pl,&
            1010                              GRD_XDIR,         &
            1011                              GRD_YDIR,         &
            1012                              GRD_ZDIR
            1013                         use mod_comm, only : &
            1014                              COMM_data_transfer
            1015                         use mod_cnst, only : &
            1016                              CNST_MAX_REAL,  &
            1017                              CNST_EPS_ZERO, &
            1018                              CNST_UNDEF
            1019                         implicit none
            1020                     
            1021                         real(8), intent(out) :: flx_h(6,ADM_gall,ADM_kall,ADM_lall)
            1022                         real(8), intent(out) :: flx_h_pl(ADM_GALL_PL,ADM_kall,ADM_LALL_PL)
            1023                         real(8), intent(out) :: cp(ADM_gall,ADM_kall,ADM_lall,ADM_AI:ADM_AJ,GRD_XDIR:GRD_ZDIR)
            1024                         real(8), intent(out) :: cp_pl(ADM_GALL_PL,ADM_kall,ADM_LALL_PL,GRD_XDIR:GRD_ZDIR)
            1025                         real(8), intent(in)  :: rhovx(ADM_gall,ADM_kall,ADM_lall)
            1026                         real(8), intent(in)  :: rhovx_pl(ADM_GALL_PL,ADM_kall,ADM_LALL_PL)
            1027                         real(8), intent(in)  :: rhovy(ADM_gall,ADM_kall,ADM_lall)
            1028                         real(8), intent(in)  :: rhovy_pl(ADM_GALL_PL,ADM_kall,ADM_LALL_PL)
            1029                         real(8), intent(in)  :: rhovz(ADM_gall,ADM_kall,ADM_lall)
            1030                         real(8), intent(in)  :: rhovz_pl(ADM_GALL_PL,ADM_kall,ADM_LALL_PL)
            1031                         real(8), intent(in)  :: rho(ADM_gall,ADM_kall,ADM_lall)
            1032                         real(8), intent(in)  :: rho_pl(ADM_GALL_PL,ADM_kall,ADM_LALL_PL)
            1033                         real(8), intent(in)  :: dt
            1034                     
            1035                         real(8) :: rhovxt(ADM_gall,ADM_kall,ADM_lall,ADM_TI:ADM_TJ)
            1036                         real(8) :: rhovxt_pl(ADM_GALL_PL,ADM_kall,ADM_LALL_PL)
            1037                         real(8) :: rhovyt(ADM_gall,ADM_kall,ADM_lall,ADM_TI:ADM_TJ)
            1038                         real(8) :: rhovyt_pl(ADM_GALL_PL,ADM_kall,ADM_LALL_PL)
            1039                         real(8) :: rhovzt(ADM_gall,ADM_kall,ADM_lall,ADM_TI:ADM_TJ)
            1040                         real(8) :: rhovzt_pl(ADM_GALL_PL,ADM_kall,ADM_LALL_PL)
            1041                         real(8) :: rhot(ADM_gall,ADM_kall,ADM_lall,ADM_TI:ADM_TJ)
            1042                         real(8) :: rhot_pl(ADM_GALL_PL,ADM_kall,ADM_LALL_PL)
            1043                     
            1044                         real(8)  :: ccc
            1045                         real(8)  :: ccc_pl
            1046                     
            1047                         real(8)  :: rpx(ADM_gall,ADM_AI:ADM_AJ)
            1048                         real(8)  :: rpx_pl(ADM_gall_pl)
            1049                         real(8)  :: rpy(ADM_gall,ADM_AI:ADM_AJ)
            1050                         real(8)  :: rpy_pl(ADM_gall_pl)
            1051                         real(8)  :: rpz(ADM_gall,ADM_AI:ADM_AJ)
            1052                         real(8)  :: rpz_pl(ADM_gall_pl)
            1053                         !
            1054                         real(8)  :: rhovxa(ADM_gall,ADM_AI:ADM_AJ)
            1055                         real(8)  :: rhovxa_pl(ADM_GALL_PL)
            1056                         real(8)  :: rhovya(ADM_gall,ADM_AI:ADM_AJ)
            1057                         real(8)  :: rhovya_pl(ADM_GALL_PL)
            1058                         real(8)  :: rhovza(ADM_gall,ADM_AI:ADM_AJ)
            1059                         real(8)  :: rhovza_pl(ADM_GALL_PL)
            1060                         real(8)  :: rhoa(ADM_gall,ADM_AI:ADM_AJ)
            1061                         real(8)  :: rhoa_pl(ADM_GALL_PL)
            1062                         !
            1063                         integer :: l,n,k, k0, ij
            1064                         integer :: rgnid
            1065                         !
            1066                         integer :: np1(ADM_gall_pl)
            1067                         integer :: nm1(ADM_gall_pl)
            1068                         !
            1069                         integer :: nstart,nend
            1070                         logical, save :: first = .true.  ! Y.Niwa add 080130
            1071                         integer :: t  ! Y.Niwa add 080130
            1072                         !
            1073                         integer :: suf,i,j
            1074                         suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
            1075                         !---------------------------------------------------------------------------
            1076                     
            1077                         k0 = ADM_KNONE
            1078                     
            1079     1                   if (first) then
            1080     1                      first = .false.
            1081     1               
            1082     1                      allocate( local_t_var   (ADM_gall   ,k0,ADM_lall   ,ADM_TI:ADM_TJ,GMTR_T_W1:GMTR_T_W3) )
            1083     1                      allocate( local_t_var_pl(ADM_gall_pl,k0,ADM_lall_pl,              GMTR_T_W1:GMTR_T_W3) )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1084     1  pp    v             local_t_var = CNST_UNDEF
            1085     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 2)
                                   <<< Loop-information  End >>>
            1086     2  pp                  do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 1)
                                   <<< Loop-information  End >>>
            1087     3   s                  do t = ADM_TI, ADM_TJ
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1088     4   p   2s             do n = 1, ADM_ImoJmo_nmax
            1089     4   p   2s                ij = ADM_ImoJmo(n,ADM_GIoJo)
            1090     4               
            1091     4   p   2s                local_t_var(ij,k0,l,t,GMTR_T_W1) = GMTR_t_var(ij,k0,l,t,GMTR_T_W1)
            1092     4   p   2s                local_t_var(ij,k0,l,t,GMTR_T_W2) = GMTR_t_var(ij,k0,l,t,GMTR_T_W2)
            1093     4   p   2s                local_t_var(ij,k0,l,t,GMTR_T_W3) = GMTR_t_var(ij,k0,l,t,GMTR_T_W3)
            1094     4   p   2s             enddo
            1095     3   p                  enddo
            1096     2   p                  enddo
            1097     1               
            1098     2                      if ( ADM_prc_me == ADM_prc_pl ) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1099     3  pp                     do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 138
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1100     4  pp   6v                do n = ADM_gmin_pl, ADM_gmax_pl
            1101     4   p   6v                   local_t_var_pl(n,k0,l,GMTR_T_W1) = GMTR_t_var_pl(n,k0,l,GMTR_T_W1)
            1102     4   p   6v                   local_t_var_pl(n,k0,l,GMTR_T_W2) = GMTR_t_var_pl(n,k0,l,GMTR_T_W2)
            1103     4   p   6v                   local_t_var_pl(n,k0,l,GMTR_T_W3) = GMTR_t_var_pl(n,k0,l,GMTR_T_W3)
            1104     4   p   6v                enddo
            1105     3   p                     enddo
            1106     2                      endif
            1107     1                   endif
            1108                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    FULL UNROLLING
                                   <<< Loop-information  End >>>
            1109        pp   3v          flx_h   (:,:,:,:)   = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1110        pp    v          flx_h_pl(:,:,:)     = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1111        pp    v          cp      (:,:,:,:,:) = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1112        pp    v          cp_pl   (:,:,:,:)   = 0.D0
            1113                     
            1114                         nm1(ADM_gmin_pl) = ADM_gmax_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1600
                                   <<< Loop-information  End >>>
            1115     1  pp   8s          do n = ADM_gmin_pl+1, ADM_gmax_pl
            1116     1   p   8s             nm1(n) = n - 1
            1117     1   p   8s          enddo
            1118                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1600
                                   <<< Loop-information  End >>>
            1119     1  pp   8s          do n = ADM_gmin_pl, ADM_gmax_pl-1
            1120     1   p   8s             np1(n) = n + 1
            1121     1   p   8s          enddo
            1122                         np1(ADM_gmax_pl) = ADM_gmin_pl
            1123                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1124     1  pp               do l = 1, ADM_lall
            1125     1   p                  rgnid = ADM_prc_tab(l,ADM_prc_me)
            1126     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 384
                                   <<<      rhovy: 72, rhovz: 24, rhovx: 72
                                   <<<      GMTR_T_var: 72, rhovzt: 48, rhovyt: 48
                                   <<<      rhovxt: 48
                                   <<< Loop-information  End >>>
            1127     2  pp                  do k = 1, ADM_kall
            1128     2               
            1129     2   p                     nstart = suf(ADM_gmin-1,ADM_gmin-1)
            1130     2   p                     nend   = suf(ADM_gmax  ,ADM_gmax  )
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 96
                                   <<<      rhovy: 18, rhovz: 6, rhovx: 18
                                   <<<      GMTR_T_var: 18, rhovzt: 12, rhovyt: 12
                                   <<<      rhovxt: 12
                                   <<< Loop-information  End >>>
            1131     3   p   2v                do n = nstart, nend
            1132     3   p   2v                   rhovxt(n,k,l,ADM_TI) = GMTR_T_var(n,k0,l,ADM_TI,GMTR_T_W1) * rhovx(n              ,k,l) &
            1133     3                                                 + GMTR_T_var(n,k0,l,ADM_TI,GMTR_T_W2) * rhovx(n+1            ,k,l) &
            1134     3                                                 + GMTR_T_var(n,k0,l,ADM_TI,GMTR_T_W3) * rhovx(n+1+ADM_gall_1d,k,l)
            1135     3   p   2v                   rhovxt(n,k,l,ADM_TJ) = GMTR_T_var(n,k0,l,ADM_TJ,GMTR_T_W1) * rhovx(n              ,k,l) &
            1136     3                                                 + GMTR_T_var(n,k0,l,ADM_TJ,GMTR_T_W2) * rhovx(n+1+ADM_gall_1d,k,l) &
            1137     3                                                 + GMTR_T_var(n,k0,l,ADM_TJ,GMTR_T_W3) * rhovx(n+ADM_gall_1d,  k,l)
            1138     3   p   2v                   rhovyt(n,k,l,ADM_TI) =GMTR_T_var(n,k0,l,ADM_TI,GMTR_T_W1) *rhovy(n,k,l) &
            1139     3                                 +GMTR_T_var(n,k0,l,ADM_TI,GMTR_T_W2) *rhovy(n+1,k,l) &
            1140     3                                 +GMTR_T_var(n,k0,l,ADM_TI,GMTR_T_W3) *rhovy(n+1+ADM_gall_1d,k,l)
            1141     3   p   2v                   rhovyt(n,k,l,ADM_TJ) =GMTR_T_var(n,k0,l,ADM_TJ,GMTR_T_W1) *rhovy(n,k,l) &
            1142     3                                 +GMTR_T_var(n,k0,l,ADM_TJ,GMTR_T_W2) *rhovy(n+1+ADM_gall_1d,k,l) &
            1143     3                                 +GMTR_T_var(n,k0,l,ADM_TJ,GMTR_T_W3) *rhovy(n+ADM_gall_1d,k,l)
            1144     3   p   2v                   rhovzt(n,k,l,ADM_TI) =GMTR_T_var(n,k0,l,ADM_TI,GMTR_T_W1) *rhovz(n,k,l) &
            1145     3                                 +GMTR_T_var(n,k0,l,ADM_TI,GMTR_T_W2) *rhovz(n+1,k,l) &
            1146     3                                 +GMTR_T_var(n,k0,l,ADM_TI,GMTR_T_W3) *rhovz(n+1+ADM_gall_1d,k,l)
            1147     3   p   2v                   rhovzt(n,k,l,ADM_TJ) =GMTR_T_var(n,k0,l,ADM_TJ,GMTR_T_W1) *rhovz(n,k,l) &
            1148     3                                 +GMTR_T_var(n,k0,l,ADM_TJ,GMTR_T_W2) *rhovz(n+1+ADM_gall_1d,k,l) &
            1149     3                                 +GMTR_T_var(n,k0,l,ADM_TJ,GMTR_T_W3) *rhovz(n+ADM_gall_1d,k,l)
            1150     3   p   2v                   rhot(n,k,l,ADM_TI) =local_T_var(n,k0,l,ADM_TI,GMTR_T_W1) *rho(n,k,l) &
            1151     3                                 +local_T_var(n,k0,l,ADM_TI,GMTR_T_W2) *rho(n+1,k,l) &
            1152     3                                 +local_T_var(n,k0,l,ADM_TI,GMTR_T_W3) *rho(n+1+ADM_gall_1d,k,l)
            1153     3               !                 =GMTR_T_var(n,k0,l,ADM_TI,GMTR_T_W1)&  ! A.Noda 110728
            1154     3               !                 *rho(n,k,l)                         &
            1155     3               !                 +GMTR_T_var(n,k0,l,ADM_TI,GMTR_T_W2)&
            1156     3               !                 *rho(n+1,k,l)                       &
            1157     3               !                 +GMTR_T_var(n,k0,l,ADM_TI,GMTR_T_W3)&
            1158     3               !                 *rho(n+1+ADM_gall_1d,k,l)
            1159     3   p   2v                   rhot(n,k,l,ADM_TJ)                            &
            1160     3                                =local_T_var(n,k0,l,ADM_TJ,GMTR_T_W1)&
            1161     3                                 *rho(n,k,l)                         &
            1162     3                                 +local_T_var(n,k0,l,ADM_TJ,GMTR_T_W2)&
            1163     3                                 *rho(n+1+ADM_gall_1d,k,l)                     &
            1164     3                                 +local_T_var(n,k0,l,ADM_TJ,GMTR_T_W3)&
            1165     3                                 *rho(n+ADM_gall_1d,k,l)
            1166     3               !!$                  =GMTR_T_var(n,k0,l,ADM_TJ,GMTR_T_W1)&   ! Y.Niwa 080130
            1167     3               !!$                  *rho(n,k,l)                         &
            1168     3               !!$                  +GMTR_T_var(n,k0,l,ADM_TJ,GMTR_T_W2)&
            1169     3               !!$                  *rho(n+1+ADM_gall_1d,k,l)                     &
            1170     3               !!$                  +GMTR_T_var(n,k0,l,ADM_TJ,GMTR_T_W3)&
            1171     3               !!$                  *rho(n+ADM_gall_1d,k,l)
            1172     3   p   2v                enddo
            1173     3   p                     if(ADM_rgn_vnum(ADM_W,rgnid)==3) then
            1174     3   p                        rhovxt(suf(ADM_gmin-1,ADM_gmin-1),k,l,ADM_TI)     &
            1175     3                                 =rhovxt(suf(ADM_gmin,ADM_gmin-1),k,l,ADM_TJ)
            1176     3   p                        rhovyt(suf(ADM_gmin-1,ADM_gmin-1),k,l,ADM_TI)     &
            1177     3                                 =rhovyt(suf(ADM_gmin,ADM_gmin-1),k,l,ADM_TJ)
            1178     3   p                        rhovzt(suf(ADM_gmin-1,ADM_gmin-1),k,l,ADM_TI)     &
            1179     3                                 =rhovzt(suf(ADM_gmin,ADM_gmin-1),k,l,ADM_TJ)
            1180     3   p                        rhot(suf(ADM_gmin-1,ADM_gmin-1),k,l,ADM_TI)     &
            1181     3                                 =rhot(suf(ADM_gmin,ADM_gmin-1),k,l,ADM_TJ)
            1182     3   p                     end if
            1183     2                         !
            1184     2   p                  enddo
            1185     1                      !
            1186     1   p               enddo
            1187                         !
            1188     1                   if(ADM_prc_me==ADM_prc_pl) then
            1189     1                      !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1190     2  pp                  do l=1,ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1191     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 75
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1192     4  pp   2v                   do n=ADM_gmin_pl,ADM_gmax_pl
            1193     4   p   2v                      rhovxt_pl(n,k,l)                            &
            1194     4                                    =GMTR_T_var_pl(n,k0,l,GMTR_T_W1)&
            1195     4                                    *rhovx_pl(ADM_gslf_pl,k,l)              &
            1196     4                                    +GMTR_T_var_pl(n,k0,l,GMTR_T_W2)&
            1197     4                                    *rhovx_pl(n,k,l)                        &
            1198     4                                    +GMTR_T_var_pl(n,k0,l,GMTR_T_W3)&
            1199     4                                    *rhovx_pl(np1(n),k,l)
            1200     4   p   2v                      rhovyt_pl(n,k,l)                            &
            1201     4                                    =GMTR_T_var_pl(n,k0,l,GMTR_T_W1)&
            1202     4                                    *rhovy_pl(ADM_gslf_pl,k,l)              &
            1203     4                                    +GMTR_T_var_pl(n,k0,l,GMTR_T_W2)&
            1204     4                                    *rhovy_pl(n,k,l)                        &
            1205     4                                    +GMTR_T_var_pl(n,k0,l,GMTR_T_W3)&
            1206     4                                    *rhovy_pl(np1(n),k,l)
            1207     4   p   2v                      rhovzt_pl(n,k,l)                            &
            1208     4                                    =GMTR_T_var_pl(n,k0,l,GMTR_T_W1)&
            1209     4                                    *rhovz_pl(ADM_gslf_pl,k,l)              &
            1210     4                                    +GMTR_T_var_pl(n,k0,l,GMTR_T_W2)&
            1211     4                                    *rhovz_pl(n,k,l)                        &
            1212     4                                    +GMTR_T_var_pl(n,k0,l,GMTR_T_W3)&
            1213     4                                    *rhovz_pl(np1(n),k,l)
            1214     4   p   2v                      rhot_pl(n,k,l)                            &
            1215     4                                    =local_T_var_pl(n,k0,l,GMTR_T_W1)&
            1216     4                                    *rho_pl(ADM_gslf_pl,k,l)              &
            1217     4                                    +local_T_var_pl(n,k0,l,GMTR_T_W2)&
            1218     4                                    *rho_pl(n,k,l)                        &
            1219     4                                    +local_T_var_pl(n,k0,l,GMTR_T_W3)&
            1220     4                                    *rho_pl(np1(n),k,l)
            1221     4               !!$                     =GMTR_T_var_pl(n,k0,l,GMTR_T_W1)&  ! Y.Niwa 080130
            1222     4               !!$                     *rho_pl(ADM_gslf_pl,k,l)              &
            1223     4               !!$                     +GMTR_T_var_pl(n,k0,l,GMTR_T_W2)&
            1224     4               !!$                     *rho_pl(n,k,l)                        &
            1225     4               !!$                     +GMTR_T_var_pl(n,k0,l,GMTR_T_W3)&
            1226     4               !!$                     *rho_pl(np1(n),k,l)
            1227     4   p   2v                   enddo
            1228     3   p                     enddo
            1229     2   p                  enddo
            1230     1                   end if
            1231                     
            1232                         !--- calculation of courant number
            1233     1                   do l=1,ADM_lall
            1234     1                      rgnid=ADM_prc_tab(l,ADM_prc_me)
            1235     1               
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 86
                                   <<<      GRD_xt: 36, rhovxa: 6, cp: 18, rpz: 6
                                   <<<      rpy: 6, rpx: 6, GMTR_P_var: 4, flx_h: 4
                                   <<< Loop-information  End >>>
            1236     2                      do k = 1, ADM_kall
            1237     2                         nstart = suf(ADM_gmin-1,ADM_gmin  )
            1238     2                         nend   = suf(ADM_gmax,  ADM_gmax  )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 97
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 26
                                   <<<      GRD_xt: 12, rhovxa: 2, cp: 6, rpz: 2
                                   <<<      rpy: 2, rpx: 2
                                   <<< Loop-information  End >>>
            1239     3  pp    v                do n = nstart,nend
            1240     3   p    v                   rpx(n,ADM_AI) = 0.5D0 * ( GRD_xt(n,k0,l,ADM_TI,GRD_XDIR) + GRD_xt(n-ADM_gall_1d,k0,l,ADM_TJ,GRD_XDIR) )
            1241     3   p    v                   rpy(n,ADM_AI) = 0.5D0 * ( GRD_xt(n,k0,l,ADM_TI,GRD_YDIR) + GRD_xt(n-ADM_gall_1d,k0,l,ADM_TJ,GRD_YDIR) )
            1242     3   p    v                   rpz(n,ADM_AI) = 0.5D0 * ( GRD_xt(n,k0,l,ADM_TI,GRD_ZDIR) + GRD_xt(n-ADM_gall_1d,k0,l,ADM_TJ,GRD_ZDIR) )
            1243     3               
            1244     3   p    v                   rhovxa(n,ADM_AI) = 0.5D0 * ( rhovxt(n-ADM_gall_1d,k,l,ADM_TJ) + rhovxt(n,k,l,ADM_TI) )
            1245     3   p    v                   rhovya(n,ADM_AI) = 0.5D0 * ( rhovyt(n-ADM_gall_1d,k,l,ADM_TJ) + rhovyt(n,k,l,ADM_TI) )
            1246     3   p    v                   rhovza(n,ADM_AI) = 0.5D0 * ( rhovzt(n-ADM_gall_1d,k,l,ADM_TJ) + rhovzt(n,k,l,ADM_TI) )
            1247     3   p    v                   rhoa  (n,ADM_AI) = 0.5D0 * ( rhot  (n-ADM_gall_1d,k,l,ADM_TJ) + rhot  (n,k,l,ADM_TI) )
            1248     3               
            1249     3   p    v                   cp(n,k,l,ADM_AI,GRD_XDIR) = rpx(n,ADM_AI) - rhovxa(n,ADM_AI) / rhoa(n,ADM_AI) * dt * 0.5D0
            1250     3   p    v                   cp(n,k,l,ADM_AI,GRD_YDIR) = rpy(n,ADM_AI) - rhovya(n,ADM_AI) / rhoa(n,ADM_AI) * dt * 0.5D0
            1251     3   p    v                   cp(n,k,l,ADM_AI,GRD_ZDIR) = rpz(n,ADM_AI) - rhovza(n,ADM_AI) / rhoa(n,ADM_AI) * dt * 0.5D0
            1252     3               
            1253     3   p    v                   ccc = ( rhovxa(n,ADM_AI) * GMTR_A_var(n,k0,l,ADM_AI,GMTR_A_HNX) &
            1254     3                                  + rhovya(n,ADM_AI) * GMTR_A_var(n,k0,l,ADM_AI,GMTR_A_HNY) &
            1255     3                                  + rhovza(n,ADM_AI) * GMTR_A_var(n,k0,l,ADM_AI,GMTR_A_HNZ) )
            1256     3               
            1257     3   p    v                   flx_h(1,n  ,k,l) =  ccc * dt * GMTR_P_var(n  ,k0,l,GMTR_P_RAREA)
            1258     3   p    v                   flx_h(4,n+1,k,l) = -ccc * dt * GMTR_P_var(n+1,k0,l,GMTR_P_RAREA)
            1259     3   p    v                enddo
            1260     2               
            1261     2                         nstart = suf(ADM_gmin-1,ADM_gmin-1)
            1262     2                         nend   = suf(ADM_gmax,  ADM_gmax  )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 97
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 32
                                   <<<      GRD_xt: 12, GMTR_P_var: 2, flx_h: 4
                                   <<<      rhovxa: 2, cp: 6, rpz: 2, rpy: 2, rpx: 2
                                   <<< Loop-information  End >>>
            1263     3  pp    v                do n = nstart,nend
            1264     3   p    v                   rpx(n,ADM_AIJ) &
            1265     3                                 = 0.5D0*(GRD_xt(n,k0,l,ADM_TI,GRD_XDIR)+GRD_xt(n,k0,l,ADM_TJ,GRD_XDIR))
            1266     3   p    v                   rpy(n,ADM_AIJ) &
            1267     3                                 = 0.5D0*(GRD_xt(n,k0,l,ADM_TI,GRD_YDIR)+GRD_xt(n,k0,l,ADM_TJ,GRD_YDIR))
            1268     3   p    v                   rpz(n,ADM_AIJ) &
            1269     3                                 = 0.5D0*(GRD_xt(n,k0,l,ADM_TI,GRD_ZDIR)+GRD_xt(n,k0,l,ADM_TJ,GRD_ZDIR))
            1270     3   p    v                   rhovxa(n,ADM_AIJ) = (rhovxt(n,k,l,ADM_TI)+rhovxt(n,k,l,ADM_TJ))*0.5D0
            1271     3   p    v                   rhovya(n,ADM_AIJ) = (rhovyt(n,k,l,ADM_TI)+rhovyt(n,k,l,ADM_TJ))*0.5D0
            1272     3   p    v                   rhovza(n,ADM_AIJ) = (rhovzt(n,k,l,ADM_TI)+rhovzt(n,k,l,ADM_TJ))*0.5D0
            1273     3   p    v                   rhoa(n,ADM_AIJ) = (rhot(n,k,l,ADM_TI)+rhot(n,k,l,ADM_TJ))*0.5D0
            1274     3                            !
            1275     3   p    v                   cp(n,k,l,ADM_AIJ,GRD_XDIR) = rpx(n,ADM_AIJ) - rhovxa(n,ADM_AIJ)/rhoa(n,ADM_AIJ)*dt*0.5D0
            1276     3   p    v                   cp(n,k,l,ADM_AIJ,GRD_YDIR) = rpy(n,ADM_AIJ) - rhovya(n,ADM_AIJ)/rhoa(n,ADM_AIJ)*dt*0.5D0
            1277     3   p    v                   cp(n,k,l,ADM_AIJ,GRD_ZDIR) = rpz(n,ADM_AIJ) - rhovza(n,ADM_AIJ)/rhoa(n,ADM_AIJ)*dt*0.5D0
            1278     3                            !
            1279     3   p    v                   ccc = &
            1280     3                                 (rhovxa(n,ADM_AIJ)*GMTR_A_var(n,k0,l,ADM_AIJ,GMTR_A_HNX)&
            1281     3                                 +rhovya(n,ADM_AIJ)*GMTR_A_var(n,k0,l,ADM_AIJ,GMTR_A_HNY)&
            1282     3                                 +rhovza(n,ADM_AIJ)*GMTR_A_var(n,k0,l,ADM_AIJ,GMTR_A_HNZ))
            1283     3   p    v                   flx_h(2,n              ,k,l) = ccc*dt*GMTR_P_var(n,k0,l,GMTR_P_RAREA)
            1284     3   p    v                   flx_h(5,n+1+ADM_gall_1d,k,l) =-ccc*dt*GMTR_P_var(n+1+ADM_gall_1d,k0,l,GMTR_P_RAREA)
            1285     3                            !
            1286     3   p    v                enddo
            1287     2               
            1288     2                         nstart = suf(ADM_gmin  ,ADM_gmin-1)
            1289     2                         nend   = suf(ADM_gmax  ,ADM_gmax  )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 97
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 32
                                   <<<      GRD_xt: 12, GMTR_P_var: 2, flx_h: 4
                                   <<<      rhovxa: 2, cp: 6, rpz: 2, rpy: 2, rpx: 2
                                   <<< Loop-information  End >>>
            1290     3  pp    v                do n = nstart,nend
            1291     3   p    v                   rpx(n,ADM_AJ) &
            1292     3                                 = 0.5D0*(GRD_xt(n,k0,l,ADM_TJ,GRD_XDIR)+GRD_xt(n-1,k0,l,ADM_TI,GRD_XDIR))
            1293     3   p    v                   rpy(n,ADM_AJ) &
            1294     3                                 = 0.5D0*(GRD_xt(n,k0,l,ADM_TJ,GRD_YDIR)+GRD_xt(n-1,k0,l,ADM_TI,GRD_YDIR))
            1295     3   p    v                   rpz(n,ADM_AJ) &
            1296     3                                 = 0.5D0*(GRD_xt(n,k0,l,ADM_TJ,GRD_ZDIR)+GRD_xt(n-1,k0,l,ADM_TI,GRD_ZDIR))
            1297     3   p    v                   rhovxa(n,ADM_AJ)=  (rhovxt(n,k,l,ADM_TJ)+rhovxt(n-1,k,l,ADM_TI))*0.5D0
            1298     3   p    v                   rhovya(n,ADM_AJ)=  (rhovyt(n,k,l,ADM_TJ)+rhovyt(n-1,k,l,ADM_TI))*0.5D0
            1299     3   p    v                   rhovza(n,ADM_AJ)=  (rhovzt(n,k,l,ADM_TJ)+rhovzt(n-1,k,l,ADM_TI))*0.5D0
            1300     3   p    v                   rhoa(n,ADM_AJ)=  (rhot(n,k,l,ADM_TJ)+rhot(n-1,k,l,ADM_TI))*0.5D0
            1301     3                            !
            1302     3   p    v                   cp(n,k,l,ADM_AJ,GRD_XDIR) = rpx(n,ADM_AJ) - rhovxa(n,ADM_AJ)/rhoa(n,ADM_AJ)*dt*0.5D0
            1303     3   p    v                   cp(n,k,l,ADM_AJ,GRD_YDIR) = rpy(n,ADM_AJ) - rhovya(n,ADM_AJ)/rhoa(n,ADM_AJ)*dt*0.5D0
            1304     3   p    v                   cp(n,k,l,ADM_AJ,GRD_ZDIR) = rpz(n,ADM_AJ) - rhovza(n,ADM_AJ)/rhoa(n,ADM_AJ)*dt*0.5D0
            1305     3                            !
            1306     3   p    v                   ccc = &
            1307     3                                 (rhovxa(n,ADM_AJ)*GMTR_A_var(n,k0,l,ADM_AJ,GMTR_A_HNX)&
            1308     3                                 +rhovya(n,ADM_AJ)*GMTR_A_var(n,k0,l,ADM_AJ,GMTR_A_HNY)&
            1309     3                                 +rhovza(n,ADM_AJ)*GMTR_A_var(n,k0,l,ADM_AJ,GMTR_A_HNZ))
            1310     3   p    v                   flx_h(3,n            ,k,l) = ccc*dt*GMTR_P_var(n,k0,l,GMTR_P_RAREA)
            1311     3   p    v                   flx_h(6,n+ADM_gall_1d,k,l) =-ccc*dt*GMTR_P_var(n+ADM_gall_1d,k0,l,GMTR_P_RAREA)
            1312     3   p    v                enddo
            1313     2                         !
            1314     3                         if(ADM_rgn_vnum(ADM_W,rgnid)==3) then
            1315     3                            flx_h(6,suf(ADM_gmin,ADM_gmin),k,l) = 0.0D0
            1316     3                         end if
            1317     2                      enddo
            1318     1                   enddo
            1319                     
            1320     1                   if(ADM_prc_me==ADM_prc_pl) then
            1321     1                      !
            1322     2   s                  do l=1,ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 24
                                   <<<      GRD_xt_pl: 8, cp_pl: 8, rpy_pl: 4
                                   <<<      rpx_pl: 4
                                   <<< Loop-information  End >>>
            1323     3   s                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 104
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 12
                                   <<<      rpx_pl: 2, GRD_xt_pl: 4, cp_pl: 4
                                   <<<      rpy_pl: 2
                                   <<< Loop-information  End >>>
            1324     4  pp    v                   do n=ADM_gmin_pl,ADM_gmax_pl
            1325     4   p    v                      rpx_pl(n) &
            1326     4                                    = 0.5D0*(GRD_xt_pl(nm1(n),k0,l,GRD_XDIR)+GRD_xt_pl(n,k0,l,GRD_XDIR))
            1327     4   p    v                      rpy_pl(n) &
            1328     4                                    = 0.5D0*(GRD_xt_pl(nm1(n),k0,l,GRD_YDIR)+GRD_xt_pl(n,k0,l,GRD_YDIR))
            1329     4   p    v                      rpz_pl(n) &
            1330     4                                    = 0.5D0*(GRD_xt_pl(nm1(n),k0,l,GRD_ZDIR)+GRD_xt_pl(n,k0,l,GRD_ZDIR))
            1331     4                               !
            1332     4   p    v                      rhovxa_pl(n)=  (rhovxt_pl(nm1(n),k,l)+rhovxt_pl(n,k,l))*0.5D0
            1333     4   p    v                      rhovya_pl(n)=  (rhovyt_pl(nm1(n),k,l)+rhovyt_pl(n,k,l))*0.5D0
            1334     4   p    v                      rhovza_pl(n)=  (rhovzt_pl(nm1(n),k,l)+rhovzt_pl(n,k,l))*0.5D0
            1335     4   p    v                      rhoa_pl(n)=  (rhot_pl(nm1(n),k,l)+rhot_pl(n,k,l))*0.5D0
            1336     4                               !
            1337     4   p    v                      cp_pl(n,k,l,GRD_XDIR) = rpx_pl(n) - rhovxa_pl(n)/rhoa_pl(n)*dt*0.5D0
            1338     4   p    v                      cp_pl(n,k,l,GRD_YDIR) = rpy_pl(n) - rhovya_pl(n)/rhoa_pl(n)*dt*0.5D0
            1339     4   p    v                      cp_pl(n,k,l,GRD_ZDIR) = rpz_pl(n) - rhovza_pl(n)/rhoa_pl(n)*dt*0.5D0
            1340     4                               !
            1341     4   p    v                      ccc_pl = &
            1342     4                                    (rhovxa_pl(n)*GMTR_A_var_pl(n,k0,l,GMTR_A_HNX)&
            1343     4                                    +rhovya_pl(n)*GMTR_A_var_pl(n,k0,l,GMTR_A_HNY)&
            1344     4                                    +rhovza_pl(n)*GMTR_A_var_pl(n,k0,l,GMTR_A_HNZ))
            1345     4   p    v                      flx_h_pl(n,k,l) = ccc_pl*dt*GMTR_P_var_pl(ADM_gslf_pl,k0,l,GMTR_P_RAREA)
            1346     4   p    v                   enddo
            1347     3   p                     enddo
            1348     2   p                  enddo
            1349     1                   end if
            1350                     
            1351                         return
            1352                       end subroutine OPRT_divergence2_prep
            1353                     
            1354                       !-----------------------------------------------------------------------------
            1355                       ! Miura(2004)'s scheme with Thuburn(1996) limiter : path2
            1356                       subroutine OPRT_divergence2( &
            1357                            scl,   scl_pl,   &
            1358                            s,     s_pl,     &
            1359                            flx_h, flx_h_pl, &
            1360                            c,     c_pl,     &
            1361                            cp,    cp_pl,    &
            1362                            d,     d_pl,     &
            1363                            dt,              &
            1364                            limiter,         &
            1365                            mfact            )
            1366                         use mod_adm, only: &
            1367                            ADM_prc_pl,      &
            1368                            ADM_AI,          &
            1369                            ADM_AIJ,         &
            1370                            ADM_AJ,          &
            1371                            ADM_KNONE,       &
            1372                            ADM_lall_pl,     &
            1373                            ADM_gmin_pl,     &
            1374                            ADM_gslf_pl,     &
            1375                            ADM_gall_pl,     &
            1376                            ADM_gmax_pl,     &
            1377                            ADM_prc_me,      &
            1378                            ADM_prc_tab,     &
            1379                            ADM_gall_1d,     &
            1380                            ADM_kall,        &
            1381                            ADM_lall,        &
            1382                            ADM_kmin,        &
            1383                            ADM_kmax,        &
            1384                            ADM_gmin,        &
            1385                            ADM_gmax,        &
            1386                            ADM_gall,        &
            1387                            ADM_W,           &
            1388                            ADM_rgn_vnum
            1389                         use mod_grd, only: &
            1390                            GRD_XDIR, &
            1391                            GRD_YDIR, &
            1392                            GRD_ZDIR, &
            1393                            GRD_x,    &
            1394                            GRD_x_pl
            1395                         use mod_comm, only: &
            1396                            COMM_data_transfer
            1397                         use mod_cnst, only: &
            1398                            CNST_EPS_ZERO, &
            1399                            CNST_MAX_REAL
            1400                         use mod_oprt, only: &
            1401                            OPRT_gradient
            1402                         implicit none
            1403                     
            1404                         real(8), intent(out) :: scl     (ADM_gall   ,ADM_kall,ADM_lall   )
            1405                         real(8), intent(out) :: scl_pl  (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1406                         real(8), intent(in)  :: s       (ADM_gall   ,ADM_kall,ADM_lall   )
            1407                         real(8), intent(in)  :: s_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1408                         real(8), intent(in)  :: flx_h   (6,ADM_gall,ADM_kall,ADM_lall)
            1409                         real(8), intent(in)  :: flx_h_pl(  ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1410                         real(8), intent(in)  :: c       (6,ADM_gall,ADM_kall,ADM_lall)
            1411                         real(8), intent(in)  :: c_pl    (  ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1412                         real(8), intent(in)  :: cp      (ADM_gall,ADM_kall,ADM_lall,ADM_AI:ADM_AJ,GRD_XDIR:GRD_ZDIR)
            1413                         real(8), intent(in)  :: cp_pl   (ADM_gall_pl,ADM_kall,ADM_lall_pl,GRD_XDIR:GRD_ZDIR)
            1414                         real(8), intent(in)  :: d       (ADM_gall   ,ADM_kall,ADM_lall   )
            1415                         real(8), intent(in)  :: d_pl    (ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1416                         real(8), intent(in)  :: dt
            1417                     
            1418                         character(len=*), intent(in), optional :: limiter
            1419                         real(8),          intent(in), optional :: mfact
            1420                     
            1421                         real(8)  :: sa(ADM_AI:ADM_AJ,ADM_gall,ADM_kall,ADM_lall)
            1422                         real(8)  :: sa_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
            1423                         real(8)  :: sa_p,sa_m
            1424                     
            1425                         real(8)  :: sw(ADM_AI:ADM_AJ,ADM_gall)
            1426                     
            1427                         real(8)  :: s_in_min(6,ADM_gall,ADM_kall,ADM_lall)
            1428                         real(8)  :: s_in_min_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl,2)
            1429                         real(8)  :: s_in_max(6,ADM_gall,ADM_kall,ADM_lall)
            1430                         real(8)  :: s_in_max_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl,2)
            1431                         !
            1432                         real(8)  :: s_m1_k_min(ADM_gall)
            1433                         real(8)  :: s_m1_k_min_pl
            1434                         real(8)  :: s_m1_k_max(ADM_gall)
            1435                         real(8)  :: s_m1_k_max_pl
            1436                         real(8)  :: c_in_sum(ADM_gall)
            1437                         real(8)  :: c_in_sum_pl
            1438                         real(8)  :: c_out_sum(ADM_gall)
            1439                         real(8)  :: c_out_sum_pl
            1440                         real(8)  :: c_qin_sum_max(ADM_gall)
            1441                         real(8)  :: c_qin_sum_max_pl
            1442                         real(8)  :: c_qin_sum_min(ADM_gall)
            1443                         real(8)  :: c_qin_sum_min_pl
            1444                         !
            1445                         real(8)  :: s_m1_k_min_n
            1446                         real(8)  :: s_m1_k_max_n
            1447                         real(8)  :: c_in_sum_n
            1448                         real(8)  :: c_out_sum_n
            1449                         real(8)  :: c_qin_sum_max_n
            1450                         real(8)  :: c_qin_sum_min_n
            1451                         !
            1452                         integer :: np1(ADM_gall_pl)
            1453                         integer :: nm1(ADM_gall_pl)
            1454                         !
            1455                         real(8) :: SMALL_ZERO = 0.0d0
            1456                         !
            1457                         integer, parameter :: dsx=1
            1458                         integer, parameter :: dsy=2
            1459                         integer, parameter :: dsz=3
            1460                         integer, parameter :: s_out_k_min=4
            1461                         integer, parameter :: s_out_k_max=5
            1462                         real(8)  :: wrk(ADM_gall,ADM_kall,ADM_lall,dsx:s_out_k_max)
            1463                         real(8)  :: wrk_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl,dsx:s_out_k_max)
            1464                         !
            1465                     !    logical :: NON_NEG=.false.
            1466                         !
            1467                         integer :: l,n,k,m
            1468                         integer :: rgnid
            1469                         real(8) :: fact
            1470                         !
            1471                         integer :: nstart,nend
            1472                         integer :: nstart2,nstart3
            1473                     
            1474                         real(8) :: AI_min, AIJ_min, AJ_min
            1475                         real(8) :: AI_max, AIJ_max, AJ_max
            1476                     
            1477                         integer :: ij
            1478                         integer :: ip1j, ijp1, ip1jp1, ip2jp1
            1479                         integer :: im1j, ijm1
            1480                     
            1481                         integer :: ierr
            1482                     
            1483                         integer :: suf,i,j
            1484                         suf(i,j) = ADM_gall_1d * ((j)-1) + (i)
            1485                         !---------------------------------------------------------------------------
            1486                     
            1487     1                   if ( present(mfact) ) then
            1488     1                      fact = mfact / dt
            1489     1                   else
            1490     1                      fact = 1.D0 / dt
            1491     1                   endif
            1492                     
            1493                         nm1(ADM_gmin_pl) = ADM_gmax_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1600
                                   <<< Loop-information  End >>>
            1494     1  pp   8s          do n = ADM_gmin_pl+1, ADM_gmax_pl
            1495     1   p   8s             nm1(n) = n-1
            1496     1   p   8s          enddo
            1497                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1600
                                   <<< Loop-information  End >>>
            1498     1  pp   8s          do n = ADM_gmin_pl, ADM_gmax_pl-1
            1499     1   p   8s             np1(n) = n+1
            1500     1   p   8s          enddo
            1501                         np1(ADM_gmax_pl) = ADM_gmin_pl
            1502                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1455
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1503     1  pp    v          do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<< Loop-information  End >>>
            1504     2   p               do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<< Loop-information  End >>>
            1505     3   p               do n = 1, ADM_gall
            1506     3   p    v             scl(n,k,l) = 0.D0
            1507     3   p    v          enddo
            1508     2   p               enddo
            1509     1   p               enddo
            1510                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1455
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1511     1  pp    v          do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<< Loop-information  End >>>
            1512     2   p               do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<< Loop-information  End >>>
            1513     3   p               do n = 1, ADM_gall_pl
            1514     3   p    v             scl_pl(n,k,l) = 0.D0
            1515     3   p    v          enddo
            1516     2   p               enddo
            1517     1   p               enddo
            1518                     
            1519                         ! [Fix] 08/04/28 T.Mitsui, to avoid undefined reference in outflow limiter
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1520     1  pp               do l = 1, ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1521     2  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 552
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1522     3  pp   8v                do n = 1, ADM_gall
            1523     3   p   8v                   wrk(n,k,l,s_out_k_min) = s(n,k,l)
            1524     3   p   8v                enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1231
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1525     3  pp   8v                do n = 1, ADM_gall
            1526     3   p   8v                   wrk(n,k,l,s_out_k_max) = s(n,k,l)
            1527     3   p   8v                enddo
            1528     2   p                  enddo
            1529     1   p               enddo
            1530                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1531     1  pp               do l = 1, ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1532     2  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 552
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1533     3  pp   8v                do n = 1,ADM_gall_pl
            1534     3   p   8v                   wrk_pl(n,k,l,s_out_k_min) = s_pl(n,k,l)
            1535     3   p   8v                enddo
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1231
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1536     3  pp   8v                do n = 1,ADM_gall_pl
            1537     3   p   8v                   wrk_pl(n,k,l,s_out_k_max) = s_pl(n,k,l)
            1538     3   p   8v                enddo
            1539     2   p                  enddo
            1540     1   p               enddo
            1541                     
            1542     1                   if(present(limiter)) then
            1543     1                      if(trim(limiter)=='NON_LIM') go to 1000
            1544     1                   endif
            1545                     
            1546                         !--- calculation of inflow limiter
            1547                     !    do l = 1, ADM_lall
            1548                     !    do k = 1, ADM_kall
            1549                     !    do n = 1, ADM_gall
            1550                     !    do m = 1, 6
            1551                     !       s_in_min(m,n,k,l) = CNST_MAX_REAL
            1552                     !    enddo
            1553                     !    enddo
            1554                     !    enddo
            1555                     !    enddo
            1556                     !
            1557                     !    do l = 1, ADM_lall
            1558                     !    do k = 1, ADM_kall
            1559                     !    do n = 1, ADM_gall
            1560                     !    do m = 1, 6
            1561                     !       s_in_max(m,n,k,l) = -CNST_MAX_REAL
            1562                     !    enddo
            1563                     !    enddo
            1564                     !    enddo
            1565                     !    enddo
            1566                     
            1567     1                   do l = 1, ADM_lall
            1568     1                      rgnid = ADM_prc_tab(l,ADM_prc_me)
            1569     1               
            1570     2                      do k = 1, ADM_kall
            1571     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 889
                                   <<< Loop-information  End >>>
            1572     3  pp   6s                do n = 1, ADM_gall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    FULL UNROLLING
                                   <<< Loop-information  End >>>
            1573     4   p   fs                   do m = ADM_AI, ADM_AJ
            1574     4   p   fs                      sw(m,n) = 0.D0
            1575     4   p   fs                   enddo
            1576     3   p   6s                enddo
            1577     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 616
                                   <<< Loop-information  End >>>
            1578     3  pp   6s                do n = 1, ADM_gall
            1579     3   p   6s                   if ( c(1,n,k,l) <= 0.D0 ) sw(ADM_AI, n) = 1.D0
            1580     3   p   6s                   if ( c(2,n,k,l) <= 0.D0 ) sw(ADM_AIJ,n) = 1.D0
            1581     3   p   6s                   if ( c(3,n,k,l) <= 0.D0 ) sw(ADM_AJ, n) = 1.D0
            1582     3   p   6s                enddo
            1583     2               
            1584     2                         nstart = suf(ADM_gmin,ADM_gmin)
            1585     2                         nend   = suf(ADM_gmax,ADM_gmax)
            1586     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 55
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1587     3  pp    v                do n = nstart, nend
            1588     3   p    v                   ij     = n
            1589     3   p    v                   ip1j   = n+1
            1590     3   p    v                   ijp1   = n  +ADM_gall_1d
            1591     3   p    v                   ip1jp1 = n+1+ADM_gall_1d
            1592     3   p    v                   im1j   = n-1
            1593     3   p    v                   ijm1   = n  -ADM_gall_1d
            1594     3               
            1595     3   p    v                   AI_min  = min( s(ij,k,l), s(ip1j,k,l), s(ip1jp1,k,l), s(ijm1,k,l) )
            1596     3   p    v                   AI_max  = max( s(ij,k,l), s(ip1j,k,l), s(ip1jp1,k,l), s(ijm1,k,l) )
            1597     3   p    v                   AIJ_min = min( s(ij,k,l), s(ip1jp1,k,l), s(ip1j,k,l), s(ijp1,k,l) )
            1598     3   p    v                   AIJ_max = max( s(ij,k,l), s(ip1jp1,k,l), s(ip1j,k,l), s(ijp1,k,l) )
            1599     3   p    v                   AJ_min  = min( s(ij,k,l), s(ijp1,k,l), s(ip1jp1,k,l), s(im1j,k,l) )
            1600     3   p    v                   AJ_max  = max( s(ij,k,l), s(ijp1,k,l), s(ip1jp1,k,l), s(im1j,k,l) )
            1601     3               
            1602     3               !             if ( c(1,n,k,l) <= 0.D0 ) then
            1603     3               !                s_in_min(1,ij,  k,l) = AI_min * 1.D0 + 0.D0
            1604     3               !                s_in_max(1,ij,  k,l) = AI_max * 1.D0 + 0.D0
            1605     3               !                s_in_min(4,ip1j,k,l) = CNST_MAX_REAL * 1.D0 + 0.D0
            1606     3               !                s_in_max(4,ip1j,k,l) = -CNST_MAX_REAL * 1.D0 + 0.D0
            1607     3               !             else
            1608     3               !                s_in_min(1,ij,  k,l) = CNST_MAX_REAL * 1.D0 + 0.D0
            1609     3               !                s_in_max(1,ij,  k,l) = -CNST_MAX_REAL * 1.D0 + 0.D0
            1610     3               !                s_in_min(4,ip1j,k,l) = AI_min * 1.D0 + 0.D0
            1611     3               !                s_in_max(4,ip1j,k,l) = AI_max * 1.D0 + 0.D0
            1612     3               !             endif
            1613     3               !             if ( c(2,n,k,l) <= 0.D0 ) then
            1614     3               !                s_in_min(2,ij,    k,l) = AIJ_min * 1.D0 + 0.D0
            1615     3               !                s_in_max(2,ij,    k,l) = AIJ_max * 1.D0 + 0.D0
            1616     3               !                s_in_min(5,ip1jp1,k,l) = CNST_MAX_REAL * 1.D0 + 0.D0
            1617     3               !                s_in_max(5,ip1jp1,k,l) = -CNST_MAX_REAL * 1.D0 + 0.D0
            1618     3               !             else
            1619     3               !                s_in_min(2,ij,    k,l) = CNST_MAX_REAL * 1.D0 + 0.D0
            1620     3               !                s_in_max(2,ij,    k,l) = -CNST_MAX_REAL * 1.D0 + 0.D0
            1621     3               !                s_in_min(5,ip1jp1,k,l) = AIJ_min * 1.D0 + 0.D0
            1622     3               !                s_in_max(5,ip1jp1,k,l) = AIJ_max * 1.D0 + 0.D0
            1623     3               !             endif
            1624     3               !             if ( c(3,n,k,l) <= 0.D0 ) then
            1625     3               !                s_in_min(3,ij,  k,l) = AJ_min * 1.D0 + 0.D0
            1626     3               !                s_in_max(3,ij,  k,l) = AJ_max * 1.D0 + 0.D0
            1627     3               !                s_in_min(6,ijp1,k,l) = CNST_MAX_REAL * 1.D0 + 0.D0
            1628     3               !                s_in_max(6,ijp1,k,l) = -CNST_MAX_REAL * 1.D0 + 0.D0
            1629     3               !             else
            1630     3               !                s_in_min(3,ij,  k,l) = CNST_MAX_REAL * 1.D0 + 0.D0
            1631     3               !                s_in_max(3,ij,  k,l) = -CNST_MAX_REAL * 1.D0 + 0.D0
            1632     3               !                s_in_min(6,ijp1,k,l) = AJ_min * 1.D0 + 0.D0
            1633     3               !                s_in_max(6,ijp1,k,l) = AJ_max * 1.D0 + 0.D0
            1634     3               !             endif
            1635     3               
            1636     3   p    v                   s_in_min(1,ij,    k,l) = (        sw(ADM_AI, n) ) * AI_min        &
            1637     3                                                   + ( 1.D0 - sw(ADM_AI, n) ) * CNST_MAX_REAL
            1638     3   p    v                   s_in_min(2,ij,    k,l) = (        sw(ADM_AIJ,n) ) * AIJ_min       &
            1639     3                                                   + ( 1.D0 - sw(ADM_AIJ,n) ) * CNST_MAX_REAL
            1640     3   p    v                   s_in_min(3,ij,    k,l) = (        sw(ADM_AJ, n) ) * AJ_min        &
            1641     3                                                   + ( 1.D0 - sw(ADM_AJ, n) ) * CNST_MAX_REAL
            1642     3   p    v                   s_in_min(4,ip1j,  k,l) = (        sw(ADM_AI, n) ) * CNST_MAX_REAL &
            1643     3                                                   + ( 1.D0 - sw(ADM_AI, n) ) * AI_min
            1644     3   p    v                   s_in_min(5,ip1jp1,k,l) = (        sw(ADM_AIJ,n) ) * CNST_MAX_REAL &
            1645     3                                                   + ( 1.D0 - sw(ADM_AIJ,n) ) * AIJ_min
            1646     3   p    v                   s_in_min(6,ijp1,  k,l) = (        sw(ADM_AJ, n) ) * CNST_MAX_REAL &
            1647     3                                                   + ( 1.D0 - sw(ADM_AJ, n) ) * AJ_min
            1648     3               
            1649     3   p    v                   s_in_max(1,ij,    k,l) = (        sw(ADM_AI, n) ) * AI_max         &
            1650     3                                                   + ( 1.D0 - sw(ADM_AI, n) ) * (-CNST_MAX_REAL)
            1651     3   p    v                   s_in_max(2,ij,    k,l) = (        sw(ADM_AIJ,n) ) * AIJ_max        &
            1652     3                                                   + ( 1.D0 - sw(ADM_AIJ,n) ) * (-CNST_MAX_REAL)
            1653     3   p    v                   s_in_max(3,ij,    k,l) = (        sw(ADM_AJ, n) ) * AJ_max         &
            1654     3                                                   + ( 1.D0 - sw(ADM_AJ, n) ) * (-CNST_MAX_REAL)
            1655     3   p    v                   s_in_max(4,ip1j,  k,l) = (        sw(ADM_AI, n) ) * (-CNST_MAX_REAL) &
            1656     3                                                   + ( 1.D0 - sw(ADM_AI, n) ) * AI_max
            1657     3   p    v                   s_in_max(5,ip1jp1,k,l) = (        sw(ADM_AIJ,n) ) * (-CNST_MAX_REAL) &
            1658     3                                                   + ( 1.D0 - sw(ADM_AIJ,n) ) * AIJ_max
            1659     3   p    v                   s_in_max(6,ijp1,  k,l) = (        sw(ADM_AJ, n) ) * (-CNST_MAX_REAL) &
            1660     3                                                   + ( 1.D0 - sw(ADM_AJ, n) ) * AJ_max
            1661     3   p    v                enddo
            1662     2               
            1663     2                         nstart = suf(ADM_gmin-1,ADM_gmin  )
            1664     2                         nend   = suf(ADM_gmin-1,ADM_gmin  )
            1665     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 136
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1666     3  pp   2v                do n = nstart, nend
            1667     3   p   2v                   ij     = n
            1668     3   p   2v                   ip1j   = n+1
            1669     3   p   2v                   ip1jp1 = n+1+ADM_gall_1d
            1670     3   p   2v                   ijm1   = n  -ADM_gall_1d
            1671     3               
            1672     3   p   2v                   AI_min  = min( s(ij,k,l), s(ip1j,k,l), s(ip1jp1,k,l), s(ijm1,k,l) )
            1673     3   p   2v                   AI_max  = max( s(ij,k,l), s(ip1j,k,l), s(ip1jp1,k,l), s(ijm1,k,l) )
            1674     3               
            1675     3   p   2v                   s_in_min(1,ij,    k,l) = (        sw(ADM_AI, n) ) * AI_min        &
            1676     3                                                   + ( 1.D0 - sw(ADM_AI, n) ) * CNST_MAX_REAL
            1677     3   p   2v                   s_in_min(4,ip1j,  k,l) = (        sw(ADM_AI, n) ) * CNST_MAX_REAL &
            1678     3                                                   + ( 1.D0 - sw(ADM_AI, n) ) * AI_min
            1679     3               
            1680     3   p   2v                   s_in_max(1,ij,    k,l) = (        sw(ADM_AI, n) ) * AI_max         &
            1681     3                                                   + ( 1.D0 - sw(ADM_AI, n) ) * (-CNST_MAX_REAL)
            1682     3   p   2v                   s_in_max(4,ip1j,  k,l) = (        sw(ADM_AI, n) ) * (-CNST_MAX_REAL) &
            1683     3                                                   + ( 1.D0 - sw(ADM_AI, n) ) * AI_max
            1684     3               
            1685     3               !             if ( c(1,n,k,l) <= 0.D0 ) then
            1686     3               !                s_in_min(1,ij,  k,l) = min( s(ij,k,l), s(ip1j,k,l), s(ip1jp1,k,l), s(ijm1,k,l) )
            1687     3               !                s_in_max(1,ij,  k,l) = max( s(ij,k,l), s(ip1j,k,l), s(ip1jp1,k,l), s(ijm1,k,l) )
            1688     3               !             else
            1689     3               !                s_in_min(4,ip1j,k,l) = min( s(ij,k,l), s(ip1j,k,l), s(ip1jp1,k,l), s(ijm1,k,l) )
            1690     3               !                s_in_max(4,ip1j,k,l) = max( s(ij,k,l), s(ip1j,k,l), s(ip1jp1,k,l), s(ijm1,k,l) )
            1691     3               !             endif
            1692     3   p   2v                enddo
            1693     2               
            1694     2                         nstart = suf(ADM_gmin-1,ADM_gmin-1)
            1695     2                         nend   = suf(ADM_gmin-1,ADM_gmin  )
            1696     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 136
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1697     3  pp   2v                do n = nstart, nend
            1698     3   p   2v                   ij     = n
            1699     3   p   2v                   ip1j   = n+1
            1700     3   p   2v                   ip1jp1 = n+1+ADM_gall_1d
            1701     3   p   2v                   ijp1   = n  +ADM_gall_1d
            1702     3               
            1703     3   p   2v                   AIJ_min = min( s(ij,k,l), s(ip1jp1,k,l), s(ip1j,k,l), s(ijp1,k,l) )
            1704     3   p   2v                   AIJ_max = max( s(ij,k,l), s(ip1jp1,k,l), s(ip1j,k,l), s(ijp1,k,l) )
            1705     3               
            1706     3   p   2v                   s_in_min(2,ij,    k,l) = (        sw(ADM_AIJ,n) ) * AIJ_min       &
            1707     3                                                   + ( 1.D0 - sw(ADM_AIJ,n) ) * CNST_MAX_REAL
            1708     3   p   2v                   s_in_min(5,ip1jp1,k,l) = (        sw(ADM_AIJ,n) ) * CNST_MAX_REAL &
            1709     3                                                   + ( 1.D0 - sw(ADM_AIJ,n) ) * AIJ_min
            1710     3   p   2v                   s_in_max(2,ij,    k,l) = (        sw(ADM_AIJ,n) ) * AIJ_max        &
            1711     3                                                   + ( 1.D0 - sw(ADM_AIJ,n) ) * (-CNST_MAX_REAL)
            1712     3   p   2v                   s_in_max(5,ip1jp1,k,l) = (        sw(ADM_AIJ,n) ) * (-CNST_MAX_REAL) &
            1713     3                                                   + ( 1.D0 - sw(ADM_AIJ,n) ) * AIJ_max
            1714     3               
            1715     3               !             if ( c(2,n,k,l) <= 0.D0 ) then
            1716     3               !                s_in_min(2,ij,    k,l) = min( s(ij,k,l), s(ip1jp1,k,l), s(ip1j,k,l), s(ijp1,k,l) )
            1717     3               !                s_in_max(2,ij,    k,l) = max( s(ij,k,l), s(ip1jp1,k,l), s(ip1j,k,l), s(ijp1,k,l) )
            1718     3               !             else
            1719     3               !                s_in_min(5,ip1jp1,k,l) = min( s(ij,k,l), s(ip1jp1,k,l), s(ip1j,k,l), s(ijp1,k,l) )
            1720     3               !                s_in_max(5,ip1jp1,k,l) = max( s(ij,k,l), s(ip1jp1,k,l), s(ip1j,k,l), s(ijp1,k,l) )
            1721     3               !             endif
            1722     3   p   2v                enddo
            1723     2               
            1724     2                         nstart = suf(ADM_gmin,  ADM_gmin-1)
            1725     2                         nend   = suf(ADM_gmin-1,ADM_gmin  )
            1726     2               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 136
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1727     3  pp   2v                do n = nstart, nend
            1728     3   p   2v                   ij     = n
            1729     3   p   2v                   ip1jp1 = n+1+ADM_gall_1d
            1730     3   p   2v                   ijp1   = n  +ADM_gall_1d
            1731     3   p   2v                   im1j   = n-1
            1732     3               
            1733     3   p   2v                   AJ_min  = min( s(ij,k,l), s(ijp1,k,l), s(ip1jp1,k,l), s(im1j,k,l) )
            1734     3   p   2v                   AJ_max  = max( s(ij,k,l), s(ijp1,k,l), s(ip1jp1,k,l), s(im1j,k,l) )
            1735     3               
            1736     3   p   2v                   s_in_min(3,ij,    k,l) = (        sw(ADM_AJ, n) ) * AJ_min        &
            1737     3                                                   + ( 1.D0 - sw(ADM_AJ, n) ) * CNST_MAX_REAL
            1738     3   p   2v                   s_in_min(6,ijp1,  k,l) = (        sw(ADM_AJ, n) ) * CNST_MAX_REAL &
            1739     3                                                   + ( 1.D0 - sw(ADM_AJ, n) ) * AJ_min
            1740     3   p   2v                   s_in_max(3,ij,    k,l) = (        sw(ADM_AJ, n) ) * AJ_max         &
            1741     3                                                   + ( 1.D0 - sw(ADM_AJ, n) ) * (-CNST_MAX_REAL)
            1742     3   p   2v                   s_in_max(6,ijp1,  k,l) = (        sw(ADM_AJ, n) ) * (-CNST_MAX_REAL) &
            1743     3                                                   + ( 1.D0 - sw(ADM_AJ, n) ) * AJ_max
            1744     3               
            1745     3               !             if ( c(3,n,k,l) <= 0.D0 ) then
            1746     3               !                s_in_min(3,ij,  k,l) = min( s(ij,k,l), s(ijp1,k,l), s(ip1jp1,k,l), s(im1j,k,l) )
            1747     3               !                s_in_max(3,ij,  k,l) = max( s(ij,k,l), s(ijp1,k,l), s(ip1jp1,k,l), s(im1j,k,l) )
            1748     3               !             else
            1749     3               !                s_in_min(6,ijp1,k,l) = min( s(ij,k,l), s(ijp1,k,l), s(ip1jp1,k,l), s(im1j,k,l) )
            1750     3               !                s_in_max(6,ijp1,k,l) = max( s(ij,k,l), s(ijp1,k,l), s(ip1jp1,k,l), s(im1j,k,l) )
            1751     3               !             endif
            1752     3   p   2v                enddo
            1753     2               
            1754     3                         if ( ADM_rgn_vnum(ADM_W,rgnid) == 3 ) then
            1755     3                            n = suf(ADM_gmin-1,ADM_gmin-1)
            1756     3                            ij     = n
            1757     3                            ip1jp1 = n+1+ADM_gall_1d
            1758     3                            ip2jp1 = n+2+ADM_gall_1d
            1759     3                            ijp1   = n  +ADM_gall_1d
            1760     3               
            1761     3                            AIJ_min = min( s(ij,k,l), s(ip1jp1,k,l), s(ip2jp1,k,l), s(ijp1,k,l) )
            1762     3                            AIJ_max = max( s(ij,k,l), s(ip1jp1,k,l), s(ip2jp1,k,l), s(ijp1,k,l) )
            1763     3               
            1764     3                            s_in_min(2,ij,    k,l) = (        sw(ADM_AIJ,n) ) * AIJ_min       &
            1765     3                                                   + ( 1.D0 - sw(ADM_AIJ,n) ) * CNST_MAX_REAL
            1766     3                            s_in_min(5,ip1jp1,k,l) = (        sw(ADM_AIJ,n) ) * CNST_MAX_REAL &
            1767     3                                                   + ( 1.D0 - sw(ADM_AIJ,n) ) * AIJ_min
            1768     3                            s_in_max(2,ij,    k,l) = (        sw(ADM_AIJ,n) ) * AIJ_max        &
            1769     3                                                   + ( 1.D0 - sw(ADM_AIJ,n) ) * (-CNST_MAX_REAL)
            1770     3                            s_in_max(5,ip1jp1,k,l) = (        sw(ADM_AIJ,n) ) * (-CNST_MAX_REAL) &
            1771     3                                                   + ( 1.D0 - sw(ADM_AIJ,n) ) * AIJ_max
            1772     3               
            1773     3               !             if ( c(2,n,k,l) <= 0.D0 ) then
            1774     3               !                s_in_min(2,ij,    k,l) = min( s(ij,k,l), s(ip1jp1,k,l), s(ip2jp1,k,l), s(ijp1,k,l) )
            1775     3               !                s_in_max(2,ij,    k,l) = max( s(ij,k,l), s(ip1jp1,k,l), s(ip2jp1,k,l), s(ijp1,k,l) )
            1776     3               !             else
            1777     3               !                s_in_min(5,ip1jp1,k,l) = min( s(ij,k,l), s(ip1jp1,k,l), s(ip2jp1,k,l), s(ijp1,k,l) )
            1778     3               !                s_in_max(5,ip1jp1,k,l) = max( s(ij,k,l), s(ip1jp1,k,l), s(ip2jp1,k,l), s(ijp1,k,l) )
            1779     3               !             endif
            1780     3                         endif
            1781     2               
            1782     2                      enddo
            1783     1                   enddo
            1784                     
            1785     1                   if(ADM_prc_me==ADM_prc_pl) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1786     2  pp                  do l=1,ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1787     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1788     3  pp   8v                   s_in_min_pl(:,k,l,:) = CNST_MAX_REAL
            1789     3   p   8v                   s_in_max_pl(:,k,l,:) =-CNST_MAX_REAL
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 97
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 72
                                   <<<      np1: 24, s_in_min_pl: 24
                                   <<<      s_in_max_pl: 24
                                   <<< Loop-information  End >>>
            1790     4  pp   2s                   do n=ADM_gmin_pl,ADM_gmax_pl
            1791     5   p   2s                      if(c_pl(n,k,l)<=0.0D0) then
            1792     5   p   2s                         s_in_min_pl(n,k,l,1) = min(s_pl(ADM_gslf_pl,k,l),s_pl(n,k,l),s_pl(nm1(n),k,l),s_pl(np1(n),k,l))
            1793     5   p   2s                         s_in_max_pl(n,k,l,1) = max(s_pl(ADM_gslf_pl,k,l),s_pl(n,k,l),s_pl(nm1(n),k,l),s_pl(np1(n),k,l))
            1794     5   p   2s                      else
            1795     5   p   2s                         s_in_min_pl(n,k,l,2) = min(s_pl(ADM_gslf_pl,k,l),s_pl(n,k,l),s_pl(nm1(n),k,l),s_pl(np1(n),k,l))
            1796     5   p   2s                         s_in_max_pl(n,k,l,2) = max(s_pl(ADM_gslf_pl,k,l),s_pl(n,k,l),s_pl(nm1(n),k,l),s_pl(np1(n),k,l))
            1797     5   p   2s                      end if
            1798     4   p   2s                   enddo
            1799     3               
            1800     3   p                     enddo
            1801     2                         !
            1802     2   p                  enddo
            1803     1                      !
            1804     1                   end if
            1805                         !
            1806                         !--- calcluation outflow limiter
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1807     1  pp               do l=1,ADM_lall
            1808     1   p                  rgnid=ADM_prc_tab(l,ADM_prc_me)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1809     2  pp                  do k = 1, ADM_kall
            1810     2   p                  nstart = suf(ADM_gmin, ADM_gmin )
            1811     2   p                  nend  = suf(ADM_gmax ,ADM_gmax )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 46
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 18
                                   <<<      s: 12, d: 6
                                   <<< Loop-information  End >>>
            1812     3  pp    s             do n = nstart,nend
            1813     3   p    v                s_m1_k_min_n = min(s_in_min(1,n,k,l),s_in_min(2,n,k,l),s_in_min(3,n,k,l),&
            1814     3                                            s_in_min(4,n,k,l),s_in_min(5,n,k,l),s_in_min(6,n,k,l))
            1815     3   p    s                if(s_m1_k_min_n==CNST_MAX_REAL) s_m1_k_min_n = s(n,k,l)
            1816     3   p    v                s_m1_k_max_n = max(s_in_max(1,n,k,l),s_in_max(2,n,k,l),s_in_max(3,n,k,l),&
            1817     3                                            s_in_max(4,n,k,l),s_in_max(5,n,k,l),s_in_max(6,n,k,l))
            1818     3   p    s                if(s_m1_k_max_n==-CNST_MAX_REAL) s_m1_k_max_n = s(n,k,l)
            1819     3               
            1820     3   p    v                c_in_sum_n &
            1821     3                           = (0.5D0-sign(0.5D0,c(1,n,k,l)))*c(1,n,k,l)&
            1822     3                           + (0.5D0-sign(0.5D0,c(2,n,k,l)))*c(2,n,k,l)&
            1823     3                           + (0.5D0-sign(0.5D0,c(3,n,k,l)))*c(3,n,k,l)&
            1824     3                           + (0.5D0-sign(0.5D0,c(4,n,k,l)))*c(4,n,k,l)&
            1825     3                           + (0.5D0-sign(0.5D0,c(5,n,k,l)))*c(5,n,k,l)&
            1826     3                           + (0.5D0-sign(0.5D0,c(6,n,k,l)))*c(6,n,k,l)
            1827     3               
            1828     3   p    v                c_out_sum_n &
            1829     3                           = (0.5D0+sign(0.5D0,c(1,n,k,l)))*c(1,n,k,l)&
            1830     3                           + (0.5D0+sign(0.5D0,c(2,n,k,l)))*c(2,n,k,l)&
            1831     3                           + (0.5D0+sign(0.5D0,c(3,n,k,l)))*c(3,n,k,l)&
            1832     3                           + (0.5D0+sign(0.5D0,c(4,n,k,l)))*c(4,n,k,l)&
            1833     3                           + (0.5D0+sign(0.5D0,c(5,n,k,l)))*c(5,n,k,l)&
            1834     3                           + (0.5D0+sign(0.5D0,c(6,n,k,l)))*c(6,n,k,l)
            1835     3               
            1836     3   p    v                c_qin_sum_max_n &
            1837     3                           = (0.5D0-sign(0.5D0,c(1,n,k,l)))*(c(1,n,k,l)*s_in_max(1,n,k,l))&
            1838     3                           + (0.5D0-sign(0.5D0,c(2,n,k,l)))*(c(2,n,k,l)*s_in_max(2,n,k,l))&
            1839     3                           + (0.5D0-sign(0.5D0,c(3,n,k,l)))*(c(3,n,k,l)*s_in_max(3,n,k,l))&
            1840     3                           + (0.5D0-sign(0.5D0,c(4,n,k,l)))*(c(4,n,k,l)*s_in_max(4,n,k,l))&
            1841     3                           + (0.5D0-sign(0.5D0,c(5,n,k,l)))*(c(5,n,k,l)*s_in_max(5,n,k,l))&
            1842     3                           + (0.5D0-sign(0.5D0,c(6,n,k,l)))*(c(6,n,k,l)*s_in_max(6,n,k,l))
            1843     3               
            1844     3   p    v                c_qin_sum_min_n &
            1845     3                           = (0.5D0-sign(0.5D0,c(1,n,k,l)))*(c(1,n,k,l)*s_in_min(1,n,k,l))&
            1846     3                           + (0.5D0-sign(0.5D0,c(2,n,k,l)))*(c(2,n,k,l)*s_in_min(2,n,k,l))&
            1847     3                           + (0.5D0-sign(0.5D0,c(3,n,k,l)))*(c(3,n,k,l)*s_in_min(3,n,k,l))&
            1848     3                           + (0.5D0-sign(0.5D0,c(4,n,k,l)))*(c(4,n,k,l)*s_in_min(4,n,k,l))&
            1849     3                           + (0.5D0-sign(0.5D0,c(5,n,k,l)))*(c(5,n,k,l)*s_in_min(5,n,k,l))&
            1850     3                           + (0.5D0-sign(0.5D0,c(6,n,k,l)))*(c(6,n,k,l)*s_in_min(6,n,k,l))
            1851     3               
            1852     4   p    m                if(abs(c_out_sum_n)<CNST_EPS_ZERO) then
            1853     4   p    s                  wrk(n,k,l,s_out_k_min) = s(n,k,l)
            1854     4   p    s                  wrk(n,k,l,s_out_k_max) = s(n,k,l)
            1855     4   p    s                else
            1856     4   p    s                  wrk(n,k,l,s_out_k_min) = ( &
            1857     4                             s(n,k,l)-c_qin_sum_max_n&
            1858     4                             -s_m1_k_max_n*(1.0D0-c_in_sum_n-c_out_sum_n+d(n,k,l)) &
            1859     4                             )/c_out_sum_n
            1860     4   p    s                  wrk(n,k,l,s_out_k_max) = ( &
            1861     4                             s(n,k,l)-c_qin_sum_min_n&
            1862     4                             -s_m1_k_min_n*(1.0D0-c_in_sum_n-c_out_sum_n+d(n,k,l)) &
            1863     4                             )/c_out_sum_n
            1864     4   p    v                end if
            1865     3   p    v             enddo !N
            1866     2   p               enddo !K
            1867     1   p               enddo !L
            1868                         !
            1869     1                   if(ADM_prc_me==ADM_prc_pl) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1870     2  pp                  do l=1,ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 57
                                   <<< Loop-information  End >>>
            1871     3  pp    s                do k = 1, ADM_kall
            1872     3   p    v                   s_m1_k_min_pl &
            1873     3                                 = min(s_in_min_pl(ADM_gmin_pl,k,l,1),s_in_min_pl(ADM_gmin_pl+1,k,l,1),&
            1874     3                                 s_in_min_pl(ADM_gmin_pl+2,k,l,1),s_in_min_pl(ADM_gmin_pl+3,k,l,1),s_in_min_pl(ADM_gmin_pl+4,k,l,1))
            1875     3   p    s                   if(s_m1_k_min_pl== CNST_MAX_REAL) s_m1_k_min_pl=s_pl(ADM_gslf_pl,k,l)
            1876     3                            !          s_m1_k_min_pl = max(SMALL_ZERO,s_m1_k_min_pl)
            1877     3   p    v                   s_m1_k_max_pl &
            1878     3                                 = max(s_in_min_pl(ADM_gmin_pl,k,l,1),s_in_min_pl(ADM_gmin_pl+1,k,l,1),&
            1879     3                                 s_in_min_pl(ADM_gmin_pl+2,k,l,1),s_in_min_pl(ADM_gmin_pl+3,k,l,1),s_in_min_pl(ADM_gmin_pl+4,k,l,1))
            1880     3   p    s                   if(s_m1_k_max_pl==-CNST_MAX_REAL) s_m1_k_max_pl=s_pl(ADM_gslf_pl,k,l)
            1881     3                            !
            1882     3   p    v                   c_in_sum_pl &
            1883     3                                 = (0.5D0-sign(0.5D0,c_pl(ADM_gmin_pl  ,k,l)))*c_pl(ADM_gmin_pl  ,k,l)&
            1884     3                                 + (0.5D0-sign(0.5D0,c_pl(ADM_gmin_pl+1,k,l)))*c_pl(ADM_gmin_pl+1,k,l)&
            1885     3                                 + (0.5D0-sign(0.5D0,c_pl(ADM_gmin_pl+2,k,l)))*c_pl(ADM_gmin_pl+2,k,l)&
            1886     3                                 + (0.5D0-sign(0.5D0,c_pl(ADM_gmin_pl+3,k,l)))*c_pl(ADM_gmin_pl+3,k,l)&
            1887     3                                 + (0.5D0-sign(0.5D0,c_pl(ADM_gmin_pl+4,k,l)))*c_pl(ADM_gmin_pl+4,k,l)
            1888     3   p    v                   c_out_sum_pl &
            1889     3                                 = (0.5D0+sign(0.5D0,c_pl(ADM_gmin_pl  ,k,l)))*c_pl(ADM_gmin_pl  ,k,l)&
            1890     3                                 + (0.5D0+sign(0.5D0,c_pl(ADM_gmin_pl+1,k,l)))*c_pl(ADM_gmin_pl+1,k,l)&
            1891     3                                 + (0.5D0+sign(0.5D0,c_pl(ADM_gmin_pl+2,k,l)))*c_pl(ADM_gmin_pl+2,k,l)&
            1892     3                                 + (0.5D0+sign(0.5D0,c_pl(ADM_gmin_pl+3,k,l)))*c_pl(ADM_gmin_pl+3,k,l)&
            1893     3                                 + (0.5D0+sign(0.5D0,c_pl(ADM_gmin_pl+4,k,l)))*c_pl(ADM_gmin_pl+4,k,l)
            1894     3   p    v                   c_qin_sum_max_pl &
            1895     3                                 = (0.5D0-sign(0.5D0,c_pl(ADM_gmin_pl  ,k,l)))*(c_pl(ADM_gmin_pl  ,k,l)*s_in_max_pl(ADM_gmin_pl  ,k,l,1))&
            1896     3                                 + (0.5D0-sign(0.5D0,c_pl(ADM_gmin_pl+1,k,l)))*(c_pl(ADM_gmin_pl+1,k,l)*s_in_max_pl(ADM_gmin_pl+1,k,l,1))&
            1897     3                                 + (0.5D0-sign(0.5D0,c_pl(ADM_gmin_pl+2,k,l)))*(c_pl(ADM_gmin_pl+2,k,l)*s_in_max_pl(ADM_gmin_pl+2,k,l,1))&
            1898     3                                 + (0.5D0-sign(0.5D0,c_pl(ADM_gmin_pl+3,k,l)))*(c_pl(ADM_gmin_pl+3,k,l)*s_in_max_pl(ADM_gmin_pl+3,k,l,1))&
            1899     3                                 + (0.5D0-sign(0.5D0,c_pl(ADM_gmin_pl+4,k,l)))*(c_pl(ADM_gmin_pl+4,k,l)*s_in_max_pl(ADM_gmin_pl+4,k,l,1))
            1900     3   p    v                   c_qin_sum_min_pl &
            1901     3                                 = (0.5D0-sign(0.5D0,c_pl(ADM_gmin_pl  ,k,l)))*(c_pl(ADM_gmin_pl  ,k,l)*s_in_min_pl(ADM_gmin_pl  ,k,l,1))&
            1902     3                                 + (0.5D0-sign(0.5D0,c_pl(ADM_gmin_pl+1,k,l)))*(c_pl(ADM_gmin_pl+1,k,l)*s_in_min_pl(ADM_gmin_pl+1,k,l,1))&
            1903     3                                 + (0.5D0-sign(0.5D0,c_pl(ADM_gmin_pl+2,k,l)))*(c_pl(ADM_gmin_pl+2,k,l)*s_in_min_pl(ADM_gmin_pl+2,k,l,1))&
            1904     3                                 + (0.5D0-sign(0.5D0,c_pl(ADM_gmin_pl+3,k,l)))*(c_pl(ADM_gmin_pl+3,k,l)*s_in_min_pl(ADM_gmin_pl+3,k,l,1))&
            1905     3                                 + (0.5D0-sign(0.5D0,c_pl(ADM_gmin_pl+4,k,l)))*(c_pl(ADM_gmin_pl+4,k,l)*s_in_min_pl(ADM_gmin_pl+4,k,l,1))
            1906     3                            !
            1907     4   p    m                   if(abs(c_out_sum_pl)<CNST_EPS_ZERO) then
            1908     4   p    s                      wrk_pl(ADM_gslf_pl,k,l,s_out_k_min) = s_pl(ADM_gslf_pl,k,l)
            1909     4   p    s                      wrk_pl(ADM_gslf_pl,k,l,s_out_k_max) = s_pl(ADM_gslf_pl,k,l)
            1910     4   p    s                   else
            1911     4   p    s                      wrk_pl(ADM_gslf_pl,k,l,s_out_k_min) = ( &
            1912     4                                    s_pl(ADM_gslf_pl,k,l)-c_qin_sum_max_pl&
            1913     4                                    -s_m1_k_max_pl*(1.0D0-c_in_sum_pl-c_out_sum_pl+d_pl(ADM_gslf_pl,k,l)) &
            1914     4                                    )/c_out_sum_pl
            1915     4   p    s                      wrk_pl(ADM_gslf_pl,k,l,s_out_k_max) = ( &
            1916     4                                    s_pl(ADM_gslf_pl,k,l)-c_qin_sum_min_pl&
            1917     4                                    -s_m1_k_min_pl*(1.0D0-c_in_sum_pl-c_out_sum_pl+d_pl(ADM_gslf_pl,k,l)) &
            1918     4                                    )/c_out_sum_pl
            1919     4   p    v                   end if
            1920     3   p    v                enddo
            1921     2   p                  enddo
            1922     1                   endif
            1923                         !
            1924                         !
            1925                     1000 continue
            1926                         !
            1927                         !--- H.Tomita 090414
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1928     1  pp               do l=1,ADM_lall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 3
                                   <<< Loop-information  End >>>
            1929     2  pp                 do k=1,ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 517
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1930     3  pp   8v              do n=1,ADM_gall
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    FULL UNROLLING
                                   <<< Loop-information  End >>>
            1931     3   p  24v                wrk(n,k,l,dsx:dsz)=0.0D0
            1932     3   p   8v              enddo
            1933     2   p                 enddo
            1934     1   p               enddo
            1935                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1936     1  pp               do l=1,ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 3
                                   <<< Loop-information  End >>>
            1937     2  pp                 do k=1,ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 517
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
            1938     3  pp   8v              do n=1,ADM_gall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    FULL UNROLLING
                                   <<< Loop-information  End >>>
            1939     3   p  24v                wrk_pl(n,k,l,dsx:dsz)=0.0D0
            1940     3   p   8v              enddo
            1941     2   p                 enddo
            1942     1   p               enddo
            1943                     
            1944                         call OPRT_gradient(                    &
            1945                              wrk(:,:,:,dsx), wrk_pl(:,:,:,dsx),&
            1946                              wrk(:,:,:,dsy), wrk_pl(:,:,:,dsy),&
            1947                              wrk(:,:,:,dsz), wrk_pl(:,:,:,dsz),&
            1948                              s, s_pl )
            1949                     
            1950                         call COMM_data_transfer(wrk,wrk_pl)
            1951                     
            1952                         !--- basic scheme
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            1953     1  pp               do l=1,ADM_lall
            1954     1   p                  rgnid=ADM_prc_tab(l,ADM_prc_me)
            1955     1                      !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 264
                                   <<<      GRD_x: 48, s: 36, cp: 72, wrk: 96
                                   <<<      sa: 12
                                   <<< Loop-information  End >>>
            1956     2  pp                  do k = 1, ADM_kall
            1957     2   p                   nstart = suf(ADM_gmin-1,ADM_gmin-1 )
            1958     2   p                   nend  = suf(ADM_gmax, ADM_gmax )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 46
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH       : 138
                                   <<<      GRD_x: 24, wrk: 48, s: 18, cp: 36
                                   <<<      sa: 12
                                   <<< Loop-information  End >>>
            1959     3  pp    v              do n = nstart, nend
            1960     3   p    v                sa_p = s(n,k,l)  &
            1961     3                           +wrk(n,k,l,dsx)*(cp(n,k,l,ADM_AI,GRD_XDIR)-GRD_x(n,ADM_KNONE,l,GRD_XDIR)) &
            1962     3                           +wrk(n,k,l,dsy)*(cp(n,k,l,ADM_AI,GRD_YDIR)-GRD_x(n,ADM_KNONE,l,GRD_YDIR)) &
            1963     3                           +wrk(n,k,l,dsz)*(cp(n,k,l,ADM_AI,GRD_ZDIR)-GRD_x(n,ADM_KNONE,l,GRD_ZDIR))
            1964     3   p    v                sa_m = s(n+1,k,l) &
            1965     3                           +wrk(n+1,k,l,dsx)*(cp(n,k,l,ADM_AI,GRD_XDIR)-GRD_x(n+1,ADM_KNONE,l,GRD_XDIR)) &
            1966     3                           +wrk(n+1,k,l,dsy)*(cp(n,k,l,ADM_AI,GRD_YDIR)-GRD_x(n+1,ADM_KNONE,l,GRD_YDIR)) &
            1967     3                           +wrk(n+1,k,l,dsz)*(cp(n,k,l,ADM_AI,GRD_ZDIR)-GRD_x(n+1,ADM_KNONE,l,GRD_ZDIR))
            1968     3   p    v                sa(ADM_AI,n,k,l) &
            1969     3                           =(0.5D0+sign(0.5D0,c(1,n,k,l)))*sa_p+(0.5D0-sign(0.5D0,c(1,n,k,l)))*sa_m
            1970     3               
            1971     3   p    v                sa_p = s(n,k,l) &
            1972     3                           +wrk(n,k,l,dsx)*(cp(n,k,l,ADM_AIJ,GRD_XDIR)-GRD_x(n,ADM_KNONE,l,GRD_XDIR)) &
            1973     3                           +wrk(n,k,l,dsy)*(cp(n,k,l,ADM_AIJ,GRD_YDIR)-GRD_x(n,ADM_KNONE,l,GRD_YDIR)) &
            1974     3                           +wrk(n,k,l,dsz)*(cp(n,k,l,ADM_AIJ,GRD_ZDIR)-GRD_x(n,ADM_KNONE,l,GRD_ZDIR))
            1975     3   p    v                sa_m = s(n+1+ADM_gall_1d,k,l) &
            1976     3                           +wrk(n+1+ADM_gall_1d,k,l,dsx)*(cp(n,k,l,ADM_AIJ,GRD_XDIR)- &
            1977     3                           GRD_x(n+1+ADM_gall_1d,ADM_KNONE,l,GRD_XDIR)) &
            1978     3                           +wrk(n+1+ADM_gall_1d,k,l,dsy)*(cp(n,k,l,ADM_AIJ,GRD_YDIR)- &
            1979     3                           GRD_x(n+1+ADM_gall_1d,ADM_KNONE,l,GRD_YDIR)) &
            1980     3                           +wrk(n+1+ADM_gall_1d,k,l,dsz)*(cp(n,k,l,ADM_AIJ,GRD_ZDIR)- &
            1981     3                           GRD_x(n+1+ADM_gall_1d,ADM_KNONE,l,GRD_ZDIR))
            1982     3   p    v                sa(ADM_AIJ,n,k,l) &
            1983     3                           =(0.5D0+sign(0.5D0,c(2,n,k,l)))*sa_p+(0.5D0-sign(0.5D0,c(2,n,k,l)))*sa_m
            1984     3               
            1985     3   p    v                sa_p = s(n,k,l) &
            1986     3                           +wrk(n,k,l,dsx)*(cp(n,k,l,ADM_AJ,GRD_XDIR)-GRD_x(n,ADM_KNONE,l,GRD_XDIR)) &
            1987     3                           +wrk(n,k,l,dsy)*(cp(n,k,l,ADM_AJ,GRD_YDIR)-GRD_x(n,ADM_KNONE,l,GRD_YDIR)) &
            1988     3                           +wrk(n,k,l,dsz)*(cp(n,k,l,ADM_AJ,GRD_ZDIR)-GRD_x(n,ADM_KNONE,l,GRD_ZDIR))
            1989     3   p    v                sa_m = s(n+ADM_gall_1d,k,l) &
            1990     3                           +wrk(n+ADM_gall_1d,k,l,dsx)*(cp(n,k,l,ADM_AJ,GRD_XDIR)- &
            1991     3                           GRD_x(n+ADM_gall_1d,ADM_KNONE,l,GRD_XDIR)) &
            1992     3                           +wrk(n+ADM_gall_1d,k,l,dsy)*(cp(n,k,l,ADM_AJ,GRD_YDIR)- GRD_x(n+ADM_gall_1d,ADM_KNONE,l,GRD_YDIR)) &
            1993     3                           +wrk(n+ADM_gall_1d,k,l,dsz)*(cp(n,k,l,ADM_AJ,GRD_ZDIR)- GRD_x(n+ADM_gall_1d,ADM_KNONE,l,GRD_ZDIR))
            1994     3   p    v                sa(ADM_AJ,n,k,l) &
            1995     3                           =(0.5D0+sign(0.5D0,c(3,n,k,l)))*sa_p+(0.5D0-sign(0.5D0,c(3,n,k,l)))*sa_m
            1996     3   p    v              enddo !N
            1997     2   p                 enddo !K
            1998     1   p               enddo !L
            1999                         !
            2000     1                   if(ADM_prc_me==ADM_prc_pl) then
            2001     1                      !
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2002     2  pp                  do l=1,ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2003     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 99
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2004     4  pp   4v                   do n=ADM_gmin_pl,ADM_gmax_pl
            2005     4   p   4v                      sa_p = s_pl(ADM_gslf_pl,k,l) &
            2006     4                                    +wrk_pl(ADM_gslf_pl,k,l,dsx)*(cp_pl(n,k,l,GRD_XDIR)-GRD_x_pl(ADM_gslf_pl,ADM_KNONE,l,GRD_XDIR)) &
            2007     4                                    +wrk_pl(ADM_gslf_pl,k,l,dsy)*(cp_pl(n,k,l,GRD_YDIR)-GRD_x_pl(ADM_gslf_pl,ADM_KNONE,l,GRD_YDIR)) &
            2008     4                                    +wrk_pl(ADM_gslf_pl,k,l,dsz)*(cp_pl(n,k,l,GRD_ZDIR)-GRD_x_pl(ADM_gslf_pl,ADM_KNONE,l,GRD_ZDIR))
            2009     4   p   4v                      sa_m = s_pl(n,k,l) &
            2010     4                                    +wrk_pl(n,k,l,dsx)*(cp_pl(n,k,l,GRD_XDIR)-GRD_x_pl(n,ADM_KNONE,l,GRD_XDIR)) &
            2011     4                                    +wrk_pl(n,k,l,dsy)*(cp_pl(n,k,l,GRD_YDIR)-GRD_x_pl(n,ADM_KNONE,l,GRD_YDIR)) &
            2012     4                                    +wrk_pl(n,k,l,dsz)*(cp_pl(n,k,l,GRD_ZDIR)-GRD_x_pl(n,ADM_KNONE,l,GRD_ZDIR))
            2013     4   p   4v                      sa_pl(n,k,l) &
            2014     4                                    =(0.5D0+sign(0.5D0,c_pl(n,k,l)))*sa_p+(0.5D0-sign(0.5D0,c_pl(n,k,l)))*sa_m
            2015     4   p   4v                   enddo
            2016     3   p                     enddo
            2017     2   p                  enddo
            2018     1                      !
            2019     1                   end if
            2020                         !
            2021     1                   if(present(limiter)) then
            2022     1                      if(trim(limiter)=='NON_LIM') goto 2000
            2023     1                   end if
            2024                         !
            2025                         !---- apply inflow limiter
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2026     1  pp               do l=1,ADM_lall
            2027     1   p                  rgnid=ADM_prc_tab(l,ADM_prc_me)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2028     2  pp                  do k = 1, ADM_kall
            2029     2   p                   nstart = suf(ADM_gmin-1,ADM_gmin-1 )
            2030     2   p                   nend = suf(ADM_gmax ,ADM_gmax )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 71
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2031     3  pp    v              do n=nstart,nend
            2032     3   p    v                sa(ADM_AI,n,k,l) &
            2033     3                           =(0.5D0-sign(0.5D0,c(1,n,k,l)))&
            2034     3                           *min(max(sa(ADM_AI,n,k,l),s_in_min(1,n,k,l)),s_in_max(1,n,k,l))&
            2035     3                           +(0.5D0+sign(0.5D0,c(1,n,k,l)))&
            2036     3                           *min(max(sa(ADM_AI,n,k,l),s_in_min(4,n+1,k,l)),s_in_max(4,n+1,k,l))
            2037     3               
            2038     3   p    v                sa(ADM_AIJ,n,k,l) &
            2039     3                           =(0.5D0-sign(0.5D0,c(2,n,k,l)))&
            2040     3                           *min(max(sa(ADM_AIJ,n,k,l),s_in_min(2,n,k,l)),s_in_max(2,n,k,l))&
            2041     3                           +(0.5D0+sign(0.5D0,c(2,n,k,l)))&
            2042     3                           *min(max(sa(ADM_AIJ,n,k,l),s_in_min(5,n+1+ADM_gall_1d,k,l)),s_in_max(5,n+1+ADM_gall_1d,k,l))
            2043     3               
            2044     3   p    v                sa(ADM_AJ,n,k,l) &
            2045     3                           =(0.5D0-sign(0.5D0,c(3,n,k,l)))&
            2046     3                           *min(max(sa(ADM_AJ,n,k,l),s_in_min(3,n,k,l)),s_in_max(3,n,k,l))&
            2047     3                           +(0.5D0+sign(0.5D0,c(3,n,k,l)))&
            2048     3                           *min(max(sa(ADM_AJ,n,k,l),s_in_min(6,n+ADM_gall_1d,k,l)),s_in_max(6,n+ADM_gall_1d,k,l))
            2049     3   p    v              enddo
            2050     2   p                 enddo
            2051     1   p               enddo
            2052                         !
            2053     1                   if(ADM_prc_me==ADM_prc_pl) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2054     2  pp                  do l=1,ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2055     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 184
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2056     4  pp   4v                   do n=ADM_gmin_pl,ADM_gmax_pl
            2057     4   p   4v                      sa_pl(n,k,l) &
            2058     4                                 =(0.5D0-sign(0.5D0,c_pl(n,k,l)))&
            2059     4                                 *min(max(sa_pl(n,k,l),s_in_min_pl(n,k,l,1)),s_in_max_pl(n,k,l,1))&
            2060     4                                 +(0.5D0+sign(0.5D0,c_pl(n,k,l)))&
            2061     4                                 *min(max(sa_pl(n,k,l),s_in_min_pl(n,k,l,2)),s_in_max_pl(n,k,l,2))
            2062     4   p   4v                   enddo
            2063     3   p                     enddo
            2064     2   p                  enddo
            2065     1                   end if
            2066                         !
            2067                         !---- apply outflow limitter
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2068     1  pp               do l=1,ADM_lall
            2069     1   p                  rgnid=ADM_prc_tab(l,ADM_prc_me)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2070     2  pp                  do k = 1, ADM_kall
            2071     2   p                   nstart = suf(ADM_gmin-1,ADM_gmin-1 )
            2072     2   p                   nend = suf(ADM_gmax ,ADM_gmax )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 72
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2073     3  pp    v              do n = nstart,nend
            2074     3   p    v                sa(ADM_AI,n,k,l) &
            2075     3                           =(0.5D0-sign(0.5D0,c(1,n,k,l)))&
            2076     3                           *max(min(sa(ADM_AI,n,k,l),wrk(n+1,k,l,s_out_k_max)),wrk(n+1,k,l,s_out_k_min))&
            2077     3                           +(0.5D0+sign(0.5D0,c(1,n,k,l)))&
            2078     3                           *max(min(sa(ADM_AI,n,k,l),wrk(n,k,l,s_out_k_max)),wrk(n,k,l,s_out_k_min))
            2079     3               
            2080     3   p    v                sa(ADM_AIJ,n,k,l) &
            2081     3                           =(0.5D0-sign(0.5D0,c(2,n,k,l)))&
            2082     3                           *max(min(sa(ADM_AIJ,n,k,l),wrk(n+1+ADM_gall_1d,k,l,s_out_k_max)),wrk(n+1+ADM_gall_1d,k,l,s_out_k_min))&
            2083     3                           +(0.5D0+sign(0.5D0,c(2,n,k,l)))&
            2084     3                           *max(min(sa(ADM_AIJ,n,k,l),wrk(n,k,l,s_out_k_max)),wrk(n,k,l,s_out_k_min))
            2085     3               
            2086     3   p    v                sa(ADM_AJ,n,k,l) &
            2087     3                           =(0.5D0-sign(0.5D0,c(3,n,k,l)))&
            2088     3                           *max(min(sa(ADM_AJ,n,k,l),wrk(n+ADM_gall_1d,k,l,s_out_k_max)),wrk(n+ADM_gall_1d,k,l,s_out_k_min))&
            2089     3                           +(0.5D0+sign(0.5D0,c(3,n,k,l)))&
            2090     3                           *max(min(sa(ADM_AJ,n,k,l),wrk(n,k,l,s_out_k_max)),wrk(n,k,l,s_out_k_min))
            2091     3   p    v              enddo
            2092     2   p                  enddo
            2093     1   p               enddo
            2094                         !
            2095     1                   if(ADM_prc_me==ADM_prc_pl) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2096     2  pp                  do l=1,ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2097     3  pp                     do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 180
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2098     4  pp   4v                   do n = ADM_gmin_pl,ADM_gmax_pl
            2099     4   p   4v                      sa_pl(n,k,l)&
            2100     4                                    =(0.5D0-sign(0.5D0,c_pl(n,k,l)))&
            2101     4                                    *max(min(sa_pl(n,k,l),wrk_pl(n,k,l,s_out_k_max)),wrk_pl(n,k,l,s_out_k_min))&
            2102     4                                    +(0.5D0+sign(0.5D0,c_pl(n,k,l)))&
            2103     4                                    *max(min(sa_pl(n,k,l),wrk_pl(ADM_gslf_pl,k,l,s_out_k_max)),wrk_pl(ADM_gslf_pl,k,l,s_out_k_min))
            2104     4   p   4v                   enddo
            2105     3   p                     enddo
            2106     2   p                  enddo
            2107     1                   end if
            2108                         !
            2109                         !
            2110                     2000 continue
            2111                         !
            2112                         !--- update
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2113     1  pp               do l=1,ADM_lall
            2114     1   p                  rgnid=ADM_prc_tab(l,ADM_prc_me)
            2115     1                      !
            2116     1   p                  nstart = suf(ADM_gmin  ,ADM_gmin  )
            2117     1   p                  nend   = suf(ADM_gmax  ,ADM_gmax  )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2118     2  pp                  do k = 1, ADM_kall
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 160
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2119     3  pp   2v                do n = nstart,nend
            2120     3   p   2v                   scl(n,k,l) = &
            2121     3                                 ( flx_h(1,n,k,l)*sa(ADM_AI,n,k,l)   &
            2122     3                                 + flx_h(2,n,k,l)*sa(ADM_AIJ,n,k,l)  &
            2123     3                                 + flx_h(3,n,k,l)*sa(ADM_AJ,n,k,l)   &
            2124     3                                 + flx_h(4,n,k,l)*sa(ADM_AI,n-1,k,l) &
            2125     3                                 + flx_h(5,n,k,l)*sa(ADM_AIJ,n-1-ADM_gall_1d,k,l) &
            2126     3                                 + flx_h(6,n,k,l)*sa(ADM_AJ,n-ADM_gall_1d,k,l)    &
            2127     3                                 ) * fact
            2128     3   p   2v                enddo
            2129     2   p                  enddo
            2130     1   p               enddo
            2131                     
            2132     1                   if(ADM_prc_me==ADM_prc_pl) then
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
            2133     2  pp                  do l=1,ADM_lall_pl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 267
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            2134     3  pp   2v                do k = 1, ADM_kall
            2135     3   p   2v                   scl_pl(ADM_gslf_pl,k,l)=  &
            2136     3                                 ( flx_h_pl(ADM_gmin_pl  ,k,l)*sa_pl(ADM_gmin_pl  ,k,l) &
            2137     3                                 + flx_h_pl(ADM_gmin_pl+1,k,l)*sa_pl(ADM_gmin_pl+1,k,l) &
            2138     3                                 + flx_h_pl(ADM_gmin_pl+2,k,l)*sa_pl(ADM_gmin_pl+2,k,l) &
            2139     3                                 + flx_h_pl(ADM_gmin_pl+3,k,l)*sa_pl(ADM_gmin_pl+3,k,l) &
            2140     3                                 + flx_h_pl(ADM_gmin_pl+4,k,l)*sa_pl(ADM_gmin_pl+4,k,l) &
            2141     3                                 ) * fact
            2142     3   p   2v                enddo
            2143     2   p                  enddo
            2144     1                   end if
            2145                     
            2146                         return
            2147                       end subroutine OPRT_divergence2
            2148                     
            2149                     end module mod_trcadv_thuburn
            2150                     !-------------------------------------------------------------------------------------

 Diagnostic messages: program name(mod_trcadv_thuburn)
   jwd8220o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 21: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
  Module subprogram name(src_update_tracer)
   jwd8201o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 194: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 195: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 206: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 210: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 217: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 218: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 242: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 243: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 254: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 258: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 265: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 266: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 333: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 339: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 342: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 349: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 355: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 358: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 369: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 372: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 376: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 381: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 390: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 393: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 397: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 442: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 456: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 528: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 535: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 539: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 548: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 549: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 555: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 573: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 574: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 587: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 605: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 606: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 619: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 679: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 685: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 688: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 695: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 701: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 704: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(advlim_thuburn_v)
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 784: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 785: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 805: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 809: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 812: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 828: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 832: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 865: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 866: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 886: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 890: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 893: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 909: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 913: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(OPRT_divergence2_prep)
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1132: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1135: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1138: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1141: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1144: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1147: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1150: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1159: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1193: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1193: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1200: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1207: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1214: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1214: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1249: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1249: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1250: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1250: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1251: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1251: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1253: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1257: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1275: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1275: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1276: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1276: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1277: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1277: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1279: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1283: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1284: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1302: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1302: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1303: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1303: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1304: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1304: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1306: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1310: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1337: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1337: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1338: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1338: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1339: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1339: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1341: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1345: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(OPRT_divergence2)
   jwd2006i-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1432: 's_m1_k_min' is declared but never referenced.
   jwd2006i-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1434: 's_m1_k_max' is declared but never referenced.
   jwd2006i-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1436: 'c_in_sum' is declared but never referenced.
   jwd2006i-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1438: 'c_out_sum' is declared but never referenced.
   jwd2006i-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1440: 'c_qin_sum_max' is declared but never referenced.
   jwd2006i-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1442: 'c_qin_sum_min' is declared but never referenced.
   jwd2006i-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1472: 'nstart3' is declared but never referenced.
   jwd2006i-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1472: 'nstart2' is declared but never referenced.
   jwd2006i-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1481: 'ierr' is declared but never referenced.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1506: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1514: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1595: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1596: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1598: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1599: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1653: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1655: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1657: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1672: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1673: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1680: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1703: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1704: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1710: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1729: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1733: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1734: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1740: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1761: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1762: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1792: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1793: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1795: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1795: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1796: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1813: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1815: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1816: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1818: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1820: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1828: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1836: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1844: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1856: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1860: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1872: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1877: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1882: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1888: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1894: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1900: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1911: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1915: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1931: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1939: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1960: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1964: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1968: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1971: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1975: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1985: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 1989: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 2005: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 2009: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 2013: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8201o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 2013: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 2032: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 2038: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 2074: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 2080: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 2120: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 2128: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 2135: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/dynamics/mod_trcadv_thuburn.f90", line 2142: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 2150
   Statements : 1175
   Stack(byte): 9632
   Prefetch num: 2114

 Total information
   Procedures       : 1
   Total lines      : 2150
   Total statements : 1175
   Total stack(byte): 9632
   Total prefetch num: 2114


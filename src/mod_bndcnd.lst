
 Fujitsu Fortran Version 1.2.0  Mon Dec 21 17:03:52 2015

 Compilation information
   Current directory : /volume1/home/ra000007/a03106/nicam-dc-mini/src
   Source file       : nhm/share/mod_bndcnd.f90

 Option information
   Command line options : -Kident_mpi -f2004 -Kfast,parallel,auto,ocl,preex,array_private,noalias=s,mfunc=2 -Kparallel_iteration=8,instance=8,dynamic_iteration -Qi -Qt -X03 -Ncompdisp -Koptmsg=1 -Cpp -Kprefetch_cache_level=all,prefetch_iteration_L2=50 -Ksimd -Ntl_notrt -U_FIPP_ -U_FAPP_ -I../src/include -o mod_bndcnd.o -c -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -W0,-zmpa=Yignore-intent -I/opt/FJSVtclang/GM-1.2.0-19/lib64
   Cpp options          : -U_FIPP_ -U_FAPP_ -I../src/include -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -I/opt/FJSVtclang/GM-1.2.0-19/lib64 -D__FUJITSU -Dunix -Dsparc -D__sparc__ -D__unix -D__sparc -D__frt_version=700 -D__HPC_ACE__ -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -Dlinux -otmp -D__sparcv9 -D__sparc_v9__ -D__arch64__
   Effective options    : -fi -g0 -AE -Free -O3 -Qi,p,t -X03
                          -x0
                          -KFLTLD -Kadr44 -Knoalias=s -Kauto -Knoautoobjstack
                          -Knocalleralloc -Kdalign -Keval -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kilfunc
                          -Klargepage -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_if -Kloop_fusion
                          -Kloop_interchange -Kloop_nopart_parallel
                          -Kloop_nopart_simd -Kloop_noversioning -Kns
                          -Kmfunc=2 -Kocl -Komitfp -Koptmsg=1 -Kpreex
                          -Kprefetch_conditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_iteration_L2=50 -Kprefetch_nostrong
                          -Kprefetch_strong_L2 -Knoshortloop -Ksimd=1
                          -Knosimd_region_constant -Knostriping -Kswp
                          -Knotemparraystack -Kunroll -Knouxsimd -KNOXFILL
                          -Knoopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_noordered_reduction -Knothreadsafe
                          -Kparallel -Kparallel_nofp_precision
                          -Karray_private -Kdynamic_iteration -Kreduction
                          -Kregion_extension -Kinstance=8
                          -Kparallel_iteration=8
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Ncompdisp
                          -Nnocopyarg -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nline -Nlst -Nlst=i -Nlst=p -Nlst=t
                          -Nnomallocfree -Nnoobsfun -Nquickdbg=noargchk
                          -Nquickdbg=nosubchk -Nquickdbg=noundef -NRnotrap
                          -Nnorecursive -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 Module "mod_bndcnd"
  (inc)(line-no.)(nest)(optimize)
               1                     !-------------------------------------------------------------------------------
               2                     !>
               3                     !! Boundary conditions module
               4                     !!
               5                     !! @par Description
               6                     !!         This module provides the subroutines for boundary conditions.
               7                     !!
               8                     !! @author H.Tomita
               9                     !!
              10                     !! @par History
              11                     !! @li      2004-02-17 (H.Tomita) Imported from igdc-4.33
              12                     !! @li      2011-07-22 (T.Ohno)   Add subroutines for plane hgrid systems.
              13                     !!
              14                     !<
              15                     module mod_bndcnd
              16                       !-----------------------------------------------------------------------------
              17                       !
              18                       !++ Used modules
              19                       !
              20                       use mod_adm, only: &
              21                          ADM_LOG_FID,  &
              22                          ADM_NSYS
              23                       !-----------------------------------------------------------------------------
              24                       implicit none
              25                       private
              26                       !-----------------------------------------------------------------------------
              27                       !
              28                       !++ Public procedure
              29                       !
              30                       public :: BNDCND_setup
              31                     
              32                       public :: BNDCND_all
              33                       public :: BNDCND_thermo
              34                       public :: BNDCND_rhovxvyvz
              35                       public :: BNDCND_rhow
              36                     
              37                       public  :: BNDCND_all_plane   ! [add] T.Ohno 110722
              38                       public  :: BNDCND_rhow_plane  ! [add] T.Ohno 110722
              39                       public  :: BNDCND_rhov2_plane ! [add] T.Ohno 110722
              40                       private :: BNDCND_w_plane     ! [add] T.Ohno 110722
              41                     
              42                       !-----------------------------------------------------------------------------
              43                       !
              44                       !++ Public parameters & variables
              45                       !
              46                       !-----------------------------------------------------------------------------
              47                       !
              48                       !++ Private procedures
              49                       !
              50                       !-----------------------------------------------------------------------------
              51                       !
              52                       !++ Private parameters & variables
              53                       !
              54                     
              55                       !--- Vertical boundary condition for momentum at the top
              56                       character(len=ADM_NSYS), private, save :: BND_TYPE_M_TOP    != 'RIGID' : rigid surface
              57                                                                                   != 'FREE'  : free surface
              58                     
              59                       !--- Vertical boundary condition for momentum at the ground
              60                       character(len=ADM_NSYS), private, save :: BND_TYPE_M_BOTTOM != 'RIGID' : rigid surface
              61                                                                                   != 'FREE'  : free surface
              62                     
              63                       !--- Vertical boundary condition for temperature at the top
              64                       character(len=ADM_NSYS), private, save :: BND_TYPE_T_TOP    != 'TEM' : tem(kmax+1) = tem(kmax)
              65                                                                                   != 'EPL' : lagrange extrapolation
              66                     
              67                       !--- Vertical boundary condition for temperature at the ground
              68                       character(len=ADM_NSYS), private, save :: BND_TYPE_T_BOTTOM != 'FIX' : tems fix
              69                                                                                   != 'TEM' : tem(kmin-1) = tem(kmin)
              70                                                                                   != 'EPL' : lagrange extrapolation
              71                     
              72                       !-----------------------------------------------------------------------------
              73                     contains
              74                       !-----------------------------------------------------------------------------
              75                       !>
              76                       !> Description of the subroutine CNST_setup
              77                       !>
              78                       subroutine BNDCND_setup
              79                         use mod_adm, only: &
              80                            ADM_CTL_FID, &
              81                            ADM_proc_stop
              82                         use mod_cnst, only: &
              83                            CNST_TEMS0
              84                         implicit none
              85                     
              86                         namelist / BNDCNDPARAM / &
              87                              BND_TYPE_M_TOP,    &
              88                              BND_TYPE_M_BOTTOM, &
              89                              BND_TYPE_T_TOP,    &
              90                              BND_TYPE_T_BOTTOM
              91                     
              92                         integer :: ierr
              93                         !---------------------------------------------------------------------------
              94                     
              95                         !--- set default
              96                         BND_TYPE_M_TOP    = 'FREE'
              97                         BND_TYPE_M_BOTTOM = 'RIGID'
              98                         BND_TYPE_T_TOP    = 'TEM'
              99                         BND_TYPE_T_BOTTOM = 'TEM'
             100                     
             101                         !--- read parameters
             102                         write(ADM_LOG_FID,*)
             103                         write(ADM_LOG_FID,*) '+++ Module[bndcnd]/Category[nhm share]'
             104                         rewind(ADM_CTL_FID)
             105                         read(ADM_CTL_FID,nml=BNDCNDPARAM,iostat=ierr)
             106     1                   if ( ierr < 0 ) then
             107     1                      write(ADM_LOG_FID,*) '*** BNDCNDPARAM is not specified. use default.'
             108     1                   elseif( ierr > 0 ) then
             109     1                      write(*,          *) 'xxx Not appropriate names in namelist BNDCNDPARAM. STOP.'
             110     1                      write(ADM_LOG_FID,*) 'xxx Not appropriate names in namelist BNDCNDPARAM. STOP.'
             111     1                      call ADM_proc_stop
             112     1                   endif
             113                         write(ADM_LOG_FID,BNDCNDPARAM)
             114                     
             115     1                   if    ( BND_TYPE_M_TOP == 'RIGID' ) then
             116     1                      write(ADM_LOG_FID,*) '*** Boundary setting type (momentum,    top   ) : rigid'
             117     1                   elseif( BND_TYPE_M_TOP == 'FREE' ) then
             118     1                      write(ADM_LOG_FID,*) '*** Boundary setting type (momentum,    top   ) : free'
             119     1                   else
             120     1                      write(ADM_LOG_FID,*) 'xxx Invalid BND_TYPE_M_TOP. STOP.'
             121     1                      call ADM_proc_stop
             122     1                   endif
             123                     
             124     1                   if    ( BND_TYPE_M_BOTTOM == 'RIGID' ) then
             125     1                      write(ADM_LOG_FID,*) '*** Boundary setting type (momentum,    bottom) : rigid'
             126     1                   elseif( BND_TYPE_M_BOTTOM == 'FREE' ) then
             127     1                      write(ADM_LOG_FID,*) '*** Boundary setting type (momentum,    bottom) : free'
             128     1                   else
             129     1                      write(ADM_LOG_FID,*) 'xxx Invalid BND_TYPE_M_BOTTOM. STOP.'
             130     1                      call ADM_proc_stop
             131     1                   endif
             132                     
             133     1                   if    ( BND_TYPE_T_TOP == 'TEM' ) then
             134     1                      write(ADM_LOG_FID,*) '*** Boundary setting type (temperature, top   ) : equal to uppermost atmosphere'
             135     1                   elseif( BND_TYPE_T_TOP == 'EPL' ) then
             136     1                      write(ADM_LOG_FID,*) '*** Boundary setting type (temperature, top   ) : lagrange extrapolation'
             137     1                   else
             138     1                      write(ADM_LOG_FID,*) 'xxx Invalid BND_TYPE_T_TOP. STOP.'
             139     1                      call ADM_proc_stop
             140     1                   endif
             141                     
             142     1                   if    ( BND_TYPE_T_BOTTOM == 'FIX' ) then
             143     1                      write(ADM_LOG_FID,*) '*** Boundary setting type (temperature, bottom) : fixed'
             144     1                      write(ADM_LOG_FID,*) '***           boundary temperature (CNST_TEMS0) : ', CNST_TEMS0
             145     1                   elseif( BND_TYPE_T_BOTTOM == 'TEM' ) then
             146     1                      write(ADM_LOG_FID,*) '*** Boundary setting type (temperature, bottom) : equal to lowermost atmosphere'
             147     1                   elseif( BND_TYPE_T_BOTTOM == 'EPL' ) then
             148     1                      write(ADM_LOG_FID,*) '*** Boundary setting type (temperature, bottom) : lagrange extrapolation'
             149     1                   else
             150     1                      write(ADM_LOG_FID,*) 'xxx Invalid BND_TYPE_T_BOTTOM. STOP.'
             151     1                      call ADM_proc_stop
             152     1                   endif
             153                     
             154                         return
             155                       end subroutine BNDCND_setup
             156                     
             157                       !-----------------------------------------------------------------------------
             158                       !------
             159                       !------ Boundary condition setting for thermodynamical variables
             160                       !------    1. calculation region : (:,[ADM_kmin-1,kmax+1],:)
             161                       !------    2. boundary types are controled in the sub[BNDCND_setup].
             162                       !------
             163                       subroutine BNDCND_thermo( &
             164                            ijdim, &
             165                            tem,   &
             166                            rho,   &
             167                            pre,   &
             168                            phi    )
             169                         use mod_adm, only: &
             170                            kdim => ADM_kall, &
             171                            kmin => ADM_kmin, &
             172                            kmax => ADM_kmax
             173                         use mod_cnst, only: &
             174                            CNST_RAIR,  &
             175                            CNST_EGRAV, &
             176                            CNST_TEMS0
             177                         implicit none
             178                     
             179                         integer, intent(in)    :: ijdim           ! number of horizontal grid
             180                         real(8), intent(inout) :: tem(ijdim,kdim) ! temperature
             181                         real(8), intent(inout) :: rho(ijdim,kdim) ! density
             182                         real(8), intent(inout) :: pre(ijdim,kdim) ! pressure
             183                         real(8), intent(in)    :: phi(ijdim,kdim) ! geopotential
             184                     
             185                         integer :: ij
             186                     
             187                         real(8) :: z,z1,z2,z3,p1,p2,p3
             188                         real(8) :: lag_intpl
             189                         lag_intpl(z,z1,p1,z2,p2,z3,p3) = ( (z-z2)*(z-z3))/((z1-z2)*(z1-z3) ) * p1 &
             190                                                        + ( (z-z1)*(z-z3))/((z2-z1)*(z2-z3) ) * p2 &
             191                                                        + ( (z-z1)*(z-z2))/((z3-z1)*(z3-z2) ) * p3
             192                         !---------------------------------------------------------------------------
             193                     
             194                         !--- set the TOP boundary of temperature
             195     1                   select case( trim(BND_TYPE_T_TOP) )
             196     1                   case('TEM')
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             197     1  pp   8v             tem(:,kmax+1) = tem(:,kmax) ! dT/dz = 0
             198     1                   case('EPL')
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 176
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             199     2  pp   2v             do ij = 1, ijdim
             200     2   p   2v                z  = phi(ij,kmax+1) / CNST_EGRAV
             201     2   p   2v                z1 = phi(ij,kmax  ) / CNST_EGRAV
             202     2   p   2v                z2 = phi(ij,kmax-1) / CNST_EGRAV
             203     2   p   2v                z3 = phi(ij,kmax-2) / CNST_EGRAV
             204     2               
             205     2   p   2v                tem(ij,kmax+1) = lag_intpl( z ,                 &
             206     2                                                     z1, tem(ij,kmax  ), &
             207     2                                                     z2, tem(ij,kmax-1), &
             208     2                                                     z3, tem(ij,kmax-2)  )
             209     2   p   2v             enddo
             210     1                   endselect
             211                     
             212                         !--- set the BOTTOM boundary of temperature
             213     1                   select case( trim(BND_TYPE_T_BOTTOM) )
             214     1                   case('FIX')
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1778
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             215     1  pp    v             tem(:,kmin-1) = CNST_TEMS0
             216     1                   case('TEM')
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             217     1  pp   8v             tem(:,kmin-1) = tem(:,kmin) ! dT/dz = 0
             218     1                   case('EPL')
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 176
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             219     2  pp   2v             do ij = 1, ijdim
             220     2   p   2v                z1 = phi(ij,kmin+2) / CNST_EGRAV
             221     2   p   2v                z2 = phi(ij,kmin+1) / CNST_EGRAV
             222     2   p   2v                z3 = phi(ij,kmin  ) / CNST_EGRAV
             223     2   p   2v                z  = phi(ij,kmin-1) / CNST_EGRAV
             224     2               
             225     2   p   2v                tem(ij,kmin-1) = lag_intpl( z,                  &
             226     2                                                     z1, tem(ij,kmin+2), &
             227     2                                                     z2, tem(ij,kmin+1), &
             228     2                                                     z3, tem(ij,kmin  )  )
             229     2   p   2v             enddo
             230     1                   endselect
             231                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 189
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             232     1  pp   2v          do ij = 1, ijdim
             233     1               
             234     1                      !--- set the boundary of pressure ( hydrostatic balance )
             235     1   p   2v             pre(ij,kmax+1) = pre(ij,kmax-1) - rho(ij,kmax) * ( phi(ij,kmax+1) - phi(ij,kmax-1) )
             236     1   p   2v             pre(ij,kmin-1) = pre(ij,kmin+1) - rho(ij,kmin) * ( phi(ij,kmin-1) - phi(ij,kmin+1) )
             237     1               
             238     1                      !--- set the boundary of density
             239     1   p   2v             rho(ij,kmax+1) = pre(ij,kmax+1) / ( CNST_RAIR * tem(ij,kmax+1) )
             240     1   p   2v             rho(ij,kmin-1) = pre(ij,kmin-1) / ( CNST_RAIR * tem(ij,kmin-1) )
             241     1               
             242     1   p   2v          enddo
             243                     
             244                         return
             245                       end subroutine BNDCND_thermo
             246                     
             247                       !-----------------------------------------------------------------------------
             248                       !------ Boundary condition setting for rhogvx
             249                       subroutine BNDCND_rhovxvyvz( &
             250                            ijdim,  &
             251                            rhog,   &
             252                            rhogvx, &
             253                            rhogvy, &
             254                            rhogvz  )
             255                         use mod_adm, only: &
             256                            kdim => ADM_kall, &
             257                            kmin => ADM_kmin, &
             258                            kmax => ADM_kmax
             259                         implicit none
             260                     
             261                         integer, intent(in)    :: ijdim
             262                         real(8), intent(in)    :: rhog  (ijdim,kdim)
             263                         real(8), intent(inout) :: rhogvx(ijdim,kdim)
             264                         real(8), intent(inout) :: rhogvy(ijdim,kdim)
             265                         real(8), intent(inout) :: rhogvz(ijdim,kdim)
             266                     
             267                         integer :: ij
             268                         !---------------------------------------------------------------------------
             269                     
             270                         !------ top ( rhogvx, rhogvy, rhogvz )
             271     1                   select case( trim(BND_TYPE_M_TOP) )
             272     1                   case('RIGID')
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 327
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             273     2  pp   4v             do ij = 1, ijdim
             274     2   p   4v                rhogvx(ij,kmax+1) = -rhogvx(ij,kmax) / rhog(ij,kmax) * rhog(ij,kmax+1)
             275     2   p   4v                rhogvy(ij,kmax+1) = -rhogvy(ij,kmax) / rhog(ij,kmax) * rhog(ij,kmax+1)
             276     2   p   4v                rhogvz(ij,kmax+1) = -rhogvz(ij,kmax) / rhog(ij,kmax) * rhog(ij,kmax+1)
             277     2   p   4v             enddo
             278     1                   case('FREE')
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 348
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             279     2  pp   4v             do ij = 1, ijdim
             280     2   p   4v                rhogvx(ij,kmax+1) =  rhogvx(ij,kmax) / rhog(ij,kmax) * rhog(ij,kmax+1)
             281     2   p   4v                rhogvy(ij,kmax+1) =  rhogvy(ij,kmax) / rhog(ij,kmax) * rhog(ij,kmax+1)
             282     2   p   4v                rhogvz(ij,kmax+1) =  rhogvz(ij,kmax) / rhog(ij,kmax) * rhog(ij,kmax+1)
             283     2   p   4v             enddo
             284     1                   endselect
             285                     
             286                         !------ bottom ( rhogvx, rhogvy, rhogvz )
             287     1                   select case( trim(BND_TYPE_M_BOTTOM) )
             288     1                   case('RIGID')
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 327
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             289     2  pp   4v             do ij = 1, ijdim
             290     2   p   4v                rhogvx(ij,kmin-1) = -rhogvx(ij,kmin) / rhog(ij,kmin) * rhog(ij,kmin-1)
             291     2   p   4v                rhogvy(ij,kmin-1) = -rhogvy(ij,kmin) / rhog(ij,kmin) * rhog(ij,kmin-1)
             292     2   p   4v                rhogvz(ij,kmin-1) = -rhogvz(ij,kmin) / rhog(ij,kmin) * rhog(ij,kmin-1)
             293     2   p   4v             enddo
             294     1                   case('FREE')
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 348
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             295     2  pp   4v             do ij = 1, ijdim
             296     2   p   4v                rhogvx(ij,kmin-1) =  rhogvx(ij,kmin) / rhog(ij,kmin) * rhog(ij,kmin-1)
             297     2   p   4v                rhogvy(ij,kmin-1) =  rhogvy(ij,kmin) / rhog(ij,kmin) * rhog(ij,kmin-1)
             298     2   p   4v                rhogvz(ij,kmin-1) =  rhogvz(ij,kmin) / rhog(ij,kmin) * rhog(ij,kmin-1)
             299     2   p   4v             enddo
             300     1                   endselect
             301                     
             302                         return
             303                       end subroutine BNDCND_rhovxvyvz
             304                     
             305                       !-----------------------------------------------------------------------------
             306                       !------
             307                       !------ Boundary condition setting for rhogw
             308                       !------
             309                       subroutine BNDCND_rhow( &
             310                            ijdim,   &
             311                            rhogvx,  &
             312                            rhogvy,  &
             313                            rhogvz,  &
             314                            rhogw,   &
             315                            c2wfact  )
             316                         use mod_adm, only: &
             317                            kdim => ADM_kall, &
             318                            kmin => ADM_kmin, &
             319                            kmax => ADM_kmax, &
             320                            ADM_VMISS
             321                         implicit none
             322                     
             323                         integer, intent(in)    :: ijdim
             324                         real(8), intent(in)    :: rhogvx (ijdim,kdim)
             325                         real(8), intent(in)    :: rhogvy (ijdim,kdim)
             326                         real(8), intent(in)    :: rhogvz (ijdim,kdim)
             327                         real(8), intent(inout) :: rhogw  (ijdim,kdim)
             328                         real(8), intent(in)    :: c2wfact(6,ijdim,kdim)
             329                     
             330                         integer :: ij, k
             331                         !---------------------------------------------------------------------------
             332                     
             333     1                   select case( trim(BND_TYPE_M_TOP) )
             334     1                   case('RIGID') ! rhow / G^{1/2} = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1778
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             335     1  pp    v             rhogw(:,kmax+1) = 0.D0
             336     1                   case('FREE')
             337     1                      k = kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 267
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             338     2  pp   2v             do ij = 1, ijdim
             339     2   p   2v                rhogw(ij,k) = - ( c2wfact(1,ij,k) * rhogvx(ij,k  ) &
             340     2                                         + c2wfact(2,ij,k) * rhogvx(ij,k-1) &
             341     2                                         + c2wfact(3,ij,k) * rhogvy(ij,k  ) &
             342     2                                         + c2wfact(4,ij,k) * rhogvy(ij,k-1) &
             343     2                                         + c2wfact(5,ij,k) * rhogvz(ij,k  ) &
             344     2                                         + c2wfact(6,ij,k) * rhogvz(ij,k-1) )
             345     2   p   2v             enddo
             346     1                   endselect
             347                     
             348     1                   select case( trim(BND_TYPE_M_BOTTOM) )
             349     1                   case('RIGID') ! rhow / G^{1/2} = 0.D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1778
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             350     1  pp    v             rhogw(:,kmin  ) = 0.D0
             351     1                   case('FREE')
             352     1                      k = kmin
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 267
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             353     2  pp   2v             do ij = 1, ijdim
             354     2   p   2v                rhogw(ij,k) = - ( c2wfact(1,ij,k) * rhogvx(ij,k  ) &
             355     2                                         + c2wfact(2,ij,k) * rhogvx(ij,k-1) &
             356     2                                         + c2wfact(3,ij,k) * rhogvy(ij,k  ) &
             357     2                                         + c2wfact(4,ij,k) * rhogvy(ij,k-1) &
             358     2                                         + c2wfact(5,ij,k) * rhogvz(ij,k  ) &
             359     2                                         + c2wfact(6,ij,k) * rhogvz(ij,k-1) )
             360     2   p   2v             enddo
             361     1                   endselect
             362                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 9
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             363        pp    v          rhogw(:,1:kmin-1) = ADM_VMISS
             364                     
             365                         return
             366                       end subroutine BNDCND_rhow
             367                     
             368                       !-----------------------------------------------------------------------------
             369                       !------
             370                       !------ Boundary condition setting for all variables.
             371                       !------    1. calculation region (:,[kmin,kmax+1],:)
             372                       !------       for  rhogw & w.
             373                       !------    2. calculation region (:,[kmin-1,kmax+1],:)
             374                       !------       for  the other variables.
             375                       !------
             376                       subroutine BNDCND_all( &
             377                            ijdim,      &
             378                            rho,        &
             379                            vx,         &
             380                            vy,         &
             381                            vz,         &
             382                            w,          &
             383                            ein,        &
             384                            tem,        &
             385                            pre,        &
             386                            rhog,       &
             387                            rhogvx,     &
             388                            rhogvy,     &
             389                            rhogvz,     &
             390                            rhogw,      &
             391                            rhoge,      &
             392                            gsqrtgam2,  &
             393                            gsqrtgam2h, &
             394                            phi,        &
             395                            c2wfact     )
             396                         use mod_adm, only: &
             397                            kdim => ADM_kall, &
             398                            kmin => ADM_kmin, &
             399                            kmax => ADM_kmax, &
             400                            ADM_VMISS
             401                         use mod_cnst, only: &
             402                            CNST_CV
             403                         use mod_grd, only: &
             404                            GRD_afac, &
             405                            GRD_bfac
             406                         implicit none
             407                     
             408                         integer, intent(in)    :: ijdim
             409                         real(8), intent(inout) :: rho(ijdim,kdim)
             410                         real(8), intent(inout) :: vx (ijdim,kdim)
             411                         real(8), intent(inout) :: vy (ijdim,kdim)
             412                         real(8), intent(inout) :: vz (ijdim,kdim)
             413                         real(8), intent(inout) :: w  (ijdim,kdim)
             414                         real(8), intent(inout) :: ein(ijdim,kdim)
             415                         real(8), intent(inout) :: tem(ijdim,kdim)
             416                         real(8), intent(inout) :: pre(ijdim,kdim)
             417                     
             418                         real(8), intent(inout) :: rhog  (ijdim,kdim)
             419                         real(8), intent(inout) :: rhogvx(ijdim,kdim)
             420                         real(8), intent(inout) :: rhogvy(ijdim,kdim)
             421                         real(8), intent(inout) :: rhogvz(ijdim,kdim)
             422                         real(8), intent(inout) :: rhogw (ijdim,kdim)
             423                         real(8), intent(inout) :: rhoge (ijdim,kdim)
             424                     
             425                         real(8), intent(in)    :: gsqrtgam2 (ijdim,kdim)
             426                         real(8), intent(in)    :: gsqrtgam2h(ijdim,kdim)
             427                         real(8), intent(in)    :: phi       (ijdim,kdim)
             428                         real(8), intent(in)    :: c2wfact   (ijdim,kdim)
             429                     
             430                         integer :: ij, k
             431                         !---------------------------------------------------------------------------
             432                     
             433                         !
             434                         !--- Thermodynamical variables ( tem, th, rho, pre, rhoge )
             435                         !
             436                         call BNDCND_thermo( ijdim, & !--- [IN]
             437                                             tem,   & !--- [INOUT]
             438                                             rho,   & !--- [INOUT]
             439                                             pre,   & !--- [INOUT]
             440                                             phi    ) !--- [IN]
             441                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 291
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             442        pp   4v          rhog(:,kmax+1) = rho(:,kmax+1) * gsqrtgam2(:,kmax+1)
             443         p   4v          rhog(:,kmin-1) = rho(:,kmin-1) * gsqrtgam2(:,kmin-1)
             444                     
             445                         !
             446                         !--- internal energy ( ein, rhoge ), q = 0 at boundary
             447                         !
             448         p   4v          ein  (:,kmax+1) = CNST_CV * tem(:,kmax+1)
             449         p   4v          ein  (:,kmin-1) = CNST_CV * tem(:,kmin-1)
             450                     
             451         p   4v          rhoge(:,kmax+1) = rhog(:,kmax+1) * ein(:,kmax+1)
             452         p   4v          rhoge(:,kmin-1) = rhog(:,kmin-1) * ein(:,kmin-1)
             453                     
             454                         !
             455                         !--- Momentum ( rhogvx, rhogvy, rhogvz, vx, vy, vz )
             456                         !
             457                         call BNDCND_rhovxvyvz( ijdim,  & !--- [IN]
             458                                                rhog,   & !--- [IN]
             459                                                rhogvx, & !--- [INOUT]
             460                                                rhogvy, & !--- [INOUT]
             461                                                rhogvz  ) !--- [INOUT]
             462                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 203
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             463        pp   2v          vx(:,kmax+1) = rhogvx(:,kmax+1) / rhog(:,kmax+1)
             464         p   2v          vy(:,kmax+1) = rhogvy(:,kmax+1) / rhog(:,kmax+1)
             465         p   2v          vz(:,kmax+1) = rhogvz(:,kmax+1) / rhog(:,kmax+1)
             466                     
             467         p   2v          vx(:,kmin-1) = rhogvx(:,kmin-1) / rhog(:,kmin-1)
             468         p   2v          vy(:,kmin-1) = rhogvy(:,kmin-1) / rhog(:,kmin-1)
             469         p   2v          vz(:,kmin-1) = rhogvz(:,kmin-1) / rhog(:,kmin-1)
             470                     
             471                         !
             472                         !--- Momentum ( rhogw, w )
             473                         !
             474                         call BNDCND_rhow( ijdim,   & !--- [IN]
             475                                           rhogvx,  & !--- [IN]
             476                                           rhogvy,  & !--- [IN]
             477                                           rhogvz,  & !--- [IN]
             478                                           rhogw,   & !--- [INOUT]
             479                                           c2wfact  ) !--- [IN]
             480                     
             481                         k = kmax+1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 411
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             482     1  pp   6v          do ij = 1, ijdim
             483     1   p   6v             w(ij,k) = rhogw(ij,k) / ( gsqrtgam2h(ij,k) * 0.5D0 * ( GRD_afac(k) * rho(ij,k  ) &
             484     1                                                                           + GRD_bfac(k) * rho(ij,k-1) ) )
             485     1   p   6v          enddo
             486                     
             487                         k = kmin
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 411
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             488     1  pp   6v          do ij = 1, ijdim
             489     1   p   6v             w(ij,k) = rhogw(ij,k) / ( gsqrtgam2h(ij,k) * 0.5D0 * ( GRD_afac(k) * rho(ij,k  ) &
             490     1                                                                           + GRD_bfac(k) * rho(ij,k-1) ) )
             491     1   p   6v          enddo
             492                     
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 9
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             493        pp    v          w(:,1:kmin-1) = ADM_VMISS
             494                     
             495                         return
             496                       end subroutine BNDCND_all
             497                     
             498                       !-----------------------------------------------------------------------------
             499                       subroutine BNDCND_rhow_plane(&
             500                            ijdim,            & !--- IN : number of horizontal grid
             501                            rhogvx,           & !--- IN : rho*Vx   ( gam2 X G^{1/2} )
             502                            rhogvy,           & !--- IN : rho*Vy   ( gam2 X G^{1/2} )
             503                            rhogw,            & !--- INOUT : rho*w ( gam2 X G^{1/2} )
             504                            gsqrtgam2,        & !--- IN : G^{1/2} at the cell center
             505                            gsqrtgam2h,       & !--- IN : G^{1/2} at the cell wall
             506                            g3xh,             & !--- IN : G3X at the cell wall
             507                            g3yh,             & !--- IN : G3Y at the cell wall
             508                            g3zh              & !--- IN : G3Z at the cell wall
             509                            )
             510                         ! [add] T.Ohno 110722
             511                         !------
             512                         !------ Boundary condition setting for rhow only.
             513                         !------    1. calculation region (:,[kmin,kmax+1],:)
             514                         !------
             515                         !
             516                         use mod_adm, only :  &
             517                              kdim => ADM_kall,       &
             518                              kmin => ADM_kmin,       &
             519                              kmax => ADM_kmax,       &
             520                              ADM_VMISS
             521                         use mod_grd, only :  &
             522                              GRD_afac,       &
             523                              GRD_bfac
             524                         implicit none
             525                     
             526                         integer, intent(in)    :: ijdim
             527                         real(8), intent(in) :: rhogvx(ijdim,kdim)
             528                         real(8), intent(in) :: rhogvy(ijdim,kdim)
             529                         real(8), intent(in) :: gsqrtgam2(ijdim,kdim)
             530                         real(8), intent(in) :: gsqrtgam2h(ijdim,kdim)
             531                         real(8), intent(in) :: g3xh(ijdim,kdim)
             532                         real(8), intent(in) :: g3yh(ijdim,kdim)
             533                         real(8), intent(in) :: g3zh(ijdim,kdim)
             534                         !
             535                         real(8), intent(inout) :: rhogw(ijdim,kdim)
             536                         !
             537                         integer :: k
             538                         !
             539     1                   select case(trim(BND_TYPE_M_BOTTOM))
             540     1                   case('FREE')
             541     1                      !
             542     1                      !--- rhow/G^{1/2} + G3X*rhovx + G3Y*rhovy + G3Z*rhovz = 0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 9
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             543     1  pp    v             rhogw(:,1:kmin-1) = ADM_VMISS
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             544     2  pp                  do k = kmin, kmax+1, (kmax-kmin+1)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             545     2   p    v                rhogw(:,k) = -(                                       &
             546     2                              +( ( GRD_afac(k)/gsqrtgam2(:,k  )*rhogvx(:,k  )  &
             547     2                              +GRD_bfac(k)/gsqrtgam2(:,k-1)*rhogvx(:,k-1) )    &
             548     2                              * 0.5D0*gsqrtgam2h(:,k)*g3xh(:,k)                &
             549     2                              +( GRD_afac(k)/gsqrtgam2(:,k  )*rhogvy(:,k  )    &
             550     2                              +GRD_bfac(k)/gsqrtgam2(:,k-1)*rhogvy(:,k-1) )    &
             551     2                              * 0.5D0**gsqrtgam2h(:,k)*g3yh(:,k) ))            &
             552     2                              * gsqrtgam2h(:,k)
             553     2   p                  end do
             554     1                      !
             555     1                   case('RIGID')
             556     1                      !
             557     1                      !--- rhow/G^{1/2} =0.0D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 9
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             558     1  pp    v             rhogw(:,1:kmin-1) = ADM_VMISS
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 10
                                   <<< Loop-information  End >>>
             559     2  pp                  do k = kmin, kmax+1, (kmax-kmin+1)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             560     2   p    v                rhogw(:,k) = 0.0D0
             561     2   p                  end do
             562     1                      !
             563     1                   end select
             564                         !
             565                       end subroutine BNDCND_rhow_plane
             566                       !-----------------------------------------------------------------------------
             567                       subroutine BNDCND_rhov2_plane( &
             568                            ijdim,              &  !--- IN : number of horizontal grid
             569                            rhog,               &  !--- IN :    rho     ( gam2 X G^{1/2} )
             570                            rhogvx,             &  !--- INOUT : rho*Vx  ( gam2 X G^{1/2} )
             571                            rhogvy              &  !--- INOUT : rho*Vy  ( gam2 X G^{1/2} )
             572                            )
             573                         ! [add] T.Ohno 110722
             574                         !------
             575                         !------ Boundary condition setting for rhogvx
             576                         !------    * calculation region (:,[kmin-1,kmax+1],:)
             577                         !------
             578                         !
             579                         use mod_adm, only :  &
             580                              ADM_LOG_FID,    &
             581                              kdim => ADM_kall,       &
             582                              kmin => ADM_kmin,       &
             583                              kmax => ADM_kmax
             584                         implicit none
             585                         !
             586                         integer, intent(in)    :: ijdim
             587                         real(8), intent(in) :: rhog(ijdim,kdim)
             588                         real(8), intent(inout) :: rhogvx(ijdim,kdim)
             589                         real(8), intent(inout) :: rhogvy(ijdim,kdim)
             590                         !
             591                         !
             592                         !------ bottom ( rhogvx, rhogvy, rhogvz )
             593     1                   select case(trim(BND_TYPE_M_BOTTOM))
             594     1                   case('FREE')
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 422
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             595     1  pp   6v             rhogvx(:,kmin-1)                    &
             596     1                           = rhogvx(:,kmin)               &
             597     1                           / rhog(:,kmin)                 &
             598     1                           * rhog(:,kmin-1)
             599     1   p   6v             rhogvy(:,kmin-1)                    &
             600     1                           = rhogvy(:,kmin)               &
             601     1                           / rhog(:,kmin)                 &
             602     1                           * rhog(:,kmin-1)
             603     1                   case('RIGID')
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 400
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             604     1  pp   4v             rhogvx(:,kmin-1)                    &
             605     1                           = -rhogvx(:,kmin)              &
             606     1                           / rhog(:,kmin)                 &
             607     1                           * rhog(:,kmin-1)
             608     1   p   4v             rhogvy(:,kmin-1)                    &
             609     1                           = -rhogvy(:,kmin)              &
             610     1                           / rhog(:,kmin)                 &
             611     1                           * rhog(:,kmin-1)
             612     1                      !
             613     1                   case default
             614     1                      write(ADM_LOG_FID,*) &
             615     1                           'Msg : Sub[BNDCND_all]/Mod[bndcnd]'
             616     1                      write(ADM_LOG_FID,*) &
             617     1                           ' **** Warning : invalid t_top_type',BND_TYPE_M_BOTTOM
             618     1                   end select
             619                         !
             620                         !------ top ( rhogvx, rhogvy, rhogvz ) : stress free
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 422
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             621        pp   6v          rhogvx(:,kmax+1)                    &
             622                              = rhogvx(:,kmax)               &
             623                              / rhog(:,kmax)                 &
             624                              * rhog(:,kmax+1)
             625         p   6v          rhogvy(:,kmax+1)                    &
             626                              = rhogvy(:,kmax)               &
             627                              / rhog(:,kmax)                 &
             628                              * rhog(:,kmax+1)
             629                         !
             630                         return
             631                         !
             632                       end subroutine BNDCND_rhov2_plane
             633                       !-----------------------------------------------------------------------------
             634                       subroutine BNDCND_all_plane(&
             635                            ijdim,           &  !--- IN : number of horizontal grid
             636                            vx,              &  !--- INOUT : Vx
             637                            vy,              &  !--- INOUT : Vy
             638                            w,               &  !--- INOUT : w
             639                            tem,             &  !--- INOUT : temp.
             640                            rho,             &  !--- INOUT : density
             641                            pre,             &  !--- INOUT : pressure
             642                            ein,             &  !--- INOUT : internal energy
             643                            rhog,            &  !--- INOUT : rho  ( gam2 X G^{1/2} )
             644                            rhogvx,          &  !--- INOUT : rho*Vx  ( gam2 X G^{1/2} )
             645                            rhogvy,          &  !--- INOUT : rho*Vy  ( gam2 X G^{1/2} )
             646                            rhogw,           &  !--- INOUT : rho*w   ( gam2 X G^{1/2} )
             647                            rhoge,           &  !--- INOUT : rho*ein ( gam2 X G^{1/2} )
             648                            phi,             &  !--- IN : geopotential
             649                            gsqrtgam2,       &  !--- IN : G^{1/2} at the cell center
             650                            gsqrtgam2h,      &  !--- IN : G^{1/2} at the cell wall
             651                            gzxh,            &  !--- IN : GZX at the cell wall
             652                            gzyh             &  !--- IN : GZY at the cell wall
             653                            )
             654                         ! [add] T.Ohno 110722
             655                         !------
             656                         !------ Boundary condition setting for all variables.
             657                         !------    1. calculation region (:,[kmin,kmax+1],:)
             658                         !------       for  rhogw & w.
             659                         !------    2. calculation region (:,[kmin-1,kmax+1],:)
             660                         !------       for  the other variables.
             661                         !------
             662                         !
             663                         use mod_adm, only :  &
             664                              ADM_LOG_FID,    &
             665                              kdim => ADM_kall,       &
             666                              kmin => ADM_kmin,       &
             667                              kmax => ADM_kmax
             668                         use mod_cnst, only : &
             669                              CNST_CV
             670                         !
             671                         implicit none
             672                         integer, intent(in)    :: ijdim
             673                         real(8), intent(inout) :: vx(ijdim,kdim)
             674                         real(8), intent(inout) :: vy(ijdim,kdim)
             675                         real(8), intent(inout) :: w(ijdim,kdim)
             676                         !
             677                         real(8), intent(inout) :: tem(ijdim,kdim)
             678                         real(8), intent(inout) :: rho(ijdim,kdim)
             679                         real(8), intent(inout) :: pre(ijdim,kdim)
             680                         real(8), intent(inout) :: ein(ijdim,kdim)
             681                         !
             682                         real(8), intent(inout) :: rhog(ijdim,kdim)
             683                         real(8), intent(inout) :: rhogvx(ijdim,kdim)
             684                         real(8), intent(inout) :: rhogvy(ijdim,kdim)
             685                         real(8), intent(inout) :: rhogw(ijdim,kdim)
             686                         real(8), intent(inout) :: rhoge(ijdim,kdim)
             687                         !
             688                         real(8), intent(in) :: phi(ijdim,kdim)
             689                         real(8), intent(in) :: gsqrtgam2(ijdim,kdim)
             690                         real(8), intent(in) :: gsqrtgam2h(ijdim,kdim)
             691                         real(8), intent(in) :: gzxh(ijdim,kdim)
             692                         real(8), intent(in) :: gzyh(ijdim,kdim)
             693                         !
             694                         !
             695                         !--- Thermodynamical variables ( tem, th, rho, pre )
             696                         call BNDCND_thermo( &
             697                              ijdim,         & !-- in
             698                              tem,           & !-- inout
             699                              rho,           & !-- inout
             700                              pre,           & !-- inout
             701                              phi )            !-- in
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 593
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             702        pp   6v          rhog(:,kmin-1) = rho(:,kmin-1)*gsqrtgam2(:,kmin-1)
             703         p   6v          rhog(:,kmax+1) = rho(:,kmax+1)*gsqrtgam2(:,kmax+1)
             704                         !
             705                         !--- Momentum ( vx, vy, vz, rhogvx, rhogvy, rhogvz, w, rhogw )
             706                         !
             707                         !------ bottom ( vx, vy, vz )
             708     1                   select case(trim(BND_TYPE_M_BOTTOM))
             709     1                   case('FREE')
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 889
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             710     1  pp   8v             vx(:,kmin-1)    = vx(:,kmin)
             711     1   p   8v             vy(:,kmin-1)    = vy(:,kmin)
             712     1                   case('RIGID')
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 800
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             713     1  pp   8v             vx(:,kmin-1)    = -vx(:,kmin)
             714     1   p   8v             vy(:,kmin-1)    = -vy(:,kmin)
             715     1                   case default
             716     1                      write(ADM_LOG_FID,*) &
             717     1                           'Msg : Sub[BNDCND_all]/Mod[bndcnd]'
             718     1                      write(ADM_LOG_FID,*) &
             719     1                           ' **** Warning : invalid t_top_type',BND_TYPE_M_BOTTOM
             720     1                   end select
             721                         !
             722                         !------ top ( vx, vy, vz ) : stress free
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             723        pp   8v          vx(:,kmax+1)    =  vx(:,kmax)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 297
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             724        pp   4v          vy(:,kmax+1)    =  vy(:,kmax)
             725                         !
             726                         !------ top & bottom ( rhogvx, rhogvy, rhogvz )
             727         p   4v          rhogvx(:,kmin-1)                  &
             728                              = rho(:,kmin-1)*vx(:,kmin-1) &
             729                              * gsqrtgam2(:,kmin-1)
             730         p   4v          rhogvy(:,kmin-1)                  &
             731                              = rho(:,kmin-1)*vy(:,kmin-1) &
             732                              * gsqrtgam2(:,kmin-1)
             733         p   4v          rhogvx(:,kmax+1)                  &
             734                              = rho(:,kmax+1)*vx(:,kmax+1) &
             735                              * gsqrtgam2(:,kmax+1)
             736         p   4v          rhogvy(:,kmax+1)                  &
             737                              = rho(:,kmax+1)*vy(:,kmax+1) &
             738                              * gsqrtgam2(:,kmax+1)
             739                         !
             740                         !------- top & bottom ( w, rhogw )
             741                         call BNDCND_w_plane(  &
             742                              ijdim,     & !--- IN
             743                              rho,       & !--- IN
             744                              rhogvx,    & !--- IN
             745                              rhogvy,    & !--- IN
             746                              rhogw,     & !--- INOUT
             747                              w,         & !--- INOUT
             748                              gsqrtgam2, & !--- IN
             749                              gsqrtgam2h,& !--- IN
             750                              gzxh,      & !--- IN
             751                              gzyh       & !--- IN
             752                              )
             753                         !
             754                         !--- internal energy ( ein, rhoge )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 348
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             755        pp   4v          ein(:,kmin-1)=CNST_CV*tem(:,kmin-1)
             756         p   4v          ein(:,kmax+1)=CNST_CV*tem(:,kmax+1)
             757         p   4v          rhoge(:,kmin-1)                      &
             758                              = rho(:,kmin-1) * ein(:,kmin-1) &
             759                              * gsqrtgam2(:,kmin-1)
             760         p   4v          rhoge(:,kmax+1)                      &
             761                              = rho(:,kmax+1) * ein(:,kmax+1) &
             762                              * gsqrtgam2(:,kmax+1)
             763                         !
             764                         return
             765                         !
             766                       end subroutine BNDCND_all_plane
             767                       !-----------------------------------------------------------------------------
             768                       subroutine BNDCND_w_plane(  &
             769                            ijdim,           &  !--- IN : number of horizontal grid
             770                            rho,             & !--- IN : rho      ( physical )
             771                            rhogvx,          & !--- IN : rho*Vx   ( gam2 X G^{1/2} )
             772                            rhogvy,          & !--- IN : rho*Vy   ( gam2 X G^{1/2} )
             773                            rhogw,           & !--- INOUT : rho*w ( gam2 X G^{1/2} )
             774                            w,               & !--- INOUT : w     ( physical )
             775                            gsqrtgam2,       & !--- IN : G^{1/2} at the cell center
             776                            gsqrtgam2h,      & !--- IN : G^{1/2} at the cell wall
             777                            g3xh,            & !--- IN : G3X at the cell wall
             778                            g3yh             & !--- IN : G3Y at the cell wall
             779                            )
             780                         ! [add] T.Ohno 110722
             781                         !------
             782                         !------ Boundary condition setting for rhogw and w.
             783                         !------    1. calculation region (:,[kmin,kmax+1],:)
             784                         !------
             785                         !
             786                         use mod_adm, only :  &
             787                              kdim => ADM_kall,       &
             788                              kmin => ADM_kmin,       &
             789                              kmax => ADM_kmax,       &
             790                              ADM_VMISS
             791                         use mod_grd, only :  &
             792                              GRD_afac,       &
             793                              GRD_bfac
             794                         !
             795                         implicit none
             796                         !
             797                         integer, intent(in)    :: ijdim
             798                         real(8), intent(in) :: rho(ijdim,kdim)
             799                         real(8), intent(in) :: rhogvx(ijdim,kdim)
             800                         real(8), intent(in) :: rhogvy(ijdim,kdim)
             801                         real(8), intent(in) :: gsqrtgam2(ijdim,kdim)
             802                         real(8), intent(in) :: gsqrtgam2h(ijdim,kdim)
             803                         real(8), intent(in) :: g3xh(ijdim,kdim)
             804                         real(8), intent(in) :: g3yh(ijdim,kdim)
             805                         !
             806                         real(8), intent(inout) :: rhogw(ijdim,kdim)
             807                         real(8), intent(inout) :: w(ijdim,kdim)
             808                         !
             809                         integer :: k
             810                         !
             811     1                   select case(trim(BND_TYPE_M_BOTTOM))
             812     1                   case('FREE')
             813     1                      !
             814     1                      !--- rhow/G^{1/2} + G3X*rhovx + G3Y*rhovy + G3Z*rhovz = 0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             815     1  pp   8v             rhogw(:,1:kmin-1) = ADM_VMISS
             816     1   p   8v             w(:,1:kmin-1) = ADM_VMISS
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<< Loop-information  End >>>
             817     2  pp                  do k = kmin, kmax+1, (kmax-kmin+1)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             818     2   p    v                rhogw(:,k) = -(                                        &
             819     2                              +( ( GRD_afac(k)/gsqrtgam2(:,k  )*rhogvx(:,k  )   &
             820     2                              +GRD_bfac(k)/gsqrtgam2(:,k-1)*rhogvx(:,k-1) )     &
             821     2                              * 0.5D0*gsqrtgam2h(:,k)*g3xh(:,k)                 &
             822     2                              +( GRD_afac(k)/gsqrtgam2(:,k  )*rhogvy(:,k  )     &
             823     2                              +GRD_bfac(k)/gsqrtgam2(:,k-1)*rhogvy(:,k-1) )     &
             824     2                              * 0.5D0**gsqrtgam2h(:,k)*g3yh(:,k) ))             &
             825     2                              * gsqrtgam2h(:,k)
             826     2   p    v                w(:,k)                                                 &
             827     2                              = rhogw(:,k)                                      &
             828     2                              / gsqrtgam2h(:,k)                                 &
             829     2                              /( ( GRD_afac(k) * rho(:,k)                       &
             830     2                              + GRD_bfac(k) * rho(:,k-1) ) *0.5D0 )
             831     2   p                  end do
             832     1                      !
             833     1                   case('RIGID')
             834     1                      !
             835     1                      !--- rhow/G^{1/2} =0.0D0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             836     1  pp   8v             rhogw(:,1:kmin-1) = ADM_VMISS
             837     1   p   8v             w(:,1:kmin-1) = ADM_VMISS
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 8
                                   <<< Loop-information  End >>>
             838     2  pp                  do k = kmin, kmax+1, (kmax-kmin+1)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             839     2   p   8v                rhogw(:,k) = 0.0D0
             840     2   p   8v                w(:,k)    = 0.0D0
             841     2   p                  end do
             842     1                      !
             843     1                   end select
             844                         !
             845                       end subroutine BNDCND_w_plane
             846                       !-----------------------------------------------------------------------------
             847                     end module mod_bndcnd
             848                     !-------------------------------------------------------------------------------

 Diagnostic messages: program name(mod_bndcnd)
   jwd8220o-i  "nhm/share/mod_bndcnd.f90", line 15: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
  Module subprogram name(BNDCND_thermo)
   jwd8206o-i  "nhm/share/mod_bndcnd.f90", line 200: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "nhm/share/mod_bndcnd.f90", line 201: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "nhm/share/mod_bndcnd.f90", line 202: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "nhm/share/mod_bndcnd.f90", line 203: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 205: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/share/mod_bndcnd.f90", line 220: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "nhm/share/mod_bndcnd.f90", line 221: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "nhm/share/mod_bndcnd.f90", line 222: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "nhm/share/mod_bndcnd.f90", line 223: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 225: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 235: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 236: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(BNDCND_rhovxvyvz)
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 274: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 275: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 276: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 280: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 281: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 282: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 290: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 291: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 292: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 296: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 297: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 298: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(BNDCND_rhow)
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 339: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 345: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 354: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 360: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(BNDCND_all)
   jwd8206o-i  "nhm/share/mod_bndcnd.f90", line 463: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "nhm/share/mod_bndcnd.f90", line 464: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "nhm/share/mod_bndcnd.f90", line 465: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "nhm/share/mod_bndcnd.f90", line 467: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "nhm/share/mod_bndcnd.f90", line 468: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "nhm/share/mod_bndcnd.f90", line 469: Division is changed to multiplication by reciprocal.
  Module subprogram name(BNDCND_rhow_plane)
   jwd2008i-i  "nhm/share/mod_bndcnd.f90", line 533: Dummy argument 'g3zh' not used in this subprogram.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 545: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/share/mod_bndcnd.f90", line 545: Division is changed to multiplication by reciprocal.
  Module subprogram name(BNDCND_rhov2_plane)
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 595: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 599: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 604: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 608: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 621: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 625: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(BNDCND_all_plane)
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 727: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 730: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 733: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 736: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 757: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 760: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(BNDCND_w_plane)
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 818: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/share/mod_bndcnd.f90", line 818: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/share/mod_bndcnd.f90", line 826: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 848
   Statements : 376
   Stack(byte): 5424
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 848
   Total statements : 376
   Total stack(byte): 5424
   Total prefetch num: 0


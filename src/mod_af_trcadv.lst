
 Fujitsu Fortran Version 1.2.0  Thu Dec 10 19:00:52 2015

 Compilation information
   Current directory : /volume1/home/ra000007/a03106/nicam-dc-mini/src
   Source file       : nhm/forcing/mod_af_trcadv.f90

 Option information
   Command line options : -Kident_mpi -f2004 -Kfast,parallel,auto,ocl,preex,array_private,noalias=s,mfunc=2 -Kparallel_iteration=8,instance=8,dynamic_iteration -Qi -Qt -X03 -Ncompdisp -Koptmsg=1 -Cpp -Kprefetch_cache_level=all,prefetch_iteration_L2=50 -Ksimd -Ntl_notrt -U_FIPP_ -U_FAPP_ -I../src/include -o mod_af_trcadv.o -c -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -W0,-zmpa=Yignore-intent -I/opt/FJSVtclang/GM-1.2.0-19/lib64
   Cpp options          : -U_FIPP_ -U_FAPP_ -I../src/include -I/opt/FJSVtclang/GM-1.2.0-19/include/mpi/fujitsu -I/opt/FJSVtclang/GM-1.2.0-19/lib64 -D__FUJITSU -Dunix -Dsparc -D__sparc__ -D__unix -D__sparc -D__frt_version=700 -D__HPC_ACE__ -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -Dlinux -otmp -D__sparcv9 -D__sparc_v9__ -D__arch64__
   Effective options    : -fi -g0 -AE -Free -O3 -Qi,p,t -X03
                          -x0
                          -KFLTLD -Kadr44 -Knoalias=s -Kauto -Knoautoobjstack
                          -Knocalleralloc -Kdalign -Keval -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kilfunc
                          -Klargepage -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_if -Kloop_fusion
                          -Kloop_interchange -Kloop_nopart_parallel
                          -Kloop_nopart_simd -Kloop_noversioning -Kns
                          -Kmfunc=2 -Kocl -Komitfp -Koptmsg=1 -Kpreex
                          -Kprefetch_conditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_iteration_L2=50 -Kprefetch_nostrong
                          -Kprefetch_strong_L2 -Knoshortloop -Ksimd=1
                          -Knosimd_region_constant -Knostriping -Kswp
                          -Knotemparraystack -Kunroll -Knouxsimd -KNOXFILL
                          -Knoopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_noordered_reduction -Knothreadsafe
                          -Kparallel -Kparallel_nofp_precision
                          -Karray_private -Kdynamic_iteration -Kreduction
                          -Kregion_extension -Kinstance=8
                          -Kparallel_iteration=8
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Ncompdisp
                          -Nnocopyarg -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nline -Nlst -Nlst=i -Nlst=p -Nlst=t
                          -Nnomallocfree -Nnoobsfun -Nquickdbg=noargchk
                          -Nquickdbg=nosubchk -Nquickdbg=noundef -NRnotrap
                          -Nnorecursive -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 Module "mod_af_trcadv"
  (inc)(line-no.)(nest)(optimize)
               1                     !-------------------------------------------------------------------------------
               2                     !
               3                     !+  Module of Updating UVW for Tracer Advection Test
               4                     !
               5                     !-------------------------------------------------------------------------------
               6                     module mod_af_trcadv
               7                       !-----------------------------------------------------------------------------
               8                       !
               9                       !++ Description:
              10                       !       This module is for the Dyn Core Test Initialization.
              11                       !
              12                       !
              13                       !++ Current Corresponding Author : R.Yoshida
              14                       !
              15                       !++ History:
              16                       !      Version   Date       Comment
              17                       !      -----------------------------------------------------------------------
              18                       !      0.00      12-10-19   artificial updating  R.Yoshida
              19                       !
              20                       !      -----------------------------------------------------------------------
              21                       !
              22                       !-----------------------------------------------------------------------------
              23                       !
              24                       !++ Used modules
              25                       !
              26                     !  use mod_adm, only: &
              27                     !     ADM_LOG_FID,  &
              28                     !     ADM_NSYS
              29                       !-----------------------------------------------------------------------------
              30                       implicit none
              31                       private
              32                       !-----------------------------------------------------------------------------
              33                       !
              34                       !++ Public parameters
              35                       !
              36                       ! physical parameters configurations
              37                         real(8), parameter :: &
              38                              a	= 6371220.0d0,	& ! Earth's Radius (m)
              39                              Rd 	= 287.0d0,	& ! Ideal gas const dry air (J kg^-1 K^1)
              40                              g	= 9.80616d0,	& ! Gravity (m s^2)
              41                              cp	= 1004.5d0,	& ! Specific heat capacity (J kg^-1 K^1)
              42                              pi	= 4.d0*atan(1.d0) ! pi
              43                     
              44                       !-----------------------------------------------------------------------------
              45                       !
              46                       !++ Public procedure
              47                       !
              48                       public :: test11_velocity
              49                       public :: test12_velocity
              50                       !-----------------------------------------------------------------------------
              51                       !
              52                       !++ Private parameters
              53                       !
              54                       !-----------------------------------------------------------------------------
              55                       !
              56                       !++ Private variables
              57                       !
              58                       !-----------------------------------------------------------------------------
              59                       !
              60                       !++ Private procedures
              61                       !
              62                       private :: Sp_Unit_East
              63                       private :: Sp_Unit_North
              64                       !-----------------------------------------------------------------------------
              65                     contains
              66                       !
              67                       !-----------------------------------------------------------------------------
              68                       subroutine test11_velocity (time,lon,lat,zf,zh,vx,vy,vz,w)
              69                         !----- [add; original by H.Miura] 20130612 R.Yoshida
              70                         implicit none
              71                         !
              72                         real(8),intent(in) :: time
              73                         real(8),intent(in) :: zf,zh    ! height (real altitude)
              74                         real(8),intent(in) :: lon
              75                         real(8),intent(in) :: lat
              76                         real(8),intent(out) :: vx
              77                         real(8),intent(out) :: vy
              78                         real(8),intent(out) :: vz
              79                         real(8),intent(out) :: w
              80                         !
              81                         ! <constant>
              82                         real(8), parameter :: 	&
              83                              tau     = 12.d0 * 86400.d0,	& ! period of motion 12 days
              84                              u0      = (2.d0*pi*a)/tau,	& ! 2 pi a / 12 days
              85                              k0	   = (10.d0*a)/tau,	& ! Velocity Magnitude
              86                              omega0  = (23000.d0*pi)/tau,	& ! Velocity Magnitude
              87                              T0      = 300.d0,		& ! temperature
              88                              H       = Rd * T0 / g,	& ! scale height
              89                              RR      = 1.d0/2.d0,		& ! horizontal half width divided by 'a'
              90                              ZZ      = 1000.d0,		& ! vertical half width
              91                              z0      = 5000.d0,		& ! center point in z
              92                              lambda0 = 5.d0*pi/6.d0,	& ! center point in longitudes
              93                              lambda1 = 7.d0*pi/6.d0,	& ! center point in longitudes
              94                              phi0    = 0.d0,		& ! center point in latitudes
              95                              phi1    = 0.d0
              96                         real(8), parameter ::   p0 = 100000.d0 ! reference pressure (Pa)
              97                         ! <work>
              98                         real(8) :: &
              99                              u, &	! Zonal wind (m s^-1)
             100                              v    ! Meridional wind (m s^-1)
             101                         real(8) :: lonp,height,p,ptop,bs,s,ud,east(3),nrth(3)
             102                         !-----
             103                     
             104                           ! full level
             105                           height = zf
             106                           p = p0 * exp(-zf/H)
             107                     
             108                           ptop    = p0*exp(-12000.d0/H)
             109                     
             110                           lonp = lon - 2.d0*pi*time/tau
             111                     
             112                           bs = 0.2
             113                           s = 1.0 + exp( (ptop-p0)/(bs*ptop) ) &
             114                                   - exp( (p-p0)/(bs*ptop)) &
             115                                   - exp( (ptop-p)/(bs*ptop))
             116                     
             117                           ud = (omega0*a)/(bs*ptop) * cos(lonp) * (cos(lat)**2.0) * cos(2.0*pi*time/tau) * &
             118                                ( - exp( (p-p0)/(bs*ptop)) + exp( (ptop-p)/(bs*ptop))  )
             119                     
             120                           u = k0*sin(lonp)*sin(lonp)*sin(2.d0*lat)*cos(pi*time/tau) + u0*cos(lat) + ud
             121                           v = k0*sin(2.d0*lonp)*cos(lat)*cos(pi*time/tau)
             122                     
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    FULL UNROLLING
                                   <<< Loop-information  End >>>
             123             f             east=Sp_Unit_East (lon)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    FULL UNROLLING
                                   <<< Loop-information  End >>>
             124             f             nrth=Sp_Unit_North (lon,lat)
             125                     
             126                           vx=east(1)*u+nrth(1)*v
             127                           vy=east(2)*u+nrth(2)*v
             128                           vz=east(3)*u+nrth(3)*v
             129                     
             130                           ! half level
             131                           height = zh
             132                           p = p0 * exp(-zh/H)
             133                     
             134                           ptop    = p0*exp(-12000.d0/H)
             135                     
             136                           lonp = lon - 2.d0*pi*time/tau
             137                     
             138                           bs = 0.2
             139                           s = 1.0 + exp( (ptop-p0)/(bs*ptop) ) &
             140                                   - exp( (p-p0)/(bs*ptop)) &
             141                                   - exp( (ptop-p)/(bs*ptop))
             142                     
             143                           w = -((Rd*T0)/(g*p))*omega0*sin(lonp)*cos(lat)*cos(2.0*pi*time/tau)*s
             144                     
             145                           return
             146                       end subroutine test11_velocity
             147                       !-----------------------------------------------------------------------------
             148                       !
             149                       !-----------------------------------------------------------------------------
             150                       subroutine test12_velocity (time,lon,lat,zf,zh,vx,vy,vz,w)
             151                         !----- [add; original by H.Miura] 20130612 R.Yoshida
             152                         implicit none
             153                         !
             154                         real(8),intent(in) :: time
             155                         real(8),intent(in) :: zf,zh    ! height (real altitude)
             156                         real(8),intent(in) :: lon
             157                         real(8),intent(in) :: lat
             158                         real(8),intent(out) :: vx
             159                         real(8),intent(out) :: vy
             160                         real(8),intent(out) :: vz
             161                         real(8),intent(out) :: w
             162                         !
             163                         ! <constant>
             164                         real(8), parameter :: &
             165                              tau     = 1.d0 * 86400.d0, &	! period of motion 1 day (in s)
             166                              u0      = 40.d0,           &	! Zonal velocity magnitude (m/s)
             167                              w0	   = 0.15d0,          &	! Vertical velocity magnitude (m/s), changed in v5
             168                              T0      = 300.d0,          &	! temperature (K)
             169                              H       = Rd * T0 / g,     &	! scale height
             170                              K       = 5.d0,            &	! number of Hadley-like cells
             171                              z1      = 2000.d0,    & ! position of lower tracer bound (m), changed in v5
             172                              z2      = 5000.d0,    & ! position of upper tracer bound (m), changed in v5
             173                              z0      = 0.5d0*(z1+z2),   &	! midpoint (m)
             174                              ztop    = 12000.d0		! model top (m)
             175                         real(8), parameter ::   p0 = 100000.d0 ! reference pressure (Pa)
             176                         ! <work>
             177                         real(8) :: &
             178                              u, &	! Zonal wind (m s^-1)
             179                              v    ! Meridional wind (m s^-1)
             180                         real(8) :: lonp,height,p,ptop,bs,s,ud,east(3),nrth(3),rho,rho0,t,phis
             181                         !-----
             182                     
             183                           ! full level
             184                           height = zf
             185                           p = p0 * exp(-zf/H)
             186                     
             187                           t = T0
             188                           phis = 0.d0
             189                     
             190                           rho = p/(Rd*t)
             191                           rho0 = p0/(Rd*t)
             192                     
             193                           u = u0*cos(lat)
             194                           v = -(rho0/rho) * (a*w0*pi)/(K*ztop) *cos(lat)*sin(K*lat)&
             195                                              *cos(pi*height/ztop)*cos(pi*time/tau)
             196                     
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    FULL UNROLLING
                                   <<< Loop-information  End >>>
             197             f             east=Sp_Unit_East (lon)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    FULL UNROLLING
                                   <<< Loop-information  End >>>
             198             f             nrth=Sp_Unit_North (lon,lat)
             199                     
             200                           vx=east(1)*u+nrth(1)*v
             201                           vy=east(2)*u+nrth(2)*v
             202                           vz=east(3)*u+nrth(3)*v
             203                     
             204                           ! half level
             205                           height = zh
             206                           p = p0 * exp(-zf/H)
             207                     
             208                           t = T0
             209                           phis = 0.d0
             210                     
             211                           rho = p/(Rd*t)
             212                           rho0 = p0/(Rd*t)
             213                     
             214                           w = (rho0/rho) *(w0/K)*(-2.d0*sin(K*lat)*sin(lat) + K*cos(lat)*cos(K*lat)) &
             215                     		*sin(pi*height/ztop)*cos(pi*time/tau)
             216                     
             217                           return
             218                       end subroutine test12_velocity
             219                       !-----------------------------------------------------------------------------
             220                       !
             221                       !-----------------------------------------------------------------------------
             222                       function Sp_Unit_East( lon ) result( unit_east )
             223                         ! imported from prg_mkinit_ncep.f90 (original written by H.Miura)
             224                         ! ------
             225                         ! Compute local eastward unit vector (unit_east)
             226                         ! in the Cartesian coordinate system
             227                         ! given longitude (lon) of a position.
             228                         !
             229                         implicit none
             230                         real(8), intent(in) :: lon  ! [ rad ]
             231                         real(8) :: unit_east(3)
             232                         !
             233                         unit_east(1) = - sin( lon )    ! --- x-direction
             234                         unit_east(2) =   cos( lon )    ! --- y-direction
             235                         unit_east(3) = 0.0_8           ! --- z-direction
             236                         return
             237                       end function Sp_Unit_East
             238                       !-----------------------------------------------------------------------------
             239                       !
             240                       !-----------------------------------------------------------------------------
             241                       function Sp_Unit_North( lon, lat ) result( unit_north )
             242                         ! imported from prg_mkinit_ncep.f90 (original written by H.Miura)
             243                         ! ------
             244                         ! Compute local northward unit vector (unit_north)
             245                         ! in the Cartesian coordinate system
             246                         ! given longitude (lon) and latitude (lat) of a position.
             247                         !
             248                         implicit none
             249                         real(8), intent(in) :: lon, lat  ! [ rad ]
             250                         real(8) :: unit_north(3)
             251                         !
             252                         unit_north(1) = - sin( lat ) * cos( lon )    ! --- x-direction
             253                         unit_north(2) = - sin( lat ) * sin( lon )    ! --- y-direction
             254                         unit_north(3) =   cos( lat )                 ! --- z-direction
             255                         return
             256                       end function Sp_Unit_North
             257                       !-----------------------------------------------------------------------------
             258                       !
             259                     end module mod_af_trcadv
             260                     !-------------------------------------------------------------------------------

 Diagnostic messages: program name(mod_af_trcadv)
   jwd8220o-i  "nhm/forcing/mod_af_trcadv.f90", line 6: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
  Module subprogram name(test11_velocity)
   jwd8206o-i  "nhm/forcing/mod_af_trcadv.f90", line 106: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/forcing/mod_af_trcadv.f90", line 106: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/forcing/mod_af_trcadv.f90", line 110: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/forcing/mod_af_trcadv.f90", line 110: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/forcing/mod_af_trcadv.f90", line 117: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/forcing/mod_af_trcadv.f90", line 120: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/forcing/mod_af_trcadv.f90", line 120: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/forcing/mod_af_trcadv.f90", line 121: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/forcing/mod_af_trcadv.f90", line 132: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/forcing/mod_af_trcadv.f90", line 132: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "nhm/forcing/mod_af_trcadv.f90", line 143: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
  Module subprogram name(test12_velocity)
   jwd2006i-i  "nhm/forcing/mod_af_trcadv.f90", line 180: 'ud' is declared but never referenced.
   jwd2006i-i  "nhm/forcing/mod_af_trcadv.f90", line 180: 's' is declared but never referenced.
   jwd2006i-i  "nhm/forcing/mod_af_trcadv.f90", line 180: 'bs' is declared but never referenced.
   jwd2006i-i  "nhm/forcing/mod_af_trcadv.f90", line 180: 'ptop' is declared but never referenced.
   jwd2006i-i  "nhm/forcing/mod_af_trcadv.f90", line 180: 'lonp' is declared but never referenced.
   jwd8206o-i  "nhm/forcing/mod_af_trcadv.f90", line 185: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/forcing/mod_af_trcadv.f90", line 185: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/forcing/mod_af_trcadv.f90", line 190: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/forcing/mod_af_trcadv.f90", line 190: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/forcing/mod_af_trcadv.f90", line 194: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/forcing/mod_af_trcadv.f90", line 194: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "nhm/forcing/mod_af_trcadv.f90", line 214: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "nhm/forcing/mod_af_trcadv.f90", line 214: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 260
   Statements : 101
   Stack(byte): 784
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 260
   Total statements : 101
   Total stack(byte): 784
   Total prefetch num: 0

